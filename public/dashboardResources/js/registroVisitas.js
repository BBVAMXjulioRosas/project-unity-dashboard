/**
 * @author David Alejandro Reyes Dominguez
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	window.jQuery = window.$ = require("jquery");
	
	var Registro = require('./registro/registroVisitas.js');
	
	var registro= new Registro();
	
	},{"./registro/registroVisitas.js":5,"jquery":24}],2:[function(require,module,exports){
	var Chart = require('chart.js');
	
	var Charts = function(selector){
		this.selector=selector;
		this.element = document.getElementById(selector.replace('#',''));
		this.colores = [
			"#0a221d",
			"#14312a",
			"#225b4e",
			"#7d0030",
			"#ad023b",
			"#d10042",
			"#bb955b",
			"#ddcaa1"
		]
		
		this.graficaDonut;
		this.graficaStacked;
		this.graficaBar;
	}
	
	Charts.prototype.renderDonut = function(data){
		let ctx = this.element;
		
		let etiquetas = data.map(element => {
			return element.etiqueta;
		});
	
		let cantidades = data.map (element => {
			return element.valor;
		})
	
		if(this.selector === "#chartPie3"){
			this.colores = [
				"#0a221d",
				"#ad023b",
			]
		}
	
		if(this.graficaDonut){
			this.graficaDonut.clear();
			this.graficaDonut.destroy();
		}
	
	
		this.graficaDonut = new Chart(ctx, {
			type: 'doughnut',
			data : {
				datasets: [{
					data: cantidades,
					backgroundColor: this.colores
				}],
				labels: etiquetas,
			},
			options : {
				legend: {
					position: 'right',
					fullWidth: true,
					labels: {
						boxWidth: 15
					}
				}
			}
		});
	}
	
	
	Charts.prototype.renderStacked = function(data){
	
		if(this.selector === "#chartStack1"){
			this.colores = [
				"#d10042",
				"#bb955b",
			]
		}
		 
		let etiquetas = data.map(element => {
			return element.etiqueta;
		});
	
		let valor1 = data.map(element => {
			return element.valor1
		})
	
		let valor2 = data.map(element => {
			return element.valor2
		})
	
		let ctx = this.element;
	
		if(this.graficaStacked){
			this.graficaStacked.clear();
			this.graficaStacked.destroy();
		}
	
		this.graficaStacked = new Chart(ctx, {
			type: 'bar',
			data : {
				datasets: [
					{
						label: 'Hombres',
						data: valor1,
						backgroundColor:[ 
							this.colores[0],
							this.colores[0],
							this.colores[0],
							this.colores[0],
							this.colores[0],
							this.colores[0],
							this.colores[0],
							this.colores[0],
							this.colores[0],
							this.colores[0],  
						] 
					},
					{
						label: 'Mujeres',
						data: valor2,
						backgroundColor:[ 
							this.colores[1],
							this.colores[1],
							this.colores[1],
							this.colores[1],
							this.colores[1],
							this.colores[1],
							this.colores[1],
							this.colores[1],  
							this.colores[1],
							this.colores[1], 
						]
					}
				],
				labels: etiquetas,
			},
			options: {
				legend: {
					position: 'right',
					fullWidth: true,
					labels: {
						boxWidth: 15
					}
				},
				scales: {
					yAxes: [{
						stacked: true,
						ticks: {
						beginAtZero: true
						}
					}],
					xAxes: [{
						stacked: true,
						ticks: {
						beginAtZero: true
						}
					}]
				}
			}
		})
	}
	
	Charts.prototype.renderBarChart = function(data){
		let ctx = this.element;
		
		let etiquetas = data.map(element => {
			return element.etiqueta;
		});
	
		let cantidades = data.map (element => {
			return element.valor;
		})
		
		if(this.selector === "#chartBar2"){
			this.colores = [
				"#0a221d",
				"#7d0030",
				"#ddcaa1"
			]
		}
	
		let dataSets = []
	
		data.forEach((element,idx) => {
			dataSet = { 
				label: element.etiqueta,
				data: [element.valor],
				backgroundColor: this.colores[idx]
			}
	
			dataSets.push(dataSet)
		});
	
		if(this.graficaBar){
			this.graficaBar.clear();
			this.graficaBar.destroy();
		}
	
		this.graficaBar = new Chart(ctx, {
			type: 'bar',
			data : {
				labels: [''],
				datasets: dataSets,
			},
			options : {
				legend: {
					display: true,
					position: 'right',
					fullWidth: true,
					labels: {
						boxWidth: 15
					}
				},
				scales: {
					yAxes: [{
					  ticks: {
						beginAtZero: true,
						min: 0
					  }    
					}]
				  }
			}
		});
	}
	
	
	module.exports = Charts;
	},{"chart.js":22}],3:[function(require,module,exports){
	var Model  							= require('./model');
	var Servicios                       = require('./servicios');
	var numeral                         = require('numeral');
	
	var Mapa = function(){
		this.model = Model
		$('.img-map').hide()
		$(".map-html").hide()
		this.servicios =  new Servicios();
		this.opciones = {
			opcionCalculada: undefined
		}
	}
	
	//INICIO - Funciones en el Mapa
		//Cambia el Color de los estados en el mapa
	Mapa.prototype.setColorsInMap = function(value){
		this.model.listStatesCode.forEach(item =>{
			$("#" + item.clave).css(
				"fill","#b9b9b9"
			);
			$("#" + item.clave).data({"estado": item.estado, "registros": 0 })
	
			value.forEach(itemValue =>{        
				if(itemValue.state === item.estado){
					if(this.opciones.opcionCalculada === "registros"){
						$("#" + item.clave).css(
							"fill",
							this.getColor(itemValue.registers)
						  );
						 
						  $("#" + item.clave).data({"estado": itemValue.state, "registros": itemValue.registers !== 0 ? itemValue.registers : 0 })
					} else if( this.opciones.opcionCalculada === "tests"){
						$("#" + item.clave).css(
							"fill",
							this.getColor(itemValue.tests)
						  );
	
						$("#" + item.clave).data({"estado": itemValue.state, "registros": itemValue.tests !== 0 ? itemValue.tests : 0 })
					}else{
						$("#" + item.clave).css(
							"fill",
							this.getColor(itemValue.trends)
						  );
	
						$("#" + item.clave).data({"estado": itemValue.state, "registros": itemValue.trends !== 0 ? itemValue.trends : 0 })
					} 
				}    
			})
		})
	}
	
	
	Mapa.prototype.setColorsInMapCdmx = function(value){
	
		this.model.listColoniasCode.forEach(item =>{
			$("#" + item.clave).css(
				"fill","#b9b9b9"
			);
			$("#" + item.clave).data({"estado": item.colonia, "registros": 0 })
			
			value.forEach(itemValue =>{        
				if(itemValue.municipality === item.colonia){
					if(this.opciones.opcionCalculada === "registros"){
						$("#" + item.clave).css(
							"fill",
							this.getColor(itemValue.registers)
						  );
						 
						  $("#" + item.clave).data({"estado": itemValue.municipality, "registros": itemValue.registers !== 0 ? itemValue.registers : 0 })
					} else if( this.opciones.opcionCalculada === "tests"){
						$("#" + item.clave).css(
							"fill",
							this.getColor(itemValue.tests)
						  );
	
						$("#" + item.clave).data({"estado": itemValue.municipality, "registros": itemValue.tests !== 0 ? itemValue.tests : 0 })
					}else{
						$("#" + item.clave).css(
							"fill",
							this.getColor(itemValue.trends)
						  );
	
						$("#" + item.clave).data({"estado": itemValue.municipality, "registros": itemValue.trends !== 0 ? itemValue.trends : 0 })
					} 
				}    
			})
		})
		
	}
	
	//INICIO - Servicios
	
	Mapa.prototype.filtroMapa = function(filtros){
		// let state = filtros.estado;
		//     municipality = filtros.municipio;
		
	
	}
	
	Mapa.prototype.getTotalRegistros = function(filtros){
		this.opciones.opcionCalculada = "registros"
		this.servicios.getTotalRegistros(filtros).then(this.setColorsInMap.bind(this));
	}
	
	Mapa.prototype.getTotalRegistrosEstado = function(filtros){
		this.opciones.opcionCalculada = "registros"
		this.servicios.getTotalRegistrosEstado(filtros).then(this.setColorsInMapCdmx.bind(this));
	}
	
	Mapa.prototype.getTotalTests = function(filtros){
		this.opciones.opcionCalculada = "tests"
	
		this.servicios.getTotalTests(filtros).then(this.setColorsInMap.bind(this));
	}
	
	Mapa.prototype.getTotalTestEstado = function(filtros){
		this.opciones.opcionCalculada = "tests"
		this.servicios.getTotalTestsEstado(filtros).then(this.setColorsInMapCdmx.bind(this));
	}
	
	Mapa.prototype.getTotalTendencias = function(filtros, tendencia){
		this.opciones.opcionCalculada = "trends"
	
		this.servicios.getTendencia(filtros, tendencia).then(this.setColorsInMap.bind(this));
	}
	
	Mapa.prototype.getTotalTendenciasEstado = function(filtros, tendencia){
		this.opciones.opcionCalculada = "trends"
	
		this.servicios.getTendenciaEstado(filtros, tendencia).then(this.setColorsInMapCdmx.bind(this));
	}
	
	//INICIO - Funciones Generales
		//Obtiene la imagen de cada estado para insertarla en la página
	Mapa.prototype.getImgState = function(value){
		
		let stateImg = "Map_Of_Mexico"
		let listStates = this.model.listStatesCode;
	
		if (value !== "" && value !== "1") {
	
			listStates.forEach(item => {
				if(item.idEstado === parseInt(value)){
					stateImg = item.nombre
					$('.img-map').show()
					$('.map-html').hide()
					$('#mapMexico').attr(`src`, `/dashboardResources/img/map/${stateImg}.svg`);
				}
			});
		} else if (value === "1"){
			stateImg = "CDMX"
			this.renderMapaCdmx();
			$(".map-html").show()
			$('.img-map').hide()
		}
	
		if(stateImg === "Map_Of_Mexico"){
			$('.img-map').hide()
			$(".map-html").show()
			this.renderMapaCompleto();
		}
	}
	
	Mapa.prototype.getImgMunicipio = function(value, state){
		let municipioImg = "Map_Of_CDMX"
		let listColonias = this.model.listColoniasCode;
	
		if (value !== "") {
	
			listColonias.forEach(item => {
				if(item.idColonia === parseInt(value)){
					municipioImg = item.nombre
					$('.img-map').show()
					$('.map-html').hide()
					
					$('#mapMexico').attr(`src`, `/dashboardResources/img/map_cdmx/${municipioImg}.svg`);
				}
			});
		} 
	
		if(state === "1" && municipioImg === "Map_Of_CDMX"){
			$('.img-map').hide()
			$(".map-html").show()
			this.renderMapaCdmx();
		}
	}
	
		//Obtiene el color del rango correspondiente
	Mapa.prototype.getColor = function(value){
		var result = parseInt(value);
	
		return result < 1000 ? "#e4d1aa" : 
			   result >= 1001 && result < 4000 ? "#dbb66a" :
			   result >= 4001 && result < 7000 ? "#b09661" :
			   result >= 7001 && result < 10000 ? "#ff9417" :
			   result >= 10001 && result < 13000 ? "#ce5656" :
			   result >= 13001 && result < 16000 ? "#911625" :
			   result >= 16001 ? "#370009" : "0"
	
			   
	}
	
	
	Mapa.prototype.renderMapaCompleto = function(){
		let pathFinal = ""
		this.model.listStatesCode.forEach((item)=>{
			let pathPorEstado = `
				<path id="${item.clave}"
				d="${item.d}"
				style="fill:#b9b9b9;fill-opacity:1;stroke:none;stroke-opacity:1;opacity:1;fill-rule:nonzero;stroke-linejoin:miter;stroke-width:2;stroke-miterlimit:4;stroke-dasharray:none" />
			`
			pathFinal+=pathPorEstado
		})
	
		let g = `<svg  xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#"
				xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg"
				xmlns="http://www.w3.org/2000/svg"
				xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
				xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" width="999.73236" height="679.94141"
				version="1.0" id="map-mexico">
				<g id="g7409" />
				<g id="g3014" style="stroke:none">
					${pathFinal}
				</g>        
			</svg>`
	
		$(".map-html").empty();
		$(".map-html").append(g);
	
		//Tooltip en el mapa
		$('path').hover(function() {
			//$(this).attr("class", "enabled heyo");
			$(".description").addClass('active');
			$(".description").html(`Estado: ${$(this).data("estado")}
									<br>
									Totales: ${$(this).data("registros") !== undefined ? numeral($(this).data("registros")).format('0,000') : 0 }`);
		}, function() {
			$(".description").removeClass('active');
		});
	
		$(document).on('mousemove', function(e){
			$(".description").css({
			  left:  e.pageX,
			  top:   e.pageY - 110
			});
		});
	}
	
	Mapa.prototype.renderMapaCdmx = function(){
		let gPathFinal = ""
		this.model.listColoniasCode.forEach((item)=>{
			let gItem = `<g>${item.d}</g>`;
			gPathFinal += gItem;
		})
	
		let mapaCdmxSvg = `<svg version="1.1" id="_x2014_ÎÓÈ_x5F_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
		x="0px" y="0px" viewBox="0 0 370 460" style="enable-background:new 0 0 370 460;" xml:space="preserve" id="mapa-cdmx" width="999.73236" height="679.94141">
			${gPathFinal}
		</svg>
		`
	
		$(".map-html").empty();
		$(".map-html").append(mapaCdmxSvg);
	
		//Tooltip en el mapa
		$('path, polygon').hover(function() {
			//$(this).attr("class", "enabled heyo");
			$(".description").addClass('active');
			$(".description").html(`Municipio: ${$(this).data("estado")}
									<br>
									Totales: ${$(this).data("registros") !== undefined ? numeral($(this).data("registros")).format('0,000') : 0 }`);
		}, function() {
			$(".description").removeClass('active');
		});
	
		$(document).on('mousemove', function(e){
			$(".description").css({
			  left:  e.pageX,
			  top:   e.pageY - 110
			});
		});
	}
	
	module.exports = Mapa
	},{"./model":4,"./servicios":7,"numeral":26}],4:[function(require,module,exports){
	module.exports = {
		selectEstados : {
			estados:[
				{value:"AG",id:"AS",text:"Aguascalientes"},
				{value:"BN",id:"BC",text:"Baja California"},
				{value:"BS",id:"BS",text:"Baja California Sur"},
				{value:"CA",id:"CC",text:"Campeche"},
				{value:"CS",id:"CS",text:"Chiapas"},
				{value:"CH",id:"CH",text:"Chihuahua"},
				{value:"DF",id:"DF",text:"CDMX"},
				{value:"CU",id:"CL",text:"Coahuila"},
				{value:"CO",id:"CM",text:"Colima"},
				{value:"DU",id:"DG",text:"Durango"},
				{value:"EM",id:"MC",text:"Estado de México"},
				{value:"GU",id:"GT",text:"Guanajuato"},
				{value:"GO",id:"GR",text:"Guerrero"},
				{value:"HI",id:"GH",text:"Hidalgo"},
				{value:"JA",id:"JC",text:"Jalisco"},
				{value:"MI",id:"MN",text:"Michoacán"},
				{value:"MO",id:"MS",text:"Morelos"},
				{value:"NA",id:"NT",text:"Nayarit"},
				{value:"NL",id:"NL",text:"Nuevo León"},
				{value:"OA",id:"OC",text:"Oaxaca"},
				{value:"PU",id:"PL",text:"Puebla"},
				{value:"QU",id:"QT",text:"Querétaro"},
				{value:"QR",id:"QR",text:"Quintana Roo"},
				{value:"SL",id:"SP",text:"San Luis Potosí"},
				{value:"SI",id:"SL",text:"Sinaloa"},
				{value:"SO",id:"SR",text:"Sonora"},
				{value:"TA",id:"TC",text:"Tabasco"},
				{value:"TM",id:"TS",text:"Tamaulipas"},
				{value:"TL",id:"TL",text:"Tlaxcala"},
				{value:"VE",id:"VZ",text:"Veracruz"},
				{value:"YU",id:"YN",text:"Yucatán"},
				{value:"ZA",id:"ZS",text:"Zacatecas"},
			]  
		},
		
		//llenar con Apis 
		selectDelegaciones : {
			delegaciones:[]
		},
		//llenar con Apis
		selectAlcadias : {
			alcaldias:[]
		},
		
		selectOpcionesMapa: {
			opciones:[
				{value:"registros", text:"Usuarios Únicos"},
				{value:"tests", text:"Test Realizados"},
				{value:"tendenciaPos", text:"Test con tendencia Positiva"},
				{value:"tendenciaNe", text:"Test con tendencia Negativa"},
				{value:"tendenciaNeutral", text:"Test con tendencia Neutral"}
			]
		},
		
		//Tabla de Registros
		tablaRegistros : {
			table: {
				headers:[
					{name:'name',						value:'ID - Perfil'},
					{name:'phone',					value:'Número Celular'},
					{name:'state',           	  	value:'Estado'},	
					{name:'municipality',      		value:'Municipio'},
					{name:'totalTest',	            value:'Pruebas realizadas'},
					{name:'resultTest',      		value:'Último Resultado'},
					{name:'date',					value: 'Fecha Registro'}	
				],
				rows:[],   
			} 
		},
		
		//Clave de estados para mapa
		listStatesCode : [
			{ idEstado: 2, nombre: "aguascalientes", estado: "Aguascalientes", clave: "path7339", d: "M 460.44624,427.98485 C 458.88986,426.26508 458.38428,420.46704 459.53027,417.48062 C 459.87311,416.58721 461.92003,414.95507 464.079,413.85365 C 466.23796,412.75223 468.2556,411.1964 468.56265,410.39625 C 468.8697,409.5961 469.54746,408.94143 470.06879,408.94143 C 471.58342,408.94143 479.72833,405.03945 480.36541,404.00863 C 481.61563,401.98572 489.508,411.93271 488.57724,414.35824 C 488.25676,415.1934 489.0447,416.4569 490.46729,417.38901 C 493.51783,419.3878 493.59893,421.72528 490.65694,422.8547 C 489.41944,423.32977 487.16597,425.11863 485.64923,426.82995 C 482.40385,430.49165 479.34712,430.77836 473.21846,427.9959 C 469.16881,426.15733 468.91323,426.15382 465.50776,427.89003 C 462.19441,429.57927 461.89426,429.5849 460.44624,427.98485 z" },
			{ idEstado: 3, nombre: "baja_norte", estado: "Baja California", clave: "path7285", d: "M 130.63284,176.952 C 121.40709,176.00301 113.63868,175.00651 113.36972,174.73754 C 113.10075,174.46857 113.56176,172.61848 114.39418,170.62621 C 115.73565,167.41562 115.73714,167.06936 114.40731,167.57966 C 112.74252,168.2185 112.32878,165.93703 113.82912,164.39143 C 114.33633,163.86893 115.04779,161.82649 115.41016,159.85268 C 115.98573,156.71759 115.68316,155.89975 113.01659,153.38294 C 111.33775,151.79838 109.05191,148.38134 107.93693,145.78951 C 106.82195,143.19767 105.04669,140.80317 103.9919,140.4684 C 102.93711,140.13362 101.57509,138.6406 100.96518,137.15057 C 97.94453,129.77101 90.81878,120.94143 87.8839,120.94143 C 86.97702,120.94143 84.63377,119.25393 82.67668,117.19143 C 80.71958,115.12893 77.27076,111.87028 75.01263,109.94998 C 71.59206,107.04114 70.90694,105.84919 70.90694,102.80697 C 70.90694,100.45748 70.36332,98.946802 69.38238,98.570382 C 68.41668,98.199812 68.02702,97.152512 68.31941,95.713394 C 69.94756,87.699565 69.855,85.2628 67.84028,83.100254 C 66.72083,81.898663 66.06021,80.502463 66.37224,79.997587 C 66.68427,79.492712 66.48223,78.79698 65.92326,78.451516 C 65.35703,78.101568 64.90694,78.761393 64.90694,79.941435 C 64.90694,81.106354 64.45694,81.781354 63.90694,81.441435 C 63.35694,81.101516 62.90694,77.715226 62.90694,73.916345 C 62.90694,67.30313 60.70226,59.941435 58.72173,59.941435 C 58.2736,59.941435 57.90694,57.684618 57.90694,54.926286 C 57.90694,51.167472 57.13151,48.537147 54.8115,44.426318 C 53.10901,41.409667 51.30901,38.689926 50.8115,38.382449 C 50.314,38.074973 49.90694,36.364959 49.90694,34.582418 C 49.90694,32.799877 49.37444,30.808935 48.72361,30.158102 C 48.07278,29.507268 47.85528,28.659768 48.24028,28.274768 C 48.62528,27.889768 49.47278,28.107268 50.12361,28.758102 C 51.87069,30.505181 52.90694,30.201131 52.90694,27.941435 C 52.90694,26.830324 52.24028,25.941435 51.40694,25.941435 C 50.58194,25.941435 49.90694,25.472619 49.90694,24.899622 C 49.90694,24.326624 49.03775,22.924836 47.9754,21.784537 C 46.91305,20.644238 45.75044,17.850555 45.39183,15.576351 C 45.03322,13.302147 43.65241,9.3122176 42.32337,6.7098406 C 40.99434,4.1074636 39.90694,1.5199636 39.90694,0.95984055 C 39.90694,-0.44639945 49.00171,-0.32928245 78.40694,1.4556186 C 107.70216,3.2338416 113.90694,3.8223426 113.90694,4.8226626 C 113.90694,5.2281856 111.64625,7.9054076 108.88318,10.772044 C 104.97826,14.823322 104.05605,16.369104 104.74232,17.712773 C 107.55653,23.222738 106.41971,32.443545 103.08031,31.193413 C 101.57009,30.628049 101.55318,30.751628 102.90694,32.460939 C 103.73194,33.50262 105.19444,35.161874 106.15694,36.14817 C 108.02124,38.058559 108.43934,40.9292 107.08082,42.491435 C 105.50404,44.304664 103.80203,51.468148 103.76637,56.441435 C 103.71247,63.959018 103.89956,65.001372 105.40657,65.579667 C 106.53299,66.011915 106.70522,69.164808 106.33369,82.551699 C 105.94381,96.599542 106.09789,99.077472 107.39216,99.574132 C 108.22529,99.893832 108.90694,100.75012 108.90694,101.47699 C 108.90694,102.20386 109.62565,103.51728 110.50407,104.3957 C 111.38249,105.27412 111.85214,106.64185 111.54774,107.4351 C 110.97784,108.92024 112.32877,110.22228 114.83205,110.60053 C 115.61587,110.71896 116.70514,111.61634 117.25265,112.5947 C 117.80017,113.57306 119.24053,115.36593 120.45346,116.57886 C 121.66638,117.79178 123.72249,120.27802 125.02258,122.10384 C 126.32268,123.92965 128.87126,126.72723 130.68611,128.32068 C 132.50095,129.91414 133.89655,131.94317 133.78743,132.82965 C 133.67832,133.71613 133.94647,135.72723 134.38334,137.29876 C 134.90861,139.18834 134.77997,140.40186 134.00353,140.88173 C 133.13694,141.41731 133.10975,142.34467 133.89971,144.42242 C 134.92082,147.10813 135.0337,147.15033 136.3567,145.34102 C 137.94153,143.17364 139.40694,144.10603 139.40694,147.28179 C 139.40694,148.77465 140.02443,149.44153 141.40694,149.44176 C 143.07206,149.44203 143.43116,150.15709 143.5516,153.71237 C 143.72263,158.76096 144.99915,160.58314 148.97696,161.45681 C 151.45798,162.00173 152.00572,162.70695 152.53921,166.04325 C 152.88595,168.21163 153.56054,170.22734 154.03829,170.52261 C 154.51605,170.81788 154.90694,172.83291 154.90694,175.00045 C 154.90694,178.91127 154.87824,178.94042 151.15694,178.80943 C 149.09444,178.73682 139.8586,177.90098 130.63284,176.952 z" },
			{ idEstado: 4, nombre: "baja_sur", estado: "Baja California Sur", clave: "path7319", d: "M 225.91505,372.45006 C 224.39844,370.83571 223.32123,368.10754 222.85499,364.70006 C 222.45924,361.80781 220.84653,356.78782 219.27119,353.54453 C 216.92859,348.7216 215.51461,347.15595 211.50736,344.94793 C 208.38355,343.2267 205.95207,340.97013 204.7986,338.72179 C 202.17928,333.61622 188.4599,320.10092 185.16631,319.38155 C 180.83265,318.43501 176.90694,316.77543 176.90694,315.88992 C 176.90694,315.44503 178.36944,315.48521 180.15694,315.9792 L 183.40694,316.87736 L 180.65694,314.45736 C 179.14444,313.12636 177.90694,311.19255 177.90694,310.15999 C 177.90694,308.12543 174.03009,307.59325 172.67225,309.44143 C 172.26817,309.99143 171.91636,309.31643 171.89045,307.94143 C 171.86454,306.56643 171.18264,304.56792 170.37514,303.5003 C 169.56763,302.43268 168.8537,300.63268 168.78863,299.5003 C 168.7055,298.05376 168.44327,298.33367 167.90694,300.44143 C 167.18776,303.26775 167.13265,303.2967 166.95497,300.94143 C 166.78259,298.65651 166.69856,298.61349 165.97819,300.44143 C 165.28984,302.18811 165.09845,302.02868 164.4671,299.1827 C 164.0695,297.3904 163.33081,296.17946 162.82557,296.49172 C 162.32032,296.80398 161.90694,296.35791 161.90694,295.50045 C 161.90694,294.64299 162.41319,294.05393 163.03194,294.19143 C 163.65069,294.32893 164.38407,293.81629 164.66167,293.05223 C 164.97079,292.20142 164.72858,291.93363 164.03667,292.36125 C 162.45793,293.33697 162.61202,292.11173 164.90694,285.44143 C 166.00694,282.24422 166.90694,278.79878 166.90694,277.78488 C 166.90694,276.77098 167.41204,275.94143 168.02938,275.94143 C 168.80489,275.94143 168.76704,275.47779 167.90694,274.44143 C 167.04684,273.40507 167.00899,272.94143 167.7845,272.94143 C 168.4768,272.94143 168.85256,271.12116 168.76503,268.19143 L 168.62313,263.44143 L 167.90694,267.44143 C 167.19693,271.40691 167.18914,271.39396 167.00471,265.94143 C 166.77383,259.11574 164.74806,251.16106 163.35863,251.6242 C 162.78699,251.81475 161.74054,250.37017 161.03319,248.41402 C 160.02636,245.62968 159.34127,244.98619 157.87817,245.45056 C 156.75976,245.80553 155.27374,245.32043 154.17771,244.24258 C 153.17037,243.25195 151.08037,241.78042 149.53327,240.97253 C 147.98617,240.16463 147.21235,239.33963 147.81365,239.13919 C 149.45867,238.59085 149.12703,236.94143 147.37176,236.94143 C 144.91579,236.94143 140.98,233.9146 141.53964,232.45622 C 141.82124,231.72237 141.31582,229.699 140.41647,227.95985 C 139.06056,225.33782 139.00417,224.5292 140.08627,223.22535 C 141.23245,221.84428 141.08799,221.74751 138.8991,222.43009 C 136.48335,223.1834 136.4606,223.14708 138.15694,221.24559 C 139.93243,219.25537 140.57735,214.94143 139.09939,214.94143 C 138.65523,214.94143 137.51097,216.71131 136.55658,218.87449 C 134.88767,222.65714 134.70589,222.7673 131.80287,221.75531 C 129.87411,221.08294 128.97572,220.20459 129.3143,219.32225 C 129.61674,218.53411 129.21381,217.94143 128.37556,217.94143 C 127.56782,217.94143 126.90694,218.75143 126.90694,219.74143 C 126.90694,220.73143 126.40211,222.04626 125.78508,222.66329 C 124.51066,223.93771 121.62284,223.21012 122.47607,221.82958 C 122.78277,221.33333 122.33929,220.66083 121.49056,220.33514 C 120.64183,220.00946 119.0016,218.21263 117.84562,216.34221 C 116.42542,214.04428 114.98598,212.94143 113.40694,212.94143 C 111.8279,212.94143 110.38846,211.83858 108.96826,209.54065 C 106.7522,205.95498 104.75128,204.6802 102.62183,205.49734 C 100.25175,206.40683 96.90927,202.13479 96.87514,198.15247 C 96.83711,193.71484 95.33625,191.50403 91.75687,190.6131 C 90.01168,190.17872 88.74898,188.92706 88.05889,186.94746 C 87.48254,185.29414 86.3972,183.94143 85.64702,183.94143 C 83.86508,183.94143 79.64331,178.2224 80.86698,177.46613 C 82.12709,176.68734 85.6289,177.38059 90.3058,179.33472 C 95.0916,181.33436 98.94201,181.38214 101.46581,179.47323 C 104.11559,177.46904 104.90694,177.58412 104.90694,179.97365 C 104.90694,181.16252 105.84067,182.35877 107.15694,182.85624 C 109.6513,183.79896 111.25155,183.30804 110.36423,181.87233 C 110.0478,181.36034 110.49046,180.94143 111.34792,180.94143 C 112.20538,180.94143 112.90694,180.48286 112.90694,179.92238 C 112.90694,179.33351 111.84681,179.1694 110.39564,179.53362 C 108.27932,180.06478 107.99206,179.88319 108.56924,178.37907 C 109.10152,176.99199 108.87908,176.73814 107.57115,177.24004 C 106.23493,177.7528 106.35369,177.25285 108.14754,174.8137 C 110.22487,171.98909 110.43267,171.91061 110.72627,173.83983 C 111.12384,176.45215 111.1673,176.46078 134.60028,178.57998 C 145.15662,179.53466 153.5859,180.65187 153.33201,181.06267 C 152.34439,182.66068 158.23837,193.06146 160.91632,194.44628 C 163.84402,195.96025 167.73452,203.10406 168.62723,208.6052 C 169.0123,210.97814 170.09543,212.44511 172.51758,213.87421 C 175.42699,215.5908 175.79641,216.24409 175.28987,218.77679 C 174.95466,220.45282 175.17484,221.98897 175.8062,222.37917 C 176.41161,222.75333 176.91695,225.17041 176.92918,227.75045 C 176.95425,233.03938 179.96399,238.27332 181.88163,236.36275 C 182.65802,235.58922 182.3904,234.55447 180.93562,232.70502 C 178.9368,230.16394 178.05204,222.94143 179.73958,222.94143 C 181.30035,222.94143 186.94038,230.85864 187.54961,233.90478 C 187.88364,235.57494 188.77542,236.94143 189.53134,236.94143 C 190.42399,236.94143 190.89086,238.08061 190.86328,240.19143 C 190.80334,244.77991 191.96777,251.22184 193.11577,252.65273 C 193.75226,253.44607 193.67227,255.12247 192.88393,257.51115 C 191.77514,260.87081 191.94467,261.70216 195.03488,268.05904 C 196.87991,271.85446 199.06841,275.17529 199.89821,275.43866 C 200.72801,275.70203 201.45311,276.93539 201.50955,278.17947 C 201.7997,284.57603 203.22115,289.73088 205.8916,294.07093 C 209.5923,300.08533 210.5011,303.52059 208.90143,305.44807 C 208.02722,306.50143 207.88121,308.87684 208.3955,313.67921 C 209.29653,322.09291 211.71725,325.90853 216.22503,326.02038 C 217.97508,326.0638 218.84444,326.3263 218.15694,326.60371 C 216.17895,327.40185 216.70273,328.94143 218.95225,328.94143 C 220.70933,328.94143 220.91773,328.48342 220.43106,325.69143 C 220.11948,323.90393 220.2924,321.79115 220.81532,320.99636 C 221.57659,319.83931 222.77665,320.61086 226.83651,324.86759 C 229.62525,327.79155 231.90694,330.80433 231.90694,331.56265 C 231.90694,332.36668 232.94908,332.94143 234.40694,332.94143 C 236.3231,332.94143 236.90694,333.46005 236.90694,335.16215 C 236.90694,336.38355 237.46944,339.83766 238.15694,342.83795 C 239.1719,347.26731 240.00845,348.64895 242.60597,350.18593 C 248.0078,353.38226 248.18787,362.18616 242.96402,367.69143 C 241.78977,368.92893 240.18753,369.94143 239.40347,369.94143 C 238.61941,369.94143 235.96284,371.06643 233.49998,372.44143 C 231.03712,373.81643 228.84959,374.94143 228.63881,374.94143 C 228.42803,374.94143 227.20233,373.82031 225.91505,372.45006 z " },
			{ idEstado: 5, nombre: "campeche", estado: "Campeche", clave: "path7383", d:"M 864.72823,555.79775 C 864.42549,552.63517 864.14718,552.40831 859.90694,551.86768 C 857.43194,551.55212 853.28796,550.23395 850.6981,548.93841 C 846.66331,546.92007 845.61089,546.75529 843.34599,547.78725 C 841.1998,548.76512 840.81953,549.45703 841.32388,551.46652 C 841.90213,553.77046 841.68577,553.94143 838.19184,553.94143 C 833.51025,553.94143 824.21823,549.21961 823.47785,546.46438 C 823.17887,545.35176 822.9281,542.84393 822.92059,540.89143 C 822.90314,536.35319 821.43334,534.94143 816.72599,534.94143 C 813.52787,534.94143 812.84841,534.5564 812.31815,532.44367 C 811.07219,527.4794 812.1148,526.8641 821.40512,527.08089 C 826.92929,527.20979 830.32013,527.73437 831.01113,528.56697 C 833.0947,531.07752 830.94522,532.04507 824.8231,531.35243 C 820.52485,530.86614 818.90694,531.01032 818.90694,531.87965 C 818.90694,532.62907 819.66949,532.83418 820.94758,532.42853 C 822.06994,532.07231 825.37497,532.53158 828.29209,533.44912 C 833.19251,534.9905 833.55975,535.31988 833.11994,537.77941 L 832.64392,540.44143 L 834.64755,538.44143 C 835.74955,537.34143 836.45717,536.10393 836.22004,535.69143 C 835.59716,534.60788 839.32631,534.77018 842.46416,535.96319 C 844.87758,536.88077 845.09882,536.78319 844.63411,535.00613 C 844.22853,533.45518 844.83161,532.79137 847.42336,531.93601 C 852.32574,530.31808 854.23868,524.98763 850.78504,522.5686 C 849.63284,521.76157 848.98728,520.62046 849.35047,520.0328 C 849.75604,519.37657 849.41204,519.19411 848.45888,519.55987 C 847.60531,519.88742 846.90694,520.55726 846.90694,521.04842 C 846.90694,521.53957 846.45694,521.94143 845.90694,521.94143 C 843.58295,521.94143 845.2822,519.96201 850.93833,516.08048 C 854.2556,513.804 857.38417,511.94143 857.89071,511.94143 C 858.39726,511.94143 860.9946,509.75854 863.66258,507.09055 C 868.36539,502.38775 868.54699,501.9857 869.61201,493.91892 C 870.50072,487.18759 871.14534,485.27021 872.9866,483.88134 C 875.12644,482.26726 875.25458,481.51389 875.128,471.29208 C 875.05395,465.31223 875.41702,459.74954 875.93484,458.93053 C 876.63679,457.82028 876.88021,458.26828 876.89163,460.69143 C 876.90677,463.90458 876.96136,463.94143 881.70694,463.94143 C 884.34694,463.94143 886.93444,463.52396 887.45694,463.01372 C 888.04895,462.4356 892.79134,467.08679 900.04181,475.35658 L 911.67667,488.62715 L 913.26092,500.03429 C 915.03115,512.78062 918.50094,554.70526 917.83506,555.30254 C 917.59959,555.51375 907.95694,556.20775 896.40694,556.84476 C 884.85694,557.48177 873.07652,558.26196 870.22823,558.57851 L 865.04952,559.15406 L 864.72823,555.79775 z " },
			{ idEstado: 1, nombre: "cdmx", estado: "Ciudad de México", clave: "path7369", d: "M 585.96718,523.97782 C 583.13776,523.53661 582.3842,522.88646 581.72028,520.31374 C 581.01472,517.57967 581.34937,516.7098 584.37931,513.40187 C 587.49023,510.00554 587.91545,509.81365 588.52821,511.52956 C 588.90371,512.58109 589.80926,514.14271 590.54054,514.99984 C 591.27182,515.85696 592.07699,518.17389 592.32981,520.14856 C 592.85147,524.22302 591.75837,524.88089 585.96718,523.97782 z " },
			{ idEstado: 8, nombre: "chiapas", estado: "Chiapas", clave: "path7397", d: "M 819.59362,672.27757 C 815.09095,668.06244 810.28194,663.5055 808.90694,662.15102 C 806.4356,659.71656 806.43275,659.69445 808.65832,660.22162 C 809.97626,660.53381 810.66155,660.3534 810.31118,659.78649 C 809.69695,658.79264 805.71953,657.02967 802.72184,656.42255 C 799.53892,655.77791 797.33168,654.09231 791.72272,648.02287 C 788.63169,644.67808 785.55353,641.94143 784.88236,641.94143 C 784.01348,641.94143 783.96359,641.57809 784.70914,640.67976 C 785.48591,639.74382 785.11145,639.11381 783.25866,638.23944 C 781.11845,637.22942 780.93213,637.26686 781.95646,638.5011 C 784.36685,641.40544 780.87513,639.94122 774.73329,635.47213 C 771.35513,633.01402 768.09972,630.76402 767.49905,630.47213 C 766.75501,630.11057 766.80533,629.75552 767.65694,629.3581 C 769.59113,628.45547 769.13319,626.94143 766.92599,626.94143 C 765.57504,626.94143 764.75691,626.06686 764.35347,624.19143 C 764.02811,622.67893 763.06916,619.79377 762.22247,617.77995 C 760.74725,614.27122 760.81843,613.70805 763.92871,604.27995 C 765.71383,598.86877 767.50216,593.99143 767.90278,593.44143 C 768.30339,592.89143 768.92473,591.21211 769.28354,589.70962 C 769.65756,588.14342 771.12671,586.36202 772.72674,585.53461 C 775.73646,583.97823 777.90694,580.22155 777.90694,576.56869 C 777.90694,575.31544 779.0637,573.20334 780.47752,571.87512 C 782.33134,570.13355 782.9119,568.7605 782.55962,566.95081 C 781.88357,563.47786 784.65079,557.94143 787.06269,557.94143 C 790.07503,557.94143 792.63592,561.06275 793.23632,565.46608 C 794.15888,572.23211 795.58594,574.94143 798.2272,574.94143 C 799.53057,574.94143 801.41145,575.84143 802.40694,576.94143 C 803.40243,578.04143 804.70967,578.93366 805.31193,578.92415 C 806.69425,578.90234 810.06675,575.36581 812.5203,571.36517 C 815.95748,565.76067 819.74978,561.94143 821.87756,561.94143 C 823.03242,561.94143 825.11211,561.19788 826.4991,560.28909 C 828.93053,558.69595 829.18113,558.7497 833.49315,561.78909 C 835.95289,563.52288 838.38642,564.94143 838.90099,564.94143 C 840.57433,564.94143 841.91951,568.52886 840.70252,569.74585 C 839.09211,571.35626 841.05426,573.3399 845.81025,574.90952 C 847.97282,575.62323 849.55141,576.70988 849.31823,577.3243 C 849.08505,577.93872 851.03462,579.77528 853.6506,581.40554 C 856.26659,583.0358 860.30319,586.35268 862.62083,588.77638 C 865.33472,591.61448 867.38152,592.97329 868.37083,592.59366 C 869.21569,592.26946 869.90694,592.40518 869.90694,592.89526 C 869.90694,593.38535 871.40413,594.28044 873.23403,594.88436 C 876.60414,595.9966 880.07438,599.74289 881.29396,603.58546 C 881.70482,604.87997 883.70756,606.35738 886.49411,607.42157 C 890.80279,609.06707 890.94404,609.24295 889.36142,610.99173 C 888.1908,612.28524 887.80216,614.14155 888.05186,617.24662 L 888.40694,621.66211 L 871.90694,622.31973 C 862.83194,622.68142 852.80818,623.25367 849.63191,623.59139 L 843.85688,624.20543 L 837.95796,635.32343 C 834.71356,641.43833 831.64804,646.90655 831.14571,647.47503 C 828.81921,650.1079 828.93559,653.61972 831.42693,655.96021 C 833.96081,658.34067 834.66012,661.78825 832.95497,663.4934 C 832.10593,664.34244 831.85763,666.99713 831.89368,674.84032 C 831.9053,677.36917 830.30555,679.94143 828.72117,679.94143 C 828.20369,679.94143 824.09629,676.49269 819.59362,672.27757 z " },
			{ idEstado: 9, nombre: "chihuahua", estado: "Chihuahua", clave: "path7297", d: "M 333.15694,278.20922 C 329.95086,277.92046 328.90694,277.40354 328.90694,276.10477 C 328.90694,275.15786 327.37079,272.80157 325.49327,270.86857 C 323.55561,268.87365 321.93417,266.07765 321.74327,264.40208 C 321.43047,261.65666 321.02215,261.39006 315.90694,260.59144 C 312.88194,260.11915 309.87289,259.2982 309.22015,258.7671 C 308.56742,258.236 307.73206,255.24546 307.3638,252.12145 C 306.99554,248.99744 305.70564,242.84143 304.49736,238.44143 L 302.30049,230.44143 L 297.24548,230.74924 C 292.52784,231.03651 291.91221,230.78969 288.02099,227.05101 L 283.85151,223.04497 L 284.523,214.9932 C 284.9679,209.65843 284.8438,206.94143 284.15522,206.94143 C 283.58362,206.94143 282.25101,205.25393 281.19387,203.19143 C 280.13672,201.12893 278.21137,197.46583 276.91531,195.05122 C 275.60998,192.61932 274.52496,188.82777 274.48289,186.55122 L 274.40694,182.44143 L 282.15694,182.7585 C 290.82839,183.11326 290.89582,183.0423 288.85838,175.706 C 288.23067,173.44576 288.17371,171.27371 288.71414,170.206 C 289.20539,169.23549 289.33723,162.9449 289.00713,156.22692 C 288.43296,144.54191 288.49364,144.00004 290.40694,143.72692 C 292.10255,143.48488 292.52168,142.37606 293.16081,136.44143 C 294.47567,124.23232 294.4446,108.63494 293.1006,106.21722 C 292.42057,104.9939 291.0621,97.888212 290.0818,90.426802 C 288.046,74.931727 288.2429,74.315553 294.87235,75.435592 L 298.90694,76.117231 L 298.90694,67.029333 C 298.90694,60.143062 299.22851,57.941435 300.23434,57.941435 C 300.96441,57.941435 311.42691,58.603469 323.48434,59.412622 C 335.54177,60.221775 348.91462,61.008509 353.20178,61.160919 L 360.99662,61.438028 L 363.37424,66.439731 C 365.66699,71.262901 371.69112,78.941435 373.18234,78.941435 C 373.94887,78.941435 377.90694,82.645481 377.90694,83.362816 C 377.90694,83.594575 380.83194,86.79687 384.40694,90.479027 C 387.98194,94.161184 390.90694,97.522782 390.90694,97.949242 C 390.90694,98.375702 392.11829,99.028642 393.59882,99.400232 C 397.11082,100.28169 404.62779,108.39401 405.46513,112.20635 C 405.82535,113.84646 407.04334,116.75316 408.17175,118.66568 C 409.31282,120.59965 410.1651,123.69445 410.09201,125.63855 C 410.01973,127.5611 410.62353,130.7207 411.43377,132.65989 C 412.24401,134.59907 412.91153,136.91822 412.91714,137.81355 C 412.92275,138.70889 415.62275,141.40518 418.91714,143.80533 C 422.21153,146.20547 424.90694,148.54478 424.90694,149.0038 C 424.90694,150.85416 429.60583,154.72311 432.66526,155.39182 C 434.45733,155.78351 436.36609,156.93084 436.90694,157.94143 C 437.44779,158.95202 439.21295,160.06937 440.82952,160.42443 C 442.4461,160.77949 444.34384,161.76294 445.04674,162.60988 C 446.17428,163.96849 450.21607,166.12416 452.07361,166.35764 C 454.24274,166.63028 452.85191,169.32202 442.4155,185.0495 C 436.068,194.61506 430.50356,203.11643 430.05008,203.94143 C 429.56111,204.83102 430.56807,212.76636 432.52457,223.44143 C 436.77968,246.65829 436.802,245.3828 432.15694,244.45029 C 420.48784,242.10767 419.76639,242.38255 412.70177,251.86292 C 408.67202,257.27064 407.57724,257.70799 406.11326,254.49491 C 404.74531,251.49258 400.59148,250.24457 396.76893,251.68742 C 394.61348,252.50101 393.72113,252.42247 392.82284,251.34009 C 391.30308,249.50889 389.42259,249.56864 387.48144,251.50979 C 385.35048,253.64075 382.47877,252.55769 379.3365,248.43796 C 377.8989,246.55318 375.48226,244.78743 373.84949,244.42881 C 372.24465,244.07633 369.69001,242.47247 368.17252,240.86468 C 365.10794,237.61776 363.40993,237.18829 362.54531,239.44143 C 362.22873,240.26643 361.39309,240.95557 360.68832,240.97285 C 358.40291,241.0289 355.67136,245.88294 356.13759,249.05961 C 356.63426,252.4436 356.26164,252.82276 351.94549,253.3253 C 347.90606,253.79562 347.87137,253.84984 348.84571,258.16994 C 349.52361,261.17567 349.33206,262.15172 347.79045,263.54685 C 346.47216,264.73989 345.90234,266.63032 345.89163,269.84642 C 345.88321,272.37367 345.54571,274.90059 345.14163,275.46178 C 344.30754,276.62019 339.17647,279.03181 338.10989,278.76672 C 337.72327,278.67063 335.49444,278.41976 333.15694,278.20922 z " },
			{ idEstado: 6, nombre: "Coahuila", estado: "Coahuila de Zaragoza", clave: "path7315", d:"M 526.63068,326.62248 C 526.11961,325.32031 525.323,324.99199 523.82679,325.46687 C 521.3101,326.26563 517.67215,323.20302 515.8167,318.72357 C 514.61655,315.82615 514.37171,315.72624 509.7987,316.26784 C 505.44659,316.78329 505.00457,316.64136 504.71935,314.63692 C 504.51753,313.21865 503.70365,312.44079 502.42029,312.43963 C 501.32763,312.43865 500.30377,311.76365 500.14505,310.93963 C 499.72977,308.78375 482.56797,303.52211 476.90694,303.81506 C 469.09491,304.21932 469.44969,303.91552 465.37596,313.68881 C 463.89989,317.23004 463.36236,317.73436 462.14277,316.72219 C 461.33823,316.05448 458.63609,315.26816 456.13801,314.97481 C 451.68835,314.45227 451.49782,314.27884 446.76325,306.44143 C 444.10521,302.04143 441.92516,298.10393 441.9187,297.69143 C 441.91223,297.27893 443.03194,296.94143 444.40694,296.94143 C 447.47386,296.94143 447.53469,296.23854 444.72648,293.24934 L 442.54601,290.92834 L 444.97193,286.68489 C 446.63633,283.77349 447.61213,280.08712 448.08046,274.94143 C 448.4559,270.81643 449.06803,266.00272 449.44075,264.2443 C 450.20145,260.65544 448.39184,257.38666 441.7994,250.44143 C 438.0177,246.45735 437.98797,246.35975 434.33144,225.92429 L 430.66029,205.40716 L 433.99275,200.42429 C 435.8256,197.68372 437.68109,195.29143 438.11607,195.1081 C 438.55105,194.92476 438.90694,194.37668 438.90694,193.89013 C 438.90694,193.40358 442.68035,187.25358 447.2923,180.22346 C 451.90425,173.19334 456.00645,166.31643 456.4083,164.94143 C 456.81016,163.56643 458.56629,161.06995 460.31082,159.3937 C 464.73025,155.14723 467.65377,150.83619 468.45756,147.38044 C 469.24285,144.00423 472.9811,137.95839 474.28964,137.94826 C 474.77513,137.9445 475.99895,136.98835 477.00925,135.82347 C 478.49269,134.11305 479.47736,133.8435 482.12654,134.42266 C 485.30516,135.11757 492.75171,135.71443 505.63596,136.307 C 512.29551,136.61328 515.90694,138.64893 515.90694,142.09642 C 515.90694,143.18501 516.6244,143.94347 517.65694,143.9464 C 518.99255,143.95019 518.71643,144.50388 516.49083,146.28472 C 514.35414,147.99441 513.91628,148.82917 514.85263,149.40786 C 515.60424,149.87238 516.49004,149.63009 517.00343,148.81955 C 517.48352,148.06158 517.88411,147.89143 517.89363,148.44143 C 517.90316,148.99143 519.54047,149.55802 521.5321,149.70051 C 524.9355,149.94402 531.66209,154.25091 531.83474,156.29707 C 531.87445,156.76768 533.03194,158.4897 534.40694,160.1238 C 535.78194,161.75789 536.90862,163.84785 536.91068,164.76816 C 536.91273,165.68846 537.81273,167.91481 538.91068,169.7156 C 540.00862,171.51639 540.90694,173.94892 540.90694,175.12121 C 540.90694,176.2935 542.09597,178.81154 543.54922,180.71686 C 545.00248,182.62218 546.26487,184.91465 546.35454,185.81125 C 546.67131,188.97869 549.0577,192.50606 552.46189,194.83865 C 554.35667,196.13697 555.90749,197.47873 555.90816,197.82033 C 555.90883,198.16194 556.94709,199.64797 558.21539,201.12263 C 561.08375,204.45767 560.74344,209.80695 557.4671,212.88491 L 555.22732,214.98908 L 552.62242,212.38419 C 550.22917,209.99094 549.79185,209.88746 547.23987,211.11059 C 545.07118,212.15002 544.29917,213.39698 543.71852,216.7983 C 542.75095,222.46612 541.66255,223.64062 536.59937,224.48065 C 531.63572,225.30417 527.01014,229.95801 526.94758,234.19143 C 526.91418,236.45147 527.34185,236.94143 529.34792,236.94143 C 530.69046,236.94143 532.08514,236.46212 532.4472,235.87629 C 532.87887,235.17783 533.75127,235.39556 534.98135,236.50877 C 538.91123,240.06526 535.50475,250.44143 530.40727,250.44143 C 527.70375,250.44143 516.05653,259.56829 515.96313,261.75998 C 515.93223,262.48518 517.89706,265.12607 520.32942,267.62863 C 524.02995,271.43595 524.85603,273.01641 525.38974,277.31008 C 526.28539,284.5156 527.54245,287.13924 531.21148,289.46078 C 532.96677,290.57143 534.40383,292.32084 534.40493,293.34838 C 534.40604,294.37591 535.30694,295.7172 536.40694,296.32903 C 537.50694,296.94085 538.68627,297.82387 539.02768,298.29129 C 539.36908,298.75872 541.07888,299.43372 542.82723,299.79129 C 544.57558,300.14887 546.09625,300.89143 546.2065,301.44143 C 546.49364,302.87395 538.02735,303.28625 536.38102,301.91992 C 534.51689,300.37283 531.38889,301.51327 528.93303,304.6354 C 526.53241,307.68729 526.31507,311.20533 528.41927,312.95166 C 529.56645,313.90374 529.65868,314.53564 528.80125,315.56878 C 528.17955,316.31788 527.88917,317.76547 528.15595,318.78565 C 528.42274,319.80583 528.34931,322.39573 527.99279,324.54098 C 527.50396,327.4824 527.16904,327.99419 526.63068,326.62248 z " },
			{ idEstado: 7, nombre: "colima", estado: "Colima", clave: "path7375", d: "M 426.72561,534.36257 C 425.25088,533.58539 423.75806,532.0477 423.40822,530.94547 C 423.05839,529.84325 422.14985,528.94143 421.38924,528.94143 C 420.62864,528.94143 419.54764,528.15393 418.98704,527.19143 C 418.01629,525.52476 417.96631,525.52476 417.93735,527.19143 C 417.90049,529.31248 418.02588,529.3069 413.4413,527.39134 C 410.93319,526.34338 409.91164,525.37156 410.28779,524.39134 C 410.5938,523.59389 410.29579,522.87289 409.62556,522.78912 C 407.28333,522.49636 406.38653,522.24491 403.59184,521.09736 C 402.04354,520.4616 400.24354,519.90472 399.59184,519.85986 C 397.21997,519.69657 404.57789,517.16893 411.14716,515.8903 C 416.20497,514.90586 418.03883,514.10125 418.4941,512.66681 C 418.99257,511.09626 419.70605,510.86876 422.49326,511.39165 C 424.35911,511.74168 427.70493,511.48302 429.92842,510.81685 C 435.67244,509.0959 436.47448,510.24782 436.11948,519.70873 C 435.96138,523.92226 435.45953,527.61084 435.00426,527.90556 C 434.54899,528.20029 433.87936,529.39458 433.51619,530.55955 C 433.15302,531.72451 432.07987,533.3747 431.13141,534.22664 C 429.62443,535.58027 429.06878,535.59741 426.72561,534.36257 z " },
			{ idEstado: 10, nombre: "durango", estado: "Durango", clave: "path7327", d: "M 406.76855,399.93663 C 405.86744,399.40332 404.81926,397.72823 404.43927,396.21422 C 404.05928,394.7002 403.22155,393.12635 402.57766,392.71676 C 400.61866,391.47063 396.97433,391.85117 394.34055,393.57689 C 391.00442,395.7628 390.01776,394.51682 392.76727,391.59011 C 394.57964,389.66092 394.8719,388.46841 394.42057,384.84405 C 394.11905,382.42261 393.65041,379.73462 393.37917,378.87075 C 392.8106,377.05995 382.87287,373.63354 380.65637,374.48409 C 379.70845,374.84784 378.97491,374.30934 378.63198,372.99799 C 378.30704,371.75539 377.27221,370.94143 376.01741,370.94143 C 374.53374,370.94143 373.22727,369.53367 371.4428,366.0122 C 370.06899,363.30112 368.48641,360.79956 367.92596,360.45318 C 367.3655,360.1068 366.90694,358.60008 366.90694,357.10492 C 366.90694,355.60976 366.26295,353.46702 365.47585,352.34328 C 364.68875,351.21954 363.7508,347.42708 363.39151,343.91561 C 362.66841,336.84854 360.43414,331.68519 356.51719,328.02927 C 354.11128,325.78368 353.65066,325.70164 349.84701,326.84124 C 345.48966,328.14673 342.90694,327.19572 342.90694,324.28574 C 342.90694,321.386 337.54068,312.31767 333.79133,308.88145 C 331.65492,306.92347 329.90694,304.58214 329.90694,303.67851 C 329.90694,302.77487 329.40078,300.92463 328.78213,299.56686 C 328.03517,297.92745 327.89737,294.21656 328.3719,288.5198 L 329.08648,279.94143 L 334.44966,279.94143 C 339.73069,279.94143 344.70132,278.46212 346.14163,276.46178 C 346.54571,275.90059 346.88321,273.37367 346.89163,270.84642 C 346.90263,267.54377 347.46626,265.74523 348.89561,264.45168 C 350.48563,263.01273 350.7607,261.87912 350.2678,258.79669 C 349.70984,255.30734 349.85952,254.94143 351.84487,254.94143 C 353.05133,254.94143 354.95679,254.44993 356.07924,253.84922 C 357.70412,252.97961 357.99489,252.13118 357.50592,249.68633 C 356.86279,246.4707 358.94984,242.94143 361.49454,242.94143 C 362.19723,242.94143 363.07085,242.00035 363.43591,240.85015 C 364.07493,238.83677 364.20976,238.87148 367.05548,241.78216 C 368.68118,243.44496 371.34307,245.09795 372.97079,245.45545 C 374.63996,245.82207 377.04134,247.56215 378.47864,249.44655 C 381.51703,253.43008 386.68511,255.68309 387.55922,253.4052 C 388.22898,251.65983 391.04849,251.48298 392.65131,253.0858 C 393.51046,253.94495 394.5114,253.93369 396.66743,253.04064 C 400.26197,251.55173 404.45563,252.94411 405.40726,255.94244 C 406.57364,259.61737 409.98465,257.93823 414.52544,251.45384 C 417.93759,246.58118 419.40034,245.32455 422.38103,244.70526 C 424.4916,244.26675 426.83441,244.36743 427.90959,244.94285 C 428.93582,245.49207 431.08976,245.94143 432.69614,245.94143 C 434.92639,245.94143 436.80356,247.19622 440.63692,251.24944 C 443.39797,254.16885 446.43014,258.05251 447.37507,259.8798 C 448.99863,263.01942 448.99873,263.41146 447.37692,267.008 C 446.12477,269.78477 445.84411,272.03675 446.33893,275.3365 C 446.90469,279.10921 446.59346,280.61803 444.46204,284.43577 C 441.74696,289.29895 441.23304,292.4069 442.96678,293.47841 C 443.64166,293.89551 443.40649,294.58688 442.31932,295.38184 C 440.11122,296.99644 440.8269,299.81359 445.25596,306.94143 C 450.4664,315.32677 452.28879,316.94143 456.54247,316.94143 C 458.59353,316.94143 461.06911,317.6832 462.08433,318.60197 C 464.34859,320.65109 464.51077,320.48962 466.84456,313.8626 C 467.88337,310.91279 469.10987,308.37563 469.57012,308.22448 C 471.09678,307.72308 474.32294,317.34568 474.72958,323.61343 L 475.13,329.78543 L 470.76847,330.41212 C 468.36963,330.7568 463.93194,330.76846 460.90694,330.43803 C 444.65812,328.6631 442.94395,328.67853 442.22725,330.60616 C 441.35385,332.95525 432.42516,341.94143 430.9645,341.94143 C 429.38549,341.94143 428.06676,345.9636 427.7123,351.86073 C 427.51365,355.16567 426.95915,356.94111 426.12556,356.94124 C 425.42079,356.94134 424.54268,357.72893 424.17418,358.69143 C 423.80569,359.65393 422.68163,361.11643 421.67627,361.94143 C 419.2151,363.96107 417.72262,372.04668 417.21385,386.11681 C 416.94766,393.47851 416.35113,398.14657 415.59931,398.75134 C 413.67643,400.29811 408.54345,400.98707 406.76855,399.93663 z " },
			{ idEstado: 15, nombre: "estado_de_Mexico", estado: "México", clave: "path7377", d: "M 547.57361,547.27476 C 547.20694,546.9081 546.90694,545.68564 546.90694,544.5582 C 546.90694,543.43075 546.19382,540.64102 545.32223,538.35879 C 543.78092,534.32292 543.81039,534.06548 546.39834,528.9584 C 548.35747,525.09224 549.30936,521.16717 550.00792,514.07448 C 550.96363,504.37079 552.40603,498.94143 554.02826,498.94143 C 554.51153,498.94143 554.90694,496.94857 554.90694,494.51286 C 554.90694,491.97422 555.52676,489.46447 556.35932,488.63191 C 557.15813,487.8331 557.51528,486.88311 557.15299,486.52081 C 556.7907,486.15852 557.51258,485.59581 558.75717,485.27035 C 560.13723,484.90945 560.81517,484.14466 560.49488,483.31001 C 559.77184,481.4258 560.87807,481.60435 564.40694,483.94143 C 566.05694,485.03418 568.85361,485.93122 570.62176,485.93484 C 574.20136,485.94218 575.33167,487.35805 576.42947,493.20984 C 577.06842,496.61571 577.41514,496.94143 580.4016,496.94143 C 582.82607,496.94143 583.80834,496.42646 584.19354,494.95347 C 584.75181,492.81864 589.41702,490.52061 591.0916,491.55556 C 591.65086,491.90119 591.86558,493.39824 591.56876,494.88231 C 591.03228,497.56475 591.06238,497.58022 596.68114,497.51103 C 601.9776,497.44581 602.3952,497.61548 603.31893,500.20799 C 604.16287,502.57657 603.9737,503.20637 602.00396,504.58603 C 600.20695,505.8447 599.99921,506.38014 601.05509,507.0317 C 603.01732,508.24253 603.64053,527.86157 601.75473,529.05667 C 599.31557,530.60244 596.90694,530.04834 596.90694,527.94143 C 596.90694,526.83032 596.24027,525.94143 595.40694,525.94143 C 594.34289,525.94143 593.90266,524.85154 593.8922,522.19143 C 593.88409,520.12893 593.24194,517.31643 592.46519,515.94143 C 591.68845,514.56643 590.29381,511.97893 589.36599,510.19143 C 587.6185,506.82477 585.90694,505.90653 585.90694,508.33567 C 585.90694,509.10251 584.49975,511.23632 582.77986,513.07747 C 579.70764,516.36629 579.67429,516.50893 580.87863,521.20802 C 582.24234,526.52893 581.88594,527.44069 575.95825,533.79547 C 573.24661,536.70249 572.38564,537.06621 569.49827,536.52454 C 566.48548,535.95934 566.04726,536.18846 564.91561,538.9205 C 563.79702,541.621 563.20708,541.94143 559.35371,541.94143 C 555.70555,541.94143 554.71485,542.40245 552.90694,544.94143 C 550.84317,547.83973 548.96171,548.66287 547.57361,547.27476 z " },
			{ idEstado: 11, nombre: "guanajuato", estado: "Guanajuato", clave: "path7361", d: "M 527.15954,488.79938 C 526.77441,487.32662 525.71098,486.99755 521.54567,487.06219 C 518.71937,487.10606 515.44412,487.74965 514.26733,488.49241 C 512.41943,489.65875 511.92077,489.611 510.6098,488.14215 C 509.77494,487.20675 508.93776,485.09143 508.74941,483.44143 C 508.56105,481.79143 507.73194,480.13556 506.90694,479.76172 C 504.25478,478.5599 500.09282,478.89841 498.5498,480.44143 C 496.23911,482.75211 493.01842,482.2802 491.72499,479.44143 C 491.09849,478.06643 490.32064,476.93454 489.99642,476.92612 C 489.67221,476.9177 488.79158,476.52097 488.03948,476.0445 C 486.93244,475.34318 487.10825,474.58815 488.96266,472.07993 C 491.11469,469.16916 491.15206,468.86976 489.58013,467.1328 C 487.11549,464.40941 487.47806,462.92377 491.91883,457.54983 C 494.12536,454.87962 496.18952,451.66374 496.50583,450.40344 C 496.82214,449.14315 498.35264,447.58524 499.90694,446.94143 C 502.91737,445.69447 504.1944,442.75667 503.26722,439.21114 C 502.91919,437.88028 503.47431,435.95337 504.70275,434.22819 C 505.8044,432.68106 506.86352,430.29613 507.05634,428.92833 C 507.48705,425.8732 510.89866,425.1218 514.114,427.3739 C 515.34487,428.23604 517.93932,428.94358 519.87945,428.94621 C 522.53665,428.94981 524.37948,429.84412 527.34887,432.57106 C 529.51694,434.5621 532.59441,436.565 534.18771,437.02195 C 536.63235,437.72307 537.47796,437.43037 539.60426,435.1471 C 542.37143,432.17565 547.97969,431.38544 548.96785,433.82775 C 549.27634,434.59023 552.31384,436.06905 555.71785,437.11403 C 559.43008,438.25362 561.90694,439.57117 561.90694,440.40627 C 561.90694,441.17204 562.58194,442.47357 563.40694,443.29857 C 564.74027,444.63191 564.73256,444.97296 563.33749,446.36802 C 562.1777,447.52781 561.2813,447.67696 559.90324,446.93945 C 557.00279,445.38718 554.90694,445.75613 554.90694,447.81899 C 554.90694,448.85164 554.23194,450.25674 553.40694,450.94143 C 552.58194,451.62612 551.90694,453.01997 551.90694,454.03887 C 551.90694,455.56394 551.3766,455.78536 548.90694,455.29143 C 546.90514,454.89107 545.90694,455.09125 545.90694,455.89305 C 545.90694,456.65556 544.63645,456.98521 542.43019,456.79513 C 537.877,456.40285 535.7313,459.01979 536.57075,463.94143 C 536.89908,465.86643 537.50708,467.89143 537.92186,468.44143 C 538.33663,468.99143 538.9861,470.89202 539.36511,472.66497 C 539.80876,474.74026 541.80904,477.46624 544.98058,480.31773 C 550.42993,485.21716 551.09666,486.94143 547.5418,486.94143 C 546.24097,486.94143 544.09122,487.79523 542.76458,488.83877 C 539.35393,491.52158 527.86383,491.49258 527.15954,488.79938 z " },
			{ idEstado: 12, nombre: "guerrero", estado: "Guerrero", clave: "path7393", d: "M 605.28445,621.48283 C 604.95913,620.63506 604.26206,619.94143 603.73539,619.94143 C 603.20873,619.94143 601.7021,618.66301 600.38733,617.10049 C 598.43897,614.785 597.1666,614.24701 593.50797,614.1917 C 590.37428,614.14432 588.3273,613.47932 586.72758,611.98896 C 585.46724,610.81477 584.27951,610.32373 584.08817,610.89775 C 583.51952,612.60368 581.12345,612.09019 578.99581,609.80645 C 577.47963,608.17902 576.29092,607.81463 573.99563,608.27369 C 572.3395,608.60492 570.74905,608.49498 570.4613,608.02938 C 569.76174,606.89747 565.90694,605.92653 565.90694,606.88224 C 565.90694,607.2967 566.91944,608.12411 568.15694,608.72094 C 570.37965,609.79291 570.38113,609.80689 568.27938,609.87375 C 567.10923,609.91097 565.5625,609.23133 564.8422,608.36342 C 564.1219,607.49552 561.2543,605.64422 558.46975,604.24942 C 555.68521,602.85463 552.59197,600.99512 551.59589,600.11719 C 550.19828,598.88536 549.60931,598.80497 549.01594,599.76506 C 548.25983,600.98848 544.90694,600.39083 544.90694,599.03263 C 544.90694,598.65048 543.37793,598.29446 541.50913,598.24149 C 539.64034,598.18852 534.65023,596.52433 530.42,594.5433 C 526.18977,592.56227 522.31878,590.94143 521.81781,590.94143 C 521.31683,590.94143 520.90694,590.2854 520.90694,589.48358 C 520.90694,588.68177 518.88194,586.83901 516.40694,585.38856 C 513.93194,583.93812 511.90694,582.1709 511.90694,581.46142 C 511.90694,579.82755 507.73745,577.06352 504.15266,576.32097 C 502.4482,575.96791 500.13561,574.04599 498.05453,571.25301 C 494.70279,566.75471 488.89759,563.3473 486.29021,564.34785 C 485.27758,564.73643 484.90694,563.95614 484.90694,561.43573 C 484.90694,558.66967 485.46191,557.7058 487.72977,556.53305 C 492.42618,554.10444 493.34779,552.41995 491.89674,548.91681 C 490.81201,546.29803 490.88384,545.62444 492.43004,543.91591 C 494.73394,541.37012 499.35302,541.38751 501.91713,543.95162 C 503.57457,545.60906 504.67131,545.84025 508.16713,545.26911 C 515.86684,544.01114 525.04232,544.73763 536.05852,547.47748 C 538.19843,548.0097 538.83974,547.72851 539.38191,546.0203 C 539.7514,544.85614 539.92477,542.67437 539.76717,541.17193 C 539.46171,538.25981 540.43035,535.94143 541.95254,535.94143 C 543.18155,535.94143 545.90694,542.55991 545.90694,545.5445 C 545.90694,547.26341 546.62732,548.08413 548.56238,548.5698 C 550.7478,549.1183 551.67707,548.67757 553.81238,546.07984 C 555.96402,543.46224 557.11175,542.92494 560.53562,542.93242 C 564.12551,542.94025 564.81673,542.57343 565.83236,540.12148 C 566.83129,537.70985 567.4473,537.36712 570.0867,537.75451 C 573.48714,538.25358 576.35808,540.63675 577.35937,543.79156 C 578.16924,546.34323 581.52367,547.50441 583.45493,545.9016 C 584.25353,545.23882 584.90694,545.10325 584.90694,545.60034 C 584.90694,546.8432 594.63097,556.94143 595.82777,556.94143 C 596.35894,556.94143 597.38703,557.72893 598.11241,558.69143 C 599.73573,560.84538 603.34903,562.94143 605.43883,562.94143 C 606.29629,562.94143 608.15463,564.09821 609.56847,565.51206 C 612.00536,567.94895 612.1096,568.48219 611.57201,575.76206 C 611.14025,581.60887 611.35118,583.90465 612.45593,585.38256 C 613.25399,586.45018 613.90694,588.13768 613.90694,589.13256 C 613.90694,590.12744 614.2752,590.94143 614.72529,590.94143 C 615.17538,590.94143 617.14358,592.40393 619.09906,594.19143 C 621.88683,596.73972 622.78296,598.44798 623.2495,602.10327 C 623.81767,606.55482 623.66947,606.92324 619.9642,610.27073 C 617.83003,612.19883 615.14407,614.27934 613.99541,614.89408 C 612.84675,615.50882 611.90694,616.58634 611.90694,617.28856 C 611.90694,617.99077 610.54997,619.56857 608.89144,620.79477 C 606.31787,622.69749 605.78926,622.79833 605.28445,621.48283 z " },
			{ idEstado: 13, nombre: "hidalgo", estado: "Hidalgo", clave: "path7365", d: "M 605.2942,502.19143 C 603.3959,496.15104 603.14886,495.94143 597.92838,495.94143 C 593.22224,495.94143 592.90694,495.78248 592.90694,493.41005 C 592.90694,492.01778 592.24679,490.62534 591.43993,490.31572 C 589.07041,489.40645 584.48873,491.38915 583.40694,493.79197 C 581.7771,497.41208 578.58718,496.16241 577.40694,491.44143 C 576.0018,485.82086 575.22339,484.94568 571.59792,484.91022 C 567.97513,484.87479 560.13958,480.53372 561.82182,479.49404 C 562.41864,479.12518 562.91095,477.16245 562.91584,475.13241 C 562.92416,471.68239 563.2669,471.27092 568.16584,468.82956 C 571.73804,467.04938 573.31259,465.69263 573.11062,464.56876 C 572.94765,463.66185 574.18515,460.42198 575.86062,457.36904 C 577.5361,454.3161 578.90694,451.16715 578.90694,450.37136 C 578.90694,449.21128 579.2755,449.15465 580.76634,450.0857 C 582.26274,451.02021 583.1279,450.87545 585.19796,449.34417 C 586.61269,448.29766 588.24717,446.41607 588.83014,445.16286 C 589.79778,443.08273 590.08679,443.00705 592.14852,444.2938 C 593.39065,445.06904 596.81685,445.96631 599.7623,446.28774 L 605.11766,446.87216 L 604.71645,443.43544 C 604.46349,441.26866 604.78224,439.81952 605.57906,439.51375 C 607.2263,438.88165 608.0797,440.32766 607.28367,442.40207 C 606.40512,444.69153 610.71934,449.13575 613.08998,448.38333 C 614.08931,448.06616 614.90694,448.23449 614.90694,448.75741 C 614.90694,449.28033 615.83631,449.9512 616.97221,450.24825 C 618.93456,450.76141 618.95983,450.93848 617.47928,453.80153 C 616.62228,455.4588 616.19105,457.51824 616.52101,458.37808 C 617.21893,460.19684 616.52175,460.34083 613.87533,458.92452 C 612.33203,458.09857 611.66552,458.38025 610.32607,460.42452 C 609.41904,461.80882 608.05367,462.94143 607.29193,462.94143 C 606.53019,462.94143 605.90694,463.61643 605.90694,464.44143 C 605.90694,465.26643 606.54745,465.94143 607.3303,465.94143 C 608.54425,465.94143 608.53284,466.38405 607.25274,468.95008 C 605.57773,472.30771 606.23846,477.74768 608.4231,478.586 C 610.38791,479.33997 613.72056,477.23999 618.36953,472.31851 C 622.93055,467.49014 624.34232,467.01791 625.84151,469.81917 C 626.66036,471.34921 626.15765,472.40901 623.12669,475.5425 C 621.08083,477.65757 618.77068,479.40008 617.99303,479.41476 C 615.51841,479.46144 615.69365,481.75557 618.30241,483.4649 C 620.39739,484.83758 620.72181,485.6489 620.22724,488.27863 C 619.90008,490.01817 619.01918,492.15186 618.26968,493.02017 C 617.52017,493.88848 616.90694,495.92895 616.90694,497.55456 C 616.90694,499.7565 616.16632,500.94771 614.00265,502.22582 C 610.19704,504.47385 606.00629,504.4573 605.2942,502.19143 z "},
			{ idEstado: 14, nombre: "jalisco", estado: "Jalisco", clave: "path7371", d: "M 436.90694,526.99731 C 436.90694,526.01672 437.339,522.93616 437.86707,520.15164 C 438.6178,516.19306 438.50477,514.44254 437.34882,512.12537 L 435.87042,509.16186 L 427.19231,509.40817 C 419.65869,509.62199 418.39834,509.91413 417.63569,511.62329 C 416.94087,513.18044 414.69387,513.96916 406.88925,515.39538 C 397.7714,517.06158 396.89751,517.07486 395.3927,515.57004 C 394.49696,514.67431 393.06033,513.94143 392.20018,513.94143 C 390.28524,513.94143 385.93627,509.50097 383.90694,505.47371 C 383.08194,503.83648 381.31442,501.95305 379.97912,501.28831 C 377.51741,500.06282 375.00703,496.50547 374.94238,494.15094 C 374.90423,492.76167 370.89269,486.65732 369.65694,486.1081 C 369.24444,485.92476 368.90694,484.71299 368.90694,483.41526 C 368.90694,482.11753 367.9432,479.42234 366.7653,477.42594 C 364.76219,474.03092 364.73199,473.68764 366.29843,472.11878 C 367.21955,471.19624 370.04867,469.99143 372.58538,469.44143 C 375.12316,468.89119 377.69441,467.62548 378.30225,466.62725 C 380.78016,462.55788 387.60796,455.94143 389.32939,455.94143 C 390.34221,455.94143 392.67967,455.00894 394.52376,453.86923 C 398.71943,451.27616 400.98155,451.89728 406.82412,457.24658 L 411.2413,461.29083 L 412.59004,456.66531 C 413.33185,454.12127 414.38162,451.7661 414.92286,451.43159 C 416.3868,450.52683 416.11301,447.00464 414.44943,445.34106 C 412.53001,443.42164 413.52597,440.62885 415.69668,441.84364 C 418.02865,443.14867 421.64495,441.12141 422.40795,438.08137 C 422.92605,436.0171 422.4958,434.98453 420.34759,433.13672 C 417.80385,430.94869 417.7042,430.56148 418.76966,427.00529 C 420.26955,421.99912 420.40031,422.49329 416.40583,418.07188 L 412.90472,414.19658 L 414.50632,407.1045 C 416.19181,399.6409 417.25887,398.54453 422.90694,398.47306 C 424.91189,398.44769 425.4723,397.86885 425.73702,395.54994 C 425.91856,393.95962 425.51548,392.31753 424.8413,391.90086 C 422.65308,390.54847 424.65704,387.77926 427.57414,388.12446 C 430.29826,388.44682 432.19647,390.94143 429.71763,390.94143 C 428.47974,390.94143 426.82424,395.50735 425.22985,403.31883 C 424.78619,405.49246 424.98061,406.08431 426.02474,405.73865 C 427.4969,405.2513 429.30575,402.24948 430.93938,397.58274 C 431.7763,395.19192 432.18489,394.92722 433.43584,395.96542 C 434.38678,396.75463 434.59797,397.61376 434.01565,398.32411 C 433.51187,398.93864 432.7852,401.98305 432.40083,405.08947 L 431.70197,410.7375 L 434.84542,411.42792 C 438.85537,412.30865 440.90694,410.66091 440.90694,406.55953 C 440.90694,402.54208 443.28592,400.98432 447.65694,402.13961 C 451.49839,403.15494 451.54123,403.49648 448.77794,411.07507 C 446.78218,416.54864 446.46044,416.89926 443.63675,416.67774 C 441.93911,416.54456 440.43161,416.98694 440.18242,417.69143 C 439.93924,418.37893 440.45277,418.94143 441.32361,418.94143 C 442.19444,418.94143 442.90694,419.38286 442.90694,419.92238 C 442.90694,421.05614 439.32336,422.02437 436.40694,421.67857 C 434.99148,421.51074 434.49282,421.9529 434.70078,423.19143 C 434.86239,424.15393 434.49456,424.94143 433.88339,424.94143 C 433.26116,424.94143 433.02806,425.7477 433.35369,426.77365 C 433.71369,427.9079 433.16914,429.29915 431.92422,430.42579 C 430.81817,431.42675 429.15463,434.65226 428.22746,437.59358 C 427.30029,440.5349 425.94888,442.94143 425.22432,442.94143 C 423.02265,442.94143 423.75376,445.75804 426.1531,446.51956 C 427.38849,446.91166 428.89145,447.90558 429.49302,448.72827 C 430.3404,449.88713 431.46757,450.03612 434.49686,449.38969 C 436.6474,448.93078 440.43194,448.51627 442.90694,448.46855 C 457.96621,448.17823 458.38467,448.09261 463.24283,444.30766 C 468.48967,440.21988 469.38079,436.58522 465.90694,433.44143 C 463.29212,431.07505 463.38426,430.1367 466.36475,428.7787 C 468.36927,427.86538 469.76908,428.06602 473.95467,429.86662 C 479.90092,432.42462 482.61703,431.91793 487.64619,427.31245 C 489.37053,425.73339 492.21427,423.16864 493.96562,421.61301 L 497.1499,418.78458 L 500.32603,421.86301 C 502.0729,423.55614 504.23682,424.94143 505.13474,424.94143 C 506.48751,424.94143 506.61383,425.47664 505.87175,428.06412 C 505.37918,429.78161 504.17968,432.36911 503.20619,433.81412 C 502.04219,435.54192 501.54318,437.84403 501.74867,440.53817 C 502.03321,444.26867 501.79383,444.74564 499.07104,445.87346 C 497.37576,446.57567 495.82966,448.1132 495.50065,449.42407 C 495.18149,450.69571 493.28247,453.69483 491.2806,456.08878 C 485.99095,462.41446 485.36978,464.19198 487.37785,467.25668 C 488.9804,469.7025 488.95502,469.95739 486.82142,472.84323 C 485.08906,475.18638 483.55274,476.00619 479.99638,476.48519 C 473.7337,477.32871 469.29007,478.77486 467.93175,480.41154 C 467.3074,481.16383 463.77218,482.28947 460.0757,482.91297 C 452.28017,484.22785 451.78211,484.49577 450.12388,488.26637 C 448.64752,491.62341 449.23875,492.9432 452.21596,492.93648 C 453.421,492.93376 456.50491,493.68344 459.06909,494.60244 C 463.45577,496.17461 463.6743,496.42312 462.76751,498.80815 C 462.12332,500.50251 462.18506,502.93232 462.95375,506.13655 C 463.98296,510.42679 464.34444,510.86973 466.39623,510.35476 C 467.65712,510.0383 468.98344,510.2562 469.34362,510.83898 C 470.40592,512.55782 465.92361,517.6881 462.81666,518.30949 C 461.24047,518.62472 457.44454,520.92407 454.38127,523.41914 C 450.13081,526.88118 448.25844,527.81677 446.47581,527.36936 C 445.19107,527.04691 442.51251,527.23244 440.52343,527.78165 C 437.34701,528.65871 436.90694,528.56326 436.90694,526.99731 z " },
			{ idEstado: 16, nombre: "michoacan", estado: "Michoacán de Ocampo", clave: "path7387", d: "M 474.90694,564.44143 C 472.98194,563.70012 470.09634,563.05935 468.49449,563.01751 C 466.89264,562.97567 463.51764,561.63747 460.99449,560.04373 C 458.47134,558.45 453.94215,556.63281 450.92962,556.00554 C 445.32799,554.83916 436.90694,550.59252 436.90694,548.93407 C 436.90694,548.42639 435.63286,546.53286 434.07565,544.72623 C 429.83698,539.80861 429.54134,538.16464 432.305,534.88021 C 433.63085,533.30452 434.88024,531.52154 435.08141,530.91803 C 435.28258,530.31452 436.91667,529.77895 438.71272,529.72789 C 440.50877,529.67682 442.22231,529.24017 442.52058,528.75755 C 442.81886,528.27493 444.5386,528.15691 446.34224,528.49527 C 449.19267,529.03001 450.35772,528.51088 455.25013,524.52595 C 458.34583,522.00447 461.81041,519.94143 462.94918,519.94143 C 465.95322,519.94143 471.04565,514.02293 470.69302,510.94143 C 470.45878,508.89446 469.90861,508.47555 467.65694,508.62969 C 465.41995,508.78284 464.90694,508.40041 464.90694,506.57969 C 464.90694,505.34865 464.44022,503.87471 463.86978,503.30427 C 463.15357,502.58806 463.15357,501.42296 463.86978,499.53917 C 464.44022,498.0388 464.90694,496.47713 464.90694,496.06878 C 464.90694,495.09743 458.17494,492.14503 454.10324,491.33069 C 450.48822,490.60769 450.32145,490.22235 452.36243,487.30843 C 453.43319,485.77971 455.31223,485.0762 459.47099,484.64698 C 463.06286,484.27626 466.50724,483.14817 468.91764,481.55305 C 471.74333,479.68309 474.66804,478.86524 480.38073,478.34757 L 488.05022,477.65258 L 490.92221,480.79701 C 494.27243,484.46503 495.7526,484.67718 498.90694,481.94143 C 503.09845,478.30615 507.90694,480.39114 507.90694,485.84388 C 507.90694,489.57302 511.62205,491.69945 514.98903,489.89749 C 518.93375,487.78635 524.20199,487.88929 525.96187,490.1119 C 527.15976,491.62475 528.95005,492.13426 533.75853,492.3308 C 538.96456,492.54359 540.52253,492.20059 543.14787,490.26367 C 546.57065,487.73843 550.80663,487.24112 552.70694,489.14143 C 554.15493,490.58942 554.3178,496.94143 552.90694,496.94143 C 552.35694,496.94143 551.90694,497.80393 551.90694,498.8581 C 551.90694,499.91226 551.50592,500.92476 551.01578,501.1081 C 550.52564,501.29143 549.68968,506.05318 549.15809,511.68977 C 548.08009,523.11997 543.83533,534.86429 540.76393,534.91455 C 538.65987,534.94897 537.90694,536.98235 537.90694,542.63021 C 537.90694,546.55873 537.67619,547.0566 536.15694,546.40603 C 532.14818,544.68942 523.74704,543.62548 513.49698,543.53633 C 505.73206,543.46879 502.46497,543.08109 502.16364,542.19143 C 501.4552,540.09976 493.4986,540.63017 491.43865,542.90639 C 489.80454,544.71207 489.73135,546.10533 491.02025,550.87128 C 491.23903,551.68027 489.77863,553.38132 487.65694,554.78882 C 484.28345,557.02675 483.90694,557.7115 483.90694,561.60897 C 483.90694,565.68707 483.74548,565.93696 481.15694,565.86535 C 479.64444,565.82351 476.83194,565.18274 474.90694,564.44143 z " },
			{ idEstado: 17, nombre: "morelos", estado: "Morelos", clave: "path7379", d: "M 586.90694,545.94143 C 584.65268,542.77561 581.90694,541.93465 581.90694,544.41005 C 581.90694,545.30464 581.32065,545.65368 580.40694,545.30306 C 579.58194,544.98647 578.90694,544.09619 578.90694,543.32465 C 578.90694,542.55311 578.00694,541.15125 576.90694,540.2094 C 575.80694,539.26755 574.90694,538.17433 574.90694,537.78001 C 574.90694,537.38569 576.70694,534.98333 578.90694,532.44143 C 581.10694,529.89953 582.90694,527.12208 582.90694,526.26932 C 582.90694,525.02958 583.65847,524.84821 586.65694,525.36434 C 595.34052,526.85905 595.90694,527.08296 595.90694,529.02089 C 595.90694,530.55001 596.62199,530.94143 599.41541,530.94143 C 602.67356,530.94143 602.83477,531.08413 601.67487,532.94143 C 600.67617,534.54059 600.67617,535.34227 601.67487,536.94143 C 602.41524,538.12695 602.5132,538.94143 601.91541,538.94143 C 601.36075,538.94143 600.90694,540.52024 600.90694,542.4499 C 600.90694,545.75719 600.78476,545.88621 598.77629,544.6999 C 597.06035,543.68638 596.55616,543.68883 596.18594,544.71247 C 595.78582,545.8188 590.86721,548.94143 589.52469,548.94143 C 589.25983,548.94143 588.08184,547.59143 586.90694,545.94143 z " },
			{ idEstado: 18, nombre: "nayarit", estado: "Nayarit", clave: "path7355", d: "M 378.93678,462.30272 C 378.92037,461.67643 377.33194,460.86854 375.40694,460.50741 C 373.48194,460.14628 371.92132,459.53369 371.93889,459.14612 C 371.95647,458.75854 374.22049,456.19143 376.97006,453.44143 C 380.72424,449.68666 381.83928,447.90909 381.44729,446.30394 C 381.1602,445.12831 381.32222,442.04186 381.80734,439.44515 C 382.54539,435.49458 382.40105,434.43554 380.92316,432.95765 C 379.95174,431.98623 378.74402,431.02268 378.23935,430.81643 C 377.73467,430.61018 376.29172,428.75393 375.03279,426.69143 C 373.1277,423.57034 373.00906,422.94143 374.32538,422.94143 C 376.32792,422.94143 376.37616,420.57573 374.40694,418.94143 C 373.14667,417.8955 372.89708,418.0757 372.84524,420.06899 C 372.76206,423.26698 370.49973,415.72513 368.45741,405.44143 C 367.58357,401.04143 366.59978,396.42893 366.2712,395.19143 C 365.91365,393.84479 366.12209,392.94143 366.79036,392.94143 C 367.40448,392.94143 367.90694,394.0923 367.90694,395.49893 C 367.90694,397.88932 368.18464,398.03633 372.15694,397.74893 C 375.35433,397.51759 376.30896,397.06992 376.01133,395.94143 C 375.79374,395.11643 375.15526,392.81759 374.5925,390.8329 C 373.70778,387.71283 373.87549,386.79433 375.83148,384.04741 C 377.07569,382.30008 377.86183,380.26625 377.57845,379.52779 C 376.28885,376.16713 381.1495,375.035 388.02437,377.09476 C 391.37207,378.09775 391.94836,378.71691 392.44551,381.84476 C 392.75993,383.82293 393.17535,386.22933 393.36867,387.19231 C 393.56664,388.17847 392.61949,389.80898 391.2001,390.92547 C 386.50427,394.61921 390.76469,397.83065 395.73878,394.34666 C 398.97224,392.08186 402.90694,393.22951 402.90694,396.43743 C 402.90694,399.84139 406.96313,402.35627 411.31442,401.65016 L 414.68317,401.10348 L 413.30692,406.27246 C 411.33086,413.69425 411.53974,415.21686 414.98493,418.50434 C 417.88921,421.27567 418.02593,421.74027 417.40735,426.73648 C 416.80809,431.57662 416.9652,432.19941 419.23597,433.9856 C 423.56591,437.39153 419.89644,442.61173 415.01045,439.99683 C 413.92584,439.41636 412.78384,438.94143 412.47268,438.94143 C 411.24233,438.94143 411.99762,444.88926 413.40694,446.29857 C 415.27503,448.16666 415.30262,449.36816 413.51155,450.85461 C 412.74408,451.49155 411.81237,453.63201 411.44107,455.61119 L 410.76599,459.20969 L 407.00851,455.54061 C 402.15811,450.80432 397.16046,449.81025 393.33348,452.82055 C 391.85054,453.98703 389.68541,454.93446 388.52208,454.92595 C 387.26816,454.91677 384.89221,456.64724 382.68678,459.17595 C 380.64069,461.52196 378.95319,462.92901 378.93678,462.30272 z " },
			{ idEstado: 19, nombre: "nuevo_leon", estado: "Nuevo León", clave: "path7321", d: "M 539.81302,374.69143 C 539.76137,374.00393 539.79894,369.24534 539.89651,364.11679 C 540.06025,355.51066 539.86625,354.47834 537.37881,350.71956 C 535.04284,347.18967 534.74607,345.90036 535.15174,341.0442 C 535.58273,335.88493 535.36381,335.1248 532.3861,331.44143 C 529.57835,327.96831 529.18559,326.78283 529.40435,322.44143 C 529.54291,319.69143 529.97187,316.69028 530.3576,315.77222 C 530.76599,314.8002 530.33696,313.00116 529.33041,311.46498 C 527.67467,308.93799 527.68697,308.7136 529.62256,306.13419 C 531.55411,303.56017 531.97574,303.45702 539.18444,303.79505 C 546.02885,304.11599 546.83016,303.95341 547.85654,302.0356 C 548.84344,300.19157 548.65571,299.79641 546.38208,298.93198 C 544.94914,298.38718 543.17918,297.94143 542.44883,297.94143 C 541.71848,297.94143 540.8619,297.26643 540.54531,296.44143 C 540.22873,295.61643 539.02903,294.94143 537.87931,294.94143 C 536.58758,294.94143 536.05411,294.51232 536.48303,293.81831 C 536.88284,293.1714 534.94392,290.64207 531.91012,287.85296 C 527.23812,283.55776 526.71077,282.67226 527.24226,280.01485 C 527.5718,278.36712 527.40617,276.74997 526.87419,276.42119 C 526.3422,276.0924 525.90694,274.81424 525.90694,273.58082 C 525.90694,272.27063 524.008,269.38451 521.3396,266.6391 L 516.77227,261.93996 L 523.07355,256.53071 C 528.22759,252.1063 529.71195,251.30189 531.22653,252.11247 C 532.24497,252.65752 533.15371,252.95451 533.24597,252.77245 C 533.33822,252.59039 534.42468,250.99715 535.66032,249.23192 C 538.64881,244.96259 538.74459,238.00947 535.851,235.39081 C 534.1577,233.85839 533.45455,233.74286 531.86457,234.73582 C 529.14056,236.43699 527.90694,236.23561 527.90694,234.08974 C 527.90694,231.03134 533.22799,226.31329 537.44999,225.62816 C 542.38366,224.82753 543.93095,223.1813 544.62695,217.99228 C 545.37114,212.44391 548.58206,210.62921 552.00788,213.82084 C 555.05409,216.65882 556.25761,216.50183 559.31563,212.86758 C 561.77526,209.94448 561.9876,209.87923 563.64559,211.53722 C 564.83955,212.73119 565.01373,213.40583 564.19819,213.67768 C 558.96272,215.42284 555.97352,221.62307 559.87567,222.6435 C 562.3864,223.30007 566.30583,233.34373 565.44788,236.92248 C 564.28744,241.76304 564.41868,242.30579 566.89686,242.91487 C 568.58081,243.32875 568.98542,243.77489 568.14686,244.29315 C 567.4649,244.71462 566.90694,246.38291 566.90694,248.00045 C 566.90694,250.37915 567.33711,250.94436 569.15694,250.95674 C 572.91853,250.98234 574.06384,252.43649 574.7499,258.0579 C 575.35985,263.05558 575.63988,263.51001 578.65694,264.39823 C 581.21369,265.15093 581.91021,265.89751 581.92225,267.89823 C 581.94556,271.7685 583.23286,273.14872 586.13899,272.41932 C 588.09303,271.92889 589.05239,272.311 590.28486,274.0706 C 591.53889,275.86097 592.15198,276.09639 593.09767,275.1507 C 593.76277,274.4856 595.77505,273.94143 597.56941,273.94143 L 600.83189,273.94143 L 601.11941,283.19143 C 601.39299,291.99268 601.51889,292.4573 603.71457,292.76853 C 604.98377,292.94844 605.84635,293.62344 605.63141,294.26853 C 604.9669,296.26293 590.50146,306.93692 588.80854,306.68206 C 585.8851,306.24195 581.90694,309.12061 581.90694,311.67615 C 581.90694,315.0337 580.15054,317.94129 578.12176,317.94221 C 577.17861,317.94264 574.6377,319.51764 572.47529,321.44221 C 570.31288,323.36678 567.71125,324.94143 566.6939,324.94143 C 563.79273,324.94143 563.40978,327.71827 566.01953,329.83151 C 568.20433,331.60066 568.28245,332.0364 567.28643,336.89864 C 566.27896,341.81676 566.36949,342.27989 569.06595,346.00224 C 570.6285,348.15927 571.90694,350.41015 571.90694,351.0042 C 571.90694,353.33738 568.88988,354.94143 564.50142,354.94143 C 559.06626,354.94143 556.95273,357.35554 556.14958,364.48107 C 555.73218,368.18429 555.33216,368.89378 553.91523,368.44406 C 551.76192,367.76063 549.4714,370.36404 550.30796,372.54409 C 550.8221,373.88391 550.38281,374.0915 547.82721,373.71642 C 545.80743,373.41998 544.54185,373.72925 544.20732,374.60103 C 543.55784,376.29356 539.93899,376.36801 539.81302,374.69143 z " },
			{ idEstado: 20, nombre: "oaxaca", estado: "Oaxaca", clave: "path7395", d: "M 674.64279,643.81348 C 673.75885,643.3188 670.76782,642.48398 667.99606,641.95833 C 665.22429,641.43268 661.11096,639.78128 658.85531,638.28857 C 655.66237,636.17558 652.94403,635.4003 646.58054,634.78778 C 642.08506,634.35506 636.69217,633.82068 634.59634,633.60026 C 632.31615,633.36045 629.70562,632.18457 628.09634,630.67242 C 623.18564,626.05811 618.65885,623.9491 613.65694,623.94517 C 611.04444,623.94311 608.90694,623.65553 608.90694,623.3061 C 608.90694,622.95667 609.91944,621.63933 611.15694,620.37867 C 612.39444,619.11802 613.85694,617.61031 614.40694,617.02821 C 614.95694,616.44612 617.78838,613.82596 620.69904,611.20564 L 625.99114,606.44143 L 625.05529,601.56908 C 624.30559,597.66591 623.22328,595.87567 619.61423,592.56908 C 614.33943,587.73634 613.0574,584.22637 612.80024,573.91358 C 612.56773,564.58941 613.9006,561.94143 618.82649,561.94143 C 620.71764,561.94143 623.7591,562.48172 625.58529,563.14208 C 630.07264,564.76473 631.89933,563.16425 629.87567,559.38301 C 628.67678,557.14285 628.69121,556.41647 629.98025,554.11988 C 631.85495,550.77989 634.90694,549.96787 634.90694,552.80909 C 634.90694,553.91696 635.3847,555.11867 635.96862,555.47955 C 636.55255,555.84044 637.44141,557.217 637.94387,558.53857 C 639.0462,561.43791 640.47664,561.61396 641.86431,559.02108 C 642.75739,557.35235 643.93477,557.1207 650.85024,557.25311 C 657.44901,557.37946 659.27434,557.05763 661.53595,555.3691 C 664.77074,552.95397 670.79244,542.43657 670.85967,539.08444 C 670.89435,537.35506 671.32813,536.88908 672.48873,537.33444 C 673.35871,537.66829 674.46618,537.94143 674.94977,537.94143 C 676.4675,537.94143 679.90694,542.23524 679.90694,544.12999 C 679.90694,545.12628 680.38035,545.94143 680.95896,545.94143 C 681.53757,545.94143 682.49279,547.32356 683.08168,549.01284 C 684.30332,552.51724 687.20167,553.94143 693.1118,553.94143 C 695.81968,553.94143 697.63206,554.52844 698.51489,555.69143 C 700.30957,558.05562 700.25263,563.40964 698.41661,564.93341 C 696.85807,566.22687 697.1278,569.5105 699.13281,573.65236 C 700.69396,576.87733 708.18452,577.90074 711.21272,575.30279 C 714.32717,572.63084 720.79598,569.49714 721.57958,570.28074 C 721.94296,570.64412 721.71527,570.94143 721.07361,570.94143 C 716.92709,570.94143 724.34263,580.6693 730.15694,582.85714 C 731.91077,583.51708 732.90694,584.62538 732.90694,585.91668 C 732.90694,587.03029 733.46944,587.94384 734.15694,587.94677 C 740.20535,587.97264 767.29133,588.99249 767.5011,589.20226 C 767.64961,589.35077 765.77096,594.98455 763.32631,601.72176 L 758.8815,613.97125 L 760.89422,617.9165 C 763.03236,622.10759 763.48404,624.94143 762.01393,624.94143 C 761.52277,624.94143 760.85095,624.23791 760.52099,623.37805 C 760.19103,622.51819 759.42511,622.12119 758.81894,622.49582 C 758.21276,622.87045 756.42781,622.22398 754.85236,621.0592 C 751.43889,618.53551 750.90694,618.45645 750.90694,620.47281 C 750.90694,621.31508 751.69444,622.26876 752.65694,622.59212 C 757.11554,624.08999 763.90694,627.37055 763.90694,628.02638 C 763.90694,628.42703 760.86944,627.45898 757.15694,625.87518 C 753.44444,624.29138 748.83194,622.97647 746.90694,622.95317 C 742.53804,622.90029 739.93976,621.52655 742.41334,620.57735 C 743.33408,620.22402 744.49682,620.18796 744.99718,620.4972 C 745.49755,620.80645 745.90694,620.59874 745.90694,620.03563 C 745.90694,619.47252 744.96951,618.5101 743.82375,617.89691 C 742.18479,617.01976 741.36834,617.11888 739.99501,618.36173 C 737.67116,620.46478 736.90694,620.353 736.90694,617.91005 C 736.90694,614.83913 734.1838,614.37796 731.997,617.07854 C 729.72595,619.88316 730.25073,621.27141 733.2411,620.36971 C 734.72253,619.92301 735.09094,620.04384 734.40694,620.75209 C 733.85694,621.32158 732.28194,621.99301 730.90694,622.24414 C 729.53194,622.49527 730.65694,622.54138 733.40694,622.34662 C 736.86499,622.1017 737.94435,622.28829 736.90694,622.95165 C 736.08194,623.47919 732.65271,623.9177 729.28642,623.92612 C 723.46767,623.94068 722.97463,624.1386 719.28642,627.94054 C 717.15271,630.14005 714.60361,631.94005 713.62176,631.94054 C 712.63991,631.94103 710.73651,632.66222 709.39199,633.54318 C 708.04747,634.42414 705.14315,635.55032 702.93794,636.0458 C 700.73274,636.54128 696.78613,638.25866 694.16771,639.8622 C 691.54929,641.46574 687.83194,643.03149 685.90694,643.34164 C 678.14788,644.59177 676.18075,644.67417 674.64279,643.81348 z " },
			{ idEstado: 21, nombre: "puebla", estado: "Puebla", clave: "path7385", d: "M 608.3077,562.51895 C 607.26228,561.79187 604.94444,560.87873 603.15694,560.48975 C 601.36944,560.10077 599.90694,559.41668 599.90694,558.96954 C 599.90694,558.5224 597.66895,556.44984 594.93362,554.36386 L 589.96031,550.57116 L 594.06269,548.24096 C 596.92233,546.61666 598.53251,546.21572 599.37801,546.91742 C 600.99167,548.25664 601.90694,547.19163 601.90694,543.97476 C 601.90694,542.52643 602.45817,540.7902 603.1319,540.11647 C 604.0898,539.15857 604.09426,538.47103 603.15238,536.96283 C 602.39253,535.74612 602.30949,534.81068 602.92742,534.42877 C 603.47443,534.0907 603.90694,528.77158 603.90694,522.38241 C 603.90694,511.88635 604.06089,510.94143 605.77094,510.94143 C 606.82225,510.94143 608.86453,512.71574 610.45516,515.01102 C 612.00629,517.24929 614.56498,519.74747 616.14114,520.56254 C 619.05569,522.06971 622.90694,521.63258 622.90694,519.79459 C 622.90694,519.19565 624.10316,519.04525 625.83741,519.42616 C 628.19686,519.94438 628.99296,519.64922 629.92303,517.91137 C 630.67974,516.49744 631.72581,515.92231 632.95579,516.24395 C 633.98848,516.51401 635.35966,516.10086 636.00287,515.32584 C 636.93165,514.20673 636.61991,513.40476 634.48811,511.42908 C 633.01179,510.06087 631.15208,508.94143 630.35542,508.94143 C 629.55876,508.94143 628.90694,508.28877 628.90694,507.49108 C 628.90694,506.69338 626.68091,505.01951 623.9602,503.77136 C 618.36961,501.20663 617.05166,498.51494 619.26528,494.1828 C 620.03571,492.67505 620.99677,489.90722 621.40096,488.03207 C 622.02332,485.14476 621.7738,484.34426 619.7714,482.8043 C 618.45644,481.79302 617.99648,480.97603 618.73513,480.96367 C 620.56864,480.93297 627.86912,472.9371 628.07361,470.73567 C 628.16527,469.74884 628.27777,468.15393 628.32361,467.19143 C 628.43802,464.78868 631.74871,461.66673 633.47843,462.33049 C 634.25769,462.62952 634.7854,463.87591 634.65111,465.10024 C 634.47989,466.66124 635.36544,467.94101 637.61521,469.38386 C 641.41572,471.82125 641.32443,473.25386 637.32444,473.94696 C 634.57873,474.42272 634.38897,474.76636 634.10169,479.78313 C 633.82755,484.57062 634.08228,485.35962 636.60169,487.52639 C 640.15572,490.58296 641.29148,490.55732 643.61468,487.36808 L 645.48924,484.79472 L 648.94809,486.61808 C 650.85046,487.62092 652.56853,488.52802 652.76603,488.63385 C 652.96353,488.73969 652.25382,490.08969 651.1889,491.63385 C 648.7306,495.19846 644.93033,506.65851 645.11792,509.94143 C 645.33053,513.66216 646.616,514.80098 652.55062,516.52622 C 658.57502,518.27756 658.6962,519.63168 652.91129,520.55673 C 649.17732,521.15381 647.2661,523.09552 648.47964,525.05906 C 648.7982,525.5745 648.08963,527.99833 646.90504,530.44535 C 644.20881,536.01501 644.58826,538.13178 648.48313,539.24882 C 650.71453,539.88877 651.79815,540.98388 652.47627,543.28427 C 653.44842,546.58215 654.75082,546.99115 659.99898,545.64666 C 662.11752,545.10392 662.84364,545.45463 663.97387,547.56649 C 665.27118,549.99053 665.15626,550.32947 662.11605,553.0459 C 658.75156,556.05207 657.17242,556.35349 646.76884,555.97527 C 643.47192,555.85541 640.84355,556.23499 640.43911,556.88937 C 639.46622,558.46355 635.74399,553.52965 636.47241,551.63141 C 638.14951,547.26096 630.75261,549.4054 628.38975,553.97467 C 626.92725,556.80284 626.92174,557.31507 628.33074,559.46548 C 630.21533,562.34172 628.86632,563.531 625.67761,561.80446 C 622.47202,560.06878 615.71791,560.14682 613.82361,561.94143 C 611.6886,563.96407 610.55602,564.08265 608.3077,562.51895 z " },
			{ idEstado: 22, nombre: "queretaro", estado: "Querétaro", clave: "path7359", d: "M 553.11609,487.75058 C 552.45106,487.08555 551.90126,486.06893 551.89432,485.49143 C 551.88738,484.91393 549.44905,482.30811 546.47582,479.70073 C 542.81842,476.49336 540.8445,473.90583 540.37296,471.70073 C 539.98963,469.90811 539.32164,467.99143 538.88854,467.44143 C 537.79807,466.05662 537.46752,461.76674 538.30372,459.85175 C 538.73935,458.85411 540.3749,458.2103 542.6953,458.12307 C 544.72889,458.04662 546.54007,457.54205 546.72015,457.00181 C 546.90023,456.46157 548.36592,456.28323 549.97725,456.60549 C 552.43658,457.09736 552.90694,456.86992 552.90694,455.18887 C 552.90694,454.08747 553.58194,452.62612 554.40694,451.94143 C 555.23194,451.25674 555.90694,449.8035 555.90694,448.712 C 555.90694,447.21417 556.33613,446.90414 557.65694,447.44789 C 561.6619,449.09666 562.77186,449.00279 564.78182,446.84536 C 566.89046,444.582 566.89066,444.57492 564.90051,442.72081 C 562.58021,440.55913 562.62841,440.80421 563.87745,437.51899 L 564.84797,434.96634 L 569.52639,437.45389 C 575.12929,440.43298 576.90694,440.57709 576.90694,438.05221 C 576.90694,435.46351 580.30558,431.45173 581.74499,432.34134 C 582.38406,432.73631 582.90694,433.74027 582.90694,434.57238 C 582.90694,435.40448 584.05273,438.04043 585.45314,440.43005 L 587.99934,444.77481 L 585.20555,447.36536 C 583.66897,448.79016 582.26068,449.50265 582.07602,448.94867 C 581.26306,446.5098 578.24111,448.129 576.95711,451.69143 C 576.21372,453.75393 574.55497,457.10945 573.27099,459.14815 C 571.98702,461.18685 571.17545,463.47757 571.4675,464.23865 C 571.8198,465.15672 570.30035,466.42866 566.95272,468.01801 C 562.1988,470.27503 561.90694,470.63312 561.90694,474.2089 C 561.90694,476.66001 561.37568,478.20806 560.40694,478.5798 C 559.58194,478.89639 558.90694,480.23226 558.90694,481.54842 C 558.90694,482.86457 558.56117,483.94143 558.13856,483.94143 C 557.71595,483.94143 556.68507,485.07055 555.84771,486.45058 C 554.65717,488.4127 554.06163,488.69612 553.11609,487.75058 z " },
			{ idEstado: 23, nombre: "quintanaroo", estado: "Quintana Roo", clave: "path7381", d: "M 919.47313,551.69143 C 919.16714,549.35393 918.20878,538.44143 917.34345,527.44143 C 916.47812,516.44143 915.12591,503.28377 914.33853,498.2022 C 913.55116,493.12062 912.90694,488.74607 912.90694,488.48098 C 912.90694,488.21589 916.23999,485.62355 920.31371,482.72022 C 930.39238,475.53718 963.9122,450.29792 966.4853,447.95465 C 969.8699,444.87232 972.9574,432.54741 972.0377,425.79033 L 971.2685,420.13922 L 975.0304,419.53769 C 977.0994,419.20684 979.0696,418.48734 979.4086,417.93879 C 980.6745,415.89053 978.8341,415.22721 974.1797,416.05412 C 970.8612,416.64369 967.8834,416.48638 964.4069,415.53786 L 959.4069,414.17367 L 965.9069,414.26514 C 969.4819,414.31545 974.9565,413.72826 978.0726,412.96028 C 983.6356,411.58924 983.8117,411.61264 987.8011,414.2527 C 990.0357,415.7315 992.5129,416.94143 993.3059,416.94143 C 994.3478,416.94143 994.9481,418.81202 995.4698,423.68414 C 996.605,434.28408 994.262,440.42375 985.5908,449.57165 C 983.5733,451.70003 981.644,454.90393 981.3035,456.69143 C 980.963,458.47893 980.3193,459.94143 979.8732,459.94143 C 978.185,459.94143 976.8104,467.02211 977.3131,473.12848 C 977.5989,476.6006 977.5915,478.65393 977.2965,477.69143 C 976.3759,474.68702 975.0241,475.75713 973.5069,480.69143 C 972.7035,483.30393 972.0149,484.65393 971.9766,483.69143 C 971.9383,482.72893 971.4569,481.94143 970.9069,481.94143 C 969.4436,481.94143 969.6865,484.51356 971.2743,485.83132 C 972.316,486.69592 972.9494,486.59519 973.9345,485.40825 C 974.6456,484.55144 975.8303,484.08177 976.5672,484.36454 C 977.3322,484.65811 977.9069,484.2129 977.9069,483.32671 C 977.9069,482.47314 978.4694,481.96403 979.1569,482.19535 C 982.0881,483.18157 977.7528,493.30529 974.6811,492.64718 C 973.092,492.3067 971.5374,495.53728 972.3192,497.55551 C 973.0103,499.33948 973.1195,499.34683 974.3386,497.69143 C 975.0475,496.72893 976.5903,495.94143 977.7672,495.94143 C 980.4175,495.94143 980.4393,496.40909 977.9069,498.94143 C 976.5623,500.28609 975.8874,502.33404 975.8473,505.19143 C 975.8145,507.52893 975.3792,511.69143 974.8799,514.44143 C 974.3806,517.19143 973.4606,523.04143 972.8354,527.44143 C 971.8082,534.6709 969.9069,539.99459 969.9069,535.64143 C 969.9069,534.70643 969.4569,533.94143 968.9069,533.94143 C 968.3569,533.94143 967.9796,533.60393 968.0684,533.19143 C 968.4112,531.59945 965.8929,526.94067 964.6817,526.92612 C 961.4316,526.88708 960.941,525.47871 962.441,520.49453 C 964.1149,514.93269 964.3377,510.94143 962.9743,510.94143 C 962.4614,510.94143 961.7634,511.81841 961.4232,512.89028 C 961.083,513.96214 959.904,515.12499 958.8031,515.47438 C 957.3373,515.93961 957.0793,516.44417 957.839,517.3596 C 959.4612,519.31421 956.22241,526.47223 953.04892,527.94615 C 951.59583,528.62103 949.75872,529.49071 948.96646,529.87876 C 948.17419,530.26682 947.09753,531.90217 946.57387,533.51287 C 946.05022,535.12358 944.72822,537.71695 943.6361,539.27592 C 942.54398,540.83488 940.90008,544.20768 939.98299,546.77102 C 938.14289,551.91421 935.84908,553.10403 932.90694,550.44143 C 930.07345,547.87716 927.46166,548.8917 927.09358,552.69962 C 926.80808,555.65319 926.48011,555.94143 923.40485,555.94143 C 920.18777,555.94143 920.0034,555.74213 919.47313,551.69143 z " },
			{ idEstado: 24, nombre: "san_luis_potosi", estado: "San Luis Potosí", clave: "path7347", d: "M 593.46581,443.40963 C 592.39819,442.60212 590.68579,441.94143 589.66049,441.94143 C 588.37352,441.94143 587.01933,440.24433 585.28706,436.46055 C 583.90699,433.44607 582.32357,430.69892 581.76836,430.35578 C 580.37266,429.49319 575.90694,433.88162 575.90694,436.11574 C 575.90694,438.69437 572.93749,438.41507 568.93169,435.45969 C 565.45376,432.89375 562.90694,433.38901 562.90694,436.63126 C 562.90694,438.21476 560.66251,437.82311 555.5033,435.33932 C 553.9063,434.57048 551.9938,433.94143 551.2533,433.94143 C 550.5128,433.94143 549.90694,433.26643 549.90694,432.44143 C 549.90694,431.33396 548.74834,430.94143 545.47952,430.94143 C 541.94801,430.94143 540.65417,431.44731 539.0856,433.44143 C 536.3085,436.97194 533.78875,436.56315 528.86316,431.78303 C 525.23321,428.26029 523.89656,427.60162 520.11884,427.47406 C 517.17073,427.37451 515.22909,426.7349 514.38952,425.58672 C 513.47993,424.34278 512.38001,424.03558 510.51325,424.5041 C 507.5897,425.23787 507.24108,424.33709 509.30705,421.3875 C 511.40731,418.38896 512.44214,408.29123 510.84624,406.36829 C 509.77673,405.07962 509.85408,404.30092 511.29367,401.8639 C 513.26404,398.52833 512.76994,395.6359 509.64665,392.22225 C 507.43734,389.80756 505.90694,390.04907 505.90694,392.81239 C 505.90694,394.93321 500.28298,399.3589 499.40113,397.93203 C 498.41721,396.34001 496.91075,396.79069 496.86274,398.69143 C 496.83592,399.75371 496.06909,399.02334 494.91144,396.83292 C 493.84998,394.82448 491.6963,392.68261 490.05442,392.00252 C 485.02339,389.9186 482.66771,386.55477 482.15615,380.72406 C 481.88068,377.58428 481.05587,374.93857 480.12281,374.20176 C 479.25938,373.51995 478.74509,372.82125 478.97994,372.6491 C 482.0035,370.43282 485.27146,368.93854 487.12176,368.92625 C 493.92144,368.88108 498.13553,366.34849 506.94405,357.01344 C 515.50897,347.93655 515.67893,347.66039 515.14591,343.6864 C 514.6425,339.9332 514.76057,339.66989 516.7175,340.18164 C 519.15304,340.81855 520.45913,339.57383 521.43495,335.68584 C 521.8138,334.17641 522.52497,332.94143 523.01535,332.94143 C 523.50572,332.94143 524.87527,331.9731 526.05878,330.78959 L 528.21061,328.63776 L 531.03188,332.03959 C 533.46347,334.97158 533.85685,336.31787 533.88004,341.78706 C 533.90067,346.65373 534.40959,348.8386 536.06362,351.16147 C 537.93583,353.79074 538.20658,355.4599 538.11623,363.81584 C 537.98493,375.95977 538.27348,376.94143 541.97433,376.94143 C 543.58726,376.94143 544.90694,376.44265 544.90694,375.83302 C 544.90694,374.51554 550.22873,375.59421 550.74027,377.01537 C 550.92361,377.5247 551.774,377.94143 552.63003,377.94143 C 554.36823,377.94143 556.82629,380.7332 556.87514,382.76286 C 556.89263,383.48964 556.23194,384.75929 555.40694,385.58429 C 553.58196,387.40927 553.45988,390.36223 555.15694,391.63129 C 555.84444,392.1454 559.92541,393.63944 564.22577,394.95138 C 570.6996,396.92639 572.19068,397.10036 572.89381,395.96268 C 574.19808,393.85231 577.92352,396.76346 579.29003,400.96084 C 580.27206,403.97727 580.95035,404.49224 584.90694,405.22525 C 587.38194,405.68378 592.72516,405.83799 596.78076,405.56794 C 603.46622,405.12277 604.51642,405.31639 608.03076,407.64207 C 612.26388,410.44341 612.73586,411.40937 610.32378,412.33497 C 609.45305,412.6691 608.94224,413.50475 609.18865,414.19196 C 609.84461,416.0213 608.0764,418.94143 606.31274,418.94143 C 605.33703,418.94143 605.0744,419.39106 605.58261,420.19143 C 606.01915,420.87893 606.40533,421.66643 606.44078,421.94143 C 606.47624,422.21643 606.86365,423.49393 607.3017,424.78032 C 607.91702,426.58733 607.62159,427.453 606.00254,428.58702 C 603.52851,430.3199 603.33239,432.67613 605.41472,435.64907 C 606.80269,437.63068 606.75816,437.85388 604.85427,438.45815 C 603.16583,438.99404 602.90356,439.64954 603.42595,442.028 C 604.05655,444.89908 604.00292,444.94097 599.7364,444.90963 C 597.35519,444.89213 594.53343,444.21713 593.46581,443.40963 z " },
			{ idEstado: 25, nombre: "sinaloa", estado: "Sinaloa", clave: "path7325", d: "M 368.90694,395.07629 C 368.90694,392.93161 365.27349,387.94143 363.71192,387.94143 C 363.07284,387.94143 363.15699,388.5378 363.927,389.4656 C 364.62272,390.30389 364.95084,391.23087 364.65616,391.52555 C 363.8278,392.3539 357.93238,385.71639 357.284,383.2254 C 356.73349,381.11046 349.90694,373.03821 349.90694,374.50219 C 349.90694,374.88894 350.89055,376.83348 352.09273,378.8234 L 354.27852,382.44143 L 351.99035,380.44379 C 350.73186,379.34509 349.00728,377.09509 348.15796,375.44379 C 347.30864,373.79249 344.20471,369.69152 341.26034,366.33053 C 338.31597,362.96953 335.90694,359.62517 335.90694,358.89862 C 335.90694,356.90998 328.56701,344.97897 327.33125,344.9589 C 326.73963,344.94929 325.17521,343.79145 323.85478,342.38591 C 321.88227,340.28626 321.78913,339.95899 323.33269,340.55131 C 325.00314,341.19232 324.95859,340.93031 322.93074,338.1875 C 321.67639,336.49089 320.10498,335.31194 319.43873,335.5676 C 318.77248,335.82327 317.65017,335.33697 316.94471,334.48694 C 316.23925,333.63691 314.84981,332.94143 313.85708,332.94143 C 312.86434,332.94143 311.12906,331.70393 310.0009,330.19143 C 308.87274,328.67893 306.95151,326.4425 305.73149,325.22159 C 302.73791,322.22579 304.11782,321.17555 307.5256,323.85611 C 309.43822,325.36057 310.56418,325.68419 311.30578,324.94259 C 313.08848,323.15989 310.54208,320.39621 307.43611,320.74272 C 305.95076,320.90843 304.15609,320.56317 303.44795,319.97547 C 302.73982,319.38777 301.51251,319.15556 300.72059,319.45944 C 299.92868,319.76333 298.43714,319.07979 297.40606,317.94046 C 295.73812,316.0974 295.67346,315.476 296.81981,312.30584 C 297.75732,309.71321 297.80846,308.44295 297.00759,307.64208 C 296.20672,306.84121 295.90694,307.27682 295.90694,309.24143 C 295.90694,310.72643 295.45694,311.94143 294.90694,311.94143 C 294.35694,311.94143 293.90694,311.23429 293.90694,310.37 C 293.90694,309.50572 293.2278,308.11944 292.39775,307.28938 C 290.27571,305.16735 291.47205,303.82559 294.46988,304.96536 C 296.75265,305.83327 296.87274,305.74604 295.8993,303.92715 C 295.3148,302.835 294.48345,301.94143 294.05186,301.94143 C 293.62028,301.94143 291.77064,300.60534 289.94155,298.97233 C 288.11247,297.33933 286.26746,296.21862 285.84152,296.48186 C 285.41558,296.7451 284.22646,295.8918 283.19903,294.58564 C 282.1716,293.27947 280.32904,291.89279 279.10444,291.50411 C 277.87984,291.11544 277.09387,290.44799 277.35784,290.02088 C 277.62181,289.59377 276.95334,288.29498 275.87236,287.13469 C 274.79138,285.97439 273.90694,284.33124 273.90694,283.48324 C 273.90694,281.46502 272.01556,281.49479 271.23639,283.52528 C 270.74704,284.8005 270.46386,284.84921 269.78309,283.77528 C 269.13329,282.75019 268.93402,282.84156 268.92225,284.16999 C 268.90923,285.6397 268.5408,285.73173 266.46195,284.78454 C 263.24877,283.32052 262.51715,281.19992 264.95797,280.42523 C 267.02993,279.76762 267.50279,278.42772 265.99235,277.49422 C 265.48933,277.18333 264.89109,277.48898 264.66294,278.17344 C 264.33428,279.1594 263.65842,279.14922 261.40924,278.12443 C 258.87167,276.96824 258.70735,276.99602 259.8611,278.38619 C 262.20126,281.20592 259.09838,280.09124 255.67272,276.88155 C 252.55672,273.96201 252.5216,273.84978 254.90694,274.43441 L 257.40694,275.04714 L 255.03918,272.98864 C 253.09507,271.29845 252.89333,270.66276 253.91163,269.43578 C 254.89044,268.25639 254.89387,267.63061 253.92793,266.46673 C 252.94473,265.28204 253.12715,264.11799 254.85552,260.54765 C 256.03884,258.10324 257.7244,255.50789 258.60122,254.78019 C 260.00737,253.61319 260.11204,253.7511 259.4885,255.94927 L 258.78157,258.44143 L 260.70157,256.05486 L 262.62157,253.66829 L 263.28331,256.30486 C 263.64726,257.75497 264.35506,258.94143 264.85619,258.94143 C 265.38738,258.94143 265.4184,257.72478 264.93058,256.02385 C 264.12506,253.21517 264.36787,252.93268 271.43563,248.45593 C 279.14452,243.57308 286.32364,236.60581 287.88931,232.4878 C 288.79,230.1188 288.90547,230.09399 291.95307,231.61433 C 294.47279,232.87133 295.59351,232.94964 297.6505,232.01241 C 299.05888,231.37071 300.52356,231.20472 300.90535,231.64356 C 301.85548,232.73564 305.69044,248.37241 306.41522,254.10966 C 307.13847,259.8347 308.12049,260.70214 314.99044,261.6844 C 320.04375,262.40692 320.42962,262.65784 320.74522,265.42665 C 320.93127,267.05895 322.61877,270.09382 324.49522,272.17083 C 328.23706,276.3126 328.42618,277.57687 326.89145,288.18967 C 326.11948,293.52787 326.22506,295.82632 327.3967,299.18967 C 328.21132,301.52814 328.88438,304.08944 328.89239,304.88145 C 328.90039,305.67347 330.64872,307.92347 332.77756,309.88145 C 335.08601,312.00464 338.11843,316.5693 340.29106,321.19143 C 344.13594,329.37117 344.67339,329.72919 350.56924,328.03828 C 353.30637,327.25328 354.04183,327.48222 356.19119,329.78828 C 358.82608,332.61529 362.16333,339.06998 361.75549,340.55039 C 361.2331,342.44662 363.16394,351.47027 364.50035,353.37826 C 365.27398,354.48276 365.90694,356.60976 365.90694,358.10492 C 365.90694,359.60008 366.3655,361.1068 366.92596,361.45318 C 367.48641,361.79956 369.06899,364.30112 370.4428,367.0122 C 372.18994,370.46002 373.54607,371.94143 374.95517,371.94143 C 377.34621,371.94143 378.64606,374.60231 377.03972,376.20865 C 376.41669,376.83168 375.90694,378.2763 375.90694,379.41892 C 375.90694,380.56155 375.17811,382.53697 374.28732,383.80875 C 372.69336,386.08445 372.74933,391.05887 374.4154,395.19143 C 374.99697,396.63398 374.57507,396.94143 372.01393,396.94143 C 369.64849,396.94143 368.90694,396.49627 368.90694,395.07629 z " },
			{ idEstado: 26, nombre: "sonora", estado: "Sonora", clave: "path7289", d: "M 258.47439,247.14453 C 259.07237,242.63674 258.93052,242.08369 257.02093,241.47761 C 254.11439,240.55511 252.34006,237.20153 254.52705,236.76405 C 255.90417,236.48857 255.81835,236.07617 253.93967,233.94143 C 252.3952,232.18646 251.90678,231.96985 252.30073,233.21457 C 252.79106,234.76381 252.58066,234.84014 250.63443,233.81906 C 248.42029,232.65741 248.41835,232.66327 250.31193,234.79592 C 251.35967,235.97595 251.72373,236.94143 251.12094,236.94143 C 250.51816,236.94143 249.7279,236.46075 249.36481,235.87326 C 249.00171,235.28576 248.14685,235.01913 247.46511,235.28074 C 246.78336,235.54235 245.72211,235.44523 245.10676,235.06493 C 243.50097,234.07249 238.73839,222.94143 239.91955,222.94143 C 240.46261,222.94143 240.90694,222.49272 240.90694,221.9443 C 240.90694,220.66671 234.57163,218.00895 233.90457,219.0067 C 233.62826,219.41998 230.70326,218.46771 227.40457,216.89055 C 224.10587,215.31338 221.79954,214.00462 222.27938,213.9822 C 222.75923,213.95978 222.58372,213.25689 221.88935,212.42024 C 221.19499,211.58359 220.47666,209.22501 220.29307,207.17896 C 220.10947,205.13291 219.49748,203.30494 218.9331,203.11682 C 217.67475,202.69737 217.55606,198.94143 218.80115,198.94143 C 219.29297,198.94143 219.67041,197.92893 219.6399,196.69143 C 219.6094,195.45393 219.8699,193.76643 220.2188,192.94143 C 220.62165,191.98888 219.88641,190.73731 218.20427,189.51215 C 215.90963,187.84089 215.64172,187.8079 216.20105,189.26548 C 216.80064,190.828 216.67046,190.83259 214.37683,189.32974 C 212.86548,188.33947 211.90694,186.76292 211.90694,185.2674 C 211.90694,183.78872 211.48504,183.08415 210.83877,183.48356 C 210.25127,183.84666 209.98464,184.70152 210.24625,185.38326 C 210.50786,186.06501 210.30439,187.25699 209.7941,188.03211 C 209.03631,189.18321 208.50358,189.00887 206.88662,187.08065 C 205.7978,185.78221 204.90694,184.07888 204.90694,183.29546 C 204.90694,182.1958 204.46481,182.10768 202.96763,182.90895 C 200.66558,184.14097 200.55477,183.98492 198.81425,177.06047 C 197.57482,172.1295 197.10401,171.52618 193.18433,169.84601 C 190.69042,168.777 188.90694,167.34443 188.90694,166.41025 C 188.90694,165.529 187.78194,163.33304 186.40694,161.53032 C 183.53808,157.76905 183.23037,155.94143 185.46596,155.94143 C 186.32342,155.94143 186.7279,155.46075 186.36481,154.87326 C 186.00171,154.28576 185.10075,154.03682 184.36266,154.32005 C 182.98994,154.84681 177.0329,148.84972 176.75042,146.65663 C 176.66433,145.98827 176.50685,144.23513 176.40046,142.76077 C 176.07041,138.18695 173.86234,134.07642 171.55912,133.74816 C 169.7205,133.48612 169.40694,132.78581 169.40694,128.94143 C 169.40694,125.41147 168.66981,123.4175 165.98742,119.69143 C 164.10668,117.07893 162.23663,114.94143 161.83175,114.94143 C 161.42686,114.94143 161.05468,111.15723 161.00468,106.5321 C 160.90186,97.021912 160.48059,95.324709 158.06611,94.693311 C 156.99879,94.4142 155.88246,92.370639 155.07388,89.215727 C 154.36451,86.44792 152.23675,81.781594 150.34553,78.846115 C 147.9067,75.06066 146.90694,72.358984 146.90694,69.553898 C 146.90694,67.208709 146.20311,64.821194 145.17775,63.688187 C 143.53884,61.877206 143.53884,61.726939 145.17775,60.809756 C 147.44922,59.538579 147.35922,58.330343 144.79339,55.649622 L 142.67984,53.441435 L 143.36078,55.691435 C 144.12298,58.209944 142.46185,58.829886 141.52099,56.378053 C 141.19103,55.518193 140.55868,55.03864 140.11575,55.312381 C 139.67283,55.586122 136.18215,55.052143 132.35869,54.125763 C 125.84389,52.547303 125.42565,52.280039 125.70462,49.873676 C 125.92998,47.929803 125.37648,47.020772 123.42656,46.132328 C 122.0099,45.486854 120.57582,44.242114 120.23971,43.366241 C 119.85618,42.366778 119.3837,42.170027 118.97093,42.837896 C 118.12434,44.2077 110.90694,39.410472 110.90694,37.477964 C 110.90694,36.712711 109.78725,35.205848 108.41874,34.129379 C 106.22945,32.407281 106.05423,31.817366 106.96014,29.218683 C 107.98374,26.282377 107.75367,20.905082 106.47308,17.834756 C 106.05878,16.841429 106.68175,15.238924 108.10495,13.636987 L 110.40694,11.045897 L 126.90694,19.625106 C 135.98194,24.343671 149.93194,31.689245 157.90694,35.948605 C 220.09417,69.162119 219.01379,68.633634 225.90694,69.211589 C 253.48487,71.523853 281.95617,74.097716 284.66688,74.523607 C 287.50165,74.96899 287.79474,75.282563 286.91417,76.927924 C 286.35722,77.968598 286.2855,79.057362 286.75479,79.3474 C 287.22408,79.637438 288.17632,84.727248 288.87088,90.658089 C 289.56544,96.588932 290.81704,103.46643 291.65222,105.94143 C 292.85616,109.50925 293.04154,113.23797 292.5471,123.94143 C 291.79913,140.13316 291.24999,143.06928 289.03724,142.70778 C 287.81206,142.50762 287.43784,143.18692 287.53131,145.44143 C 287.63954,148.05225 287.73385,160.72746 287.73963,173.44143 C 287.74063,175.64143 287.89118,178.34143 288.07419,179.44143 C 288.38495,181.30923 287.94046,181.41932 281.34951,181.10693 C 272.45081,180.68516 271.38016,181.62862 272.92661,188.52919 C 273.51973,191.17583 275.47038,195.83879 277.26138,198.89134 C 283.05729,208.76976 284.43296,213.4277 282.81295,217.68865 C 281.82575,220.28519 284.01478,226.94143 285.85591,226.94143 C 286.43398,226.94143 286.90694,228.22807 286.90694,229.80064 C 286.90694,233.67609 280.41193,240.90743 271.88634,246.52412 C 268.19856,248.95364 264.89456,250.94143 264.54411,250.94143 C 264.19367,250.94143 263.90694,249.77893 263.90694,248.3581 C 263.90694,245.16991 261.69578,245.59985 260.90694,248.94143 C 260.6016,250.23488 259.78027,251.48365 259.08175,251.71649 C 258.1116,252.03988 257.96819,250.96038 258.47439,247.14453 z " },
			{ idEstado: 27, nombre: "tabasco", estado: "Tabasco", clave: "path7389", d: "M 851.57361,579.27476 C 851.20694,578.9081 850.90694,577.87609 850.90694,576.98142 C 850.90694,575.98167 849.26897,574.74708 846.65694,573.77806 C 843.25443,572.51578 842.45677,571.76349 842.65683,570.00546 C 842.96093,567.33327 841.282,563.95633 839.62176,563.90079 C 838.95361,563.87844 836.84894,562.52844 834.94471,560.90079 C 831.20871,557.70741 827.50423,557.17368 824.55974,559.40455 C 823.54378,560.17428 822.03748,560.54502 821.2124,560.2284 C 819.6636,559.63407 816.84198,562.4528 812.49044,568.94143 C 809.22731,573.80712 806.35615,576.94143 805.16209,576.94143 C 804.60645,576.94143 803.59163,576.26643 802.90694,575.44143 C 802.22225,574.61643 800.61871,573.94143 799.34351,573.94143 C 796.39315,573.94143 795.94669,573.15558 795.23813,566.71525 C 794.54827,560.44482 791.58683,556.94143 786.97626,556.94143 C 784.60479,556.94143 783.61064,557.61374 782.33532,560.07993 C 781.39302,561.90214 780.94171,564.36529 781.25925,565.95296 C 781.66577,567.98556 781.20585,569.25144 779.46754,570.8845 C 778.1813,572.09286 776.81684,574.5125 776.43541,576.26147 L 775.7419,579.44143 L 774.72086,576.94143 C 772.60932,571.77133 771.02331,569.40785 768.93386,568.31759 C 765.19862,566.36856 760.14402,560.05535 759.61978,556.68427 C 759.34241,554.90071 758.8103,552.50247 758.43731,551.35486 C 757.91951,549.76168 758.41481,548.83868 760.53192,547.45149 C 762.41642,546.21673 763.42786,546.00419 763.68915,546.78807 C 764.23744,548.43292 765.27417,548.22482 767.90694,545.94143 C 769.17525,544.84143 771.01755,543.94143 772.00093,543.94143 C 772.98432,543.94143 774.10758,543.4258 774.49708,542.79559 C 775.18501,541.68249 773.42538,541.88447 768.24984,543.51267 C 766.58286,544.0371 766.59118,543.97541 768.33707,542.86644 C 770.41776,541.5448 782.81821,538.9348 786.90694,538.95792 C 788.69888,538.96805 789.02086,539.21666 788.04379,539.83569 C 786.90034,540.56013 786.8989,540.77208 788.03486,541.15074 C 788.77968,541.39901 789.97585,541.01538 790.69301,540.29821 C 791.41018,539.58105 793.66419,538.53845 795.70194,537.98131 C 797.73969,537.42418 800.7765,535.72479 802.4504,534.20489 C 805.29706,531.62012 809.30717,528.94143 810.33001,528.94143 C 810.57763,528.94143 810.92123,530.40393 811.09358,532.19143 C 811.38409,535.20445 811.6986,535.46338 815.40694,535.74245 C 820.26915,536.10835 821.90203,538.02313 821.92225,543.38256 C 821.9414,548.45829 822.42396,549.17446 827.58909,551.79281 C 829.88927,552.95883 832.05333,554.36928 832.39811,554.92714 C 833.15482,556.15153 839.87216,556.24979 841.74313,555.06383 C 842.47803,554.598 842.92803,553.14239 842.74313,551.82915 C 842.46878,549.88062 842.89879,549.38458 845.08095,549.13234 C 846.55166,548.96234 849.57123,549.74984 851.79111,550.88234 C 854.011,552.01484 857.37205,552.94143 859.26011,552.94143 C 861.39908,552.94143 862.91135,553.51054 863.27238,554.45136 C 863.59106,555.28182 864.15672,561.35682 864.52941,567.95136 L 865.20702,579.94143 L 858.72365,579.94143 C 855.15779,579.94143 851.94027,579.64143 851.57361,579.27476 z " },
			{ idEstado: 28, nombre: "tamaulipas", estado: "Tamaulipas", clave: "path7329", d:"M 622.46368,405.99054 C 617.99248,402.12074 615.11957,401.06477 613.48801,402.69143 C 613.07427,403.10393 611.31177,403.46708 609.57135,403.49842 C 607.83092,403.52977 602.80694,403.88379 598.40694,404.28514 C 594.00694,404.68649 588.42009,404.6549 585.99171,404.21495 C 582.16953,403.52247 581.42641,402.96929 580.45917,400.09656 C 579.22382,396.42752 575.42109,392.99805 572.54995,392.96367 C 571.24931,392.94809 570.87821,393.42418 571.31129,394.55277 C 571.71456,395.60366 571.49091,395.99622 570.66828,395.6814 C 568.83336,394.97918 558.62333,391.67967 557.15694,391.31503 C 555.72292,390.95844 555.4266,385.94143 556.83955,385.94143 C 557.35249,385.94143 558.05275,385.05738 558.39569,383.97687 C 559.1327,381.65475 555.11988,375.64574 553.29883,376.34454 C 552.51568,376.64507 552.10694,375.59699 552.10694,373.28836 C 552.10694,370.07896 552.31469,369.82695 554.50694,370.37717 C 555.82694,370.70847 556.93151,370.63346 556.96154,370.21048 C 556.99156,369.7875 557.131,367.58052 557.27141,365.30608 C 557.41181,363.03163 558.32717,359.94903 559.30554,358.45584 C 560.91042,356.00648 561.49203,355.80208 565.25223,356.36596 C 568.78989,356.89646 569.71732,356.64703 571.38618,354.7162 C 573.78871,351.93652 573.49128,349.57409 570.1946,345.25193 C 568.25279,342.70608 567.83758,341.31299 568.38894,339.19364 C 569.60427,334.52205 569.2703,331.00042 567.4178,328.95343 C 565.70214,327.05765 565.73227,326.95834 568.32175,325.97382 C 569.79506,325.41367 572.44195,323.60431 574.20372,321.95302 C 575.96549,320.30174 578.17861,318.9486 579.12176,318.94606 C 581.15118,318.94058 582.90694,316.03228 582.90694,312.67615 C 582.90694,310.1318 586.42379,307.5183 589.05135,308.11002 C 590.69528,308.48023 605.53329,297.50812 606.93785,294.88367 C 607.99099,292.91587 607.27818,291.94143 604.78559,291.94143 C 602.74268,291.94143 602.0375,289.04177 601.65285,279.05975 L 601.40694,272.67806 L 597.90694,272.40203 C 595.98194,272.25021 593.90415,272.54002 593.28962,273.04605 C 592.57621,273.63349 591.71857,273.41938 590.91717,272.45376 C 590.22686,271.62198 588.4153,270.94143 586.89148,270.94143 C 584.07811,270.94143 582.90694,269.44774 582.90694,265.85964 C 582.90694,264.66181 582.21405,263.94143 581.06193,263.94143 C 577.92998,263.94143 575.90694,260.67752 575.90694,255.62451 C 575.90694,250.98204 575.89274,250.96279 572.00873,250.34172 C 568.18602,249.73044 568.12792,249.65771 569.00873,246.5865 C 570.25221,242.25073 570.17806,241.94143 567.89512,241.94143 C 566.11635,241.94143 565.95561,241.48925 566.50751,238.03785 C 567.31817,232.96827 564.48071,224.12529 561.16809,221.39745 L 558.68592,219.35347 L 562.76455,216.65436 C 566.2808,214.32741 567.19228,214.11432 569.37506,215.10886 C 571.83225,216.22843 572.43229,217.94438 572.02522,222.68758 C 571.9192,223.92296 572.36838,225.93512 573.0234,227.15904 C 573.67842,228.38296 574.15851,230.86973 574.09026,232.68519 C 574.02201,234.50066 574.85284,237.56469 575.93655,239.49415 C 577.02027,241.42361 577.93857,244.22608 577.97723,245.72185 C 578.03975,248.14116 578.1424,248.22061 578.90694,246.44143 C 579.79527,244.37417 579.9451,244.66848 580.30694,249.19143 C 580.36194,249.87893 581.15881,251.00449 582.07776,251.69267 C 582.99671,252.38086 584.04496,254.29336 584.40721,255.94267 C 584.91334,258.24706 585.61544,258.94143 587.43934,258.94143 C 590.60426,258.94143 595.05628,260.90702 596.90694,263.12142 C 597.7991,264.18893 600.43309,265.16701 603.40694,265.53505 C 606.92931,265.97099 609.00423,266.85518 610.42805,268.527 C 612.14353,270.54129 613.65567,270.98523 620.42805,271.46283 C 631.66692,272.25541 631.3257,272.16364 633.99198,275.11062 C 637.27566,278.73997 640.5562,279.62188 641.35941,277.09119 C 641.94054,275.2602 645.75496,273.45611 646.81142,274.51258 C 648.17874,275.8799 644.5338,290.12129 641.07098,296.94143 C 638.97657,301.06643 636.74124,306.24143 636.10357,308.44143 C 632.71721,320.12459 631.90556,323.57999 631.89163,326.37293 C 631.88321,328.06061 631.4401,330.11643 630.90694,330.94143 C 630.04527,332.27476 629.93929,332.27476 629.95313,330.94143 C 630.01773,324.71457 632.38295,314.00283 635.36136,306.44831 C 637.31143,301.50209 638.90694,296.99784 638.90694,296.43885 C 638.90694,295.87987 637.95985,294.83106 636.8023,294.10815 C 635.61946,293.36946 634.99493,293.27479 635.37639,293.892 C 635.7497,294.49603 635.74074,296.42163 635.35649,298.17113 L 634.65785,301.35203 L 632.8721,299.14673 C 630.64065,296.39101 629.29601,296.34563 628.60119,299.0026 C 628.27131,300.2641 628.61403,301.27553 629.48456,301.60959 C 630.26687,301.90979 630.90694,302.58382 630.90694,303.10744 C 630.90694,303.63105 630.48803,303.80057 629.97604,303.48414 C 629.46404,303.1677 628.76248,303.36615 628.41702,303.92512 C 628.07156,304.48409 628.30122,304.94143 628.92738,304.94143 C 629.67551,304.94143 629.83685,305.98406 629.39794,307.98239 C 628.99146,309.83312 629.20014,311.58979 629.93111,312.47056 C 630.88119,313.61532 630.82684,314.03494 629.67105,314.47845 C 628.57091,314.90062 628.31066,316.32415 628.61769,320.24029 C 629.00484,325.17831 628.94274,325.34025 627.39008,323.44143 C 625.84639,321.55358 625.78188,321.79613 626.2396,327.76688 C 626.67919,333.5012 627.90694,337.74977 627.90694,333.53667 C 627.90694,331.96567 628.05618,331.94781 629.45923,333.35086 C 630.7223,334.61394 630.8165,335.60539 629.96481,338.67229 C 629.38911,340.74532 628.848,344.24143 628.76232,346.44143 L 628.60655,350.44143 L 627.90694,345.94143 C 627.4146,342.77461 627.16283,345.18604 627.05713,354.08096 C 626.96238,362.05511 627.49192,369.80426 628.49178,375.07508 C 629.81976,382.07564 629.8764,384.37313 628.84125,389.251 C 628.13309,392.58798 627.29001,394.56124 626.86573,393.87475 C 626.15773,392.72919 625.93651,393.1806 624.26021,399.19143 C 623.99178,400.15393 624.25249,400.94143 624.83955,400.94143 C 625.42662,400.94143 625.9731,400.15393 626.05396,399.19143 C 626.13482,398.22893 626.50708,400.14143 626.88119,403.44143 C 627.25531,406.74143 627.46705,409.57603 627.35173,409.74054 C 627.23641,409.90505 625.03679,408.21755 622.46368,405.99054 z " },
			{ idEstado: 29, nombre: "tlaxcala", estado: "Tlaxcala", clave: "path7367", d:"M 616.89195,519.45388 C 615.50871,518.72235 612.89979,516.06689 611.09434,513.55285 C 608.70675,510.22819 607.2121,509.04453 605.61256,509.21166 C 604.00631,509.37948 603.32639,508.83482 603.09062,507.19143 C 602.79367,505.12146 603.15818,504.94143 607.64626,504.94143 C 610.32939,504.94143 613.37594,504.31898 614.41636,503.5582 C 615.57462,502.71126 616.90877,502.49399 617.85749,502.9978 C 618.70969,503.45035 620.67464,504.08896 622.22405,504.41692 C 623.92051,504.77601 625.71062,506.19297 626.72405,507.97889 C 627.64964,509.61 628.97965,510.72906 629.67962,510.46567 C 630.80961,510.04048 634.90694,513.1568 634.90694,514.44143 C 634.90694,514.71643 633.78575,514.94143 632.41541,514.94143 C 631.03707,514.94143 629.38541,515.80368 628.71866,516.87131 C 627.77227,518.38671 627.10588,518.58308 625.61583,517.78563 C 624.14977,517.00102 623.22802,517.22647 621.56259,518.77701 C 619.65938,520.54892 619.11242,520.62818 616.89195,519.45388 z " },
			{ idEstado: 30, nombre: "veracruz", estado: "Veracruz de Ignacio de la Llave", clave: "path7391", d: "M 733.90694,584.82376 C 733.90694,583.53283 732.77121,582.36034 730.65694,581.46857 C 728.86944,580.71462 725.83714,578.46796 723.9185,576.47598 C 721.18115,573.634 720.72808,572.67001 721.81421,571.99874 C 723.48016,570.96913 722.5448,567.94143 720.56077,567.94143 C 719.78585,567.94143 718.59163,568.61643 717.90694,569.44143 C 717.22225,570.26643 715.95427,570.94143 715.08921,570.94143 C 714.22415,570.94143 712.30994,572.09727 710.83541,573.50996 C 704.36152,579.71234 695.34107,571.47744 700.51598,564.08922 C 701.89185,562.12489 701.94807,561.15997 700.90394,557.4307 C 699.50642,552.43926 698.73414,551.95546 693.03948,552.50397 C 690.7358,552.72586 688.90694,552.46819 688.90694,551.92172 C 688.90694,551.38256 688.00694,550.94143 686.90694,550.94143 C 685.79583,550.94143 684.90694,550.27476 684.90694,549.44143 C 684.90694,548.61643 684.00694,547.04143 682.90694,545.94143 C 681.80694,544.84143 680.89263,543.37893 680.87514,542.69143 C 680.819,540.48509 678.43944,538.19076 674.50019,536.54484 C 669.28029,534.36383 668.65402,534.50292 669.33755,537.69143 C 669.7367,539.55338 669.24518,541.55266 667.81547,543.88256 L 665.70388,547.32368 L 664.02149,545.0933 C 662.4073,542.95331 662.18989,542.92526 658.65765,544.40112 C 655.18948,545.85022 654.91624,545.82733 653.94156,544.00612 C 653.37252,542.94286 652.90694,541.40408 652.90694,540.58663 C 652.90694,539.74101 651.58464,538.80992 649.83937,538.42659 C 645.83082,537.54616 645.23863,535.68873 647.81357,532.07255 C 648.96492,530.45563 649.90694,527.78236 649.90694,526.13195 C 649.90694,523.4793 650.39994,522.97521 654.15694,521.78632 C 659.87919,519.97554 660.10431,516.88361 654.59721,515.73941 C 649.05715,514.58835 647.21567,513.3368 646.64131,510.33222 C 645.97199,506.83089 650.35689,495.0142 653.63889,491.47471 C 655.69085,489.26177 655.91474,488.56019 654.79524,487.85123 C 654.03168,487.36769 652.90513,486.96516 652.2918,486.95674 C 651.67847,486.94832 650.03095,486.04021 648.63063,484.93873 C 646.05771,482.91486 642.90694,483.14039 642.90694,485.34842 C 642.90694,487.92377 640.76226,488.79675 638.93194,486.96643 C 637.95569,485.99018 636.71177,485.02268 636.16768,484.81643 C 635.56345,484.58738 635.46608,482.68999 635.91751,479.94143 C 636.32402,477.46643 636.71293,475.80957 636.78177,476.25952 C 636.85062,476.70948 638.23661,476.13081 639.86177,474.9736 C 643.26447,472.55066 643.05576,471.11497 638.9611,468.77801 C 636.81554,467.55347 635.96219,466.23426 635.72676,463.77801 C 635.45369,460.92919 635.06696,460.48904 633.08126,460.76711 C 630.27712,461.15979 626.90694,464.32388 626.90694,466.56387 C 626.90694,467.89153 626.63483,467.96049 625.4093,466.94339 C 624.18056,465.92363 623.2791,466.18293 620.38872,468.38753 C 618.45111,469.86542 616.19374,472.10028 615.37234,473.35389 C 614.55095,474.6075 612.74758,476.14864 611.36487,476.77864 C 609.09409,477.81328 608.75453,477.67075 607.85524,475.30545 C 607.06751,473.23357 607.27965,471.97491 608.87121,469.27742 L 610.88279,465.86805 L 608.64486,464.96812 C 607.12158,464.35558 606.92682,464.04796 608.03497,464.00482 C 608.93038,463.96995 610.30302,462.9775 611.08527,461.79937 C 612.26698,460.01962 612.85736,459.84453 614.57576,460.76419 C 617.02654,462.07581 617.90694,461.43032 617.90694,458.32182 C 617.90694,457.06436 618.4231,454.90269 619.05396,453.5181 C 619.93772,451.57846 619.91172,450.65211 618.94066,449.48205 C 618.24747,448.64682 617.28131,448.21005 616.79363,448.51146 C 616.30595,448.81286 615.90694,448.32758 615.90694,447.43306 C 615.90694,446.24298 615.35117,445.98305 613.83528,446.46418 C 611.15017,447.3164 607.94528,444.5108 608.62682,441.90463 C 608.90342,440.84688 608.20298,438.20343 607.07027,436.03028 L 605.0108,432.07911 L 607.03683,429.50344 C 608.52361,427.61329 608.88932,426.1377 608.41087,423.95933 C 607.97623,421.98042 608.2836,420.24177 609.33292,418.74365 C 610.19863,417.50767 610.90694,415.74469 610.90694,414.82591 C 610.90694,413.90713 611.58194,412.89639 612.40694,412.5798 C 614.8105,411.65747 614.16932,410.19183 610.17481,407.47748 C 606.35379,404.88103 606.44896,404.60325 611.05777,404.90043 C 612.51573,404.99444 614.00479,404.59212 614.36679,404.00639 C 615.42035,402.3017 616.40154,402.70374 621.52973,406.94143 C 624.19203,409.14143 626.87277,410.94143 627.48692,410.94143 C 628.64454,410.94143 630.49745,414.86055 634.55201,425.88489 C 635.8554,429.42879 637.80046,433.26364 638.87438,434.40677 C 639.9483,435.54991 641.9887,439.40035 643.40861,442.96331 C 644.93182,446.78547 645.69281,448.00647 645.26473,445.94143 C 644.86569,444.01643 644.59529,440.41643 644.66384,437.94143 C 644.77295,434.00215 644.28257,432.88071 640.72831,428.94143 C 638.49522,426.46643 636.99005,425.34143 637.38348,426.44143 C 637.77691,427.54143 638.34687,429.11643 638.65005,429.94143 C 639.06768,431.07784 638.90555,431.16924 637.98119,430.3185 C 637.31014,429.70089 636.63691,427.67589 636.48514,425.8185 C 636.33336,423.96111 635.01618,420.69113 633.55806,418.55188 C 632.09995,416.41263 630.90694,414.18513 630.90694,413.60188 C 630.90694,412.17458 631.80279,413.27522 636.35768,420.29871 C 638.4469,423.52021 641.62685,427.02365 643.42423,428.08413 C 647.17141,430.29502 648.24938,433.09575 646.67939,436.54151 C 645.29864,439.57192 647.20833,451.14826 649.98859,456.60158 C 651.04368,458.67109 651.90694,460.97351 651.90694,461.71809 C 651.90694,462.46267 654.4813,465.63002 657.62774,468.75665 C 664.43125,475.51733 668.76236,481.0064 672.31671,487.37286 C 673.7539,489.94711 675.89897,493.3642 677.08352,494.9664 C 678.46153,496.83026 679.40426,499.89327 679.70092,503.47061 C 680.10976,508.40066 680.57138,509.37978 683.60511,511.75158 C 685.49741,513.231 687.6845,515.64704 688.46533,517.12056 C 689.24615,518.59408 690.72165,520.06523 691.74422,520.38978 C 692.76678,520.71433 694.11619,522.10526 694.74289,523.48073 C 695.3696,524.8562 697.01289,526.41141 698.39465,526.93676 C 701.36617,528.06653 701.80722,529.36194 698.90694,528.44143 C 697.75963,528.07729 696.90694,528.26173 696.90694,528.87404 C 696.90694,529.46111 697.35694,529.94143 697.90694,529.94143 C 698.45694,529.94143 698.79444,530.49901 698.65694,531.18049 C 698.49424,531.98686 699.38576,532.30865 701.20989,532.10199 C 702.75151,531.92733 704.73719,532.38225 705.62251,533.11293 C 706.98308,534.23584 707.15621,534.2093 706.74123,532.94143 C 706.47121,532.11643 705.27303,531.29763 704.07861,531.12188 C 702.88419,530.94613 701.90694,530.40359 701.90694,529.91624 C 701.90694,529.42889 703.67941,529.65551 705.84577,530.41985 C 708.39889,531.32064 711.75953,531.60572 715.39824,531.23017 C 720.72649,530.68025 721.18248,530.81616 724.36804,533.90373 C 726.21393,535.69284 729.22327,537.46325 731.05545,537.83797 C 733.08684,538.25343 734.83319,539.41489 735.531,540.81454 C 736.16037,542.07693 737.14226,543.57675 737.71298,544.14747 C 738.2837,544.71819 738.48912,545.91781 738.16947,546.81329 C 737.84981,547.70876 737.95712,548.10679 738.40792,547.69779 C 738.85871,547.28879 739.88911,547.89866 740.69768,549.05306 C 742.04323,550.9741 742.77714,551.09486 749.35855,550.47813 L 756.54928,549.80431 L 757.72811,553.73889 C 758.37647,555.90291 758.91439,558.52126 758.9235,559.55745 C 758.93261,560.59364 761.00802,563.24143 763.53552,565.44143 C 770.80785,571.77146 772.02155,573.23703 773.49314,577.46552 C 775.32788,582.7375 775.41372,582.44487 771.32492,584.85732 C 768.04161,586.79452 766.3321,586.96398 750.82492,586.88945 C 734.64531,586.81169 733.90694,586.72153 733.90694,584.82376 z " },
			{ idEstado: 31, nombre: "yucatan", estado: "Yucatán", clave: "path7357", d: "M 900.2186,473.45717 C 889.67015,461.38763 888.31203,460.16985 886.86277,461.4814 C 885.97545,462.28442 883.59739,462.94143 881.5782,462.94143 L 877.90694,462.94143 L 877.90694,456.50045 C 877.90694,452.95791 877.45694,449.78135 876.90694,449.44143 C 874.48206,447.94277 875.96174,443.30494 880.15694,439.25484 C 887.44507,432.21878 901.73254,426.48996 917.03787,424.46676 C 919.71786,424.11249 924.14135,422.34709 927.53787,420.27624 C 930.76586,418.30814 935.43194,416.1563 937.90694,415.49438 C 945.3676,413.49906 963.2512,415.79512 968.1501,419.37727 C 969.1812,420.13125 970.2069,422.82427 970.6885,426.04196 C 971.3601,430.5293 971.0822,432.70841 969.0437,438.94143 L 966.5908,446.44143 L 946.66673,461.44143 C 935.70849,469.69143 923.41681,478.79303 919.35189,481.6672 L 911.96113,486.89296 L 900.2186,473.45717 z " },
			{ idEstado: 32, nombre: "zacatecas", estado: "Zacatecas", clave: "path7349", d:"M 431.65694,448.17847 C 430.69444,447.96744 429.90694,447.4081 429.90694,446.93549 C 429.90694,446.46289 428.94748,445.77169 427.77481,445.39949 C 426.60214,445.0273 426.08693,444.43448 426.6299,444.08211 C 427.17287,443.72973 428.15795,441.78205 428.81896,439.75391 C 429.47997,437.72578 430.8453,435.01822 431.85301,433.73712 C 434.31903,430.60208 436.89587,424.27742 436.07183,423.38232 C 435.70614,422.98508 436.57317,422.93907 437.99855,423.28005 C 443.50515,424.59736 451.04236,414.52711 451.29628,405.51333 C 451.39954,401.84798 451.17771,401.52527 447.9802,400.68893 C 443.07924,399.40706 439.90694,401.29278 439.90694,405.48796 C 439.90694,409.30073 438.13082,411.07424 435.1049,410.28295 C 432.47236,409.59452 432.44741,409.21039 434.54882,401.72102 C 436.1236,396.10855 436.11338,395.81088 434.29882,394.43722 C 431.48646,392.30822 431.21312,392.50352 429.41085,397.92967 C 428.49959,400.6732 427.33843,403.17476 426.83048,403.48868 C 425.67219,404.20455 425.6343,404.41915 427.74383,398.31576 C 428.71821,395.49664 430.27852,392.42699 431.21118,391.49433 C 434.22619,388.47933 433.01249,387.37898 425.90694,386.68544 C 423.75619,386.47552 423.36316,386.89545 423.09358,389.69143 C 422.90667,391.63001 423.23737,392.94143 423.91313,392.94143 C 424.53623,392.94143 424.90224,393.95393 424.72649,395.19143 C 424.47554,396.95843 423.87027,397.36564 421.90694,397.08837 C 420.53194,396.89419 419.0604,396.21919 418.63685,395.58837 C 417.48424,393.87173 418.46826,376.28174 420.09224,369.5721 C 420.87357,366.34397 422.27651,363.14436 423.20989,362.46186 C 424.14327,361.77936 424.90694,360.70805 424.90694,360.08119 C 424.90694,359.45432 426.03624,358.94143 427.41649,358.94143 C 429.80188,358.94143 429.90551,358.70644 429.51122,354.19143 C 428.90773,347.28081 429.74063,344.36101 432.75908,342.80575 C 434.2154,342.05537 436.26508,340.38065 437.31391,339.08414 C 438.36275,337.78764 439.9782,335.98764 440.90381,335.08414 C 441.82941,334.18065 442.89081,332.59879 443.26247,331.5689 C 443.84562,329.95293 444.65541,329.77684 449.17258,330.28373 C 452.05148,330.60679 456.43194,331.24368 458.90694,331.69905 C 461.38194,332.15442 466.10694,332.28275 469.40694,331.98421 L 475.40694,331.44143 L 475.70063,324.77909 C 475.93143,319.54358 475.47054,316.82769 473.5486,312.09778 C 472.20345,308.78736 471.35879,305.82291 471.67158,305.51013 C 472.79603,304.38568 482.4892,305.06019 486.40694,306.53551 C 491.51279,308.45824 491.77139,308.53942 495.65694,309.43899 C 497.50674,309.86726 498.90694,310.82416 498.90694,311.66005 C 498.90694,312.46779 499.71216,313.33924 500.69631,313.5966 C 501.68047,313.85396 502.91797,315.04933 503.44631,316.25298 C 504.27489,318.1406 505.05989,318.39572 509.15694,318.10892 C 512.09583,317.90319 513.90694,318.18806 513.90694,318.85604 C 513.90694,319.44983 515.56055,321.76602 517.58163,324.00311 C 520.4788,327.20993 521.74833,327.94707 523.58163,327.48694 C 526.84066,326.66898 526.68675,329.629 523.3922,331.1301 C 521.90041,331.80981 520.54388,333.52991 520.05741,335.35866 C 519.37799,337.91278 518.79329,338.3941 516.64779,338.16544 C 513.66061,337.84707 512.43811,340.2253 513.47183,344.34395 C 514.02502,346.54804 512.9923,348.1574 506.26223,355.5791 C 498.46699,364.17544 494.35828,366.94143 489.38419,366.94143 C 486.07979,366.94143 478.30675,370.45715 477.61279,372.2656 C 477.32117,373.02555 477.9342,374.37651 478.97508,375.26775 C 480.35615,376.45026 480.71026,377.67481 480.28542,379.79904 C 479.36689,384.39168 482.23815,389.13068 487.96612,392.47599 C 490.89129,394.18438 493.21896,396.33645 493.54451,397.63354 C 494.33748,400.79298 496.7066,402.62709 497.45969,400.66456 C 497.78764,399.80993 498.81073,399.36502 499.83319,399.63239 C 502.02903,400.20662 506.90694,395.92391 506.90694,393.42177 C 506.90694,391.7079 506.99234,391.70874 508.90694,393.44143 C 511.38966,395.68826 511.53279,400.48949 509.15694,401.82787 C 507.49153,402.76604 507.49242,402.97386 509.17547,406.12756 C 511.4442,410.3787 510.62482,417.30336 507.37006,421.38522 L 505.03935,424.3082 L 501.7412,421.08365 C 499.84474,419.2295 497.58539,417.96094 496.42499,418.09875 C 493.30092,418.46975 489.90836,415.79473 489.89627,412.95088 C 489.88963,411.3868 488.238,408.65502 485.51206,405.69945 C 481.79515,401.66942 480.9552,401.17836 479.9175,402.4287 C 478.31978,404.35385 473.08523,406.94143 470.78849,406.94143 C 469.79234,406.94143 468.49813,407.83677 467.91248,408.93108 C 467.32682,410.02539 465.55362,411.5899 463.97204,412.40777 C 458.93984,415.01002 457.90459,416.70105 457.93874,422.26286 C 457.96863,427.12911 459.50193,430.87144 461.51718,430.99676 C 463.29992,431.10762 467.04347,436.93591 466.47744,438.71932 C 466.16444,439.70548 464.02623,441.95889 461.72586,443.72689 C 457.46835,446.99909 452.8936,447.78663 441.90694,447.1387 C 439.98194,447.02517 437.28194,447.29901 435.90694,447.74722 C 434.53194,448.19543 432.61944,448.3895 431.65694,448.17847 z " }
		  ],
	
		listColoniasCode:[
			{ idEstado: 1, idColonia: 1, nombre: "alvaro_obregon", colonia: "Álvaro Obregón", clave: "01", d: `<polygon class="st0" points="172.05,200.59 170.17,201.18 170.14,201.2 168.73,201.64 168.74,201.82 169.08,206.11 168.69,206.25 
			165.59,207.33 165.57,207.33 165.19,207.47 165.1,207.5 163.6,212.36 161.7,212.7 161.64,212.71 161.6,212.72 161.49,212.73 
			160.62,212.89 158.84,217.7 155.46,217.56 154.5,217.52 154.26,217.71 154.24,217.72 152.56,219.05 155.35,221 155.35,229.27 
			146.76,241.65 146.42,242.15 146.09,242.63 145.6,242.62 145.93,242.15 146.27,241.65 146.16,241.65 154.85,229.12 154.85,222.17 
			150.77,218.9 153.96,217.31 154.34,217.01 155.5,217.06 158.42,217.06 159.6,212.49 161.49,212.22 161.65,212.19 163.21,211.92 
			164.7,207.11 164.78,207.08 164.79,207.08 164.8,207.03 165.52,206.83 165.6,206.8 168.16,205.91 167.83,201.68 168.22,201.51 
			168.2,201.28 169.99,200.72 170.05,200.7 171.06,200.25 171.2,198.83 170.74,198.42 170.59,199.91 167.31,201.37 167.64,205.7 
			164.4,206.63 162.89,211.51 159.2,212.04 158.03,216.56 154.34,216.56 149.85,218.8 154.52,222.54 154.09,228.62 145.06,241.65 
			143.34,241.65 137.24,239.62 135.6,237.57 135.42,237.6 135.42,238.14 136.25,239.19 135.42,238.24 135.42,238.95 135.73,239.35 
			135.42,239 135.11,238.65 134.92,238.44 134.71,238.2 134.42,237.87 134.32,237.75 134.31,237.75 133.57,236.91 134.18,231.59 
			140.15,226.15 141.47,222.06 141.47,222.03 141.51,221.91 141.86,220.83 144.02,218.46 136.92,218.2 124.17,225 122.61,229.08 
			119.87,228.5 119.85,228.5 118.28,228.17 117.77,228.06 117.45,224.7 108.19,225.75 99.1,239.56 94.64,238.94 94.72,241.48 
			94.73,241.5 94.73,241.6 94.74,241.94 94.82,241.97 97.74,243.09 95.16,245.93 90.79,258.41 92.74,260.07 92.76,260.08 
			92.77,260.09 93.11,260.38 90.82,264.96 86.22,263.53 85.92,269.19 73.56,282.44 60.26,287.05 52.03,307.35 51.82,307.85 
			51.62,308.35 51.45,307.85 51.29,307.37 51.05,306.64 50.4,304.68 47.77,303.74 47.77,301.74 46.32,301.38 45.53,301.19 
			45.38,301.15 53.97,276.9 56.95,272.02 57,271.95 59.53,267.81 59.01,249.17 62.17,242.48 66.96,242.66 72.35,238.51 72.35,237.14 
			70.4,235.97 70.35,235.94 70.17,235.84 69.96,235.71 69.93,235.69 68.56,231.82 71.37,229 71.83,233.8 71.84,233.94 74.23,234.2 
			74.3,234.21 74.34,234.22 75.13,234.3 75.18,234.31 76.86,232.37 76.93,232.3 77.92,231.15 78.61,222.96 82.69,219.08 
			83.01,219.12 83.33,219.16 83.37,219.17 83.38,219.17 87.41,219.69 87.54,219.71 87.64,218.95 87.64,218.94 87.65,218.92 
			87.84,217.47 96.81,214.6 103.4,206.48 96.88,201.83 100.78,201.83 101.7,198.28 97.53,197.64 96.82,190.75 92.98,189.4 
			96.92,185.45 102.53,186.82 102.27,183.35 104.51,179.98 109.51,180.33 110.59,178.62 110.6,178.6 111.79,176.71 111.65,176.5 
			111.51,176.29 111.4,176.12 111.39,176.1 111.36,176.06 111.35,176.04 111.32,176 111.31,175.99 110.91,175.39 110.9,175.38 
			110.44,174.68 110.83,174.67 110.88,174.67 111.52,174.66 117.55,174.58 118.95,169.34 131.08,168.47 130.68,168.87 119.26,169.55 
			117.88,175.07 117.94,175.07 119.34,169.82 131.31,168.95 132.32,167.94 134.26,165.76 139.43,166.89 140.61,164.52 140.84,164.51 
			141.04,164.08 150.66,163.91 153.4,160.98 153.65,161.4 155.07,163.83 155.11,163.91 155.19,164.04 157.13,167.33 158.56,168.16 
			159.11,168.48 159.38,168.64 159.37,168.72 159.57,168.84 159.4,168.91 159.38,169.31 159.3,169.26 158.62,174.89 155.94,176.9 
			155.4,190.75 157.5,191.98 157.5,192.16 157.81,192.34 157.64,194.86 158.59,195.34 158.67,195.37 158.75,195.41 158.83,195.45 
			158.91,195.49 159.74,195.88 164.75,196.09 166.89,194.52 164.16,195.88 160.8,195.88 159.14,195.05 159.95,195.43 164.59,195.58 
			167.64,193.35 171.56,197.69 171.75,197.9 171.76,197.99 171.78,198.19 171.84,198.69 171.84,198.72 171.92,199.45 	" stroke="white" id="01"/>` },
			{ idEstado: 1, idColonia: 2, nombre: "azcapotzalco", colonia: "Azcapotzalco", clave: "02", d: `<polygon class="st0" points="191.85,108.16 188.98,111.03 185.95,111.27 184.39,109.54 181,109.82 176.03,115 176.05,116.18 
			172.12,116.43 171.96,115.01 166.43,114.8 159.45,112.04 156.08,109.23 156.5,104.18 142.31,104.63 142.5,106.53 140.52,106.81 
			141.04,105.66 132.28,102.22 141.12,70.92 146.18,68.86 179.74,77.81 180.29,77.95 180.39,77.98 180.91,80.49 180.92,80.54 
			180.93,80.58 181.3,82.35 181.45,82.72 181.45,82.73 181.46,82.75 186.39,94.79 186.5,95.07 	" stroke="white"  id="02"/>` },
			{ idEstado: 1, idColonia: 3, nombre: "benito_juarez", colonia: "Benito Juárez", clave: "03", d: `<polygon class="st0" points="204.96,164.2 203.06,172.77 201.51,180 201.46,179.99 201.37,179.97 200.95,181.56 196.71,197.69 
			172.23,197.69 172.23,197.68 167.7,192.68 164.44,195.08 160.07,194.93 158.68,194.29 158.85,191.78 156.4,190.38 156.86,177.46 
			159.57,175.43 160.3,169.32 160.37,168.75 160.4,168.51 167.22,165.76 167.33,165.72 167.42,165.68 170.55,164.31 170.58,164.4 
			172.37,163.68 176.57,161.99 184.72,158.71 184.73,158.7 185.03,158.73 197.55,159.88 202.86,159.14 202.85,159.19 203.21,159.14 
			203.15,159.61 202.87,161.98 202.87,162 202.67,163.67 	" stroke="white" id="03"/>` },
			{ idEstado: 1, idColonia: 4, nombre: "coyoacan", colonia: "Coyoacán", clave: "04", d: `<path class="st0" d="M229.83,231.88l0.11,0.13l-0.71,14.15l-0.03,0.5l-0.02,0.46h-7.1l-10.63-4.78l-0.03-0.01l-0.1-0.05l-8.01-3.33
			l-5.46,6.79l-0.16-0.01l-0.02,0.03l-0.97-0.06h-0.1l-4.32-0.14l-2.11,2.21l-0.02,0.02l-1.51,2.26l-0.6-0.07l-0.11,0.12l-1.9-0.34
			l-0.05-0.01h-0.02l-1-0.11l-0.07-0.08l-0.35-0.06l-3.09-3.77l-21.87-0.43l-0.35-0.01l-3.47-0.02c-0.04-0.02-0.08-0.03-0.11-0.05
			h-0.01l-0.72-0.01l-4.35-2.05l-0.07-0.03l-1.01-0.47h-0.29l-2.51-0.03l-0.01,0.02l-0.6-0.01l0.01-0.01l-0.49-0.01l0.33-0.47
			l0.34-0.5h-0.11l8.69-12.53v-4.13l0.19-2.67l-0.19-0.15l-4.08-3.27l3.19-1.59l0.5-0.25h3.96l1.18-4.57l1.89-0.27l0.16-0.03
			l1.62-0.23l1.51-4.88h0.01l0.01-0.05l0.72-0.2l0.08-0.03l2.57-0.73l-0.01-0.16l-0.33-4.23l0.39-0.17l1.77-0.79l0.06-0.02l1.01-0.45
			l0.14-1.42l0.07-0.6v-0.04h1.02l0.03,0.28l0.02,0.22h24.1l-0.12,0.46l-0.13,0.5h7.9l1.31-1.8l5.96,0.74l-0.59,5.02l6.81,8.73v3.65
			l9.75,12.05l2.77-0.63L229.83,231.88z" id="04" stroke="white"/>` },
			{ idEstado: 1, idColonia: 5, nombre: "cuajimalpa", colonia: "Cuajimalpa de Morelos", clave: "05", d: `<polygon class="st0" points="112.95,169.81 106.8,169.81 105.68,167.95 105.9,160.7 102.14,162.96 101.99,166.35 98.53,166.35 
			94.9,173.27 91.21,173.27 91.21,181.92 88.76,185.47 86.17,181.58 82.26,181.58 82.07,185.16 76.08,187.43 71.68,191.83 
			71.14,191.67 70.3,185.51 67.47,183.25 60.22,192.37 54.65,195.67 53.36,197.49 54.66,200.92 53.57,201.74 50.04,200.86 
			46.88,203.8 47.12,207.62 49.83,208.98 49.7,214.34 46.83,214.51 46.25,219.7 44.41,221.73 44.74,223.56 43.9,222.94 41.88,222.94 
			41.88,227.07 42.34,227.62 31.64,236.48 31.78,238.69 31.08,238.69 29.39,236.59 28.34,241.16 28.8,242.3 27.61,242.85 
			25.86,242.85 25.19,245.18 27.22,248.79 29.75,248.95 30.9,255.56 27.96,257.97 28.31,260.24 27.66,260.81 25.5,260.63 
			21.13,265.6 20.89,270.42 32.99,270.94 32.82,273.58 35.73,273.58 38.92,276.62 38.72,280.4 42.38,280.77 42.48,281.29 
			39.29,283.47 39.29,299.65 41.88,300.35 41.88,302.87 45.94,301 54.52,276.49 60.16,268.2 59.64,249.1 62.84,243.16 67.43,243.49 
			72.96,239.14 72.96,236.86 70.39,235.39 69.46,232.06 70.7,230.95 70.82,234.14 75.28,234.88 78.81,230.94 79.5,222.87 
			83.17,219.64 87.72,220.4 88.51,217.84 96.95,215.47 104.34,206.13 100.2,202.82 101.11,202.7 102.67,197.77 98.46,196.81 
			97.44,190.14 94.91,189.25 97.84,186.32 103.8,188.38 103.12,183.2 104.79,181.02 109.77,181.37 112.26,176.39 110.24,173.87 	" stroke="white" id="05"/>` },
			{ idEstado: 1, idColonia: 6, nombre: "cuauhtemoc", colonia: "Cuauhtémoc", clave: "06", d: `<polygon class="st0" points="210.77,126.63 207.97,157.55 207.55,157.55 207.54,157.68 207.52,157.83 207.5,157.98 207.5,158.05 
			207.09,158.04 207.07,158.04 206.99,158.05 204.3,158.43 204.33,158.21 204.36,157.96 203.03,158.16 197.92,158.91 184.58,157.68 
			172.04,162.73 171.58,162.92 171.25,163.05 170.38,159.95 166.05,158.5 162.48,158.69 161.42,155.73 162.36,154.68 162.39,154.65 
			162.4,154.64 166.83,150.47 166.84,150.46 167.52,149.82 167.52,142.83 167.91,142.6 167.92,142.59 169.3,141.76 170.15,137.32 
			170.33,137.15 170.34,137.06 171.01,136.51 173.23,134.42 177.21,124.51 177.08,117.9 177.07,117.39 177.05,116.61 177.04,116.11 
			177.03,115.4 177.99,114.4 181.42,110.73 181.92,110.75 183.98,110.58 184.23,110.85 185.53,112.31 185.62,112.3 188.14,112.1 
			188.53,112.07 189.26,112.01 189.43,112 191.96,109.47 192.35,109.08 192.38,109.05 192.78,109.03 201.9,108.69 207.98,112.48 
			208.01,112.5 208.1,112.56 208.24,112.64 209.91,113.67 210.15,113.82 210.03,114.22 207.19,123.56 208.56,124.74 208.58,124.76 
			208.6,124.77 	" stroke="white" id="06"/>` },
			{ idEstado: 1, idColonia: 7, nombre: "gustavo_a_madero", colonia: "Gustavo A. Madero", clave: "07", d: `<polygon class="st0" points="268.17,120.75 257.66,125.06 243.48,119.56 240.07,122.81 235.35,119.31 229.98,119.06 229.67,120.57 
			222.18,119.02 210.85,113.07 202.17,107.68 192.88,108.03 182.27,82.1 181.24,77.17 180.57,76.99 177.64,64.94 167.3,62.14 
			167.67,59.01 159.46,51.01 178.44,56.71 180.97,54.33 177.4,50.93 183.13,42.94 177.64,36.94 181.92,27.63 186.75,28.5 
			192.34,15.29 201.92,4.47 210.95,5.58 219.82,27.4 202.8,49.98 203.98,64.55 217.71,70.92 224.49,71.13 228.91,68.66 255.93,80.03 
			252.17,87.73 	"stroke="white" id="07"/> ` },
			{ idEstado: 1, idColonia: 8, nombre: "iztacalco", colonia: "Iztacalco", clave: "08", d: `<polygon class="st0" points="263.24,144.69 263.2,145.15 263.16,145.65 261.7,162.41 261.21,162.2 260.09,174.76 256.69,175.46 
			240.89,166.91 240.15,169.13 236.86,169.13 231.88,178.75 209.15,176.98 208.99,181.46 202.44,180.18 206.15,163.45 203.76,162.9 
			204.18,159.46 206.89,159.08 208.66,158.83 208.87,158.8 208.89,158.56 220.6,158.71 223.15,156.16 223.89,155.42 238.12,155.42 
			239.52,155.39 241.42,156.78 244.76,156.62 245.72,156.53 246.1,156.49 251.05,146.76 254.06,144.69 	" stroke="white" id="08"/>` },
			{ idEstado: 1, idColonia: 9, nombre: "iztapalapa", colonia: "Iztapalapa", clave: "09", d: `<polygon class="st0" points="314.31,194.73 339.94,222.09 330.15,222.28 329.04,223.67 327.14,222.86 326.69,221.07 307.97,220.88 
			280.56,230.2 273.85,235.68 271.51,235.32 269.83,237.01 267.49,234.5 261.79,241.16 257.33,240.22 258.52,250.71 260.15,251.52 
			260.15,252.3 254.08,257.12 250.2,254.81 231.34,231.02 230.91,230.47 231.17,226.13 231.02,226.16 227.71,226.92 218.58,215.64 
			218.58,212 211.81,203.32 212.46,197.72 204.94,196.78 204.69,197.13 204.01,198.06 203.58,198.65 197.49,198.65 197.61,198.19 
			197.74,197.69 199.68,190.32 199.69,190.28 199.69,190.27 199.71,190.2 201.94,181.75 202.06,181.27 202.1,181.13 202.22,181.15 
			209.95,182.67 209.96,182.27 210.12,178.06 212.79,178.27 232.46,179.8 237.46,170.13 240.87,170.13 241.42,168.46 241.46,168.35 
			256.52,176.5 256.54,176.51 261.02,175.59 262.08,163.67 262.09,163.68 262.58,163.89 316.43,187.14 	" id="09" stroke="white"/>` },
			{ idEstado: 1, idColonia: 10, nombre: "magdalena_contreras", colonia: "La Magdalena Contreras", clave: "010", d: `<polygon class="st0" points="136.79,217.23 123.24,224.63 121.99,228.23 118.75,227.88 118.39,223.72 107.91,224.72 98.97,238.31 
			93.35,237.91 94.48,242.71 96.32,243.33 94.51,245.86 89.98,258.78 92.64,260.61 90.68,264.27 85.33,262.55 85.33,268.9 
			73.48,281.75 59.61,286.49 51.1,307.85 55.03,307.85 55.2,307.33 57.12,307.33 57.64,308.5 59.8,310.33 60.17,312.2 72.23,318.22 
			76.49,318.4 76.69,318.45 78.16,320.83 91.72,320.64 93.77,314.52 99.87,309.24 111.06,303.65 110.87,296.95 115.89,290.21 
			115.71,265.62 120.41,258.86 118,257.05 118.25,253.35 124.77,252.18 127.31,246.12 127.31,243.35 131.09,238.96 134.92,238.96 
			134.92,232.02 141.26,226.72 141.96,222.17 146.67,217.46 	" id="010" stroke="white"/>` },
			{ idEstado: 1, idColonia: 11, nombre: "miguel_hidalgo", colonia: "Miguel Hidalgo", clave: "011", d: `<polygon class="st0" points="166.52,149.39 160.22,155.33 161.79,159.73 165.91,159.51 169.56,160.73 170.31,163.43 159.74,167.69 
			157.86,166.59 153.58,159.32 150.22,162.92 140.41,163.09 139.13,165.8 133.9,164.65 130.96,167.97 118.56,168.87 117.17,174.08 
			111.12,174.17 111.52,174.66 117.55,174.58 118.95,169.34 131.08,168.47 130.68,168.87 119.26,169.55 117.88,175.07 117.94,175.07 
			119.34,169.82 131.31,168.95 130.9,169.36 119.66,170.03 118.27,175.59 112.4,175.77 111.78,175.79 111.43,175.8 110.91,175.39 
			110.9,175.38 110.62,175.15 109.65,174.37 109.74,174.19 109.78,174.1 110.69,172.29 110.7,172.28 111.54,170.6 106.73,170.6 
			104.86,169 105.22,161.69 105.25,161.09 105.25,161 106.43,159.95 106.41,160.63 111.01,156.5 120.31,154.44 128.91,143.65 
			128.21,131.78 132.76,128.81 133.64,119.81 135.81,119.62 139.79,108.79 139.98,108.29 140.13,107.87 140.69,107.79 143.26,107.43 
			143.59,107.38 143.41,105.59 155.04,105.22 155.41,105.21 155.04,109.67 158.52,112.57 158.87,112.86 166.14,115.76 171.06,115.98 
			171.23,117.49 176.07,117.17 176.08,117.47 176.09,117.97 176.21,124.32 172.46,133.77 169.23,136.82 168.4,141.14 166.52,142.27 	
			" strole="white" id="011"/>` },
			{ idEstado: 1, idColonia: 12, nombre: "milpaalta", colonia: "Milpa Alta", clave: "012", d: `<polygon class="st0" points="349.39,362.81 339.92,357.52 347.77,354.26 348.18,346.52 337.29,338.23 338.01,329.75 332.39,328.63 
			329.01,322.75 325.9,323.06 325.52,319.31 329.35,315.09 319.85,306.37 287.96,306.37 232.94,321.05 205.77,372.14 192.55,362 
			191.78,378.27 182.57,398.99 202.67,418.21 204.98,423.19 267.48,456.38 278.54,432.64 291.86,423.16 321.5,427.05 331.64,434.43 
			339.98,422.49 345.08,386.96 338.67,375.5 	" id="012" stroke="white"/>` },
			{ idEstado: 1, idColonia: 13, nombre: "tlahuac", colonia: "Tláhuac", clave: "013", d: `<path class="st0" d="M359.23,306.26l-2.04,10.41l-5.94-4.08l-1.85,2.93l-6.58-0.68l-1.02,2.87h-2.72l0.99,10.93l-1.55,1.03v0.01
			l-0.53,0.35l-0.53,0.35l-0.31,0.21l-5.74-1.23l-2.69-5.56l-3.81,0.19l-0.24-5.28l3.55-3.24l-8.13-7.97l-31.98-0.17l-1.51-0.01
			h-0.39l0.36-0.51l0.06-0.09h0.01l0.43-0.61l6.53-9.23l3.11,0.78l0.97-4.89l0.33-0.03l1.08-0.11l2.01-0.2l0.49,3.25l2.73-0.84
			l1.1-14.72l0.01-0.09l-0.21-0.07l-0.55-0.18l-2.49,2.49l-3.83-0.35l1.46-2.91l-4.14,0.16l0.41-1.64l-10.34-1.77l-7.28-7.63
			l-11.82-2.22l-2.78-1.8l-0.07-0.04l-8.3-5.36l0.1-0.1l0.27-0.27l-0.43-0.28l-0.43-0.27l-0.09-0.06l0.08-0.06l0.61-0.48l3.42-2.72
			l2.13-1.69v-1.88l-0.05-0.02l-0.5-0.25l-1.14-0.57l-0.01-0.11l-0.97-8.47l2.54,0.54l1.07,0.23l3.57-4.84l0.02-0.03l0.04-0.05
			l1.65-1.91l0.14-0.17l2.3,2.48l1.88-1.87h0.01l0.13,0.02l0.08,0.01l0.12,0.02l0.04,0.01l0.11,0.01l0.01,0.01l1.81,0.27l6.72-5.54
			l0.31-0.1l0.01-0.01l4.94-1.68l0.1-0.03l21.97-7.47l18.25,0.19l0.41,1.65l2.31,0.99h0.01l0.16,0.07l0.03-0.04h0.01l1.17-1.46
			l9.89-0.19l3.43,3.43l-0.86,0.86l3.92,3.93l-6.5-1.09c-0.11,1.3,0.1,4.43,0.42,7.08l0.07,0.57l-3.07,2.37l-1.63-0.38l-5.44,43.99
			h6.78l0.18,18.02L359.23,306.26z" id="013" stroke="white"/>` },
			{ idEstado: 1, idColonia: 14, nombre: "tlalpan", colonia: "Tlalpan", clave: "014", d: `<polygon class="st0" points="229.13,248.11 229.04,249.91 220.38,255.26 196.63,261.74 196.63,273.48 201.2,278.72 199.5,287.51 
			194.32,294.06 193.23,294 193.23,291.6 191.3,289.99 185.46,289.44 185.82,295.94 183.65,296.11 183.65,307.02 186.9,311.12 
			186.66,314.31 184.52,315.74 184.52,318.62 190.84,323.92 204.81,323.92 206.12,322.61 208.42,324.11 208.74,341.24 206.52,345 
			205.25,371.12 205.6,371.39 205.74,371.13 205.76,370.84 205.78,370.54 207.01,345.15 209.25,341.37 209.14,335.66 209.13,335.31 
			208.68,323.69 206.06,321.97 204.61,323.42 196.13,323.42 191.57,323.48 191.5,323.42 191.02,323.42 185.02,318.39 185.02,317.92 
			185,317.9 185.02,317.77 185.02,316 186.77,314.84 186.79,314.82 187.15,314.52 187.42,310.97 184.15,306.85 184.15,296.57 
			184.44,296.55 184.44,296.41 186.34,296.27 186.84,296.23 186.53,290.54 187.07,290.59 190.89,290.96 192.23,292.07 192.23,294.87 
			191.69,294.87 191.9,292.1 190.7,291.22 187.22,291.09 187.39,296.7 186.87,296.74 184.94,296.87 184.94,306.62 188.45,310.3 
			188.01,314.45 187.63,314.77 187.12,315.21 187.08,315.24 187.06,315.25 185.74,316.37 185.53,317.7 191.68,322.92 191.75,322.98 
			196.17,322.92 204.26,322.81 205.89,320.97 209.15,322.88 209.17,323.4 209.63,335.13 209.63,335.17 209.88,341.54 207.94,344.88 
			206.31,370.06 206.28,370.47 206.27,370.69 206.23,371.27 206.23,371.28 206.16,372.44 206.15,372.45 206.15,372.48 206.11,373.14 
			205.67,372.81 205.18,372.44 193.47,363.63 192.54,378.05 183.27,398.96 183.24,399.02 186.2,401.77 186.34,401.9 186.48,402.04 
			202.77,417.19 205.39,422.83 205.74,423.59 205.74,423.6 205.82,423.76 204.86,423.69 204.85,423.69 204.84,423.68 134.29,418.25 
			134.08,418.12 90.89,390.95 73.05,348.72 68.8,322.54 56.5,315.62 59.77,313.99 59.91,312.62 60.03,311.49 60.03,311.47 
			60.04,311.33 60.57,311.61 69.79,316.45 69.96,316.53 72.03,317.62 76.8,317.62 78.7,320.21 91.43,320.21 91.69,319.16 
			91.71,319.11 92.88,314.43 99.91,308.37 110.06,303.46 109.9,296.65 115.26,289.72 114.92,265.7 119.27,259.26 117.15,257.44 
			117.39,252.48 124.4,251.58 126.81,245.85 126.85,245.75 126.81,245.16 126.66,242.94 129.11,240.5 129.13,240.47 130.86,238.75 
			132.88,238.46 134.12,238.28 134.42,238.24 134.71,238.2 134.92,238.17 135.3,238.11 135.39,238.1 135.42,238.14 136.25,239.19 
			135.42,238.24 135.42,238.95 135.73,239.35 135.75,239.38 135.8,239.44 135.83,239.47 136.62,240.36 138.32,241.04 138.34,241.05 
			138.39,241.07 138.44,241.09 138.49,241.1 143.1,242.63 144.37,242.64 144.16,242.94 143.83,243.42 143.69,243.62 149.17,243.62 
			154.69,246.21 180.97,246.72 184,250.42 188.28,251.17 188.85,250.58 188.22,250.51 190.55,248.09 188.98,250.44 192.7,246.58 
			198.32,246.75 203.77,239.98 221.77,248.07 	" id="014" stroke="white"/>` },
			{ idEstado: 1, idColonia: 15, nombre: "venustiano_carranza", colonia: "Venustiano Carranza", clave: "015", d: `<polygon class="st0" points="271.21,126.83 263.45,143.69 253.75,143.69 250.28,146.08 245.46,155.55 241.7,155.93 239.86,154.42 
			223.47,154.42 220.19,157.7 208.98,157.56 211.81,126.21 208.33,123.23 210.92,114.72 211.04,114.31 212.66,115.14 212.8,115.22 
			212.89,115.27 221.78,119.93 230.32,121.72 230.58,121.12 230.79,120.1 230.91,120.11 234.85,120.25 234.93,120.3 235,120.3 
			235.28,120.51 239.32,123.5 239.35,123.52 239.37,123.53 239.4,123.55 240.23,124.05 243.71,120.73 257.67,126.13 268.46,121.71 
			268.66,122.09 268.9,122.53" stroke="white" id="015"/>`},
			{ idEstado: 1, idColonia: 16, nombre: "xochimilco", colonia: "Xochimilco", clave: "016", d: `<polygon class="st0" points="305.94,279.88 305.38,295.01 301.46,296.98 301.2,296.32 301.17,296.26 301.17,296.25 299.92,293.13 
			298.43,293.13 298.41,293.2 296.95,298.85 294.05,297.69 288.5,305.87 288.16,306.37 287.85,306.82 287.77,306.94 287.71,307.03 
			286.6,307.32 286.59,307.32 285.36,307.65 264.9,313.04 263.25,313.48 233.95,321.2 233.89,321.32 206.64,372.78 206.64,372.79 
			206.11,373.77 205.57,374.8 205.64,373.41 205.67,372.81 205.67,372.7 205.7,372.09 205.75,371.11 205.76,370.84 205.78,370.54 
			207.01,345.15 209.25,341.37 209.14,335.66 209.13,335.31 208.91,323.84 208.68,323.69 206.06,321.97 204.61,323.42 191.02,323.42 
			185.02,318.39 185.02,316 186.77,314.84 186.79,314.82 187.14,314.59 187.15,314.52 187.42,310.97 184.15,306.85 184.15,296.57 
			184.44,296.55 186.35,296.41 186.34,296.27 186.84,296.23 186.53,290.54 187.07,290.59 190.89,290.96 192.23,292.07 192.23,294.95 
			194.79,295.08 194.96,294.87 200.44,287.94 201.97,279.99 201.98,279.95 202.19,278.34 201.75,277.83 200.26,276.12 197.63,273.11 
			197.63,262.5 220.71,256.21 230.01,250.48 230.13,248.12 230.15,247.62 230.2,246.63 230.23,246.13 230.49,240.86 230.5,240.74 
			230.88,233.17 231.25,233.63 249.24,255.7 254.75,259.45 255.13,259.07 254.7,258.79 254.8,258.69 255.24,258.96 255.49,258.71 
			255.59,258.61 264.3,263.8 264.43,263.88 266.68,265.22 278.6,267.32 285.86,275.11 297.71,277.02 296.82,278.5 301.3,278.5 
			300.09,281.1 301.86,281.1 304.08,278.48 305.46,279.52 	" id="016" stroke="white"/>` },
		]
	}
	},{}],5:[function(require,module,exports){
	var Model = require('./model');
	var SelectComponent = require('./selectComponent');
	var TablaDatos = require('./tablaDatos');
	var Servicios = require('./servicios');
	var Mapa = require('./mapa');
	var dt = require('datatables.net')();
	var numeral = require('numeral');
	var boostrap = require('bootstrap');
	var Charts = require('./chartsRegistros');
	
	var Registro = function () {
		this.model = Model;
		this.stateDefault = 'all'
		this.servicios = new Servicios();
		this.mapa = new Mapa();
		this.fechaIni = '';
		this.fechaFin = '';
		this.pagina = 0;
		this.tamañoPagina = 20;
		this.totalUsuarios = 0;
		this.user = JSON.parse(localStorage.getItem('user'));
		this.tipoEnvio = undefined
		this.filtros = {
			estado: undefined,
			municipio: undefined,
			colonia: undefined,
			fechaIni: undefined,
			fechaFin: undefined,
			tipoTest: 'profile',
		}
	
		//Pintar Mapa
		this.mapa.renderMapaCompleto();
	
		//Componentes
		this.estados = new SelectComponent("#estados");
		this.municipios = new SelectComponent("#municipios");
		this.colonias = new SelectComponent("#colonias");
		this.tablaDatos = new TablaDatos("#tabla-datos");
		this.opcionesMapa = new SelectComponent("#filtroMapa");
		this.tamisUno = new Charts("#chartBar1");
		//this.tamisDos = new Charts("#chartBar2");
		//this.derechoHabiente = new Charts("#chartPie3");
		this.generoEdad = new Charts("#chartStack1");
		let fechaDeHoy = new Date();
	
		this.tablaDatos.construirHead(this.model.tablaRegistros.table.headers);
		this.opcionesMapa.fillGeneral(this.model.selectOpcionesMapa.opciones)
		this.setFechaActual();
	
		//Servicios
		this.servicios.getAllData2(this.filtros, 0, this.tamañoPagina).then((data) => {
			pagina = `<span><a id="pagina-${this.pagina + 1}" tabindex="0">${this.pagina + 1}</a></span>`;
			$("#paginadoTabla").empty()
			$("#paginadoTabla").append(pagina);
		});
	
		this.servicios.indicadoresUsuarios(this.filtros).then((data)=>{
			$("#totalRegistros").text(numeral(data.totalUsers).format('0,000'));
			$("#usuariosPorZona").text("-");
		});
	
		this.servicios.getStates().then((data) => {
			this.fillEstados(data);
			this.setDefaultState(this.stateDefault);
		});
	
		//Listeners
		this.estados.element.addEventListener("change", this.eventosEstados.bind(this));
		this.municipios.element.addEventListener("change", this.eventosMunicipios.bind(this));
		this.colonias.element.addEventListener("change", this.eventosColonias.bind(this));
		this.opcionesMapa.element.addEventListener("change", this.cambiarFiltroMapa.bind(this));
		document.getElementById('reiniciarFiltros').addEventListener('click', this.refreshFilters.bind(this));
		document.getElementById('fechaIni').addEventListener('change', this.filtroPorFecha.bind(this));
		document.getElementById('fechaFin').addEventListener('change', this.filtroPorFecha.bind(this));
		document.getElementById('siguientePagina').addEventListener('click', this.siguientePagina.bind(this));
		document.getElementById('paginaAnterior').addEventListener('click', this.paginaAnterior.bind(this));
		document.getElementById('enviar-masivo').addEventListener('click', this.mostarModalEnvio.bind(this));
		document.getElementById('enviar-masivo-zona').addEventListener('click', this.mostarModalEnvio.bind(this));
		//document.getElementById('sendMessage').addEventListener('click', this.sendMessage.bind(this));
		$("#update").text(this.fechaConNombreMes(fechaDeHoy));
	
		if (this.user.roleDescription !== "admin") {
			$("#paneles-mensaje").empty()
		}
	}
	
	//- INICIO - FUNCIONES GENERALES
	
	//Funcion que renicia los filtros que se hayan modificado en una interacción anterior
	Registro.prototype.refreshFilters = function () {
		this.filtros.tipoTest = "profile"
		this.pagina = 0;
		this.filtros.municipio = undefined,
			this.filtros.colonia = undefined,
			this.setFechaActual();
		this.setDefaultState(this.stateDefault);
		this.opcionesMapa.selectTexto("registros")
	}
	
	//Inserta la Fecha Actual en los inputs Y en el filtro
	Registro.prototype.setFechaActual = function () {
		let date = new Date(); //Fecha actual
		this.fechaSemanaPasada(date); // Inserta Semana Pasada en el campo
	
		let fechaFormateada = this.formatoFechaInputs(date);
		document.getElementById('fechaFin').value = fechaFormateada
		this.filtros.fechaFin = this.fechaAmilisegundos(fechaFormateada + ' 23:59:59')
	}
	
	//Inserta la fecha de una semana pasada en el input y en el filtro correspondiente
	Registro.prototype.fechaSemanaPasada = function (fechaActual) {
		let haceUnaSemana = new Date(fechaActual.getTime() - (24 * 60 * 60 * 1000) * 7);
		let fechaFormateada = this.formatoFechaInputs(haceUnaSemana)
		document.getElementById('fechaIni').value = fechaFormateada
		this.filtros.fechaIni = this.fechaAmilisegundos(fechaFormateada)
	}
	
	//Desencadena todos los eventos que se se deben ejecutar cuando cambia el select de estado
	Registro.prototype.eventosEstados = function () {
		this.pagina = 0;
		this.filtros.municipio = undefined;
		this.filtros.colonia = undefined;
	
		if (this.estados.element.value !== "all") {
			this.filtros.estado = this.estados.element.value;
			this.getMunicipios();
	
			if (this.user.roleDescription === "admin") {
				document.getElementById("enviar-masivo-zona").disabled = false;
				document.getElementById("estado-zona").hidden = false;
				document.getElementById("municipio-zona").hidden = true;
				document.getElementById("delegacion-zona").hidden = true;
				$("#estado-zona").text(this.estados.selectedText());
			}
	
			this.mapa.getTotalRegistrosEstado(this.filtros);
	
		} else {
			this.filtros.estado = undefined;
			this.municipios.cleanFiltroMunicipio();
			this.colonias.cleanFiltroColonias();
	
			if (this.user.roleDescription === "admin") {
				document.getElementById("enviar-masivo-zona").disabled = true;
				document.getElementById("estado-zona").hidden = true;
				document.getElementById("municipio-zona").hidden = true;
				document.getElementById("delegacion-zona").hidden = true;
			}
	
			this.mapa.getTotalRegistros(this.filtros);
		}
	
		this.mapa.getImgState(this.estados.element.value);
	
		//Se lanza el servicio para traer los registros por estado
		this.servicios.getAllData2(this.filtros, 0, this.tamañoPagina).then((data) => {
			this.pintarDatos(data);
		});
	
		this.servicios.sintomatologia(this.filtros).then((data) => {
			this.maperDatosGraficaUno(data);
			//this.maperDatosGraficaDos(data);
		})
		this.servicios.rangoEdades(this.filtros).then(this.mapearDatosGraficaEdades.bind(this))
		//this.servicios.derechoHabientes(this.filtros).then(this.mapearDatosDerechoHabientes.bind(this))
		this.servicios.indicadoresUsuarios(this.filtros).then((data)=>{
			this.fillCards(data)
	
			if (this.filtros.estado === undefined) {
				$("#totalRegistros").text(numeral(data.totalUsers).format('0,000'));
				$("#usuariosPorZona").text("-");
			} else {
				$("#usuariosPorZona").text(numeral(data.totalUsers).format('0,000'));
			}
		});
	}
	
	//Desencadena todos los eventos que se se deben ejecutar cuando cambia el select de Municipio/Delegación
	Registro.prototype.eventosMunicipios = function () {
		this.pagina = 0;
		this.filtros.colonia = undefined;
	
		if (this.municipios.element.value !== 'all') {
			this.filtros.municipio = this.municipios.element.value;
			this.getColonias();
			if (this.user.roleDescription === "admin") {
				document.getElementById("municipio-zona").hidden = false;
				$("#municipio-zona").text(this.municipios.selectedText());
			}
		} else {
			this.filtros.municipio = undefined;
	
			if (this.user.roleDescription === "admin") {
				document.getElementById("municipio-zona").hidden = true;
				document.getElementById("delegacion-zona").hidden = true;
			}
	
			this.mapa.getTotalRegistrosEstado(this.filtros);
		}
	
		this.mapa.getImgMunicipio(this.municipios.element.value, this.filtros.estado);
	
		//Se lanza servicio para traer los registros por estado y alcaldía.
		this.servicios.getAllData2(this.filtros, 0, this.tamañoPagina).then((data) => {
			this.pintarDatos(data)
		});
	
		this.servicios.sintomatologia(this.filtros).then((data) => {
			this.maperDatosGraficaUno(data);
			//this.maperDatosGraficaDos(data);
		})
		this.servicios.rangoEdades(this.filtros).then(this.mapearDatosGraficaEdades.bind(this))
		//this.servicios.derechoHabientes(this.filtros).then(this.mapearDatosDerechoHabientes.bind(this))
		this.servicios.indicadoresUsuarios(this.filtros).then((data)=>{
			this.fillCards(data)
	
			if (this.filtros.estado === undefined) {
				$("#totalRegistros").text(numeral(data.totalUsers).format('0,000'));
				$("#usuariosPorZona").text("-");
			} else {
				$("#usuariosPorZona").text(numeral(data.totalUsers).format('0,000'));
			}
		});}
	
	//Desencadena todos los eventos que se se deben ejecutar cuando cambia el select de Colonias Adentamientos
	Registro.prototype.eventosColonias = function () {
	
		this.filtros.colonia = this.colonias.element.value
		this.pagina = 0;
	
		if (this.colonias.element.value !== 'all') {
			this.filtros.colonia = this.colonias.element.value;
	
			if (this.user.roleDescription === "admin") {
				document.getElementById("delegacion-zona").hidden = false;
				$("#delegacion-zona").text(this.colonias.selectedText());
			}
	
		} else {
			this.filtros.colonia = undefined
	
			if (this.user.roleDescription === "admin") {
				document.getElementById("delegacion-zona").hidden = true;
			}
		}
	
		this.servicios.getAllData2(this.filtros, 0, this.tamañoPagina).then((data) => {
			this.pintarDatos(data)
		});
	
		this.servicios.sintomatologia(this.filtros).then((data) => {
			this.maperDatosGraficaUno(data);
			//this.maperDatosGraficaDos(data);
		})
		this.servicios.rangoEdades(this.filtros).then(this.mapearDatosGraficaEdades.bind(this))
		//this.servicios.derechoHabientes(this.filtros).then(this.mapearDatosDerechoHabientes.bind(this))
		this.servicios.indicadoresUsuarios(this.filtros).then((data)=>{
			this.fillCards(data)
	
			if (this.filtros.estado === undefined) {
				$("#totalRegistros").text(numeral(data.totalUsers).format('0,000'));
				$("#usuariosPorZona").text("-");
			} else {
				$("#usuariosPorZona").text(numeral(data.totalUsers).format('0,000'));
			}
		});}
	
	//Lanza los servicios correspondientes cuando cambia el select de "Usuarios Unicos (Mapa)"
	Registro.prototype.cambiarFiltroMapa = function () {
		let value = this.opcionesMapa.element.value;
		switch (value) {
			case "registros":
				this.filtros.tipoTest = 'profile'
	
				if ((this.filtros.state !== undefined) && (this.filtros.municipio) !== undefined) {
					// TODO: Agregrar evento
				} else if ((this.filtros.estado !== undefined) && (this.filtros.municipio === undefined)) {
					this.mapa.getTotalRegistrosEstado(this.filtros);
				} else {
					this.mapa.getTotalRegistros(this.filtros);
				}
	
				break;
			case "tests":
				this.filtros.tipoTest = 'test'
	
				if ((this.filtros.state !== undefined) && (this.filtros.municipio) !== undefined) {
					// TODO: Agregrar evento
				} else if ((this.filtros.estado !== undefined) && (this.filtros.municipio === undefined)) {
					this.mapa.getTotalTestEstado(this.filtros);
				} else {
					this.mapa.getTotalTests(this.filtros);
				}
	
				break;
			case "tendenciaPos":
				this.filtros.tipoTest = 'trendPositive'
				if ((this.filtros.state !== undefined) && (this.filtros.municipio) !== undefined) {
					// TODO: Agregrar evento
				} else if ((this.filtros.estado !== undefined) && (this.filtros.municipio === undefined)) {
					this.mapa.getTotalTendenciasEstado(this.filtros, 'positive');
				} else {
					this.mapa.getTotalTendencias(this.filtros, 'positive');
				}
	
				break;
			case "tendenciaNe":
				this.filtros.tipoTest = 'trendNegative'
	
				if ((this.filtros.state !== undefined) && (this.filtros.municipio) !== undefined) {
					// TODO: Agregrar evento
				} else if ((this.filtros.estado !== undefined) && (this.filtros.municipio === undefined)) {
					this.mapa.getTotalTendenciasEstado(this.filtros, 'negative');
				} else {
					this.mapa.getTotalTendencias(this.filtros, 'negative');
				}
	
				break;
			default:
				this.filtros.tipoTest = 'trendNeutral'
	
				if ((this.filtros.state !== undefined) && (this.filtros.municipio) !== undefined) {
					// TODO: Agregrar evento
				} else if ((this.filtros.estado !== undefined) && (this.filtros.municipio === undefined)) {
					this.mapa.getTotalTendenciasEstado(this.filtros, 'neutral');
				} else {
					this.mapa.getTotalTendencias(this.filtros, 'neutral');
				}
	
				break;
		}
	
		this.servicios.sintomatologia(this.filtros).then((data) => {
			this.maperDatosGraficaUno(data);
			//this.maperDatosGraficaDos(data);
		})
		this.servicios.rangoEdades(this.filtros).then(this.mapearDatosGraficaEdades.bind(this))
		//this.servicios.derechoHabientes(this.filtros).then(this.mapearDatosDerechoHabientes.bind(this))
		this.servicios.indicadoresUsuarios(this.filtros).then((data)=>{
			this.fillCards(data)
	
			if (this.filtros.estado === undefined) {
				$("#totalRegistros").text(numeral(data.totalUsers).format('0,000'));
				$("#usuariosPorZona").text("-");
			} else {
				$("#usuariosPorZona").text(numeral(data.totalUsers).format('0,000'));
			}
		});}
	
	Registro.prototype.mostarModalEnvio = function () {
	
		this.tipoEnvio = event.toElement.dataset.action;
	
		//document.getElementById("mensaje-text").value = "";
		$("#modalEnvioMensaje").modal();
	}
	
	//- INICIO- FUNCIONES LLAMADAS AJAX
	
	//Carga el catálogo de Delegaciones/Municipios
	Registro.prototype.getMunicipios = function () {
		this.servicios.getMunicipios(this.filtros.estado).then(this.fillMunicipios.bind(this))
		//Se usar para limpiar el select alcaldias    
		this.colonias.cleanFiltroColonias();
	}
	
	//Carga el catálogo de Colonias/Asentamientos 
	Registro.prototype.getColonias = function () {
		this.servicios.getColonias(this.filtros.estado, this.filtros.municipio).then(this.fillColonias.bind(this))
	}
	
	//Ejecuta el filtro por fecha e invoca el servicio correspondiente
	Registro.prototype.filtroPorFecha = function (value) {
		this.pagina = 0;
		this.filtros.fechaIni = this.fechaAmilisegundos(document.getElementById('fechaIni').value);
		if (value.srcElement.id == 'fechaFin') {
			this.filtros.fechaFin = this.fechaAmilisegundos(document.getElementById('fechaFin').value + ' 23:59:59');
		}
		if (this.filtros.fechaIni !== undefined && this.filtros.fechaFin !== undefined) {
	
	
			if (this.filtros.fechaFin < this.filtros.fechaIni) {
				document.getElementById('fechaIni').value = "dd/mm/aaaa";
				document.getElementById('fechaFin').value = "dd/mm/aaaa";
				this.filtros.fechaIni = undefined
				this.filtros.fechaFin = undefined
			} else {
	
				this.cambiarFiltroMapa();
	
				this.servicios.getAllData2(this.filtros, 0, this.tamañoPagina).then((data) => {
					this.pintarDatos(data)
				});
				if (value.srcElement.id == 'fechaFin') {
				}
			}
		}
	}
	
	Registro.prototype.sendMessage = function () {
		let mensaje = document.getElementById("mensaje-text").value;
	
		if (this.tipoEnvio === "zona") {
			this.servicios.envioMensajeZona(this.filtros, mensaje).then($('#modalEnvioMensaje').modal('hide'), $('#modalEnvioMensaje').modal('hide'));
		} else {
			this.servicios.envioMensajeMasivo(mensaje).then($('#modalEnvioMensaje').modal('hide'), $('#modalEnvioMensaje').modal('hide'));
		}
	}
	
	//- INICIO - FUNCIONES PARA SELECTS
	
	//Llena el Select de Estados
	Registro.prototype.fillEstados = function (collection) {
		this.estados.fill(collection);
	}
	
	//Llena el Select de Delegaciones Municipios
	Registro.prototype.fillMunicipios = function (collection) {
		this.municipios.fill(collection)
	}
	
	//Llena el Select de Colonias Asentamientos
	Registro.prototype.fillColonias = function (collection) {
		this.colonias.fill(collection)
	}
	
	
	//- INICIO - FUNCIONES PARA LA TABLA DE INFORMACIÓN
	
	//Pinta la tabla de información
	Registro.prototype.pintarDatos = function (data) {
		this.model.tablaRegistros.table.rows = data.items
		this.model.tablaRegistros.table.total = data.total;
		this.model.tablaRegistros.table.rows.forEach((item) => {
			//Formatear Fecha
			item.date = this.formatearFecha(item.date)
			//item.phone = this.ofuscarNumeroCelular(item)
		})
	
		this.tablaDatos.construirBody(this.model.tablaRegistros.table.rows);
		this.paginarDatos();
		this.setTotal();
	}
	
	Registro.prototype.setDefaultState = function (state) {
		this.estados.selectTexto(state)
		this.filtros.estado = state !== "all" ? state : undefined
		//console.info("Entro Correcto" + this.filtros.estado)
		this.eventosEstados();
	}
	
	//Formatea las fechas a formato (YYYY-mm-DD)
	Registro.prototype.formatoFechaInputs = function (date) {
		let day = date.getDate();
		let month = date.getMonth() + 1;
		if (day < 10)
			day = '0' + day; //agrega cero si el menor de 10
		if (month < 10)
			month = '0' + month
		return fecha = date.getFullYear() + "-" + month + "-" + day;
	}
	
	Registro.prototype.fechaConNombreMes = function (date) {
		var meses = new Array("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre");
	
	
		return date.getDate() + " de " + meses[date.getMonth()] + " de " + date.getFullYear()
	}
	
	//Milisegundos a formato (DD-mm-YYYY)
	Registro.prototype.formatearFecha = function (date) {
		let newDate = new Date((date * 1000))
		let day = newDate.getDate();
		let month = newDate.getMonth() + 1;
		if (day < 10)
			day = '0' + day; //agrega cero si el menor de 10
		if (month < 10)
			month = '0' + month
		
		return date = day + "-" + month + "-" + newDate.getFullYear();
	}
	
	//Fechas AAAA-mm-DD a Milisegundos
	Registro.prototype.fechaAmilisegundos = function (date) {
		let fecha = Date.parse(date)
	
		return fecha / 1000.00
	}
	
	//Ofusca los 6 primeros digitos del numero celular
	Registro.prototype.ofuscarNumeroCelular = function (item) {
		let numeroMostrar = item.phone.substr((item.phone.length - 4), (item.phone.length))
		let numeroOcultar = item.phone.substr(0, (item.phone.length - 4))
	
		let charNumero = numeroOcultar.split('');
	
		charNumero.forEach((item, index) => {
			charNumero[index] = "*";
		})
	
		return charNumero.join('') + numeroMostrar;
	
	}
	
	//Paginado de la tabla de información
	Registro.prototype.paginarDatos = function () {
	
		//let paginas = totalRegistros / this.tamañoPagina;
		let table = $('#tabla-datos').DataTable();
	
		table.destroy();
	
		table = $('#tabla-datos').DataTable({
			//retrieve: true,
			paging: false,
			searching: false,
			//ordering: true,
			order: [[ 4, "desc" ]]
		})
	}
	
	//Siguiente pagina de la tabla
	Registro.prototype.siguientePagina = function () {
		this.pagina = this.pagina + 1
		this.servicios.getAllData2(this.filtros, this.pagina, this.tamañoPagina).then(this.pintarDatos.bind(this));
	
		if (this.model.tablaRegistros.table.rows.length === 0) {
			this.pagina = this.pagina - 1
		}
	
		pagina = `<span><a id="pagina-${this.pagina + 1}" tabindex="0">${this.pagina + 1}</a></span>`;
		$("#paginadoTabla").empty()
		$("#paginadoTabla").append(pagina);
	}
	
	//Pagina Anterior de la tabla
	Registro.prototype.paginaAnterior = function () {
		this.pagina = this.pagina !== 0 ? this.pagina - 1 : 0;
		this.servicios.getAllData2(this.filtros, this.pagina, this.tamañoPagina).then(this.pintarDatos.bind(this));
		pagina = `<span><a id="pagina-${this.pagina + 1}" tabindex="0">${this.pagina + 1}</a></span>`;
	
		$("#paginadoTabla").empty()
		$("#paginadoTabla").append(pagina);
	}
	
	//Pagina Especifica de la tabla
	Registro.prototype.paginaEspecifica = function (event) {
		this.pagina = parseInt(event.toElement.innerText) - 1;
	
		this.servicios.getAllData2(this.filtros, this.pagina, this.tamañoPagina).then(this.pintarDatos.bind(this));
	}
	
	//Setea los totales en los campos correspondientes
	Registro.prototype.setTotal = function () {
	
		if (this.model.tablaRegistros.table.total < this.tamañoPagina) {
			$(".total-celular").hide()
		} else {
			$(".total-celular").show()
			$("#totalRegistrosFooter").text(numeral(this.model.tablaRegistros.table.total).format('0,000'));
			$("#tamañoPagina").text(this.tamañoPagina);
		}
	}
	
	// Funciones para las Gráficas
	
	Registro.prototype.maperDatosGraficaUno = function (data) {
		let sintomasTamis1 = [
			{ etiqueta: "Defensas Bajas", valor: data.defenses },
			{ etiqueta: "Diabetes", valor: data.diabetes },
			{ etiqueta: "Hipertensión", valor: data.hypertension },
			{ etiqueta: "Obesidad", valor: data.obesity },
			{ etiqueta: "Embarazadas", valor: data.pregnant } 
		]
	
		this.tamisUno.renderBarChart(sintomasTamis1);
	}
	
	Registro.prototype.maperDatosGraficaDos = function (data) {
		let sintomasTamis2 = [
			{ etiqueta: "Dolor al Respirar", valor: data.respiratoryPain },
			{ etiqueta: "Falta de Aire", valor: data.breathing2 },
			{ etiqueta: "Coloración azul en labios, dedos o uñas", valor: data.blue },
		]
	
		this.tamisDos.renderBarChart(sintomasTamis2);
	}
	
	Registro.prototype.mapearDatosGraficaEdades = function (data) {
		let graficaStacked = [
			{ etiqueta: "0 - 10", valor1: data[0].male, valor2: data[0].female },
			{ etiqueta: "11 - 20", valor1: data[1].male, valor2: data[1].female },
			{ etiqueta: "21 - 30", valor1: data[2].male, valor2: data[2].female },
			{ etiqueta: "31 - 40", valor1: data[3].male, valor2: data[3].female },
			{ etiqueta: "41 - 50", valor1: data[4].male, valor2: data[4].female },
			{ etiqueta: "51 - 60", valor1: data[5].male, valor2: data[5].female },
			{ etiqueta: "61 - 70", valor1: data[6].male, valor2: data[6].female },
			{ etiqueta: "71 - 80", valor1: data[7].male, valor2: data[7].female },
			{ etiqueta: "81 - 90", valor1: data[8].male, valor2: data[8].female },
			{ etiqueta: "91 - 99", valor1: data[9].male, valor2: data[9].female }
		]
	
		this.generoEdad.renderStacked(graficaStacked);
	}
	
	Registro.prototype.mapearDatosDerechoHabientes = function (data) {
		let derechoHabiente = [
			{ etiqueta: "Si", valor: data.yes },
			{ etiqueta: "No", valor: data.no },
		]
	
		this.derechoHabiente.renderDonut(derechoHabiente);
	}
	
	Registro.prototype.fillCards = function (data) {
		$("#total-usuarios-card").text(numeral(data.totalUsers).format('0,000'));
		$("#usuario-perfiles").text(numeral(data.usersMultiplesProfiles).format('0,000'))
		$("#promedio-perfiles").text(numeral(data.avgProfiles).format('0,000'))
		$("#total-perfiles").text(numeral(data.totalProfiles).format('0,000'))
	
		let perfilesAdicionales = data.usersMultiplesProfiles;
		let totalUsuarios = data.totalUsers;
		let porcentaje = ((perfilesAdicionales * 100) / totalUsuarios)
	
		$("#porcentaje-usuario-perfiles").text(numeral(porcentaje).format("0.0"))
	}
	
	module.exports = Registro;
	
	},{"./chartsRegistros":2,"./mapa":3,"./model":4,"./selectComponent":6,"./servicios":7,"./tablaDatos":8,"bootstrap":9,"datatables.net":23,"numeral":26}],6:[function(require,module,exports){
	
	var SelectComponent = function(selector){
		console.debug('Loading SelectComponent with selector '+selector);
		this.selector=selector;
		this.element = document.getElementById(selector.replace('#',''));
		
		
	}
	
	SelectComponent.prototype.fillGeneral = function(collection){
		console.debug('SelectComponent::method(fill) for '+this.selector);
		//console.info(this)
		this.clean();
	
		collection.forEach((item,index)=>{
			this.element.options.add(new Option(item.text,item.value));
		});
	
		this.element.value=collection[0].value;
	}
	
	SelectComponent.prototype.fill = function(collection){
		console.debug('SelectComponent::method(fillEstados) for '+this.selector);
	
		this.clean();
		
		switch(this.selector) {
			case "#estados":
				//Opcion de todos
				let optionTodos = document.createElement("option");
				optionTodos.value = "all";
				optionTodos.id = "estado";
				optionTodos.text = "Todos los estados"; 
				optionTodos.selected = true
				this.element.appendChild(optionTodos);
	
			break;
			case "#municipios":
				//Opcion de todos
				let optionTodos2 = document.createElement("option");
				optionTodos2.value = "all";
				optionTodos2.id = "delegacion";
				optionTodos2.text = "Todos los municipios / alcaldías"; 
				optionTodos2.selected = true
				this.element.appendChild(optionTodos2);	  
			break;
			case "#colonias":
				let optionTodos3 = document.createElement("option");
				optionTodos3.value = "all";
				optionTodos3.id = "alcaldia";
				optionTodos3.text = "Todas las colonias o asentamientos"; 
				optionTodos3.selected = true
				this.element.appendChild(optionTodos3);	
			break;
			default:
			
		  } 
	
		collection.forEach((item)=>{
			var option = document.createElement("option");
	
			option.value = item.id;
			option.id = item.id;
			option.text = item.name; 
			this.element.appendChild(option);
	
		});
	}
	
	
	SelectComponent.prototype.clean = function(){
		while(this.element.length>0){
			this.element.remove(0);
		}
	}
	
	
	SelectComponent.prototype.cleanFiltroColonias = function(){
		while(this.element.length>0){
			this.element.remove(0);
		}
	
		let option = document.createElement("option");
		option.value = "colonia";
		option.id = "colonia";
		option.text = "Todas las colonias o asentamientos"; 
		option.selected = true
		this.element.appendChild(option);
	}
	
	SelectComponent.prototype.cleanFiltroMunicipio = function(){
		while(this.element.length>0){
			this.element.remove(0);
		}
	
		let option = document.createElement("option");
		option.value = "delegacion";
		option.id = "delegacion";
		option.text = "Todos los municipios / alcaldías"; 
		option.selected = true
		this.element.appendChild(option);
	}
	
	SelectComponent.prototype.cleanFilterEstados = function(){
		this.element.selectedIndex = "0";
	}
	
	SelectComponent.prototype.selectTexto  = function (value){
		$(this.selector).val(value);
	}
	
	SelectComponent.prototype.selectedText = function(){
		if (this.element.selectedIndex != -1){
			return this.element.options[this.element.selectedIndex].text;
		}
	}
	
	module.exports = SelectComponent; 
	},{}],7:[function(require,module,exports){
	var Servicios = function () {
		this.profile = "dev";
		this.errorService = "";
		this.data = ""
		this.url = `${BACK_URL}/api/`
	}
	
	Servicios.prototype.getStates = function () {
		let url = `${this.url}admins/states`;
		let type = "get";
	
		return this.ajaxCall(url, type)
	}
	
	Servicios.prototype.getMunicipios = function (estado) {
		let url = `${this.url}admins/states/${estado}/municipalities`;
		let type = "get";
	
		return this.ajaxCall(url, type)
	}
	
	Servicios.prototype.getColonias = function (estado, municipio) {
		let url = `${this.url}admins/states/${estado}/municipalities/${municipio}/suburbs`;
		let type = "get";
	
		return this.ajaxCall(url, type)
	}
	
	Servicios.prototype.getAllData2 = function (filtros, page = 0, tamañoPagina) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
	
		let url = `${this.url}admins/tests?stateID=${state !== undefined ? state : ''}&municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}&page=${page !== undefined ? page : ''}&size=${tamañoPagina}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.getTotalRegistros = function (filtros) {
		let dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
	
		let url = `${this.url}admins/states/registers?&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.getTotalRegistrosEstado = function (filtros) {
		let dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		state = filtros.estado;
	
		let url = `${this.url}admins/states/${state}/registers?&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.getTotalTests = function (filtros) {
		let dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
	
		let url = `${this.url}admins/states/tests?&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.getTotalTestsEstado = function (filtros) {
		let dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		state = filtros.estado
	
		let url = `${this.url}admins/states/${state}/tests?startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.getTendencia = function (filtros, tendencia) {
		let dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
	
		let url = `${this.url}admins/states/trends/${tendencia}?&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.getTendenciaEstado = function (filtros, tendencia) {
		let dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		state = filtros.estado;
	
		let url = `${this.url}admins/states/${state}/trends/${tendencia}?&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.envioMensajeZona = function (filtros, mensaje) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.alcaldia;
	
		let urlCompleta = ``;
		let mensajeEstado = `/admins/states/${state}/message`
		let mensajeMunicipio = `/admins/states/${state}/municipalities/${municipality}/message`
		let mensajeColonia = `/admins/states/${state}/municipalities/${municipality}/suburbs/${suburb}/message`
	
		let url = this.url
	
		if ((state !== undefined) && (municipality !== undefined) && (suburb !== undefined)) {
			urlCompleta = `${url}${mensajeColonia}`
		} else if ((state !== undefined) && (municipality !== undefined) && (suburb === undefined)) {
			urlCompleta = `${url}${mensajeMunicipio}`
		} else {
			urlCompleta = `${url}${mensajeEstado}`
		}
	
		let type = "POST";
	
		let data = {
			message: mensaje
		}
	
		return this.ajaxCall(urlCompleta, type, data)
	}
	
	Servicios.prototype.envioMensajeMasivo = function (mensaje) {
		let url = `${this.url}admins/message`
		let type = "POST";
	
		let data = {
			message: mensaje
		}
	
		return this.ajaxCall(url, type, data)
	}
	
	Servicios.prototype.sintomatologia = function (filtros) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		tipoTest = filtros.tipoTest
	
		let url = `${this.url}stats/symptoms/${tipoTest}?stateID=${state !== undefined ? state : ''}&municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data);
	}
	
	Servicios.prototype.rangoEdades = function (filtros) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		tipoTest = filtros.tipoTest
	
		let url = `${this.url}stats/ageGender/${tipoTest}?stateID=${state !== undefined ? state : ''}&municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data);
	}
	
	Servicios.prototype.derechoHabientes = function (filtros) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		tipoTest = filtros.tipoTest
	
		let url = `${this.url}stats/socialSecurity/${tipoTest}?stateID=${state !== undefined ? state : ''}&municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data);
	}
	 
	Servicios.prototype.indicadoresUsuarios = function (filtros) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
	
		let url = `${this.url}stats/indicators?stateID=${state !== undefined ? state : ''}&municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data);
	}
	
	Servicios.prototype.getCasosSospechososFecha = function (filtros) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		intervalo = filtros.intervalo;
		genero= filtros.genero;
		diabetes= filtros.diabetes;
		obesidad= filtros.obesidad;
		hipertension= filtros.hipertension;
		defensas= filtros.defensas;
		embarazada= filtros.embarazada;
	
		let url=`${this.url}stats/cases/${intervalo}?stateID=${state !== undefined ? state : ''}&municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}&gender=${genero !== undefined ? genero : ''}&diabetes=${diabetes !== undefined ? diabetes : ''}&obesity=${obesidad !== undefined ? obesidad : ''}&hypertension=${hipertension !== undefined ? hipertension : ''}&defenses=${defensas !== undefined ? defensas : ''}&pregnant=${embarazada !== undefined ? embarazada : ''}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data);
	}
	
	Servicios.prototype.getCasosSospechososEdad = function (filtros) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		intervalo = filtros.intervalo;
		genero= filtros.genero;
		diabetes= filtros.diabetes;
		obesidad= filtros.obesidad;
		hipertension= filtros.hipertension;
		defensas= filtros.defensas;
		embarazada= filtros.embarazada;
	
		let url=`${this.url}stats/age?stateID=${state !== undefined ? state : ''}&municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}&gender=${genero !== undefined ? genero : ''}&diabetes=${diabetes !== undefined ? diabetes : ''}&obesity=${obesidad !== undefined ? obesidad : ''}&hypertension=${hipertension !== undefined ? hipertension : ''}&defenses=${defensas !== undefined ? defensas : ''}&pregnant=${embarazada !== undefined ? embarazada : ''}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data);
	}
	
	Servicios.prototype.getMomios = function (filtros, tipo) {
		let state = filtros.estado;
		municipality = filtros.municipio;
		suburb = filtros.colonia;
		dateIni = filtros.fechaIni;
		dateFin = filtros.fechaFin;
		genero= filtros.genero;
		diabetes= filtros.diabetes;
		obesidad= filtros.obesidad;
		hipertension= filtros.hipertension;
		defensas= filtros.defensas;
		embarazada= filtros.embarazada;
	
		let url=`${this.url}stats/or/${tipo}/${state}?municipalityID=${municipality !== undefined ? municipality : ''}&suburbID=${suburb !== undefined ? suburb : ''}&startDate=${dateIni !== undefined ? dateIni : ''}&endDate=${dateFin !== undefined ? dateFin : ''}&gender=${genero !== undefined ? genero : ''}&diabetes=${diabetes !== undefined ? diabetes : ''}&obesity=${obesidad !== undefined ? obesidad : ''}&hypertension=${hipertension !== undefined ? hipertension : ''}&defenses=${defensas !== undefined ? defensas : ''}&pregnant=${embarazada !== undefined ? embarazada : ''}`;
		let type = "get";
		let data = this.data
	
		return this.ajaxCall(url, type, data);
	}
	
	//-- generic ajax request with promises
	Servicios.prototype.ajaxCall = function (url, type, data) {
		//console.info("Services::ajaxCall() ",url,type,data);
		var self = this;
		var deferred = $.Deferred();
		var tokenSession = localStorage.getItem('AUTH-TOKEN');
		$.ajax({
			type: type,
			url: url,
			contentType: 'application/json',
			data: JSON.stringify(data),
			headers: {
				'Authorization' : `Bearer ${tokenSession}`
			   },
			success: function (data) {
				console.info('success ajaxCall: ', data);
				self.errorService = "OK";
				deferred.resolve(data);
			},
			fail: function (data, status) {
				console.info('fail: ', data, status);
				self.errorService = data.responseText;
				deferred.reject(data);
			},
			error: function (data, status) {
				console.info('error: ', data, status)
				self.errorService = data.responseText;
				deferred.reject(data);
			}
		});
		return deferred.promise();
	}
	
	module.exports = Servicios
	},{}],8:[function(require,module,exports){
	
	var tablaDatos = function(selectorById){
		this.data = null;
		this.selector = selectorById;
		this.element = document.getElementById(selectorById.replace('#',''));
	}
	
	tablaDatos.prototype.setData = function(data){
		//console.log("tablaDatos:::setData")
		this.data = data;
	}
	
	tablaDatos.prototype.construirHead = function(headers){
		
		this.headers = headers
		var thead= this.element.createTHead();
		var row = thead.insertRow(0);
		row.id="header2";
	
		this.headers.forEach((element,idx) => {
			var tr = document.getElementById('tabla-datos').tHead.children[0],
				cell = document.createElement('th');
			//var cell = row.insertCell(-1);
			cell.id=row.id+"-"+idx    
			cell.innerHTML=element.value;
			tr.appendChild(cell);	
		});
	
		$("#tabla-datos").addClass("fixed_headers");    
	}
	
	tablaDatos.prototype.construirBody = function(rows){
		this.clean();
		let tbody= this.element.createTBody();
			tbody.id="body"
			
		rows.forEach((item,idx) => {
			//console.info(item)
			let rowRegular = tbody.insertRow(-1);
			let base = "00";
			let pos = base+idx;
			id=pos.substring((pos.length),(pos.length-3))
			rowRegular.id="row-"+id
			this.headers.forEach((item2,idx2)=>{
				var cellTA = rowRegular.insertCell(-1);
				cellTA.id=rowRegular.id+"-"+idx2;
				this.idXs = rowRegular.id;
				var textCell="";
				cellTA.innerHTML = textCell+item[item2.name];
			})
		});
	}
	
	tablaDatos.prototype.clean = function(){
		$("#tabla-datos" +'  tbody').remove();
	}
	
	module.exports = tablaDatos;
	},{}],9:[function(require,module,exports){
	// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
	require('../../js/transition.js')
	require('../../js/alert.js')
	require('../../js/button.js')
	require('../../js/carousel.js')
	require('../../js/collapse.js')
	require('../../js/dropdown.js')
	require('../../js/modal.js')
	require('../../js/tooltip.js')
	require('../../js/popover.js')
	require('../../js/scrollspy.js')
	require('../../js/tab.js')
	require('../../js/affix.js')
	},{"../../js/affix.js":10,"../../js/alert.js":11,"../../js/button.js":12,"../../js/carousel.js":13,"../../js/collapse.js":14,"../../js/dropdown.js":15,"../../js/modal.js":16,"../../js/popover.js":17,"../../js/scrollspy.js":18,"../../js/tab.js":19,"../../js/tooltip.js":20,"../../js/transition.js":21}],10:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: affix.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#affix
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // AFFIX CLASS DEFINITION
	  // ======================
	
	  var Affix = function (element, options) {
		this.options = $.extend({}, Affix.DEFAULTS, options)
	
		var target = this.options.target === Affix.DEFAULTS.target ? $(this.options.target) : $(document).find(this.options.target)
	
		this.$target = target
		  .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
		  .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))
	
		this.$element     = $(element)
		this.affixed      = null
		this.unpin        = null
		this.pinnedOffset = null
	
		this.checkPosition()
	  }
	
	  Affix.VERSION  = '3.4.1'
	
	  Affix.RESET    = 'affix affix-top affix-bottom'
	
	  Affix.DEFAULTS = {
		offset: 0,
		target: window
	  }
	
	  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
		var scrollTop    = this.$target.scrollTop()
		var position     = this.$element.offset()
		var targetHeight = this.$target.height()
	
		if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false
	
		if (this.affixed == 'bottom') {
		  if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
		  return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
		}
	
		var initializing   = this.affixed == null
		var colliderTop    = initializing ? scrollTop : position.top
		var colliderHeight = initializing ? targetHeight : height
	
		if (offsetTop != null && scrollTop <= offsetTop) return 'top'
		if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'
	
		return false
	  }
	
	  Affix.prototype.getPinnedOffset = function () {
		if (this.pinnedOffset) return this.pinnedOffset
		this.$element.removeClass(Affix.RESET).addClass('affix')
		var scrollTop = this.$target.scrollTop()
		var position  = this.$element.offset()
		return (this.pinnedOffset = position.top - scrollTop)
	  }
	
	  Affix.prototype.checkPositionWithEventLoop = function () {
		setTimeout($.proxy(this.checkPosition, this), 1)
	  }
	
	  Affix.prototype.checkPosition = function () {
		if (!this.$element.is(':visible')) return
	
		var height       = this.$element.height()
		var offset       = this.options.offset
		var offsetTop    = offset.top
		var offsetBottom = offset.bottom
		var scrollHeight = Math.max($(document).height(), $(document.body).height())
	
		if (typeof offset != 'object')         offsetBottom = offsetTop = offset
		if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
		if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)
	
		var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)
	
		if (this.affixed != affix) {
		  if (this.unpin != null) this.$element.css('top', '')
	
		  var affixType = 'affix' + (affix ? '-' + affix : '')
		  var e         = $.Event(affixType + '.bs.affix')
	
		  this.$element.trigger(e)
	
		  if (e.isDefaultPrevented()) return
	
		  this.affixed = affix
		  this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null
	
		  this.$element
			.removeClass(Affix.RESET)
			.addClass(affixType)
			.trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
		}
	
		if (affix == 'bottom') {
		  this.$element.offset({
			top: scrollHeight - height - offsetBottom
		  })
		}
	  }
	
	
	  // AFFIX PLUGIN DEFINITION
	  // =======================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this   = $(this)
		  var data    = $this.data('bs.affix')
		  var options = typeof option == 'object' && option
	
		  if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
		  if (typeof option == 'string') data[option]()
		})
	  }
	
	  var old = $.fn.affix
	
	  $.fn.affix             = Plugin
	  $.fn.affix.Constructor = Affix
	
	
	  // AFFIX NO CONFLICT
	  // =================
	
	  $.fn.affix.noConflict = function () {
		$.fn.affix = old
		return this
	  }
	
	
	  // AFFIX DATA-API
	  // ==============
	
	  $(window).on('load', function () {
		$('[data-spy="affix"]').each(function () {
		  var $spy = $(this)
		  var data = $spy.data()
	
		  data.offset = data.offset || {}
	
		  if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
		  if (data.offsetTop    != null) data.offset.top    = data.offsetTop
	
		  Plugin.call($spy, data)
		})
	  })
	
	}(jQuery);
	
	},{}],11:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: alert.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#alerts
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // ALERT CLASS DEFINITION
	  // ======================
	
	  var dismiss = '[data-dismiss="alert"]'
	  var Alert   = function (el) {
		$(el).on('click', dismiss, this.close)
	  }
	
	  Alert.VERSION = '3.4.1'
	
	  Alert.TRANSITION_DURATION = 150
	
	  Alert.prototype.close = function (e) {
		var $this    = $(this)
		var selector = $this.attr('data-target')
	
		if (!selector) {
		  selector = $this.attr('href')
		  selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
		}
	
		selector    = selector === '#' ? [] : selector
		var $parent = $(document).find(selector)
	
		if (e) e.preventDefault()
	
		if (!$parent.length) {
		  $parent = $this.closest('.alert')
		}
	
		$parent.trigger(e = $.Event('close.bs.alert'))
	
		if (e.isDefaultPrevented()) return
	
		$parent.removeClass('in')
	
		function removeElement() {
		  // detach from parent, fire event then clean up data
		  $parent.detach().trigger('closed.bs.alert').remove()
		}
	
		$.support.transition && $parent.hasClass('fade') ?
		  $parent
			.one('bsTransitionEnd', removeElement)
			.emulateTransitionEnd(Alert.TRANSITION_DURATION) :
		  removeElement()
	  }
	
	
	  // ALERT PLUGIN DEFINITION
	  // =======================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this = $(this)
		  var data  = $this.data('bs.alert')
	
		  if (!data) $this.data('bs.alert', (data = new Alert(this)))
		  if (typeof option == 'string') data[option].call($this)
		})
	  }
	
	  var old = $.fn.alert
	
	  $.fn.alert             = Plugin
	  $.fn.alert.Constructor = Alert
	
	
	  // ALERT NO CONFLICT
	  // =================
	
	  $.fn.alert.noConflict = function () {
		$.fn.alert = old
		return this
	  }
	
	
	  // ALERT DATA-API
	  // ==============
	
	  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)
	
	}(jQuery);
	
	},{}],12:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: button.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#buttons
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // BUTTON PUBLIC CLASS DEFINITION
	  // ==============================
	
	  var Button = function (element, options) {
		this.$element  = $(element)
		this.options   = $.extend({}, Button.DEFAULTS, options)
		this.isLoading = false
	  }
	
	  Button.VERSION  = '3.4.1'
	
	  Button.DEFAULTS = {
		loadingText: 'loading...'
	  }
	
	  Button.prototype.setState = function (state) {
		var d    = 'disabled'
		var $el  = this.$element
		var val  = $el.is('input') ? 'val' : 'html'
		var data = $el.data()
	
		state += 'Text'
	
		if (data.resetText == null) $el.data('resetText', $el[val]())
	
		// push to event loop to allow forms to submit
		setTimeout($.proxy(function () {
		  $el[val](data[state] == null ? this.options[state] : data[state])
	
		  if (state == 'loadingText') {
			this.isLoading = true
			$el.addClass(d).attr(d, d).prop(d, true)
		  } else if (this.isLoading) {
			this.isLoading = false
			$el.removeClass(d).removeAttr(d).prop(d, false)
		  }
		}, this), 0)
	  }
	
	  Button.prototype.toggle = function () {
		var changed = true
		var $parent = this.$element.closest('[data-toggle="buttons"]')
	
		if ($parent.length) {
		  var $input = this.$element.find('input')
		  if ($input.prop('type') == 'radio') {
			if ($input.prop('checked')) changed = false
			$parent.find('.active').removeClass('active')
			this.$element.addClass('active')
		  } else if ($input.prop('type') == 'checkbox') {
			if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
			this.$element.toggleClass('active')
		  }
		  $input.prop('checked', this.$element.hasClass('active'))
		  if (changed) $input.trigger('change')
		} else {
		  this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
		  this.$element.toggleClass('active')
		}
	  }
	
	
	  // BUTTON PLUGIN DEFINITION
	  // ========================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this   = $(this)
		  var data    = $this.data('bs.button')
		  var options = typeof option == 'object' && option
	
		  if (!data) $this.data('bs.button', (data = new Button(this, options)))
	
		  if (option == 'toggle') data.toggle()
		  else if (option) data.setState(option)
		})
	  }
	
	  var old = $.fn.button
	
	  $.fn.button             = Plugin
	  $.fn.button.Constructor = Button
	
	
	  // BUTTON NO CONFLICT
	  // ==================
	
	  $.fn.button.noConflict = function () {
		$.fn.button = old
		return this
	  }
	
	
	  // BUTTON DATA-API
	  // ===============
	
	  $(document)
		.on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
		  var $btn = $(e.target).closest('.btn')
		  Plugin.call($btn, 'toggle')
		  if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
			// Prevent double click on radios, and the double selections (so cancellation) on checkboxes
			e.preventDefault()
			// The target component still receive the focus
			if ($btn.is('input,button')) $btn.trigger('focus')
			else $btn.find('input:visible,button:visible').first().trigger('focus')
		  }
		})
		.on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
		  $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
		})
	
	}(jQuery);
	
	},{}],13:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: carousel.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#carousel
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // CAROUSEL CLASS DEFINITION
	  // =========================
	
	  var Carousel = function (element, options) {
		this.$element    = $(element)
		this.$indicators = this.$element.find('.carousel-indicators')
		this.options     = options
		this.paused      = null
		this.sliding     = null
		this.interval    = null
		this.$active     = null
		this.$items      = null
	
		this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))
	
		this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
		  .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
		  .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
	  }
	
	  Carousel.VERSION  = '3.4.1'
	
	  Carousel.TRANSITION_DURATION = 600
	
	  Carousel.DEFAULTS = {
		interval: 5000,
		pause: 'hover',
		wrap: true,
		keyboard: true
	  }
	
	  Carousel.prototype.keydown = function (e) {
		if (/input|textarea/i.test(e.target.tagName)) return
		switch (e.which) {
		  case 37: this.prev(); break
		  case 39: this.next(); break
		  default: return
		}
	
		e.preventDefault()
	  }
	
	  Carousel.prototype.cycle = function (e) {
		e || (this.paused = false)
	
		this.interval && clearInterval(this.interval)
	
		this.options.interval
		  && !this.paused
		  && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))
	
		return this
	  }
	
	  Carousel.prototype.getItemIndex = function (item) {
		this.$items = item.parent().children('.item')
		return this.$items.index(item || this.$active)
	  }
	
	  Carousel.prototype.getItemForDirection = function (direction, active) {
		var activeIndex = this.getItemIndex(active)
		var willWrap = (direction == 'prev' && activeIndex === 0)
					|| (direction == 'next' && activeIndex == (this.$items.length - 1))
		if (willWrap && !this.options.wrap) return active
		var delta = direction == 'prev' ? -1 : 1
		var itemIndex = (activeIndex + delta) % this.$items.length
		return this.$items.eq(itemIndex)
	  }
	
	  Carousel.prototype.to = function (pos) {
		var that        = this
		var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))
	
		if (pos > (this.$items.length - 1) || pos < 0) return
	
		if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
		if (activeIndex == pos) return this.pause().cycle()
	
		return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
	  }
	
	  Carousel.prototype.pause = function (e) {
		e || (this.paused = true)
	
		if (this.$element.find('.next, .prev').length && $.support.transition) {
		  this.$element.trigger($.support.transition.end)
		  this.cycle(true)
		}
	
		this.interval = clearInterval(this.interval)
	
		return this
	  }
	
	  Carousel.prototype.next = function () {
		if (this.sliding) return
		return this.slide('next')
	  }
	
	  Carousel.prototype.prev = function () {
		if (this.sliding) return
		return this.slide('prev')
	  }
	
	  Carousel.prototype.slide = function (type, next) {
		var $active   = this.$element.find('.item.active')
		var $next     = next || this.getItemForDirection(type, $active)
		var isCycling = this.interval
		var direction = type == 'next' ? 'left' : 'right'
		var that      = this
	
		if ($next.hasClass('active')) return (this.sliding = false)
	
		var relatedTarget = $next[0]
		var slideEvent = $.Event('slide.bs.carousel', {
		  relatedTarget: relatedTarget,
		  direction: direction
		})
		this.$element.trigger(slideEvent)
		if (slideEvent.isDefaultPrevented()) return
	
		this.sliding = true
	
		isCycling && this.pause()
	
		if (this.$indicators.length) {
		  this.$indicators.find('.active').removeClass('active')
		  var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
		  $nextIndicator && $nextIndicator.addClass('active')
		}
	
		var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
		if ($.support.transition && this.$element.hasClass('slide')) {
		  $next.addClass(type)
		  if (typeof $next === 'object' && $next.length) {
			$next[0].offsetWidth // force reflow
		  }
		  $active.addClass(direction)
		  $next.addClass(direction)
		  $active
			.one('bsTransitionEnd', function () {
			  $next.removeClass([type, direction].join(' ')).addClass('active')
			  $active.removeClass(['active', direction].join(' '))
			  that.sliding = false
			  setTimeout(function () {
				that.$element.trigger(slidEvent)
			  }, 0)
			})
			.emulateTransitionEnd(Carousel.TRANSITION_DURATION)
		} else {
		  $active.removeClass('active')
		  $next.addClass('active')
		  this.sliding = false
		  this.$element.trigger(slidEvent)
		}
	
		isCycling && this.cycle()
	
		return this
	  }
	
	
	  // CAROUSEL PLUGIN DEFINITION
	  // ==========================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this   = $(this)
		  var data    = $this.data('bs.carousel')
		  var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
		  var action  = typeof option == 'string' ? option : options.slide
	
		  if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
		  if (typeof option == 'number') data.to(option)
		  else if (action) data[action]()
		  else if (options.interval) data.pause().cycle()
		})
	  }
	
	  var old = $.fn.carousel
	
	  $.fn.carousel             = Plugin
	  $.fn.carousel.Constructor = Carousel
	
	
	  // CAROUSEL NO CONFLICT
	  // ====================
	
	  $.fn.carousel.noConflict = function () {
		$.fn.carousel = old
		return this
	  }
	
	
	  // CAROUSEL DATA-API
	  // =================
	
	  var clickHandler = function (e) {
		var $this   = $(this)
		var href    = $this.attr('href')
		if (href) {
		  href = href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7
		}
	
		var target  = $this.attr('data-target') || href
		var $target = $(document).find(target)
	
		if (!$target.hasClass('carousel')) return
	
		var options = $.extend({}, $target.data(), $this.data())
		var slideIndex = $this.attr('data-slide-to')
		if (slideIndex) options.interval = false
	
		Plugin.call($target, options)
	
		if (slideIndex) {
		  $target.data('bs.carousel').to(slideIndex)
		}
	
		e.preventDefault()
	  }
	
	  $(document)
		.on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
		.on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)
	
	  $(window).on('load', function () {
		$('[data-ride="carousel"]').each(function () {
		  var $carousel = $(this)
		  Plugin.call($carousel, $carousel.data())
		})
	  })
	
	}(jQuery);
	
	},{}],14:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: collapse.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#collapse
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	/* jshint latedef: false */
	
	+function ($) {
	  'use strict';
	
	  // COLLAPSE PUBLIC CLASS DEFINITION
	  // ================================
	
	  var Collapse = function (element, options) {
		this.$element      = $(element)
		this.options       = $.extend({}, Collapse.DEFAULTS, options)
		this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
							   '[data-toggle="collapse"][data-target="#' + element.id + '"]')
		this.transitioning = null
	
		if (this.options.parent) {
		  this.$parent = this.getParent()
		} else {
		  this.addAriaAndCollapsedClass(this.$element, this.$trigger)
		}
	
		if (this.options.toggle) this.toggle()
	  }
	
	  Collapse.VERSION  = '3.4.1'
	
	  Collapse.TRANSITION_DURATION = 350
	
	  Collapse.DEFAULTS = {
		toggle: true
	  }
	
	  Collapse.prototype.dimension = function () {
		var hasWidth = this.$element.hasClass('width')
		return hasWidth ? 'width' : 'height'
	  }
	
	  Collapse.prototype.show = function () {
		if (this.transitioning || this.$element.hasClass('in')) return
	
		var activesData
		var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')
	
		if (actives && actives.length) {
		  activesData = actives.data('bs.collapse')
		  if (activesData && activesData.transitioning) return
		}
	
		var startEvent = $.Event('show.bs.collapse')
		this.$element.trigger(startEvent)
		if (startEvent.isDefaultPrevented()) return
	
		if (actives && actives.length) {
		  Plugin.call(actives, 'hide')
		  activesData || actives.data('bs.collapse', null)
		}
	
		var dimension = this.dimension()
	
		this.$element
		  .removeClass('collapse')
		  .addClass('collapsing')[dimension](0)
		  .attr('aria-expanded', true)
	
		this.$trigger
		  .removeClass('collapsed')
		  .attr('aria-expanded', true)
	
		this.transitioning = 1
	
		var complete = function () {
		  this.$element
			.removeClass('collapsing')
			.addClass('collapse in')[dimension]('')
		  this.transitioning = 0
		  this.$element
			.trigger('shown.bs.collapse')
		}
	
		if (!$.support.transition) return complete.call(this)
	
		var scrollSize = $.camelCase(['scroll', dimension].join('-'))
	
		this.$element
		  .one('bsTransitionEnd', $.proxy(complete, this))
		  .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
	  }
	
	  Collapse.prototype.hide = function () {
		if (this.transitioning || !this.$element.hasClass('in')) return
	
		var startEvent = $.Event('hide.bs.collapse')
		this.$element.trigger(startEvent)
		if (startEvent.isDefaultPrevented()) return
	
		var dimension = this.dimension()
	
		this.$element[dimension](this.$element[dimension]())[0].offsetHeight
	
		this.$element
		  .addClass('collapsing')
		  .removeClass('collapse in')
		  .attr('aria-expanded', false)
	
		this.$trigger
		  .addClass('collapsed')
		  .attr('aria-expanded', false)
	
		this.transitioning = 1
	
		var complete = function () {
		  this.transitioning = 0
		  this.$element
			.removeClass('collapsing')
			.addClass('collapse')
			.trigger('hidden.bs.collapse')
		}
	
		if (!$.support.transition) return complete.call(this)
	
		this.$element
		  [dimension](0)
		  .one('bsTransitionEnd', $.proxy(complete, this))
		  .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
	  }
	
	  Collapse.prototype.toggle = function () {
		this[this.$element.hasClass('in') ? 'hide' : 'show']()
	  }
	
	  Collapse.prototype.getParent = function () {
		return $(document).find(this.options.parent)
		  .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
		  .each($.proxy(function (i, element) {
			var $element = $(element)
			this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
		  }, this))
		  .end()
	  }
	
	  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
		var isOpen = $element.hasClass('in')
	
		$element.attr('aria-expanded', isOpen)
		$trigger
		  .toggleClass('collapsed', !isOpen)
		  .attr('aria-expanded', isOpen)
	  }
	
	  function getTargetFromTrigger($trigger) {
		var href
		var target = $trigger.attr('data-target')
		  || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7
	
		return $(document).find(target)
	  }
	
	
	  // COLLAPSE PLUGIN DEFINITION
	  // ==========================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this   = $(this)
		  var data    = $this.data('bs.collapse')
		  var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)
	
		  if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
		  if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
		  if (typeof option == 'string') data[option]()
		})
	  }
	
	  var old = $.fn.collapse
	
	  $.fn.collapse             = Plugin
	  $.fn.collapse.Constructor = Collapse
	
	
	  // COLLAPSE NO CONFLICT
	  // ====================
	
	  $.fn.collapse.noConflict = function () {
		$.fn.collapse = old
		return this
	  }
	
	
	  // COLLAPSE DATA-API
	  // =================
	
	  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
		var $this   = $(this)
	
		if (!$this.attr('data-target')) e.preventDefault()
	
		var $target = getTargetFromTrigger($this)
		var data    = $target.data('bs.collapse')
		var option  = data ? 'toggle' : $this.data()
	
		Plugin.call($target, option)
	  })
	
	}(jQuery);
	
	},{}],15:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: dropdown.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#dropdowns
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // DROPDOWN CLASS DEFINITION
	  // =========================
	
	  var backdrop = '.dropdown-backdrop'
	  var toggle   = '[data-toggle="dropdown"]'
	  var Dropdown = function (element) {
		$(element).on('click.bs.dropdown', this.toggle)
	  }
	
	  Dropdown.VERSION = '3.4.1'
	
	  function getParent($this) {
		var selector = $this.attr('data-target')
	
		if (!selector) {
		  selector = $this.attr('href')
		  selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
		}
	
		var $parent = selector !== '#' ? $(document).find(selector) : null
	
		return $parent && $parent.length ? $parent : $this.parent()
	  }
	
	  function clearMenus(e) {
		if (e && e.which === 3) return
		$(backdrop).remove()
		$(toggle).each(function () {
		  var $this         = $(this)
		  var $parent       = getParent($this)
		  var relatedTarget = { relatedTarget: this }
	
		  if (!$parent.hasClass('open')) return
	
		  if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return
	
		  $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
	
		  if (e.isDefaultPrevented()) return
	
		  $this.attr('aria-expanded', 'false')
		  $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
		})
	  }
	
	  Dropdown.prototype.toggle = function (e) {
		var $this = $(this)
	
		if ($this.is('.disabled, :disabled')) return
	
		var $parent  = getParent($this)
		var isActive = $parent.hasClass('open')
	
		clearMenus()
	
		if (!isActive) {
		  if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
			// if mobile we use a backdrop because click events don't delegate
			$(document.createElement('div'))
			  .addClass('dropdown-backdrop')
			  .insertAfter($(this))
			  .on('click', clearMenus)
		  }
	
		  var relatedTarget = { relatedTarget: this }
		  $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))
	
		  if (e.isDefaultPrevented()) return
	
		  $this
			.trigger('focus')
			.attr('aria-expanded', 'true')
	
		  $parent
			.toggleClass('open')
			.trigger($.Event('shown.bs.dropdown', relatedTarget))
		}
	
		return false
	  }
	
	  Dropdown.prototype.keydown = function (e) {
		if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return
	
		var $this = $(this)
	
		e.preventDefault()
		e.stopPropagation()
	
		if ($this.is('.disabled, :disabled')) return
	
		var $parent  = getParent($this)
		var isActive = $parent.hasClass('open')
	
		if (!isActive && e.which != 27 || isActive && e.which == 27) {
		  if (e.which == 27) $parent.find(toggle).trigger('focus')
		  return $this.trigger('click')
		}
	
		var desc = ' li:not(.disabled):visible a'
		var $items = $parent.find('.dropdown-menu' + desc)
	
		if (!$items.length) return
	
		var index = $items.index(e.target)
	
		if (e.which == 38 && index > 0)                 index--         // up
		if (e.which == 40 && index < $items.length - 1) index++         // down
		if (!~index)                                    index = 0
	
		$items.eq(index).trigger('focus')
	  }
	
	
	  // DROPDOWN PLUGIN DEFINITION
	  // ==========================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this = $(this)
		  var data  = $this.data('bs.dropdown')
	
		  if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
		  if (typeof option == 'string') data[option].call($this)
		})
	  }
	
	  var old = $.fn.dropdown
	
	  $.fn.dropdown             = Plugin
	  $.fn.dropdown.Constructor = Dropdown
	
	
	  // DROPDOWN NO CONFLICT
	  // ====================
	
	  $.fn.dropdown.noConflict = function () {
		$.fn.dropdown = old
		return this
	  }
	
	
	  // APPLY TO STANDARD DROPDOWN ELEMENTS
	  // ===================================
	
	  $(document)
		.on('click.bs.dropdown.data-api', clearMenus)
		.on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
		.on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
		.on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
		.on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)
	
	}(jQuery);
	
	},{}],16:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: modal.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#modals
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // MODAL CLASS DEFINITION
	  // ======================
	
	  var Modal = function (element, options) {
		this.options = options
		this.$body = $(document.body)
		this.$element = $(element)
		this.$dialog = this.$element.find('.modal-dialog')
		this.$backdrop = null
		this.isShown = null
		this.originalBodyPad = null
		this.scrollbarWidth = 0
		this.ignoreBackdropClick = false
		this.fixedContent = '.navbar-fixed-top, .navbar-fixed-bottom'
	
		if (this.options.remote) {
		  this.$element
			.find('.modal-content')
			.load(this.options.remote, $.proxy(function () {
			  this.$element.trigger('loaded.bs.modal')
			}, this))
		}
	  }
	
	  Modal.VERSION = '3.4.1'
	
	  Modal.TRANSITION_DURATION = 300
	  Modal.BACKDROP_TRANSITION_DURATION = 150
	
	  Modal.DEFAULTS = {
		backdrop: true,
		keyboard: true,
		show: true
	  }
	
	  Modal.prototype.toggle = function (_relatedTarget) {
		return this.isShown ? this.hide() : this.show(_relatedTarget)
	  }
	
	  Modal.prototype.show = function (_relatedTarget) {
		var that = this
		var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })
	
		this.$element.trigger(e)
	
		if (this.isShown || e.isDefaultPrevented()) return
	
		this.isShown = true
	
		this.checkScrollbar()
		this.setScrollbar()
		this.$body.addClass('modal-open')
	
		this.escape()
		this.resize()
	
		this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))
	
		this.$dialog.on('mousedown.dismiss.bs.modal', function () {
		  that.$element.one('mouseup.dismiss.bs.modal', function (e) {
			if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
		  })
		})
	
		this.backdrop(function () {
		  var transition = $.support.transition && that.$element.hasClass('fade')
	
		  if (!that.$element.parent().length) {
			that.$element.appendTo(that.$body) // don't move modals dom position
		  }
	
		  that.$element
			.show()
			.scrollTop(0)
	
		  that.adjustDialog()
	
		  if (transition) {
			that.$element[0].offsetWidth // force reflow
		  }
	
		  that.$element.addClass('in')
	
		  that.enforceFocus()
	
		  var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })
	
		  transition ?
			that.$dialog // wait for modal to slide in
			  .one('bsTransitionEnd', function () {
				that.$element.trigger('focus').trigger(e)
			  })
			  .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
			that.$element.trigger('focus').trigger(e)
		})
	  }
	
	  Modal.prototype.hide = function (e) {
		if (e) e.preventDefault()
	
		e = $.Event('hide.bs.modal')
	
		this.$element.trigger(e)
	
		if (!this.isShown || e.isDefaultPrevented()) return
	
		this.isShown = false
	
		this.escape()
		this.resize()
	
		$(document).off('focusin.bs.modal')
	
		this.$element
		  .removeClass('in')
		  .off('click.dismiss.bs.modal')
		  .off('mouseup.dismiss.bs.modal')
	
		this.$dialog.off('mousedown.dismiss.bs.modal')
	
		$.support.transition && this.$element.hasClass('fade') ?
		  this.$element
			.one('bsTransitionEnd', $.proxy(this.hideModal, this))
			.emulateTransitionEnd(Modal.TRANSITION_DURATION) :
		  this.hideModal()
	  }
	
	  Modal.prototype.enforceFocus = function () {
		$(document)
		  .off('focusin.bs.modal') // guard against infinite focus loop
		  .on('focusin.bs.modal', $.proxy(function (e) {
			if (document !== e.target &&
			  this.$element[0] !== e.target &&
			  !this.$element.has(e.target).length) {
			  this.$element.trigger('focus')
			}
		  }, this))
	  }
	
	  Modal.prototype.escape = function () {
		if (this.isShown && this.options.keyboard) {
		  this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
			e.which == 27 && this.hide()
		  }, this))
		} else if (!this.isShown) {
		  this.$element.off('keydown.dismiss.bs.modal')
		}
	  }
	
	  Modal.prototype.resize = function () {
		if (this.isShown) {
		  $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
		} else {
		  $(window).off('resize.bs.modal')
		}
	  }
	
	  Modal.prototype.hideModal = function () {
		var that = this
		this.$element.hide()
		this.backdrop(function () {
		  that.$body.removeClass('modal-open')
		  that.resetAdjustments()
		  that.resetScrollbar()
		  that.$element.trigger('hidden.bs.modal')
		})
	  }
	
	  Modal.prototype.removeBackdrop = function () {
		this.$backdrop && this.$backdrop.remove()
		this.$backdrop = null
	  }
	
	  Modal.prototype.backdrop = function (callback) {
		var that = this
		var animate = this.$element.hasClass('fade') ? 'fade' : ''
	
		if (this.isShown && this.options.backdrop) {
		  var doAnimate = $.support.transition && animate
	
		  this.$backdrop = $(document.createElement('div'))
			.addClass('modal-backdrop ' + animate)
			.appendTo(this.$body)
	
		  this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
			if (this.ignoreBackdropClick) {
			  this.ignoreBackdropClick = false
			  return
			}
			if (e.target !== e.currentTarget) return
			this.options.backdrop == 'static'
			  ? this.$element[0].focus()
			  : this.hide()
		  }, this))
	
		  if (doAnimate) this.$backdrop[0].offsetWidth // force reflow
	
		  this.$backdrop.addClass('in')
	
		  if (!callback) return
	
		  doAnimate ?
			this.$backdrop
			  .one('bsTransitionEnd', callback)
			  .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
			callback()
	
		} else if (!this.isShown && this.$backdrop) {
		  this.$backdrop.removeClass('in')
	
		  var callbackRemove = function () {
			that.removeBackdrop()
			callback && callback()
		  }
		  $.support.transition && this.$element.hasClass('fade') ?
			this.$backdrop
			  .one('bsTransitionEnd', callbackRemove)
			  .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
			callbackRemove()
	
		} else if (callback) {
		  callback()
		}
	  }
	
	  // these following methods are used to handle overflowing modals
	
	  Modal.prototype.handleUpdate = function () {
		this.adjustDialog()
	  }
	
	  Modal.prototype.adjustDialog = function () {
		var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight
	
		this.$element.css({
		  paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
		  paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
		})
	  }
	
	  Modal.prototype.resetAdjustments = function () {
		this.$element.css({
		  paddingLeft: '',
		  paddingRight: ''
		})
	  }
	
	  Modal.prototype.checkScrollbar = function () {
		var fullWindowWidth = window.innerWidth
		if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
		  var documentElementRect = document.documentElement.getBoundingClientRect()
		  fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
		}
		this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
		this.scrollbarWidth = this.measureScrollbar()
	  }
	
	  Modal.prototype.setScrollbar = function () {
		var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
		this.originalBodyPad = document.body.style.paddingRight || ''
		var scrollbarWidth = this.scrollbarWidth
		if (this.bodyIsOverflowing) {
		  this.$body.css('padding-right', bodyPad + scrollbarWidth)
		  $(this.fixedContent).each(function (index, element) {
			var actualPadding = element.style.paddingRight
			var calculatedPadding = $(element).css('padding-right')
			$(element)
			  .data('padding-right', actualPadding)
			  .css('padding-right', parseFloat(calculatedPadding) + scrollbarWidth + 'px')
		  })
		}
	  }
	
	  Modal.prototype.resetScrollbar = function () {
		this.$body.css('padding-right', this.originalBodyPad)
		$(this.fixedContent).each(function (index, element) {
		  var padding = $(element).data('padding-right')
		  $(element).removeData('padding-right')
		  element.style.paddingRight = padding ? padding : ''
		})
	  }
	
	  Modal.prototype.measureScrollbar = function () { // thx walsh
		var scrollDiv = document.createElement('div')
		scrollDiv.className = 'modal-scrollbar-measure'
		this.$body.append(scrollDiv)
		var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
		this.$body[0].removeChild(scrollDiv)
		return scrollbarWidth
	  }
	
	
	  // MODAL PLUGIN DEFINITION
	  // =======================
	
	  function Plugin(option, _relatedTarget) {
		return this.each(function () {
		  var $this = $(this)
		  var data = $this.data('bs.modal')
		  var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)
	
		  if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
		  if (typeof option == 'string') data[option](_relatedTarget)
		  else if (options.show) data.show(_relatedTarget)
		})
	  }
	
	  var old = $.fn.modal
	
	  $.fn.modal = Plugin
	  $.fn.modal.Constructor = Modal
	
	
	  // MODAL NO CONFLICT
	  // =================
	
	  $.fn.modal.noConflict = function () {
		$.fn.modal = old
		return this
	  }
	
	
	  // MODAL DATA-API
	  // ==============
	
	  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
		var $this = $(this)
		var href = $this.attr('href')
		var target = $this.attr('data-target') ||
		  (href && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
	
		var $target = $(document).find(target)
		var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())
	
		if ($this.is('a')) e.preventDefault()
	
		$target.one('show.bs.modal', function (showEvent) {
		  if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
		  $target.one('hidden.bs.modal', function () {
			$this.is(':visible') && $this.trigger('focus')
		  })
		})
		Plugin.call($target, option, this)
	  })
	
	}(jQuery);
	
	},{}],17:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: popover.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#popovers
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // POPOVER PUBLIC CLASS DEFINITION
	  // ===============================
	
	  var Popover = function (element, options) {
		this.init('popover', element, options)
	  }
	
	  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')
	
	  Popover.VERSION  = '3.4.1'
	
	  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
		placement: 'right',
		trigger: 'click',
		content: '',
		template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
	  })
	
	
	  // NOTE: POPOVER EXTENDS tooltip.js
	  // ================================
	
	  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)
	
	  Popover.prototype.constructor = Popover
	
	  Popover.prototype.getDefaults = function () {
		return Popover.DEFAULTS
	  }
	
	  Popover.prototype.setContent = function () {
		var $tip    = this.tip()
		var title   = this.getTitle()
		var content = this.getContent()
	
		if (this.options.html) {
		  var typeContent = typeof content
	
		  if (this.options.sanitize) {
			title = this.sanitizeHtml(title)
	
			if (typeContent === 'string') {
			  content = this.sanitizeHtml(content)
			}
		  }
	
		  $tip.find('.popover-title').html(title)
		  $tip.find('.popover-content').children().detach().end()[
			typeContent === 'string' ? 'html' : 'append'
		  ](content)
		} else {
		  $tip.find('.popover-title').text(title)
		  $tip.find('.popover-content').children().detach().end().text(content)
		}
	
		$tip.removeClass('fade top bottom left right in')
	
		// IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
		// this manually by checking the contents.
		if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
	  }
	
	  Popover.prototype.hasContent = function () {
		return this.getTitle() || this.getContent()
	  }
	
	  Popover.prototype.getContent = function () {
		var $e = this.$element
		var o  = this.options
	
		return $e.attr('data-content')
		  || (typeof o.content == 'function' ?
			o.content.call($e[0]) :
			o.content)
	  }
	
	  Popover.prototype.arrow = function () {
		return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
	  }
	
	
	  // POPOVER PLUGIN DEFINITION
	  // =========================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this   = $(this)
		  var data    = $this.data('bs.popover')
		  var options = typeof option == 'object' && option
	
		  if (!data && /destroy|hide/.test(option)) return
		  if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
		  if (typeof option == 'string') data[option]()
		})
	  }
	
	  var old = $.fn.popover
	
	  $.fn.popover             = Plugin
	  $.fn.popover.Constructor = Popover
	
	
	  // POPOVER NO CONFLICT
	  // ===================
	
	  $.fn.popover.noConflict = function () {
		$.fn.popover = old
		return this
	  }
	
	}(jQuery);
	
	},{}],18:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: scrollspy.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#scrollspy
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // SCROLLSPY CLASS DEFINITION
	  // ==========================
	
	  function ScrollSpy(element, options) {
		this.$body          = $(document.body)
		this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
		this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
		this.selector       = (this.options.target || '') + ' .nav li > a'
		this.offsets        = []
		this.targets        = []
		this.activeTarget   = null
		this.scrollHeight   = 0
	
		this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
		this.refresh()
		this.process()
	  }
	
	  ScrollSpy.VERSION  = '3.4.1'
	
	  ScrollSpy.DEFAULTS = {
		offset: 10
	  }
	
	  ScrollSpy.prototype.getScrollHeight = function () {
		return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
	  }
	
	  ScrollSpy.prototype.refresh = function () {
		var that          = this
		var offsetMethod  = 'offset'
		var offsetBase    = 0
	
		this.offsets      = []
		this.targets      = []
		this.scrollHeight = this.getScrollHeight()
	
		if (!$.isWindow(this.$scrollElement[0])) {
		  offsetMethod = 'position'
		  offsetBase   = this.$scrollElement.scrollTop()
		}
	
		this.$body
		  .find(this.selector)
		  .map(function () {
			var $el   = $(this)
			var href  = $el.data('target') || $el.attr('href')
			var $href = /^#./.test(href) && $(href)
	
			return ($href
			  && $href.length
			  && $href.is(':visible')
			  && [[$href[offsetMethod]().top + offsetBase, href]]) || null
		  })
		  .sort(function (a, b) { return a[0] - b[0] })
		  .each(function () {
			that.offsets.push(this[0])
			that.targets.push(this[1])
		  })
	  }
	
	  ScrollSpy.prototype.process = function () {
		var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
		var scrollHeight = this.getScrollHeight()
		var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
		var offsets      = this.offsets
		var targets      = this.targets
		var activeTarget = this.activeTarget
		var i
	
		if (this.scrollHeight != scrollHeight) {
		  this.refresh()
		}
	
		if (scrollTop >= maxScroll) {
		  return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
		}
	
		if (activeTarget && scrollTop < offsets[0]) {
		  this.activeTarget = null
		  return this.clear()
		}
	
		for (i = offsets.length; i--;) {
		  activeTarget != targets[i]
			&& scrollTop >= offsets[i]
			&& (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
			&& this.activate(targets[i])
		}
	  }
	
	  ScrollSpy.prototype.activate = function (target) {
		this.activeTarget = target
	
		this.clear()
	
		var selector = this.selector +
		  '[data-target="' + target + '"],' +
		  this.selector + '[href="' + target + '"]'
	
		var active = $(selector)
		  .parents('li')
		  .addClass('active')
	
		if (active.parent('.dropdown-menu').length) {
		  active = active
			.closest('li.dropdown')
			.addClass('active')
		}
	
		active.trigger('activate.bs.scrollspy')
	  }
	
	  ScrollSpy.prototype.clear = function () {
		$(this.selector)
		  .parentsUntil(this.options.target, '.active')
		  .removeClass('active')
	  }
	
	
	  // SCROLLSPY PLUGIN DEFINITION
	  // ===========================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this   = $(this)
		  var data    = $this.data('bs.scrollspy')
		  var options = typeof option == 'object' && option
	
		  if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
		  if (typeof option == 'string') data[option]()
		})
	  }
	
	  var old = $.fn.scrollspy
	
	  $.fn.scrollspy             = Plugin
	  $.fn.scrollspy.Constructor = ScrollSpy
	
	
	  // SCROLLSPY NO CONFLICT
	  // =====================
	
	  $.fn.scrollspy.noConflict = function () {
		$.fn.scrollspy = old
		return this
	  }
	
	
	  // SCROLLSPY DATA-API
	  // ==================
	
	  $(window).on('load.bs.scrollspy.data-api', function () {
		$('[data-spy="scroll"]').each(function () {
		  var $spy = $(this)
		  Plugin.call($spy, $spy.data())
		})
	  })
	
	}(jQuery);
	
	},{}],19:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: tab.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#tabs
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // TAB CLASS DEFINITION
	  // ====================
	
	  var Tab = function (element) {
		// jscs:disable requireDollarBeforejQueryAssignment
		this.element = $(element)
		// jscs:enable requireDollarBeforejQueryAssignment
	  }
	
	  Tab.VERSION = '3.4.1'
	
	  Tab.TRANSITION_DURATION = 150
	
	  Tab.prototype.show = function () {
		var $this    = this.element
		var $ul      = $this.closest('ul:not(.dropdown-menu)')
		var selector = $this.data('target')
	
		if (!selector) {
		  selector = $this.attr('href')
		  selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
		}
	
		if ($this.parent('li').hasClass('active')) return
	
		var $previous = $ul.find('.active:last a')
		var hideEvent = $.Event('hide.bs.tab', {
		  relatedTarget: $this[0]
		})
		var showEvent = $.Event('show.bs.tab', {
		  relatedTarget: $previous[0]
		})
	
		$previous.trigger(hideEvent)
		$this.trigger(showEvent)
	
		if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return
	
		var $target = $(document).find(selector)
	
		this.activate($this.closest('li'), $ul)
		this.activate($target, $target.parent(), function () {
		  $previous.trigger({
			type: 'hidden.bs.tab',
			relatedTarget: $this[0]
		  })
		  $this.trigger({
			type: 'shown.bs.tab',
			relatedTarget: $previous[0]
		  })
		})
	  }
	
	  Tab.prototype.activate = function (element, container, callback) {
		var $active    = container.find('> .active')
		var transition = callback
		  && $.support.transition
		  && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)
	
		function next() {
		  $active
			.removeClass('active')
			.find('> .dropdown-menu > .active')
			.removeClass('active')
			.end()
			.find('[data-toggle="tab"]')
			.attr('aria-expanded', false)
	
		  element
			.addClass('active')
			.find('[data-toggle="tab"]')
			.attr('aria-expanded', true)
	
		  if (transition) {
			element[0].offsetWidth // reflow for transition
			element.addClass('in')
		  } else {
			element.removeClass('fade')
		  }
	
		  if (element.parent('.dropdown-menu').length) {
			element
			  .closest('li.dropdown')
			  .addClass('active')
			  .end()
			  .find('[data-toggle="tab"]')
			  .attr('aria-expanded', true)
		  }
	
		  callback && callback()
		}
	
		$active.length && transition ?
		  $active
			.one('bsTransitionEnd', next)
			.emulateTransitionEnd(Tab.TRANSITION_DURATION) :
		  next()
	
		$active.removeClass('in')
	  }
	
	
	  // TAB PLUGIN DEFINITION
	  // =====================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this = $(this)
		  var data  = $this.data('bs.tab')
	
		  if (!data) $this.data('bs.tab', (data = new Tab(this)))
		  if (typeof option == 'string') data[option]()
		})
	  }
	
	  var old = $.fn.tab
	
	  $.fn.tab             = Plugin
	  $.fn.tab.Constructor = Tab
	
	
	  // TAB NO CONFLICT
	  // ===============
	
	  $.fn.tab.noConflict = function () {
		$.fn.tab = old
		return this
	  }
	
	
	  // TAB DATA-API
	  // ============
	
	  var clickHandler = function (e) {
		e.preventDefault()
		Plugin.call($(this), 'show')
	  }
	
	  $(document)
		.on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
		.on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)
	
	}(jQuery);
	
	},{}],20:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: tooltip.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#tooltip
	 * Inspired by the original jQuery.tipsy by Jason Frame
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	+function ($) {
	  'use strict';
	
	  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn']
	
	  var uriAttrs = [
		'background',
		'cite',
		'href',
		'itemtype',
		'longdesc',
		'poster',
		'src',
		'xlink:href'
	  ]
	
	  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i
	
	  var DefaultWhitelist = {
		// Global attributes allowed on any supplied element below.
		'*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
		a: ['target', 'href', 'title', 'rel'],
		area: [],
		b: [],
		br: [],
		col: [],
		code: [],
		div: [],
		em: [],
		hr: [],
		h1: [],
		h2: [],
		h3: [],
		h4: [],
		h5: [],
		h6: [],
		i: [],
		img: ['src', 'alt', 'title', 'width', 'height'],
		li: [],
		ol: [],
		p: [],
		pre: [],
		s: [],
		small: [],
		span: [],
		sub: [],
		sup: [],
		strong: [],
		u: [],
		ul: []
	  }
	
	  /**
	   * A pattern that recognizes a commonly useful subset of URLs that are safe.
	   *
	   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
	   */
	  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi
	
	  /**
	   * A pattern that matches safe data URLs. Only matches image, video and audio types.
	   *
	   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
	   */
	  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i
	
	  function allowedAttribute(attr, allowedAttributeList) {
		var attrName = attr.nodeName.toLowerCase()
	
		if ($.inArray(attrName, allowedAttributeList) !== -1) {
		  if ($.inArray(attrName, uriAttrs) !== -1) {
			return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))
		  }
	
		  return true
		}
	
		var regExp = $(allowedAttributeList).filter(function (index, value) {
		  return value instanceof RegExp
		})
	
		// Check if a regular expression validates the attribute.
		for (var i = 0, l = regExp.length; i < l; i++) {
		  if (attrName.match(regExp[i])) {
			return true
		  }
		}
	
		return false
	  }
	
	  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
		if (unsafeHtml.length === 0) {
		  return unsafeHtml
		}
	
		if (sanitizeFn && typeof sanitizeFn === 'function') {
		  return sanitizeFn(unsafeHtml)
		}
	
		// IE 8 and below don't support createHTMLDocument
		if (!document.implementation || !document.implementation.createHTMLDocument) {
		  return unsafeHtml
		}
	
		var createdDocument = document.implementation.createHTMLDocument('sanitization')
		createdDocument.body.innerHTML = unsafeHtml
	
		var whitelistKeys = $.map(whiteList, function (el, i) { return i })
		var elements = $(createdDocument.body).find('*')
	
		for (var i = 0, len = elements.length; i < len; i++) {
		  var el = elements[i]
		  var elName = el.nodeName.toLowerCase()
	
		  if ($.inArray(elName, whitelistKeys) === -1) {
			el.parentNode.removeChild(el)
	
			continue
		  }
	
		  var attributeList = $.map(el.attributes, function (el) { return el })
		  var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || [])
	
		  for (var j = 0, len2 = attributeList.length; j < len2; j++) {
			if (!allowedAttribute(attributeList[j], whitelistedAttributes)) {
			  el.removeAttribute(attributeList[j].nodeName)
			}
		  }
		}
	
		return createdDocument.body.innerHTML
	  }
	
	  // TOOLTIP PUBLIC CLASS DEFINITION
	  // ===============================
	
	  var Tooltip = function (element, options) {
		this.type       = null
		this.options    = null
		this.enabled    = null
		this.timeout    = null
		this.hoverState = null
		this.$element   = null
		this.inState    = null
	
		this.init('tooltip', element, options)
	  }
	
	  Tooltip.VERSION  = '3.4.1'
	
	  Tooltip.TRANSITION_DURATION = 150
	
	  Tooltip.DEFAULTS = {
		animation: true,
		placement: 'top',
		selector: false,
		template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
		trigger: 'hover focus',
		title: '',
		delay: 0,
		html: false,
		container: false,
		viewport: {
		  selector: 'body',
		  padding: 0
		},
		sanitize : true,
		sanitizeFn : null,
		whiteList : DefaultWhitelist
	  }
	
	  Tooltip.prototype.init = function (type, element, options) {
		this.enabled   = true
		this.type      = type
		this.$element  = $(element)
		this.options   = this.getOptions(options)
		this.$viewport = this.options.viewport && $(document).find($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
		this.inState   = { click: false, hover: false, focus: false }
	
		if (this.$element[0] instanceof document.constructor && !this.options.selector) {
		  throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
		}
	
		var triggers = this.options.trigger.split(' ')
	
		for (var i = triggers.length; i--;) {
		  var trigger = triggers[i]
	
		  if (trigger == 'click') {
			this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
		  } else if (trigger != 'manual') {
			var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
			var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'
	
			this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
			this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
		  }
		}
	
		this.options.selector ?
		  (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
		  this.fixTitle()
	  }
	
	  Tooltip.prototype.getDefaults = function () {
		return Tooltip.DEFAULTS
	  }
	
	  Tooltip.prototype.getOptions = function (options) {
		var dataAttributes = this.$element.data()
	
		for (var dataAttr in dataAttributes) {
		  if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
			delete dataAttributes[dataAttr]
		  }
		}
	
		options = $.extend({}, this.getDefaults(), dataAttributes, options)
	
		if (options.delay && typeof options.delay == 'number') {
		  options.delay = {
			show: options.delay,
			hide: options.delay
		  }
		}
	
		if (options.sanitize) {
		  options.template = sanitizeHtml(options.template, options.whiteList, options.sanitizeFn)
		}
	
		return options
	  }
	
	  Tooltip.prototype.getDelegateOptions = function () {
		var options  = {}
		var defaults = this.getDefaults()
	
		this._options && $.each(this._options, function (key, value) {
		  if (defaults[key] != value) options[key] = value
		})
	
		return options
	  }
	
	  Tooltip.prototype.enter = function (obj) {
		var self = obj instanceof this.constructor ?
		  obj : $(obj.currentTarget).data('bs.' + this.type)
	
		if (!self) {
		  self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
		  $(obj.currentTarget).data('bs.' + this.type, self)
		}
	
		if (obj instanceof $.Event) {
		  self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
		}
	
		if (self.tip().hasClass('in') || self.hoverState == 'in') {
		  self.hoverState = 'in'
		  return
		}
	
		clearTimeout(self.timeout)
	
		self.hoverState = 'in'
	
		if (!self.options.delay || !self.options.delay.show) return self.show()
	
		self.timeout = setTimeout(function () {
		  if (self.hoverState == 'in') self.show()
		}, self.options.delay.show)
	  }
	
	  Tooltip.prototype.isInStateTrue = function () {
		for (var key in this.inState) {
		  if (this.inState[key]) return true
		}
	
		return false
	  }
	
	  Tooltip.prototype.leave = function (obj) {
		var self = obj instanceof this.constructor ?
		  obj : $(obj.currentTarget).data('bs.' + this.type)
	
		if (!self) {
		  self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
		  $(obj.currentTarget).data('bs.' + this.type, self)
		}
	
		if (obj instanceof $.Event) {
		  self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
		}
	
		if (self.isInStateTrue()) return
	
		clearTimeout(self.timeout)
	
		self.hoverState = 'out'
	
		if (!self.options.delay || !self.options.delay.hide) return self.hide()
	
		self.timeout = setTimeout(function () {
		  if (self.hoverState == 'out') self.hide()
		}, self.options.delay.hide)
	  }
	
	  Tooltip.prototype.show = function () {
		var e = $.Event('show.bs.' + this.type)
	
		if (this.hasContent() && this.enabled) {
		  this.$element.trigger(e)
	
		  var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
		  if (e.isDefaultPrevented() || !inDom) return
		  var that = this
	
		  var $tip = this.tip()
	
		  var tipId = this.getUID(this.type)
	
		  this.setContent()
		  $tip.attr('id', tipId)
		  this.$element.attr('aria-describedby', tipId)
	
		  if (this.options.animation) $tip.addClass('fade')
	
		  var placement = typeof this.options.placement == 'function' ?
			this.options.placement.call(this, $tip[0], this.$element[0]) :
			this.options.placement
	
		  var autoToken = /\s?auto?\s?/i
		  var autoPlace = autoToken.test(placement)
		  if (autoPlace) placement = placement.replace(autoToken, '') || 'top'
	
		  $tip
			.detach()
			.css({ top: 0, left: 0, display: 'block' })
			.addClass(placement)
			.data('bs.' + this.type, this)
	
		  this.options.container ? $tip.appendTo($(document).find(this.options.container)) : $tip.insertAfter(this.$element)
		  this.$element.trigger('inserted.bs.' + this.type)
	
		  var pos          = this.getPosition()
		  var actualWidth  = $tip[0].offsetWidth
		  var actualHeight = $tip[0].offsetHeight
	
		  if (autoPlace) {
			var orgPlacement = placement
			var viewportDim = this.getPosition(this.$viewport)
	
			placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
						placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
						placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
						placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
						placement
	
			$tip
			  .removeClass(orgPlacement)
			  .addClass(placement)
		  }
	
		  var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)
	
		  this.applyPlacement(calculatedOffset, placement)
	
		  var complete = function () {
			var prevHoverState = that.hoverState
			that.$element.trigger('shown.bs.' + that.type)
			that.hoverState = null
	
			if (prevHoverState == 'out') that.leave(that)
		  }
	
		  $.support.transition && this.$tip.hasClass('fade') ?
			$tip
			  .one('bsTransitionEnd', complete)
			  .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
			complete()
		}
	  }
	
	  Tooltip.prototype.applyPlacement = function (offset, placement) {
		var $tip   = this.tip()
		var width  = $tip[0].offsetWidth
		var height = $tip[0].offsetHeight
	
		// manually read margins because getBoundingClientRect includes difference
		var marginTop = parseInt($tip.css('margin-top'), 10)
		var marginLeft = parseInt($tip.css('margin-left'), 10)
	
		// we must check for NaN for ie 8/9
		if (isNaN(marginTop))  marginTop  = 0
		if (isNaN(marginLeft)) marginLeft = 0
	
		offset.top  += marginTop
		offset.left += marginLeft
	
		// $.fn.offset doesn't round pixel values
		// so we use setOffset directly with our own function B-0
		$.offset.setOffset($tip[0], $.extend({
		  using: function (props) {
			$tip.css({
			  top: Math.round(props.top),
			  left: Math.round(props.left)
			})
		  }
		}, offset), 0)
	
		$tip.addClass('in')
	
		// check to see if placing tip in new offset caused the tip to resize itself
		var actualWidth  = $tip[0].offsetWidth
		var actualHeight = $tip[0].offsetHeight
	
		if (placement == 'top' && actualHeight != height) {
		  offset.top = offset.top + height - actualHeight
		}
	
		var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)
	
		if (delta.left) offset.left += delta.left
		else offset.top += delta.top
	
		var isVertical          = /top|bottom/.test(placement)
		var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
		var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'
	
		$tip.offset(offset)
		this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
	  }
	
	  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
		this.arrow()
		  .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
		  .css(isVertical ? 'top' : 'left', '')
	  }
	
	  Tooltip.prototype.setContent = function () {
		var $tip  = this.tip()
		var title = this.getTitle()
	
		if (this.options.html) {
		  if (this.options.sanitize) {
			title = sanitizeHtml(title, this.options.whiteList, this.options.sanitizeFn)
		  }
	
		  $tip.find('.tooltip-inner').html(title)
		} else {
		  $tip.find('.tooltip-inner').text(title)
		}
	
		$tip.removeClass('fade in top bottom left right')
	  }
	
	  Tooltip.prototype.hide = function (callback) {
		var that = this
		var $tip = $(this.$tip)
		var e    = $.Event('hide.bs.' + this.type)
	
		function complete() {
		  if (that.hoverState != 'in') $tip.detach()
		  if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
			that.$element
			  .removeAttr('aria-describedby')
			  .trigger('hidden.bs.' + that.type)
		  }
		  callback && callback()
		}
	
		this.$element.trigger(e)
	
		if (e.isDefaultPrevented()) return
	
		$tip.removeClass('in')
	
		$.support.transition && $tip.hasClass('fade') ?
		  $tip
			.one('bsTransitionEnd', complete)
			.emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
		  complete()
	
		this.hoverState = null
	
		return this
	  }
	
	  Tooltip.prototype.fixTitle = function () {
		var $e = this.$element
		if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
		  $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
		}
	  }
	
	  Tooltip.prototype.hasContent = function () {
		return this.getTitle()
	  }
	
	  Tooltip.prototype.getPosition = function ($element) {
		$element   = $element || this.$element
	
		var el     = $element[0]
		var isBody = el.tagName == 'BODY'
	
		var elRect    = el.getBoundingClientRect()
		if (elRect.width == null) {
		  // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
		  elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
		}
		var isSvg = window.SVGElement && el instanceof window.SVGElement
		// Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
		// See https://github.com/twbs/bootstrap/issues/20280
		var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
		var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
		var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null
	
		return $.extend({}, elRect, scroll, outerDims, elOffset)
	  }
	
	  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
		return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
			   placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
			   placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
			/* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }
	
	  }
	
	  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
		var delta = { top: 0, left: 0 }
		if (!this.$viewport) return delta
	
		var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
		var viewportDimensions = this.getPosition(this.$viewport)
	
		if (/right|left/.test(placement)) {
		  var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
		  var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
		  if (topEdgeOffset < viewportDimensions.top) { // top overflow
			delta.top = viewportDimensions.top - topEdgeOffset
		  } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
			delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
		  }
		} else {
		  var leftEdgeOffset  = pos.left - viewportPadding
		  var rightEdgeOffset = pos.left + viewportPadding + actualWidth
		  if (leftEdgeOffset < viewportDimensions.left) { // left overflow
			delta.left = viewportDimensions.left - leftEdgeOffset
		  } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
			delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
		  }
		}
	
		return delta
	  }
	
	  Tooltip.prototype.getTitle = function () {
		var title
		var $e = this.$element
		var o  = this.options
	
		title = $e.attr('data-original-title')
		  || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)
	
		return title
	  }
	
	  Tooltip.prototype.getUID = function (prefix) {
		do prefix += ~~(Math.random() * 1000000)
		while (document.getElementById(prefix))
		return prefix
	  }
	
	  Tooltip.prototype.tip = function () {
		if (!this.$tip) {
		  this.$tip = $(this.options.template)
		  if (this.$tip.length != 1) {
			throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
		  }
		}
		return this.$tip
	  }
	
	  Tooltip.prototype.arrow = function () {
		return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
	  }
	
	  Tooltip.prototype.enable = function () {
		this.enabled = true
	  }
	
	  Tooltip.prototype.disable = function () {
		this.enabled = false
	  }
	
	  Tooltip.prototype.toggleEnabled = function () {
		this.enabled = !this.enabled
	  }
	
	  Tooltip.prototype.toggle = function (e) {
		var self = this
		if (e) {
		  self = $(e.currentTarget).data('bs.' + this.type)
		  if (!self) {
			self = new this.constructor(e.currentTarget, this.getDelegateOptions())
			$(e.currentTarget).data('bs.' + this.type, self)
		  }
		}
	
		if (e) {
		  self.inState.click = !self.inState.click
		  if (self.isInStateTrue()) self.enter(self)
		  else self.leave(self)
		} else {
		  self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
		}
	  }
	
	  Tooltip.prototype.destroy = function () {
		var that = this
		clearTimeout(this.timeout)
		this.hide(function () {
		  that.$element.off('.' + that.type).removeData('bs.' + that.type)
		  if (that.$tip) {
			that.$tip.detach()
		  }
		  that.$tip = null
		  that.$arrow = null
		  that.$viewport = null
		  that.$element = null
		})
	  }
	
	  Tooltip.prototype.sanitizeHtml = function (unsafeHtml) {
		return sanitizeHtml(unsafeHtml, this.options.whiteList, this.options.sanitizeFn)
	  }
	
	  // TOOLTIP PLUGIN DEFINITION
	  // =========================
	
	  function Plugin(option) {
		return this.each(function () {
		  var $this   = $(this)
		  var data    = $this.data('bs.tooltip')
		  var options = typeof option == 'object' && option
	
		  if (!data && /destroy|hide/.test(option)) return
		  if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
		  if (typeof option == 'string') data[option]()
		})
	  }
	
	  var old = $.fn.tooltip
	
	  $.fn.tooltip             = Plugin
	  $.fn.tooltip.Constructor = Tooltip
	
	
	  // TOOLTIP NO CONFLICT
	  // ===================
	
	  $.fn.tooltip.noConflict = function () {
		$.fn.tooltip = old
		return this
	  }
	
	}(jQuery);
	
	},{}],21:[function(require,module,exports){
	/* ========================================================================
	 * Bootstrap: transition.js v3.4.1
	 * https://getbootstrap.com/docs/3.4/javascript/#transitions
	 * ========================================================================
	 * Copyright 2011-2019 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // CSS TRANSITION SUPPORT (Shoutout: https://modernizr.com/)
	  // ============================================================
	
	  function transitionEnd() {
		var el = document.createElement('bootstrap')
	
		var transEndEventNames = {
		  WebkitTransition : 'webkitTransitionEnd',
		  MozTransition    : 'transitionend',
		  OTransition      : 'oTransitionEnd otransitionend',
		  transition       : 'transitionend'
		}
	
		for (var name in transEndEventNames) {
		  if (el.style[name] !== undefined) {
			return { end: transEndEventNames[name] }
		  }
		}
	
		return false // explicit for ie8 (  ._.)
	  }
	
	  // https://blog.alexmaccaw.com/css-transitions
	  $.fn.emulateTransitionEnd = function (duration) {
		var called = false
		var $el = this
		$(this).one('bsTransitionEnd', function () { called = true })
		var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
		setTimeout(callback, duration)
		return this
	  }
	
	  $(function () {
		$.support.transition = transitionEnd()
	
		if (!$.support.transition) return
	
		$.event.special.bsTransitionEnd = {
		  bindType: $.support.transition.end,
		  delegateType: $.support.transition.end,
		  handle: function (e) {
			if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
		  }
		}
	  })
	
	}(jQuery);
	
	},{}],22:[function(require,module,exports){
	/*!
	 * Chart.js v2.9.3
	 * https://www.chartjs.org
	 * (c) 2019 Chart.js Contributors
	 * Released under the MIT License
	 */
	(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function() { try { return require('moment'); } catch(e) { } }()) :
	typeof define === 'function' && define.amd ? define(['require'], function(require) { return factory(function() { try { return require('moment'); } catch(e) { } }()); }) :
	(global = global || self, global.Chart = factory(global.moment));
	}(this, (function (moment) { 'use strict';
	
	moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;
	
	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}
	
	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}
	
	var colorName = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
	
	var conversions = createCommonjsModule(function (module) {
	/* MIT license */
	
	
	// NOTE: conversions should only return primitive values (i.e. arrays, or
	//       values that give correct `typeof` results).
	//       do not use box values types (i.e. Number(), String(), etc.)
	
	var reverseKeywords = {};
	for (var key in colorName) {
		if (colorName.hasOwnProperty(key)) {
			reverseKeywords[colorName[key]] = key;
		}
	}
	
	var convert = module.exports = {
		rgb: {channels: 3, labels: 'rgb'},
		hsl: {channels: 3, labels: 'hsl'},
		hsv: {channels: 3, labels: 'hsv'},
		hwb: {channels: 3, labels: 'hwb'},
		cmyk: {channels: 4, labels: 'cmyk'},
		xyz: {channels: 3, labels: 'xyz'},
		lab: {channels: 3, labels: 'lab'},
		lch: {channels: 3, labels: 'lch'},
		hex: {channels: 1, labels: ['hex']},
		keyword: {channels: 1, labels: ['keyword']},
		ansi16: {channels: 1, labels: ['ansi16']},
		ansi256: {channels: 1, labels: ['ansi256']},
		hcg: {channels: 3, labels: ['h', 'c', 'g']},
		apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
		gray: {channels: 1, labels: ['gray']}
	};
	
	// hide .channels and .labels properties
	for (var model in convert) {
		if (convert.hasOwnProperty(model)) {
			if (!('channels' in convert[model])) {
				throw new Error('missing channels property: ' + model);
			}
	
			if (!('labels' in convert[model])) {
				throw new Error('missing channel labels property: ' + model);
			}
	
			if (convert[model].labels.length !== convert[model].channels) {
				throw new Error('channel and label counts mismatch: ' + model);
			}
	
			var channels = convert[model].channels;
			var labels = convert[model].labels;
			delete convert[model].channels;
			delete convert[model].labels;
			Object.defineProperty(convert[model], 'channels', {value: channels});
			Object.defineProperty(convert[model], 'labels', {value: labels});
		}
	}
	
	convert.rgb.hsl = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var min = Math.min(r, g, b);
		var max = Math.max(r, g, b);
		var delta = max - min;
		var h;
		var s;
		var l;
	
		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}
	
		h = Math.min(h * 60, 360);
	
		if (h < 0) {
			h += 360;
		}
	
		l = (min + max) / 2;
	
		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}
	
		return [h, s * 100, l * 100];
	};
	
	convert.rgb.hsv = function (rgb) {
		var rdif;
		var gdif;
		var bdif;
		var h;
		var s;
	
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var v = Math.max(r, g, b);
		var diff = v - Math.min(r, g, b);
		var diffc = function (c) {
			return (v - c) / 6 / diff + 1 / 2;
		};
	
		if (diff === 0) {
			h = s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);
	
			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = (1 / 3) + rdif - bdif;
			} else if (b === v) {
				h = (2 / 3) + gdif - rdif;
			}
			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}
	
		return [
			h * 360,
			s * 100,
			v * 100
		];
	};
	
	convert.rgb.hwb = function (rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var h = convert.rgb.hsl(rgb)[0];
		var w = 1 / 255 * Math.min(r, Math.min(g, b));
	
		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
	
		return [h, w * 100, b * 100];
	};
	
	convert.rgb.cmyk = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var c;
		var m;
		var y;
		var k;
	
		k = Math.min(1 - r, 1 - g, 1 - b);
		c = (1 - r - k) / (1 - k) || 0;
		m = (1 - g - k) / (1 - k) || 0;
		y = (1 - b - k) / (1 - k) || 0;
	
		return [c * 100, m * 100, y * 100, k * 100];
	};
	
	/**
	 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	 * */
	function comparativeDistance(x, y) {
		return (
			Math.pow(x[0] - y[0], 2) +
			Math.pow(x[1] - y[1], 2) +
			Math.pow(x[2] - y[2], 2)
		);
	}
	
	convert.rgb.keyword = function (rgb) {
		var reversed = reverseKeywords[rgb];
		if (reversed) {
			return reversed;
		}
	
		var currentClosestDistance = Infinity;
		var currentClosestKeyword;
	
		for (var keyword in colorName) {
			if (colorName.hasOwnProperty(keyword)) {
				var value = colorName[keyword];
	
				// Compute comparative distance
				var distance = comparativeDistance(rgb, value);
	
				// Check if its less, if so set as closest
				if (distance < currentClosestDistance) {
					currentClosestDistance = distance;
					currentClosestKeyword = keyword;
				}
			}
		}
	
		return currentClosestKeyword;
	};
	
	convert.keyword.rgb = function (keyword) {
		return colorName[keyword];
	};
	
	convert.rgb.xyz = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
	
		// assume sRGB
		r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
		g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
		b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);
	
		var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
		var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
		var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);
	
		return [x * 100, y * 100, z * 100];
	};
	
	convert.rgb.lab = function (rgb) {
		var xyz = convert.rgb.xyz(rgb);
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
	
		x /= 95.047;
		y /= 100;
		z /= 108.883;
	
		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);
	
		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);
	
		return [l, a, b];
	};
	
	convert.hsl.rgb = function (hsl) {
		var h = hsl[0] / 360;
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var t1;
		var t2;
		var t3;
		var rgb;
		var val;
	
		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}
	
		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}
	
		t1 = 2 * l - t2;
	
		rgb = [0, 0, 0];
		for (var i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);
			if (t3 < 0) {
				t3++;
			}
			if (t3 > 1) {
				t3--;
			}
	
			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}
	
			rgb[i] = val * 255;
		}
	
		return rgb;
	};
	
	convert.hsl.hsv = function (hsl) {
		var h = hsl[0];
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var smin = s;
		var lmin = Math.max(l, 0.01);
		var sv;
		var v;
	
		l *= 2;
		s *= (l <= 1) ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		v = (l + s) / 2;
		sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);
	
		return [h, sv * 100, v * 100];
	};
	
	convert.hsv.rgb = function (hsv) {
		var h = hsv[0] / 60;
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var hi = Math.floor(h) % 6;
	
		var f = h - Math.floor(h);
		var p = 255 * v * (1 - s);
		var q = 255 * v * (1 - (s * f));
		var t = 255 * v * (1 - (s * (1 - f)));
		v *= 255;
	
		switch (hi) {
			case 0:
				return [v, t, p];
			case 1:
				return [q, v, p];
			case 2:
				return [p, v, t];
			case 3:
				return [p, q, v];
			case 4:
				return [t, p, v];
			case 5:
				return [v, p, q];
		}
	};
	
	convert.hsv.hsl = function (hsv) {
		var h = hsv[0];
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
		var vmin = Math.max(v, 0.01);
		var lmin;
		var sl;
		var l;
	
		l = (2 - s) * v;
		lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= (lmin <= 1) ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;
	
		return [h, sl * 100, l * 100];
	};
	
	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	convert.hwb.rgb = function (hwb) {
		var h = hwb[0] / 360;
		var wh = hwb[1] / 100;
		var bl = hwb[2] / 100;
		var ratio = wh + bl;
		var i;
		var v;
		var f;
		var n;
	
		// wh + bl cant be > 1
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}
	
		i = Math.floor(6 * h);
		v = 1 - bl;
		f = 6 * h - i;
	
		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}
	
		n = wh + f * (v - wh); // linear interpolation
	
		var r;
		var g;
		var b;
		switch (i) {
			default:
			case 6:
			case 0: r = v; g = n; b = wh; break;
			case 1: r = n; g = v; b = wh; break;
			case 2: r = wh; g = v; b = n; break;
			case 3: r = wh; g = n; b = v; break;
			case 4: r = n; g = wh; b = v; break;
			case 5: r = v; g = wh; b = n; break;
		}
	
		return [r * 255, g * 255, b * 255];
	};
	
	convert.cmyk.rgb = function (cmyk) {
		var c = cmyk[0] / 100;
		var m = cmyk[1] / 100;
		var y = cmyk[2] / 100;
		var k = cmyk[3] / 100;
		var r;
		var g;
		var b;
	
		r = 1 - Math.min(1, c * (1 - k) + k);
		g = 1 - Math.min(1, m * (1 - k) + k);
		b = 1 - Math.min(1, y * (1 - k) + k);
	
		return [r * 255, g * 255, b * 255];
	};
	
	convert.xyz.rgb = function (xyz) {
		var x = xyz[0] / 100;
		var y = xyz[1] / 100;
		var z = xyz[2] / 100;
		var r;
		var g;
		var b;
	
		r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
		g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
		b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);
	
		// assume sRGB
		r = r > 0.0031308
			? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
			: r * 12.92;
	
		g = g > 0.0031308
			? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
			: g * 12.92;
	
		b = b > 0.0031308
			? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
			: b * 12.92;
	
		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);
	
		return [r * 255, g * 255, b * 255];
	};
	
	convert.xyz.lab = function (xyz) {
		var x = xyz[0];
		var y = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
	
		x /= 95.047;
		y /= 100;
		z /= 108.883;
	
		x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);
	
		l = (116 * y) - 16;
		a = 500 * (x - y);
		b = 200 * (y - z);
	
		return [l, a, b];
	};
	
	convert.lab.xyz = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var x;
		var y;
		var z;
	
		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;
	
		var y2 = Math.pow(y, 3);
		var x2 = Math.pow(x, 3);
		var z2 = Math.pow(z, 3);
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
	
		x *= 95.047;
		y *= 100;
		z *= 108.883;
	
		return [x, y, z];
	};
	
	convert.lab.lch = function (lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var hr;
		var h;
		var c;
	
		hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;
	
		if (h < 0) {
			h += 360;
		}
	
		c = Math.sqrt(a * a + b * b);
	
		return [l, c, h];
	};
	
	convert.lch.lab = function (lch) {
		var l = lch[0];
		var c = lch[1];
		var h = lch[2];
		var a;
		var b;
		var hr;
	
		hr = h / 360 * 2 * Math.PI;
		a = c * Math.cos(hr);
		b = c * Math.sin(hr);
	
		return [l, a, b];
	};
	
	convert.rgb.ansi16 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization
	
		value = Math.round(value / 50);
	
		if (value === 0) {
			return 30;
		}
	
		var ansi = 30
			+ ((Math.round(b / 255) << 2)
			| (Math.round(g / 255) << 1)
			| Math.round(r / 255));
	
		if (value === 2) {
			ansi += 60;
		}
	
		return ansi;
	};
	
	convert.hsv.ansi16 = function (args) {
		// optimization here; we already know the value and don't need to get
		// it converted for us.
		return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
	};
	
	convert.rgb.ansi256 = function (args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
	
		// we use the extended greyscale palette here, with the exception of
		// black and white. normal palette only has 4 greyscale shades.
		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}
	
			if (r > 248) {
				return 231;
			}
	
			return Math.round(((r - 8) / 247) * 24) + 232;
		}
	
		var ansi = 16
			+ (36 * Math.round(r / 255 * 5))
			+ (6 * Math.round(g / 255 * 5))
			+ Math.round(b / 255 * 5);
	
		return ansi;
	};
	
	convert.ansi16.rgb = function (args) {
		var color = args % 10;
	
		// handle greyscale
		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}
	
			color = color / 10.5 * 255;
	
			return [color, color, color];
		}
	
		var mult = (~~(args > 50) + 1) * 0.5;
		var r = ((color & 1) * mult) * 255;
		var g = (((color >> 1) & 1) * mult) * 255;
		var b = (((color >> 2) & 1) * mult) * 255;
	
		return [r, g, b];
	};
	
	convert.ansi256.rgb = function (args) {
		// handle greyscale
		if (args >= 232) {
			var c = (args - 232) * 10 + 8;
			return [c, c, c];
		}
	
		args -= 16;
	
		var rem;
		var r = Math.floor(args / 36) / 5 * 255;
		var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		var b = (rem % 6) / 5 * 255;
	
		return [r, g, b];
	};
	
	convert.rgb.hex = function (args) {
		var integer = ((Math.round(args[0]) & 0xFF) << 16)
			+ ((Math.round(args[1]) & 0xFF) << 8)
			+ (Math.round(args[2]) & 0xFF);
	
		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};
	
	convert.hex.rgb = function (args) {
		var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) {
			return [0, 0, 0];
		}
	
		var colorString = match[0];
	
		if (match[0].length === 3) {
			colorString = colorString.split('').map(function (char) {
				return char + char;
			}).join('');
		}
	
		var integer = parseInt(colorString, 16);
		var r = (integer >> 16) & 0xFF;
		var g = (integer >> 8) & 0xFF;
		var b = integer & 0xFF;
	
		return [r, g, b];
	};
	
	convert.rgb.hcg = function (rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var max = Math.max(Math.max(r, g), b);
		var min = Math.min(Math.min(r, g), b);
		var chroma = (max - min);
		var grayscale;
		var hue;
	
		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}
	
		if (chroma <= 0) {
			hue = 0;
		} else
		if (max === r) {
			hue = ((g - b) / chroma) % 6;
		} else
		if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma + 4;
		}
	
		hue /= 6;
		hue %= 1;
	
		return [hue * 360, chroma * 100, grayscale * 100];
	};
	
	convert.hsl.hcg = function (hsl) {
		var s = hsl[1] / 100;
		var l = hsl[2] / 100;
		var c = 1;
		var f = 0;
	
		if (l < 0.5) {
			c = 2.0 * s * l;
		} else {
			c = 2.0 * s * (1.0 - l);
		}
	
		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}
	
		return [hsl[0], c * 100, f * 100];
	};
	
	convert.hsv.hcg = function (hsv) {
		var s = hsv[1] / 100;
		var v = hsv[2] / 100;
	
		var c = s * v;
		var f = 0;
	
		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}
	
		return [hsv[0], c * 100, f * 100];
	};
	
	convert.hcg.rgb = function (hcg) {
		var h = hcg[0] / 360;
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
	
		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}
	
		var pure = [0, 0, 0];
		var hi = (h % 1) * 6;
		var v = hi % 1;
		var w = 1 - v;
		var mg = 0;
	
		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1; pure[1] = v; pure[2] = 0; break;
			case 1:
				pure[0] = w; pure[1] = 1; pure[2] = 0; break;
			case 2:
				pure[0] = 0; pure[1] = 1; pure[2] = v; break;
			case 3:
				pure[0] = 0; pure[1] = w; pure[2] = 1; break;
			case 4:
				pure[0] = v; pure[1] = 0; pure[2] = 1; break;
			default:
				pure[0] = 1; pure[1] = 0; pure[2] = w;
		}
	
		mg = (1.0 - c) * g;
	
		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};
	
	convert.hcg.hsv = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
	
		var v = c + g * (1.0 - c);
		var f = 0;
	
		if (v > 0.0) {
			f = c / v;
		}
	
		return [hcg[0], f * 100, v * 100];
	};
	
	convert.hcg.hsl = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
	
		var l = g * (1.0 - c) + 0.5 * c;
		var s = 0;
	
		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else
		if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}
	
		return [hcg[0], s * 100, l * 100];
	};
	
	convert.hcg.hwb = function (hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};
	
	convert.hwb.hcg = function (hwb) {
		var w = hwb[1] / 100;
		var b = hwb[2] / 100;
		var v = 1 - b;
		var c = v - w;
		var g = 0;
	
		if (c < 1) {
			g = (v - c) / (1 - c);
		}
	
		return [hwb[0], c * 100, g * 100];
	};
	
	convert.apple.rgb = function (apple) {
		return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
	};
	
	convert.rgb.apple = function (rgb) {
		return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
	};
	
	convert.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};
	
	convert.gray.hsl = convert.gray.hsv = function (args) {
		return [0, 0, args[0]];
	};
	
	convert.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};
	
	convert.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};
	
	convert.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};
	
	convert.gray.hex = function (gray) {
		var val = Math.round(gray[0] / 100 * 255) & 0xFF;
		var integer = (val << 16) + (val << 8) + val;
	
		var string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};
	
	convert.rgb.gray = function (rgb) {
		var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
	});
	var conversions_1 = conversions.rgb;
	var conversions_2 = conversions.hsl;
	var conversions_3 = conversions.hsv;
	var conversions_4 = conversions.hwb;
	var conversions_5 = conversions.cmyk;
	var conversions_6 = conversions.xyz;
	var conversions_7 = conversions.lab;
	var conversions_8 = conversions.lch;
	var conversions_9 = conversions.hex;
	var conversions_10 = conversions.keyword;
	var conversions_11 = conversions.ansi16;
	var conversions_12 = conversions.ansi256;
	var conversions_13 = conversions.hcg;
	var conversions_14 = conversions.apple;
	var conversions_15 = conversions.gray;
	
	/*
		this function routes a model to all other models.
	
		all functions that are routed have a property `.conversion` attached
		to the returned synthetic function. This property is an array
		of strings, each with the steps in between the 'from' and 'to'
		color models (inclusive).
	
		conversions that are not possible simply are not included.
	*/
	
	function buildGraph() {
		var graph = {};
		// https://jsperf.com/object-keys-vs-for-in-with-closure/3
		var models = Object.keys(conversions);
	
		for (var len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				// http://jsperf.com/1-vs-infinity
				// micro-opt, but this is simple.
				distance: -1,
				parent: null
			};
		}
	
		return graph;
	}
	
	// https://en.wikipedia.org/wiki/Breadth-first_search
	function deriveBFS(fromModel) {
		var graph = buildGraph();
		var queue = [fromModel]; // unshift -> queue -> pop
	
		graph[fromModel].distance = 0;
	
		while (queue.length) {
			var current = queue.pop();
			var adjacents = Object.keys(conversions[current]);
	
			for (var len = adjacents.length, i = 0; i < len; i++) {
				var adjacent = adjacents[i];
				var node = graph[adjacent];
	
				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}
	
		return graph;
	}
	
	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}
	
	function wrapConversion(toModel, graph) {
		var path = [graph[toModel].parent, toModel];
		var fn = conversions[graph[toModel].parent][toModel];
	
		var cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}
	
		fn.conversion = path;
		return fn;
	}
	
	var route = function (fromModel) {
		var graph = deriveBFS(fromModel);
		var conversion = {};
	
		var models = Object.keys(graph);
		for (var len = models.length, i = 0; i < len; i++) {
			var toModel = models[i];
			var node = graph[toModel];
	
			if (node.parent === null) {
				// no possible conversion, or this node is the source model.
				continue;
			}
	
			conversion[toModel] = wrapConversion(toModel, graph);
		}
	
		return conversion;
	};
	
	var convert = {};
	
	var models = Object.keys(conversions);
	
	function wrapRaw(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}
	
			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}
	
			return fn(args);
		};
	
		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}
	
		return wrappedFn;
	}
	
	function wrapRounded(fn) {
		var wrappedFn = function (args) {
			if (args === undefined || args === null) {
				return args;
			}
	
			if (arguments.length > 1) {
				args = Array.prototype.slice.call(arguments);
			}
	
			var result = fn(args);
	
			// we're assuming the result is an array here.
			// see notice in conversions.js; don't use box types
			// in conversion functions.
			if (typeof result === 'object') {
				for (var len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}
	
			return result;
		};
	
		// preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}
	
		return wrappedFn;
	}
	
	models.forEach(function (fromModel) {
		convert[fromModel] = {};
	
		Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
		Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});
	
		var routes = route(fromModel);
		var routeModels = Object.keys(routes);
	
		routeModels.forEach(function (toModel) {
			var fn = routes[toModel];
	
			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});
	
	var colorConvert = convert;
	
	var colorName$1 = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
	
	/* MIT license */
	
	
	var colorString = {
	   getRgba: getRgba,
	   getHsla: getHsla,
	   getRgb: getRgb,
	   getHsl: getHsl,
	   getHwb: getHwb,
	   getAlpha: getAlpha,
	
	   hexString: hexString,
	   rgbString: rgbString,
	   rgbaString: rgbaString,
	   percentString: percentString,
	   percentaString: percentaString,
	   hslString: hslString,
	   hslaString: hslaString,
	   hwbString: hwbString,
	   keyword: keyword
	};
	
	function getRgba(string) {
	   if (!string) {
		  return;
	   }
	   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
		   hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
		   rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
		   per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
		   keyword = /(\w+)/;
	
	   var rgb = [0, 0, 0],
		   a = 1,
		   match = string.match(abbr),
		   hexAlpha = "";
	   if (match) {
		  match = match[1];
		  hexAlpha = match[3];
		  for (var i = 0; i < rgb.length; i++) {
			 rgb[i] = parseInt(match[i] + match[i], 16);
		  }
		  if (hexAlpha) {
			 a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
		  }
	   }
	   else if (match = string.match(hex)) {
		  hexAlpha = match[2];
		  match = match[1];
		  for (var i = 0; i < rgb.length; i++) {
			 rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
		  }
		  if (hexAlpha) {
			 a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
		  }
	   }
	   else if (match = string.match(rgba)) {
		  for (var i = 0; i < rgb.length; i++) {
			 rgb[i] = parseInt(match[i + 1]);
		  }
		  a = parseFloat(match[4]);
	   }
	   else if (match = string.match(per)) {
		  for (var i = 0; i < rgb.length; i++) {
			 rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		  }
		  a = parseFloat(match[4]);
	   }
	   else if (match = string.match(keyword)) {
		  if (match[1] == "transparent") {
			 return [0, 0, 0, 0];
		  }
		  rgb = colorName$1[match[1]];
		  if (!rgb) {
			 return;
		  }
	   }
	
	   for (var i = 0; i < rgb.length; i++) {
		  rgb[i] = scale(rgb[i], 0, 255);
	   }
	   if (!a && a != 0) {
		  a = 1;
	   }
	   else {
		  a = scale(a, 0, 1);
	   }
	   rgb[3] = a;
	   return rgb;
	}
	
	function getHsla(string) {
	   if (!string) {
		  return;
	   }
	   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hsl);
	   if (match) {
		  var alpha = parseFloat(match[4]);
		  var h = scale(parseInt(match[1]), 0, 360),
			  s = scale(parseFloat(match[2]), 0, 100),
			  l = scale(parseFloat(match[3]), 0, 100),
			  a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
		  return [h, s, l, a];
	   }
	}
	
	function getHwb(string) {
	   if (!string) {
		  return;
	   }
	   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hwb);
	   if (match) {
		var alpha = parseFloat(match[4]);
		  var h = scale(parseInt(match[1]), 0, 360),
			  w = scale(parseFloat(match[2]), 0, 100),
			  b = scale(parseFloat(match[3]), 0, 100),
			  a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
		  return [h, w, b, a];
	   }
	}
	
	function getRgb(string) {
	   var rgba = getRgba(string);
	   return rgba && rgba.slice(0, 3);
	}
	
	function getHsl(string) {
	  var hsla = getHsla(string);
	  return hsla && hsla.slice(0, 3);
	}
	
	function getAlpha(string) {
	   var vals = getRgba(string);
	   if (vals) {
		  return vals[3];
	   }
	   else if (vals = getHsla(string)) {
		  return vals[3];
	   }
	   else if (vals = getHwb(string)) {
		  return vals[3];
	   }
	}
	
	// generators
	function hexString(rgba, a) {
	   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
	   return "#" + hexDouble(rgba[0]) 
				  + hexDouble(rgba[1])
				  + hexDouble(rgba[2])
				  + (
					 (a >= 0 && a < 1)
					 ? hexDouble(Math.round(a * 255))
					 : ""
				  );
	}
	
	function rgbString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
		  return rgbaString(rgba, alpha);
	   }
	   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
	}
	
	function rgbaString(rgba, alpha) {
	   if (alpha === undefined) {
		  alpha = (rgba[3] !== undefined ? rgba[3] : 1);
	   }
	   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
			   + ", " + alpha + ")";
	}
	
	function percentString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
		  return percentaString(rgba, alpha);
	   }
	   var r = Math.round(rgba[0]/255 * 100),
		   g = Math.round(rgba[1]/255 * 100),
		   b = Math.round(rgba[2]/255 * 100);
	
	   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
	}
	
	function percentaString(rgba, alpha) {
	   var r = Math.round(rgba[0]/255 * 100),
		   g = Math.round(rgba[1]/255 * 100),
		   b = Math.round(rgba[2]/255 * 100);
	   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
	}
	
	function hslString(hsla, alpha) {
	   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
		  return hslaString(hsla, alpha);
	   }
	   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
	}
	
	function hslaString(hsla, alpha) {
	   if (alpha === undefined) {
		  alpha = (hsla[3] !== undefined ? hsla[3] : 1);
	   }
	   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
			   + alpha + ")";
	}
	
	// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
	// (hwb have alpha optional & 1 is default value)
	function hwbString(hwb, alpha) {
	   if (alpha === undefined) {
		  alpha = (hwb[3] !== undefined ? hwb[3] : 1);
	   }
	   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
			   + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
	}
	
	function keyword(rgb) {
	  return reverseNames[rgb.slice(0, 3)];
	}
	
	// helpers
	function scale(num, min, max) {
	   return Math.min(Math.max(min, num), max);
	}
	
	function hexDouble(num) {
	  var str = num.toString(16).toUpperCase();
	  return (str.length < 2) ? "0" + str : str;
	}
	
	
	//create a list of reverse color names
	var reverseNames = {};
	for (var name in colorName$1) {
	   reverseNames[colorName$1[name]] = name;
	}
	
	/* MIT license */
	
	
	
	var Color = function (obj) {
		if (obj instanceof Color) {
			return obj;
		}
		if (!(this instanceof Color)) {
			return new Color(obj);
		}
	
		this.valid = false;
		this.values = {
			rgb: [0, 0, 0],
			hsl: [0, 0, 0],
			hsv: [0, 0, 0],
			hwb: [0, 0, 0],
			cmyk: [0, 0, 0, 0],
			alpha: 1
		};
	
		// parse Color() argument
		var vals;
		if (typeof obj === 'string') {
			vals = colorString.getRgba(obj);
			if (vals) {
				this.setValues('rgb', vals);
			} else if (vals = colorString.getHsla(obj)) {
				this.setValues('hsl', vals);
			} else if (vals = colorString.getHwb(obj)) {
				this.setValues('hwb', vals);
			}
		} else if (typeof obj === 'object') {
			vals = obj;
			if (vals.r !== undefined || vals.red !== undefined) {
				this.setValues('rgb', vals);
			} else if (vals.l !== undefined || vals.lightness !== undefined) {
				this.setValues('hsl', vals);
			} else if (vals.v !== undefined || vals.value !== undefined) {
				this.setValues('hsv', vals);
			} else if (vals.w !== undefined || vals.whiteness !== undefined) {
				this.setValues('hwb', vals);
			} else if (vals.c !== undefined || vals.cyan !== undefined) {
				this.setValues('cmyk', vals);
			}
		}
	};
	
	Color.prototype = {
		isValid: function () {
			return this.valid;
		},
		rgb: function () {
			return this.setSpace('rgb', arguments);
		},
		hsl: function () {
			return this.setSpace('hsl', arguments);
		},
		hsv: function () {
			return this.setSpace('hsv', arguments);
		},
		hwb: function () {
			return this.setSpace('hwb', arguments);
		},
		cmyk: function () {
			return this.setSpace('cmyk', arguments);
		},
	
		rgbArray: function () {
			return this.values.rgb;
		},
		hslArray: function () {
			return this.values.hsl;
		},
		hsvArray: function () {
			return this.values.hsv;
		},
		hwbArray: function () {
			var values = this.values;
			if (values.alpha !== 1) {
				return values.hwb.concat([values.alpha]);
			}
			return values.hwb;
		},
		cmykArray: function () {
			return this.values.cmyk;
		},
		rgbaArray: function () {
			var values = this.values;
			return values.rgb.concat([values.alpha]);
		},
		hslaArray: function () {
			var values = this.values;
			return values.hsl.concat([values.alpha]);
		},
		alpha: function (val) {
			if (val === undefined) {
				return this.values.alpha;
			}
			this.setValues('alpha', val);
			return this;
		},
	
		red: function (val) {
			return this.setChannel('rgb', 0, val);
		},
		green: function (val) {
			return this.setChannel('rgb', 1, val);
		},
		blue: function (val) {
			return this.setChannel('rgb', 2, val);
		},
		hue: function (val) {
			if (val) {
				val %= 360;
				val = val < 0 ? 360 + val : val;
			}
			return this.setChannel('hsl', 0, val);
		},
		saturation: function (val) {
			return this.setChannel('hsl', 1, val);
		},
		lightness: function (val) {
			return this.setChannel('hsl', 2, val);
		},
		saturationv: function (val) {
			return this.setChannel('hsv', 1, val);
		},
		whiteness: function (val) {
			return this.setChannel('hwb', 1, val);
		},
		blackness: function (val) {
			return this.setChannel('hwb', 2, val);
		},
		value: function (val) {
			return this.setChannel('hsv', 2, val);
		},
		cyan: function (val) {
			return this.setChannel('cmyk', 0, val);
		},
		magenta: function (val) {
			return this.setChannel('cmyk', 1, val);
		},
		yellow: function (val) {
			return this.setChannel('cmyk', 2, val);
		},
		black: function (val) {
			return this.setChannel('cmyk', 3, val);
		},
	
		hexString: function () {
			return colorString.hexString(this.values.rgb);
		},
		rgbString: function () {
			return colorString.rgbString(this.values.rgb, this.values.alpha);
		},
		rgbaString: function () {
			return colorString.rgbaString(this.values.rgb, this.values.alpha);
		},
		percentString: function () {
			return colorString.percentString(this.values.rgb, this.values.alpha);
		},
		hslString: function () {
			return colorString.hslString(this.values.hsl, this.values.alpha);
		},
		hslaString: function () {
			return colorString.hslaString(this.values.hsl, this.values.alpha);
		},
		hwbString: function () {
			return colorString.hwbString(this.values.hwb, this.values.alpha);
		},
		keyword: function () {
			return colorString.keyword(this.values.rgb, this.values.alpha);
		},
	
		rgbNumber: function () {
			var rgb = this.values.rgb;
			return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
		},
	
		luminosity: function () {
			// http://www.w3.org/TR/WCAG20/#relativeluminancedef
			var rgb = this.values.rgb;
			var lum = [];
			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
			}
			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},
	
		contrast: function (color2) {
			// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();
			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}
			return (lum2 + 0.05) / (lum1 + 0.05);
		},
	
		level: function (color2) {
			var contrastRatio = this.contrast(color2);
			if (contrastRatio >= 7.1) {
				return 'AAA';
			}
	
			return (contrastRatio >= 4.5) ? 'AA' : '';
		},
	
		dark: function () {
			// YIQ equation from http://24ways.org/2010/calculating-color-contrast
			var rgb = this.values.rgb;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
			return yiq < 128;
		},
	
		light: function () {
			return !this.dark();
		},
	
		negate: function () {
			var rgb = [];
			for (var i = 0; i < 3; i++) {
				rgb[i] = 255 - this.values.rgb[i];
			}
			this.setValues('rgb', rgb);
			return this;
		},
	
		lighten: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] += hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		darken: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] -= hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		saturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] += hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		desaturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] -= hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},
	
		whiten: function (ratio) {
			var hwb = this.values.hwb;
			hwb[1] += hwb[1] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},
	
		blacken: function (ratio) {
			var hwb = this.values.hwb;
			hwb[2] += hwb[2] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},
	
		greyscale: function () {
			var rgb = this.values.rgb;
			// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
			var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			this.setValues('rgb', [val, val, val]);
			return this;
		},
	
		clearer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha - (alpha * ratio));
			return this;
		},
	
		opaquer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha + (alpha * ratio));
			return this;
		},
	
		rotate: function (degrees) {
			var hsl = this.values.hsl;
			var hue = (hsl[0] + degrees) % 360;
			hsl[0] = hue < 0 ? 360 + hue : hue;
			this.setValues('hsl', hsl);
			return this;
		},
	
		/**
		 * Ported from sass implementation in C
		 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		 */
		mix: function (mixinColor, weight) {
			var color1 = this;
			var color2 = mixinColor;
			var p = weight === undefined ? 0.5 : weight;
	
			var w = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();
	
			var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			var w2 = 1 - w1;
	
			return this
				.rgb(
					w1 * color1.red() + w2 * color2.red(),
					w1 * color1.green() + w2 * color2.green(),
					w1 * color1.blue() + w2 * color2.blue()
				)
				.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
		},
	
		toJSON: function () {
			return this.rgb();
		},
	
		clone: function () {
			// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
			// making the final build way to big to embed in Chart.js. So let's do it manually,
			// assuming that values to clone are 1 dimension arrays containing only numbers,
			// except 'alpha' which is a number.
			var result = new Color();
			var source = this.values;
			var target = result.values;
			var value, type;
	
			for (var prop in source) {
				if (source.hasOwnProperty(prop)) {
					value = source[prop];
					type = ({}).toString.call(value);
					if (type === '[object Array]') {
						target[prop] = value.slice(0);
					} else if (type === '[object Number]') {
						target[prop] = value;
					} else {
						console.error('unexpected color value:', value);
					}
				}
			}
	
			return result;
		}
	};
	
	Color.prototype.spaces = {
		rgb: ['red', 'green', 'blue'],
		hsl: ['hue', 'saturation', 'lightness'],
		hsv: ['hue', 'saturation', 'value'],
		hwb: ['hue', 'whiteness', 'blackness'],
		cmyk: ['cyan', 'magenta', 'yellow', 'black']
	};
	
	Color.prototype.maxes = {
		rgb: [255, 255, 255],
		hsl: [360, 100, 100],
		hsv: [360, 100, 100],
		hwb: [360, 100, 100],
		cmyk: [100, 100, 100, 100]
	};
	
	Color.prototype.getValues = function (space) {
		var values = this.values;
		var vals = {};
	
		for (var i = 0; i < space.length; i++) {
			vals[space.charAt(i)] = values[space][i];
		}
	
		if (values.alpha !== 1) {
			vals.a = values.alpha;
		}
	
		// {r: 255, g: 255, b: 255, a: 0.4}
		return vals;
	};
	
	Color.prototype.setValues = function (space, vals) {
		var values = this.values;
		var spaces = this.spaces;
		var maxes = this.maxes;
		var alpha = 1;
		var i;
	
		this.valid = true;
	
		if (space === 'alpha') {
			alpha = vals;
		} else if (vals.length) {
			// [10, 10, 10]
			values[space] = vals.slice(0, space.length);
			alpha = vals[space.length];
		} else if (vals[space.charAt(0)] !== undefined) {
			// {r: 10, g: 10, b: 10}
			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[space.charAt(i)];
			}
	
			alpha = vals.a;
		} else if (vals[spaces[space][0]] !== undefined) {
			// {red: 10, green: 10, blue: 10}
			var chans = spaces[space];
	
			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[chans[i]];
			}
	
			alpha = vals.alpha;
		}
	
		values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));
	
		if (space === 'alpha') {
			return false;
		}
	
		var capped;
	
		// cap values of the space prior converting all values
		for (i = 0; i < space.length; i++) {
			capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
			values[space][i] = Math.round(capped);
		}
	
		// convert to all the other color spaces
		for (var sname in spaces) {
			if (sname !== space) {
				values[sname] = colorConvert[space][sname](values[space]);
			}
		}
	
		return true;
	};
	
	Color.prototype.setSpace = function (space, args) {
		var vals = args[0];
	
		if (vals === undefined) {
			// color.rgb()
			return this.getValues(space);
		}
	
		// color.rgb(10, 10, 10)
		if (typeof vals === 'number') {
			vals = Array.prototype.slice.call(args);
		}
	
		this.setValues(space, vals);
		return this;
	};
	
	Color.prototype.setChannel = function (space, index, val) {
		var svalues = this.values[space];
		if (val === undefined) {
			// color.red()
			return svalues[index];
		} else if (val === svalues[index]) {
			// color.red(color.red())
			return this;
		}
	
		// color.red(100)
		svalues[index] = val;
		this.setValues(space, svalues);
	
		return this;
	};
	
	if (typeof window !== 'undefined') {
		window.Color = Color;
	}
	
	var chartjsColor = Color;
	
	/**
	 * @namespace Chart.helpers
	 */
	var helpers = {
		/**
		 * An empty function that can be used, for example, for optional callback.
		 */
		noop: function() {},
	
		/**
		 * Returns a unique id, sequentially generated from a global variable.
		 * @returns {number}
		 * @function
		 */
		uid: (function() {
			var id = 0;
			return function() {
				return id++;
			};
		}()),
	
		/**
		 * Returns true if `value` is neither null nor undefined, else returns false.
		 * @param {*} value - The value to test.
		 * @returns {boolean}
		 * @since 2.7.0
		 */
		isNullOrUndef: function(value) {
			return value === null || typeof value === 'undefined';
		},
	
		/**
		 * Returns true if `value` is an array (including typed arrays), else returns false.
		 * @param {*} value - The value to test.
		 * @returns {boolean}
		 * @function
		 */
		isArray: function(value) {
			if (Array.isArray && Array.isArray(value)) {
				return true;
			}
			var type = Object.prototype.toString.call(value);
			if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
				return true;
			}
			return false;
		},
	
		/**
		 * Returns true if `value` is an object (excluding null), else returns false.
		 * @param {*} value - The value to test.
		 * @returns {boolean}
		 * @since 2.7.0
		 */
		isObject: function(value) {
			return value !== null && Object.prototype.toString.call(value) === '[object Object]';
		},
	
		/**
		 * Returns true if `value` is a finite number, else returns false
		 * @param {*} value  - The value to test.
		 * @returns {boolean}
		 */
		isFinite: function(value) {
			return (typeof value === 'number' || value instanceof Number) && isFinite(value);
		},
	
		/**
		 * Returns `value` if defined, else returns `defaultValue`.
		 * @param {*} value - The value to return if defined.
		 * @param {*} defaultValue - The value to return if `value` is undefined.
		 * @returns {*}
		 */
		valueOrDefault: function(value, defaultValue) {
			return typeof value === 'undefined' ? defaultValue : value;
		},
	
		/**
		 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
		 * @param {Array} value - The array to lookup for value at `index`.
		 * @param {number} index - The index in `value` to lookup for value.
		 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
		 * @returns {*}
		 */
		valueAtIndexOrDefault: function(value, index, defaultValue) {
			return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
		},
	
		/**
		 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
		 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
		 * @param {function} fn - The function to call.
		 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
		 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
		 * @returns {*}
		 */
		callback: function(fn, args, thisArg) {
			if (fn && typeof fn.call === 'function') {
				return fn.apply(thisArg, args);
			}
		},
	
		/**
		 * Note(SB) for performance sake, this method should only be used when loopable type
		 * is unknown or in none intensive code (not called often and small loopable). Else
		 * it's preferable to use a regular for() loop and save extra function calls.
		 * @param {object|Array} loopable - The object or array to be iterated.
		 * @param {function} fn - The function to call for each item.
		 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
		 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
		 */
		each: function(loopable, fn, thisArg, reverse) {
			var i, len, keys;
			if (helpers.isArray(loopable)) {
				len = loopable.length;
				if (reverse) {
					for (i = len - 1; i >= 0; i--) {
						fn.call(thisArg, loopable[i], i);
					}
				} else {
					for (i = 0; i < len; i++) {
						fn.call(thisArg, loopable[i], i);
					}
				}
			} else if (helpers.isObject(loopable)) {
				keys = Object.keys(loopable);
				len = keys.length;
				for (i = 0; i < len; i++) {
					fn.call(thisArg, loopable[keys[i]], keys[i]);
				}
			}
		},
	
		/**
		 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
		 * @see https://stackoverflow.com/a/14853974
		 * @param {Array} a0 - The array to compare
		 * @param {Array} a1 - The array to compare
		 * @returns {boolean}
		 */
		arrayEquals: function(a0, a1) {
			var i, ilen, v0, v1;
	
			if (!a0 || !a1 || a0.length !== a1.length) {
				return false;
			}
	
			for (i = 0, ilen = a0.length; i < ilen; ++i) {
				v0 = a0[i];
				v1 = a1[i];
	
				if (v0 instanceof Array && v1 instanceof Array) {
					if (!helpers.arrayEquals(v0, v1)) {
						return false;
					}
				} else if (v0 !== v1) {
					// NOTE: two different object instances will never be equal: {x:20} != {x:20}
					return false;
				}
			}
	
			return true;
		},
	
		/**
		 * Returns a deep copy of `source` without keeping references on objects and arrays.
		 * @param {*} source - The value to clone.
		 * @returns {*}
		 */
		clone: function(source) {
			if (helpers.isArray(source)) {
				return source.map(helpers.clone);
			}
	
			if (helpers.isObject(source)) {
				var target = {};
				var keys = Object.keys(source);
				var klen = keys.length;
				var k = 0;
	
				for (; k < klen; ++k) {
					target[keys[k]] = helpers.clone(source[keys[k]]);
				}
	
				return target;
			}
	
			return source;
		},
	
		/**
		 * The default merger when Chart.helpers.merge is called without merger option.
		 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
		 * @private
		 */
		_merger: function(key, target, source, options) {
			var tval = target[key];
			var sval = source[key];
	
			if (helpers.isObject(tval) && helpers.isObject(sval)) {
				helpers.merge(tval, sval, options);
			} else {
				target[key] = helpers.clone(sval);
			}
		},
	
		/**
		 * Merges source[key] in target[key] only if target[key] is undefined.
		 * @private
		 */
		_mergerIf: function(key, target, source) {
			var tval = target[key];
			var sval = source[key];
	
			if (helpers.isObject(tval) && helpers.isObject(sval)) {
				helpers.mergeIf(tval, sval);
			} else if (!target.hasOwnProperty(key)) {
				target[key] = helpers.clone(sval);
			}
		},
	
		/**
		 * Recursively deep copies `source` properties into `target` with the given `options`.
		 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
		 * @param {object} target - The target object in which all sources are merged into.
		 * @param {object|object[]} source - Object(s) to merge into `target`.
		 * @param {object} [options] - Merging options:
		 * @param {function} [options.merger] - The merge method (key, target, source, options)
		 * @returns {object} The `target` object.
		 */
		merge: function(target, source, options) {
			var sources = helpers.isArray(source) ? source : [source];
			var ilen = sources.length;
			var merge, i, keys, klen, k;
	
			if (!helpers.isObject(target)) {
				return target;
			}
	
			options = options || {};
			merge = options.merger || helpers._merger;
	
			for (i = 0; i < ilen; ++i) {
				source = sources[i];
				if (!helpers.isObject(source)) {
					continue;
				}
	
				keys = Object.keys(source);
				for (k = 0, klen = keys.length; k < klen; ++k) {
					merge(keys[k], target, source, options);
				}
			}
	
			return target;
		},
	
		/**
		 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
		 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
		 * @param {object} target - The target object in which all sources are merged into.
		 * @param {object|object[]} source - Object(s) to merge into `target`.
		 * @returns {object} The `target` object.
		 */
		mergeIf: function(target, source) {
			return helpers.merge(target, source, {merger: helpers._mergerIf});
		},
	
		/**
		 * Applies the contents of two or more objects together into the first object.
		 * @param {object} target - The target object in which all objects are merged into.
		 * @param {object} arg1 - Object containing additional properties to merge in target.
		 * @param {object} argN - Additional objects containing properties to merge in target.
		 * @returns {object} The `target` object.
		 */
		extend: Object.assign || function(target) {
			return helpers.merge(target, [].slice.call(arguments, 1), {
				merger: function(key, dst, src) {
					dst[key] = src[key];
				}
			});
		},
	
		/**
		 * Basic javascript inheritance based on the model created in Backbone.js
		 */
		inherits: function(extensions) {
			var me = this;
			var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
				return me.apply(this, arguments);
			};
	
			var Surrogate = function() {
				this.constructor = ChartElement;
			};
	
			Surrogate.prototype = me.prototype;
			ChartElement.prototype = new Surrogate();
			ChartElement.extend = helpers.inherits;
	
			if (extensions) {
				helpers.extend(ChartElement.prototype, extensions);
			}
	
			ChartElement.__super__ = me.prototype;
			return ChartElement;
		},
	
		_deprecated: function(scope, value, previous, current) {
			if (value !== undefined) {
				console.warn(scope + ': "' + previous +
					'" is deprecated. Please use "' + current + '" instead');
			}
		}
	};
	
	var helpers_core = helpers;
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.callback instead.
	 * @function Chart.helpers.callCallback
	 * @deprecated since version 2.6.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers.callCallback = helpers.callback;
	
	/**
	 * Provided for backward compatibility, use Array.prototype.indexOf instead.
	 * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
	 * @function Chart.helpers.indexOf
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers.indexOf = function(array, item, fromIndex) {
		return Array.prototype.indexOf.call(array, item, fromIndex);
	};
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
	 * @function Chart.helpers.getValueOrDefault
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers.getValueOrDefault = helpers.valueOrDefault;
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
	 * @function Chart.helpers.getValueAtIndexOrDefault
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
	
	/**
	 * Easing functions adapted from Robert Penner's easing equations.
	 * @namespace Chart.helpers.easingEffects
	 * @see http://www.robertpenner.com/easing/
	 */
	var effects = {
		linear: function(t) {
			return t;
		},
	
		easeInQuad: function(t) {
			return t * t;
		},
	
		easeOutQuad: function(t) {
			return -t * (t - 2);
		},
	
		easeInOutQuad: function(t) {
			if ((t /= 0.5) < 1) {
				return 0.5 * t * t;
			}
			return -0.5 * ((--t) * (t - 2) - 1);
		},
	
		easeInCubic: function(t) {
			return t * t * t;
		},
	
		easeOutCubic: function(t) {
			return (t = t - 1) * t * t + 1;
		},
	
		easeInOutCubic: function(t) {
			if ((t /= 0.5) < 1) {
				return 0.5 * t * t * t;
			}
			return 0.5 * ((t -= 2) * t * t + 2);
		},
	
		easeInQuart: function(t) {
			return t * t * t * t;
		},
	
		easeOutQuart: function(t) {
			return -((t = t - 1) * t * t * t - 1);
		},
	
		easeInOutQuart: function(t) {
			if ((t /= 0.5) < 1) {
				return 0.5 * t * t * t * t;
			}
			return -0.5 * ((t -= 2) * t * t * t - 2);
		},
	
		easeInQuint: function(t) {
			return t * t * t * t * t;
		},
	
		easeOutQuint: function(t) {
			return (t = t - 1) * t * t * t * t + 1;
		},
	
		easeInOutQuint: function(t) {
			if ((t /= 0.5) < 1) {
				return 0.5 * t * t * t * t * t;
			}
			return 0.5 * ((t -= 2) * t * t * t * t + 2);
		},
	
		easeInSine: function(t) {
			return -Math.cos(t * (Math.PI / 2)) + 1;
		},
	
		easeOutSine: function(t) {
			return Math.sin(t * (Math.PI / 2));
		},
	
		easeInOutSine: function(t) {
			return -0.5 * (Math.cos(Math.PI * t) - 1);
		},
	
		easeInExpo: function(t) {
			return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
		},
	
		easeOutExpo: function(t) {
			return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
		},
	
		easeInOutExpo: function(t) {
			if (t === 0) {
				return 0;
			}
			if (t === 1) {
				return 1;
			}
			if ((t /= 0.5) < 1) {
				return 0.5 * Math.pow(2, 10 * (t - 1));
			}
			return 0.5 * (-Math.pow(2, -10 * --t) + 2);
		},
	
		easeInCirc: function(t) {
			if (t >= 1) {
				return t;
			}
			return -(Math.sqrt(1 - t * t) - 1);
		},
	
		easeOutCirc: function(t) {
			return Math.sqrt(1 - (t = t - 1) * t);
		},
	
		easeInOutCirc: function(t) {
			if ((t /= 0.5) < 1) {
				return -0.5 * (Math.sqrt(1 - t * t) - 1);
			}
			return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
		},
	
		easeInElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if (t === 1) {
				return 1;
			}
			if (!p) {
				p = 0.3;
			}
			if (a < 1) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
		},
	
		easeOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if (t === 1) {
				return 1;
			}
			if (!p) {
				p = 0.3;
			}
			if (a < 1) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
		},
	
		easeInOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 0.5) === 2) {
				return 1;
			}
			if (!p) {
				p = 0.45;
			}
			if (a < 1) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			if (t < 1) {
				return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
			}
			return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
		},
		easeInBack: function(t) {
			var s = 1.70158;
			return t * t * ((s + 1) * t - s);
		},
	
		easeOutBack: function(t) {
			var s = 1.70158;
			return (t = t - 1) * t * ((s + 1) * t + s) + 1;
		},
	
		easeInOutBack: function(t) {
			var s = 1.70158;
			if ((t /= 0.5) < 1) {
				return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
			}
			return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
		},
	
		easeInBounce: function(t) {
			return 1 - effects.easeOutBounce(1 - t);
		},
	
		easeOutBounce: function(t) {
			if (t < (1 / 2.75)) {
				return 7.5625 * t * t;
			}
			if (t < (2 / 2.75)) {
				return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
			}
			if (t < (2.5 / 2.75)) {
				return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
			}
			return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
		},
	
		easeInOutBounce: function(t) {
			if (t < 0.5) {
				return effects.easeInBounce(t * 2) * 0.5;
			}
			return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
		}
	};
	
	var helpers_easing = {
		effects: effects
	};
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
	 * @function Chart.helpers.easingEffects
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers_core.easingEffects = effects;
	
	var PI = Math.PI;
	var RAD_PER_DEG = PI / 180;
	var DOUBLE_PI = PI * 2;
	var HALF_PI = PI / 2;
	var QUARTER_PI = PI / 4;
	var TWO_THIRDS_PI = PI * 2 / 3;
	
	/**
	 * @namespace Chart.helpers.canvas
	 */
	var exports$1 = {
		/**
		 * Clears the entire canvas associated to the given `chart`.
		 * @param {Chart} chart - The chart for which to clear the canvas.
		 */
		clear: function(chart) {
			chart.ctx.clearRect(0, 0, chart.width, chart.height);
		},
	
		/**
		 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
		 * given size (width, height) and the same `radius` for all corners.
		 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
		 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
		 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
		 * @param {number} width - The rectangle's width.
		 * @param {number} height - The rectangle's height.
		 * @param {number} radius - The rounded amount (in pixels) for the four corners.
		 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
		 */
		roundedRect: function(ctx, x, y, width, height, radius) {
			if (radius) {
				var r = Math.min(radius, height / 2, width / 2);
				var left = x + r;
				var top = y + r;
				var right = x + width - r;
				var bottom = y + height - r;
	
				ctx.moveTo(x, top);
				if (left < right && top < bottom) {
					ctx.arc(left, top, r, -PI, -HALF_PI);
					ctx.arc(right, top, r, -HALF_PI, 0);
					ctx.arc(right, bottom, r, 0, HALF_PI);
					ctx.arc(left, bottom, r, HALF_PI, PI);
				} else if (left < right) {
					ctx.moveTo(left, y);
					ctx.arc(right, top, r, -HALF_PI, HALF_PI);
					ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
				} else if (top < bottom) {
					ctx.arc(left, top, r, -PI, 0);
					ctx.arc(left, bottom, r, 0, PI);
				} else {
					ctx.arc(left, top, r, -PI, PI);
				}
				ctx.closePath();
				ctx.moveTo(x, y);
			} else {
				ctx.rect(x, y, width, height);
			}
		},
	
		drawPoint: function(ctx, style, radius, x, y, rotation) {
			var type, xOffset, yOffset, size, cornerRadius;
			var rad = (rotation || 0) * RAD_PER_DEG;
	
			if (style && typeof style === 'object') {
				type = style.toString();
				if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
					ctx.save();
					ctx.translate(x, y);
					ctx.rotate(rad);
					ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
					ctx.restore();
					return;
				}
			}
	
			if (isNaN(radius) || radius <= 0) {
				return;
			}
	
			ctx.beginPath();
	
			switch (style) {
			// Default includes circle
			default:
				ctx.arc(x, y, radius, 0, DOUBLE_PI);
				ctx.closePath();
				break;
			case 'triangle':
				ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
				rad += TWO_THIRDS_PI;
				ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
				rad += TWO_THIRDS_PI;
				ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
				ctx.closePath();
				break;
			case 'rectRounded':
				// NOTE: the rounded rect implementation changed to use `arc` instead of
				// `quadraticCurveTo` since it generates better results when rect is
				// almost a circle. 0.516 (instead of 0.5) produces results with visually
				// closer proportion to the previous impl and it is inscribed in the
				// circle with `radius`. For more details, see the following PRs:
				// https://github.com/chartjs/Chart.js/issues/5597
				// https://github.com/chartjs/Chart.js/issues/5858
				cornerRadius = radius * 0.516;
				size = radius - cornerRadius;
				xOffset = Math.cos(rad + QUARTER_PI) * size;
				yOffset = Math.sin(rad + QUARTER_PI) * size;
				ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
				ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
				ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
				ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
				ctx.closePath();
				break;
			case 'rect':
				if (!rotation) {
					size = Math.SQRT1_2 * radius;
					ctx.rect(x - size, y - size, 2 * size, 2 * size);
					break;
				}
				rad += QUARTER_PI;
				/* falls through */
			case 'rectRot':
				xOffset = Math.cos(rad) * radius;
				yOffset = Math.sin(rad) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + yOffset, y - xOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.lineTo(x - yOffset, y + xOffset);
				ctx.closePath();
				break;
			case 'crossRot':
				rad += QUARTER_PI;
				/* falls through */
			case 'cross':
				xOffset = Math.cos(rad) * radius;
				yOffset = Math.sin(rad) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x + yOffset, y - xOffset);
				ctx.lineTo(x - yOffset, y + xOffset);
				break;
			case 'star':
				xOffset = Math.cos(rad) * radius;
				yOffset = Math.sin(rad) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x + yOffset, y - xOffset);
				ctx.lineTo(x - yOffset, y + xOffset);
				rad += QUARTER_PI;
				xOffset = Math.cos(rad) * radius;
				yOffset = Math.sin(rad) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x + yOffset, y - xOffset);
				ctx.lineTo(x - yOffset, y + xOffset);
				break;
			case 'line':
				xOffset = Math.cos(rad) * radius;
				yOffset = Math.sin(rad) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				break;
			case 'dash':
				ctx.moveTo(x, y);
				ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
				break;
			}
	
			ctx.fill();
			ctx.stroke();
		},
	
		/**
		 * Returns true if the point is inside the rectangle
		 * @param {object} point - The point to test
		 * @param {object} area - The rectangle
		 * @returns {boolean}
		 * @private
		 */
		_isPointInArea: function(point, area) {
			var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
	
			return point.x > area.left - epsilon && point.x < area.right + epsilon &&
				point.y > area.top - epsilon && point.y < area.bottom + epsilon;
		},
	
		clipArea: function(ctx, area) {
			ctx.save();
			ctx.beginPath();
			ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
			ctx.clip();
		},
	
		unclipArea: function(ctx) {
			ctx.restore();
		},
	
		lineTo: function(ctx, previous, target, flip) {
			var stepped = target.steppedLine;
			if (stepped) {
				if (stepped === 'middle') {
					var midpoint = (previous.x + target.x) / 2.0;
					ctx.lineTo(midpoint, flip ? target.y : previous.y);
					ctx.lineTo(midpoint, flip ? previous.y : target.y);
				} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
					ctx.lineTo(previous.x, target.y);
				} else {
					ctx.lineTo(target.x, previous.y);
				}
				ctx.lineTo(target.x, target.y);
				return;
			}
	
			if (!target.tension) {
				ctx.lineTo(target.x, target.y);
				return;
			}
	
			ctx.bezierCurveTo(
				flip ? previous.controlPointPreviousX : previous.controlPointNextX,
				flip ? previous.controlPointPreviousY : previous.controlPointNextY,
				flip ? target.controlPointNextX : target.controlPointPreviousX,
				flip ? target.controlPointNextY : target.controlPointPreviousY,
				target.x,
				target.y);
		}
	};
	
	var helpers_canvas = exports$1;
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
	 * @namespace Chart.helpers.clear
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers_core.clear = exports$1.clear;
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
	 * @namespace Chart.helpers.drawRoundedRectangle
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers_core.drawRoundedRectangle = function(ctx) {
		ctx.beginPath();
		exports$1.roundedRect.apply(exports$1, arguments);
	};
	
	var defaults = {
		/**
		 * @private
		 */
		_set: function(scope, values) {
			return helpers_core.merge(this[scope] || (this[scope] = {}), values);
		}
	};
	
	// TODO(v3): remove 'global' from namespace.  all default are global and
	// there's inconsistency around which options are under 'global'
	defaults._set('global', {
		defaultColor: 'rgba(0,0,0,0.1)',
		defaultFontColor: '#666',
		defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
		defaultFontSize: 12,
		defaultFontStyle: 'normal',
		defaultLineHeight: 1.2,
		showLines: true
	});
	
	var core_defaults = defaults;
	
	var valueOrDefault = helpers_core.valueOrDefault;
	
	/**
	 * Converts the given font object into a CSS font string.
	 * @param {object} font - A font object.
	 * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
	 * @private
	 */
	function toFontString(font) {
		if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
			return null;
		}
	
		return (font.style ? font.style + ' ' : '')
			+ (font.weight ? font.weight + ' ' : '')
			+ font.size + 'px '
			+ font.family;
	}
	
	/**
	 * @alias Chart.helpers.options
	 * @namespace
	 */
	var helpers_options = {
		/**
		 * Converts the given line height `value` in pixels for a specific font `size`.
		 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
		 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
		 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
		 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
		 * @since 2.7.0
		 */
		toLineHeight: function(value, size) {
			var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
			if (!matches || matches[1] === 'normal') {
				return size * 1.2;
			}
	
			value = +matches[2];
	
			switch (matches[3]) {
			case 'px':
				return value;
			case '%':
				value /= 100;
				break;
			}
	
			return size * value;
		},
	
		/**
		 * Converts the given value into a padding object with pre-computed width/height.
		 * @param {number|object} value - If a number, set the value to all TRBL component,
		 *  else, if and object, use defined properties and sets undefined ones to 0.
		 * @returns {object} The padding values (top, right, bottom, left, width, height)
		 * @since 2.7.0
		 */
		toPadding: function(value) {
			var t, r, b, l;
	
			if (helpers_core.isObject(value)) {
				t = +value.top || 0;
				r = +value.right || 0;
				b = +value.bottom || 0;
				l = +value.left || 0;
			} else {
				t = r = b = l = +value || 0;
			}
	
			return {
				top: t,
				right: r,
				bottom: b,
				left: l,
				height: t + b,
				width: l + r
			};
		},
	
		/**
		 * Parses font options and returns the font object.
		 * @param {object} options - A object that contains font options to be parsed.
		 * @return {object} The font object.
		 * @todo Support font.* options and renamed to toFont().
		 * @private
		 */
		_parseFont: function(options) {
			var globalDefaults = core_defaults.global;
			var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
			var font = {
				family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
				lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
				size: size,
				style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
				weight: null,
				string: ''
			};
	
			font.string = toFontString(font);
			return font;
		},
	
		/**
		 * Evaluates the given `inputs` sequentially and returns the first defined value.
		 * @param {Array} inputs - An array of values, falling back to the last value.
		 * @param {object} [context] - If defined and the current value is a function, the value
		 * is called with `context` as first argument and the result becomes the new input.
		 * @param {number} [index] - If defined and the current value is an array, the value
		 * at `index` become the new input.
		 * @param {object} [info] - object to return information about resolution in
		 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
		 * @since 2.7.0
		 */
		resolve: function(inputs, context, index, info) {
			var cacheable = true;
			var i, ilen, value;
	
			for (i = 0, ilen = inputs.length; i < ilen; ++i) {
				value = inputs[i];
				if (value === undefined) {
					continue;
				}
				if (context !== undefined && typeof value === 'function') {
					value = value(context);
					cacheable = false;
				}
				if (index !== undefined && helpers_core.isArray(value)) {
					value = value[index];
					cacheable = false;
				}
				if (value !== undefined) {
					if (info && !cacheable) {
						info.cacheable = false;
					}
					return value;
				}
			}
		}
	};
	
	/**
	 * @alias Chart.helpers.math
	 * @namespace
	 */
	var exports$2 = {
		/**
		 * Returns an array of factors sorted from 1 to sqrt(value)
		 * @private
		 */
		_factorize: function(value) {
			var result = [];
			var sqrt = Math.sqrt(value);
			var i;
	
			for (i = 1; i < sqrt; i++) {
				if (value % i === 0) {
					result.push(i);
					result.push(value / i);
				}
			}
			if (sqrt === (sqrt | 0)) { // if value is a square number
				result.push(sqrt);
			}
	
			result.sort(function(a, b) {
				return a - b;
			}).pop();
			return result;
		},
	
		log10: Math.log10 || function(x) {
			var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
			// Check for whole powers of 10,
			// which due to floating point rounding error should be corrected.
			var powerOf10 = Math.round(exponent);
			var isPowerOf10 = x === Math.pow(10, powerOf10);
	
			return isPowerOf10 ? powerOf10 : exponent;
		}
	};
	
	var helpers_math = exports$2;
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
	 * @namespace Chart.helpers.log10
	 * @deprecated since version 2.9.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers_core.log10 = exports$2.log10;
	
	var getRtlAdapter = function(rectX, width) {
		return {
			x: function(x) {
				return rectX + rectX + width - x;
			},
			setWidth: function(w) {
				width = w;
			},
			textAlign: function(align) {
				if (align === 'center') {
					return align;
				}
				return align === 'right' ? 'left' : 'right';
			},
			xPlus: function(x, value) {
				return x - value;
			},
			leftForLtr: function(x, itemWidth) {
				return x - itemWidth;
			},
		};
	};
	
	var getLtrAdapter = function() {
		return {
			x: function(x) {
				return x;
			},
			setWidth: function(w) { // eslint-disable-line no-unused-vars
			},
			textAlign: function(align) {
				return align;
			},
			xPlus: function(x, value) {
				return x + value;
			},
			leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
				return x;
			},
		};
	};
	
	var getAdapter = function(rtl, rectX, width) {
		return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
	};
	
	var overrideTextDirection = function(ctx, direction) {
		var style, original;
		if (direction === 'ltr' || direction === 'rtl') {
			style = ctx.canvas.style;
			original = [
				style.getPropertyValue('direction'),
				style.getPropertyPriority('direction'),
			];
	
			style.setProperty('direction', direction, 'important');
			ctx.prevTextDirection = original;
		}
	};
	
	var restoreTextDirection = function(ctx) {
		var original = ctx.prevTextDirection;
		if (original !== undefined) {
			delete ctx.prevTextDirection;
			ctx.canvas.style.setProperty('direction', original[0], original[1]);
		}
	};
	
	var helpers_rtl = {
		getRtlAdapter: getAdapter,
		overrideTextDirection: overrideTextDirection,
		restoreTextDirection: restoreTextDirection,
	};
	
	var helpers$1 = helpers_core;
	var easing = helpers_easing;
	var canvas = helpers_canvas;
	var options = helpers_options;
	var math = helpers_math;
	var rtl = helpers_rtl;
	helpers$1.easing = easing;
	helpers$1.canvas = canvas;
	helpers$1.options = options;
	helpers$1.math = math;
	helpers$1.rtl = rtl;
	
	function interpolate(start, view, model, ease) {
		var keys = Object.keys(model);
		var i, ilen, key, actual, origin, target, type, c0, c1;
	
		for (i = 0, ilen = keys.length; i < ilen; ++i) {
			key = keys[i];
	
			target = model[key];
	
			// if a value is added to the model after pivot() has been called, the view
			// doesn't contain it, so let's initialize the view to the target value.
			if (!view.hasOwnProperty(key)) {
				view[key] = target;
			}
	
			actual = view[key];
	
			if (actual === target || key[0] === '_') {
				continue;
			}
	
			if (!start.hasOwnProperty(key)) {
				start[key] = actual;
			}
	
			origin = start[key];
	
			type = typeof target;
	
			if (type === typeof origin) {
				if (type === 'string') {
					c0 = chartjsColor(origin);
					if (c0.valid) {
						c1 = chartjsColor(target);
						if (c1.valid) {
							view[key] = c1.mix(c0, ease).rgbString();
							continue;
						}
					}
				} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
					view[key] = origin + (target - origin) * ease;
					continue;
				}
			}
	
			view[key] = target;
		}
	}
	
	var Element = function(configuration) {
		helpers$1.extend(this, configuration);
		this.initialize.apply(this, arguments);
	};
	
	helpers$1.extend(Element.prototype, {
		_type: undefined,
	
		initialize: function() {
			this.hidden = false;
		},
	
		pivot: function() {
			var me = this;
			if (!me._view) {
				me._view = helpers$1.extend({}, me._model);
			}
			me._start = {};
			return me;
		},
	
		transition: function(ease) {
			var me = this;
			var model = me._model;
			var start = me._start;
			var view = me._view;
	
			// No animation -> No Transition
			if (!model || ease === 1) {
				me._view = helpers$1.extend({}, model);
				me._start = null;
				return me;
			}
	
			if (!view) {
				view = me._view = {};
			}
	
			if (!start) {
				start = me._start = {};
			}
	
			interpolate(start, view, model, ease);
	
			return me;
		},
	
		tooltipPosition: function() {
			return {
				x: this._model.x,
				y: this._model.y
			};
		},
	
		hasValue: function() {
			return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
		}
	});
	
	Element.extend = helpers$1.inherits;
	
	var core_element = Element;
	
	var exports$3 = core_element.extend({
		chart: null, // the animation associated chart instance
		currentStep: 0, // the current animation step
		numSteps: 60, // default number of steps
		easing: '', // the easing to use for this animation
		render: null, // render function used by the animation service
	
		onAnimationProgress: null, // user specified callback to fire on each step of the animation
		onAnimationComplete: null, // user specified callback to fire when the animation finishes
	});
	
	var core_animation = exports$3;
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, use Chart.Animation instead
	 * @prop Chart.Animation#animationObject
	 * @deprecated since version 2.6.0
	 * @todo remove at version 3
	 */
	Object.defineProperty(exports$3.prototype, 'animationObject', {
		get: function() {
			return this;
		}
	});
	
	/**
	 * Provided for backward compatibility, use Chart.Animation#chart instead
	 * @prop Chart.Animation#chartInstance
	 * @deprecated since version 2.6.0
	 * @todo remove at version 3
	 */
	Object.defineProperty(exports$3.prototype, 'chartInstance', {
		get: function() {
			return this.chart;
		},
		set: function(value) {
			this.chart = value;
		}
	});
	
	core_defaults._set('global', {
		animation: {
			duration: 1000,
			easing: 'easeOutQuart',
			onProgress: helpers$1.noop,
			onComplete: helpers$1.noop
		}
	});
	
	var core_animations = {
		animations: [],
		request: null,
	
		/**
		 * @param {Chart} chart - The chart to animate.
		 * @param {Chart.Animation} animation - The animation that we will animate.
		 * @param {number} duration - The animation duration in ms.
		 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
		 */
		addAnimation: function(chart, animation, duration, lazy) {
			var animations = this.animations;
			var i, ilen;
	
			animation.chart = chart;
			animation.startTime = Date.now();
			animation.duration = duration;
	
			if (!lazy) {
				chart.animating = true;
			}
	
			for (i = 0, ilen = animations.length; i < ilen; ++i) {
				if (animations[i].chart === chart) {
					animations[i] = animation;
					return;
				}
			}
	
			animations.push(animation);
	
			// If there are no animations queued, manually kickstart a digest, for lack of a better word
			if (animations.length === 1) {
				this.requestAnimationFrame();
			}
		},
	
		cancelAnimation: function(chart) {
			var index = helpers$1.findIndex(this.animations, function(animation) {
				return animation.chart === chart;
			});
	
			if (index !== -1) {
				this.animations.splice(index, 1);
				chart.animating = false;
			}
		},
	
		requestAnimationFrame: function() {
			var me = this;
			if (me.request === null) {
				// Skip animation frame requests until the active one is executed.
				// This can happen when processing mouse events, e.g. 'mousemove'
				// and 'mouseout' events will trigger multiple renders.
				me.request = helpers$1.requestAnimFrame.call(window, function() {
					me.request = null;
					me.startDigest();
				});
			}
		},
	
		/**
		 * @private
		 */
		startDigest: function() {
			var me = this;
	
			me.advance();
	
			// Do we have more stuff to animate?
			if (me.animations.length > 0) {
				me.requestAnimationFrame();
			}
		},
	
		/**
		 * @private
		 */
		advance: function() {
			var animations = this.animations;
			var animation, chart, numSteps, nextStep;
			var i = 0;
	
			// 1 animation per chart, so we are looping charts here
			while (i < animations.length) {
				animation = animations[i];
				chart = animation.chart;
				numSteps = animation.numSteps;
	
				// Make sure that currentStep starts at 1
				// https://github.com/chartjs/Chart.js/issues/6104
				nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
				animation.currentStep = Math.min(nextStep, numSteps);
	
				helpers$1.callback(animation.render, [chart, animation], chart);
				helpers$1.callback(animation.onAnimationProgress, [animation], chart);
	
				if (animation.currentStep >= numSteps) {
					helpers$1.callback(animation.onAnimationComplete, [animation], chart);
					chart.animating = false;
					animations.splice(i, 1);
				} else {
					++i;
				}
			}
		}
	};
	
	var resolve = helpers$1.options.resolve;
	
	var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
	
	/**
	 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
	 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
	 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
	 */
	function listenArrayEvents(array, listener) {
		if (array._chartjs) {
			array._chartjs.listeners.push(listener);
			return;
		}
	
		Object.defineProperty(array, '_chartjs', {
			configurable: true,
			enumerable: false,
			value: {
				listeners: [listener]
			}
		});
	
		arrayEvents.forEach(function(key) {
			var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
			var base = array[key];
	
			Object.defineProperty(array, key, {
				configurable: true,
				enumerable: false,
				value: function() {
					var args = Array.prototype.slice.call(arguments);
					var res = base.apply(this, args);
	
					helpers$1.each(array._chartjs.listeners, function(object) {
						if (typeof object[method] === 'function') {
							object[method].apply(object, args);
						}
					});
	
					return res;
				}
			});
		});
	}
	
	/**
	 * Removes the given array event listener and cleanup extra attached properties (such as
	 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
	 */
	function unlistenArrayEvents(array, listener) {
		var stub = array._chartjs;
		if (!stub) {
			return;
		}
	
		var listeners = stub.listeners;
		var index = listeners.indexOf(listener);
		if (index !== -1) {
			listeners.splice(index, 1);
		}
	
		if (listeners.length > 0) {
			return;
		}
	
		arrayEvents.forEach(function(key) {
			delete array[key];
		});
	
		delete array._chartjs;
	}
	
	// Base class for all dataset controllers (line, bar, etc)
	var DatasetController = function(chart, datasetIndex) {
		this.initialize(chart, datasetIndex);
	};
	
	helpers$1.extend(DatasetController.prototype, {
	
		/**
		 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
		 * @type {Chart.core.element}
		 */
		datasetElementType: null,
	
		/**
		 * Element type used to generate a meta data (e.g. Chart.element.Point).
		 * @type {Chart.core.element}
		 */
		dataElementType: null,
	
		/**
		 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
		 * A derived controller may override this to resolve controller-specific options.
		 * The keys defined here are for backward compatibility for legend styles.
		 * @private
		 */
		_datasetElementOptions: [
			'backgroundColor',
			'borderCapStyle',
			'borderColor',
			'borderDash',
			'borderDashOffset',
			'borderJoinStyle',
			'borderWidth'
		],
	
		/**
		 * Data element option keys to be resolved in _resolveDataElementOptions.
		 * A derived controller may override this to resolve controller-specific options.
		 * The keys defined here are for backward compatibility for legend styles.
		 * @private
		 */
		_dataElementOptions: [
			'backgroundColor',
			'borderColor',
			'borderWidth',
			'pointStyle'
		],
	
		initialize: function(chart, datasetIndex) {
			var me = this;
			me.chart = chart;
			me.index = datasetIndex;
			me.linkScales();
			me.addElements();
			me._type = me.getMeta().type;
		},
	
		updateIndex: function(datasetIndex) {
			this.index = datasetIndex;
		},
	
		linkScales: function() {
			var me = this;
			var meta = me.getMeta();
			var chart = me.chart;
			var scales = chart.scales;
			var dataset = me.getDataset();
			var scalesOpts = chart.options.scales;
	
			if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
				meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
			}
			if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
				meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
			}
		},
	
		getDataset: function() {
			return this.chart.data.datasets[this.index];
		},
	
		getMeta: function() {
			return this.chart.getDatasetMeta(this.index);
		},
	
		getScaleForId: function(scaleID) {
			return this.chart.scales[scaleID];
		},
	
		/**
		 * @private
		 */
		_getValueScaleId: function() {
			return this.getMeta().yAxisID;
		},
	
		/**
		 * @private
		 */
		_getIndexScaleId: function() {
			return this.getMeta().xAxisID;
		},
	
		/**
		 * @private
		 */
		_getValueScale: function() {
			return this.getScaleForId(this._getValueScaleId());
		},
	
		/**
		 * @private
		 */
		_getIndexScale: function() {
			return this.getScaleForId(this._getIndexScaleId());
		},
	
		reset: function() {
			this._update(true);
		},
	
		/**
		 * @private
		 */
		destroy: function() {
			if (this._data) {
				unlistenArrayEvents(this._data, this);
			}
		},
	
		createMetaDataset: function() {
			var me = this;
			var type = me.datasetElementType;
			return type && new type({
				_chart: me.chart,
				_datasetIndex: me.index
			});
		},
	
		createMetaData: function(index) {
			var me = this;
			var type = me.dataElementType;
			return type && new type({
				_chart: me.chart,
				_datasetIndex: me.index,
				_index: index
			});
		},
	
		addElements: function() {
			var me = this;
			var meta = me.getMeta();
			var data = me.getDataset().data || [];
			var metaData = meta.data;
			var i, ilen;
	
			for (i = 0, ilen = data.length; i < ilen; ++i) {
				metaData[i] = metaData[i] || me.createMetaData(i);
			}
	
			meta.dataset = meta.dataset || me.createMetaDataset();
		},
	
		addElementAndReset: function(index) {
			var element = this.createMetaData(index);
			this.getMeta().data.splice(index, 0, element);
			this.updateElement(element, index, true);
		},
	
		buildOrUpdateElements: function() {
			var me = this;
			var dataset = me.getDataset();
			var data = dataset.data || (dataset.data = []);
	
			// In order to correctly handle data addition/deletion animation (an thus simulate
			// real-time charts), we need to monitor these data modifications and synchronize
			// the internal meta data accordingly.
			if (me._data !== data) {
				if (me._data) {
					// This case happens when the user replaced the data array instance.
					unlistenArrayEvents(me._data, me);
				}
	
				if (data && Object.isExtensible(data)) {
					listenArrayEvents(data, me);
				}
				me._data = data;
			}
	
			// Re-sync meta data in case the user replaced the data array or if we missed
			// any updates and so make sure that we handle number of datapoints changing.
			me.resyncElements();
		},
	
		/**
		 * Returns the merged user-supplied and default dataset-level options
		 * @private
		 */
		_configure: function() {
			var me = this;
			me._config = helpers$1.merge({}, [
				me.chart.options.datasets[me._type],
				me.getDataset(),
			], {
				merger: function(key, target, source) {
					if (key !== '_meta' && key !== 'data') {
						helpers$1._merger(key, target, source);
					}
				}
			});
		},
	
		_update: function(reset) {
			var me = this;
			me._configure();
			me._cachedDataOpts = null;
			me.update(reset);
		},
	
		update: helpers$1.noop,
	
		transition: function(easingValue) {
			var meta = this.getMeta();
			var elements = meta.data || [];
			var ilen = elements.length;
			var i = 0;
	
			for (; i < ilen; ++i) {
				elements[i].transition(easingValue);
			}
	
			if (meta.dataset) {
				meta.dataset.transition(easingValue);
			}
		},
	
		draw: function() {
			var meta = this.getMeta();
			var elements = meta.data || [];
			var ilen = elements.length;
			var i = 0;
	
			if (meta.dataset) {
				meta.dataset.draw();
			}
	
			for (; i < ilen; ++i) {
				elements[i].draw();
			}
		},
	
		/**
		 * Returns a set of predefined style properties that should be used to represent the dataset
		 * or the data if the index is specified
		 * @param {number} index - data index
		 * @return {IStyleInterface} style object
		 */
		getStyle: function(index) {
			var me = this;
			var meta = me.getMeta();
			var dataset = meta.dataset;
			var style;
	
			me._configure();
			if (dataset && index === undefined) {
				style = me._resolveDatasetElementOptions(dataset || {});
			} else {
				index = index || 0;
				style = me._resolveDataElementOptions(meta.data[index] || {}, index);
			}
	
			if (style.fill === false || style.fill === null) {
				style.backgroundColor = style.borderColor;
			}
	
			return style;
		},
	
		/**
		 * @private
		 */
		_resolveDatasetElementOptions: function(element, hover) {
			var me = this;
			var chart = me.chart;
			var datasetOpts = me._config;
			var custom = element.custom || {};
			var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
			var elementOptions = me._datasetElementOptions;
			var values = {};
			var i, ilen, key, readKey;
	
			// Scriptable options
			var context = {
				chart: chart,
				dataset: me.getDataset(),
				datasetIndex: me.index,
				hover: hover
			};
	
			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
				key = elementOptions[i];
				readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
				values[key] = resolve([
					custom[readKey],
					datasetOpts[readKey],
					options[readKey]
				], context);
			}
	
			return values;
		},
	
		/**
		 * @private
		 */
		_resolveDataElementOptions: function(element, index) {
			var me = this;
			var custom = element && element.custom;
			var cached = me._cachedDataOpts;
			if (cached && !custom) {
				return cached;
			}
			var chart = me.chart;
			var datasetOpts = me._config;
			var options = chart.options.elements[me.dataElementType.prototype._type] || {};
			var elementOptions = me._dataElementOptions;
			var values = {};
	
			// Scriptable options
			var context = {
				chart: chart,
				dataIndex: index,
				dataset: me.getDataset(),
				datasetIndex: me.index
			};
	
			// `resolve` sets cacheable to `false` if any option is indexed or scripted
			var info = {cacheable: !custom};
	
			var keys, i, ilen, key;
	
			custom = custom || {};
	
			if (helpers$1.isArray(elementOptions)) {
				for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
					key = elementOptions[i];
					values[key] = resolve([
						custom[key],
						datasetOpts[key],
						options[key]
					], context, index, info);
				}
			} else {
				keys = Object.keys(elementOptions);
				for (i = 0, ilen = keys.length; i < ilen; ++i) {
					key = keys[i];
					values[key] = resolve([
						custom[key],
						datasetOpts[elementOptions[key]],
						datasetOpts[key],
						options[key]
					], context, index, info);
				}
			}
	
			if (info.cacheable) {
				me._cachedDataOpts = Object.freeze(values);
			}
	
			return values;
		},
	
		removeHoverStyle: function(element) {
			helpers$1.merge(element._model, element.$previousStyle || {});
			delete element.$previousStyle;
		},
	
		setHoverStyle: function(element) {
			var dataset = this.chart.data.datasets[element._datasetIndex];
			var index = element._index;
			var custom = element.custom || {};
			var model = element._model;
			var getHoverColor = helpers$1.getHoverColor;
	
			element.$previousStyle = {
				backgroundColor: model.backgroundColor,
				borderColor: model.borderColor,
				borderWidth: model.borderWidth
			};
	
			model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
			model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
			model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
		},
	
		/**
		 * @private
		 */
		_removeDatasetHoverStyle: function() {
			var element = this.getMeta().dataset;
	
			if (element) {
				this.removeHoverStyle(element);
			}
		},
	
		/**
		 * @private
		 */
		_setDatasetHoverStyle: function() {
			var element = this.getMeta().dataset;
			var prev = {};
			var i, ilen, key, keys, hoverOptions, model;
	
			if (!element) {
				return;
			}
	
			model = element._model;
			hoverOptions = this._resolveDatasetElementOptions(element, true);
	
			keys = Object.keys(hoverOptions);
			for (i = 0, ilen = keys.length; i < ilen; ++i) {
				key = keys[i];
				prev[key] = model[key];
				model[key] = hoverOptions[key];
			}
	
			element.$previousStyle = prev;
		},
	
		/**
		 * @private
		 */
		resyncElements: function() {
			var me = this;
			var meta = me.getMeta();
			var data = me.getDataset().data;
			var numMeta = meta.data.length;
			var numData = data.length;
	
			if (numData < numMeta) {
				meta.data.splice(numData, numMeta - numData);
			} else if (numData > numMeta) {
				me.insertElements(numMeta, numData - numMeta);
			}
		},
	
		/**
		 * @private
		 */
		insertElements: function(start, count) {
			for (var i = 0; i < count; ++i) {
				this.addElementAndReset(start + i);
			}
		},
	
		/**
		 * @private
		 */
		onDataPush: function() {
			var count = arguments.length;
			this.insertElements(this.getDataset().data.length - count, count);
		},
	
		/**
		 * @private
		 */
		onDataPop: function() {
			this.getMeta().data.pop();
		},
	
		/**
		 * @private
		 */
		onDataShift: function() {
			this.getMeta().data.shift();
		},
	
		/**
		 * @private
		 */
		onDataSplice: function(start, count) {
			this.getMeta().data.splice(start, count);
			this.insertElements(start, arguments.length - 2);
		},
	
		/**
		 * @private
		 */
		onDataUnshift: function() {
			this.insertElements(0, arguments.length);
		}
	});
	
	DatasetController.extend = helpers$1.inherits;
	
	var core_datasetController = DatasetController;
	
	var TAU = Math.PI * 2;
	
	core_defaults._set('global', {
		elements: {
			arc: {
				backgroundColor: core_defaults.global.defaultColor,
				borderColor: '#fff',
				borderWidth: 2,
				borderAlign: 'center'
			}
		}
	});
	
	function clipArc(ctx, arc) {
		var startAngle = arc.startAngle;
		var endAngle = arc.endAngle;
		var pixelMargin = arc.pixelMargin;
		var angleMargin = pixelMargin / arc.outerRadius;
		var x = arc.x;
		var y = arc.y;
	
		// Draw an inner border by cliping the arc and drawing a double-width border
		// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
		ctx.beginPath();
		ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
		if (arc.innerRadius > pixelMargin) {
			angleMargin = pixelMargin / arc.innerRadius;
			ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
		} else {
			ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
		}
		ctx.closePath();
		ctx.clip();
	}
	
	function drawFullCircleBorders(ctx, vm, arc, inner) {
		var endAngle = arc.endAngle;
		var i;
	
		if (inner) {
			arc.endAngle = arc.startAngle + TAU;
			clipArc(ctx, arc);
			arc.endAngle = endAngle;
			if (arc.endAngle === arc.startAngle && arc.fullCircles) {
				arc.endAngle += TAU;
				arc.fullCircles--;
			}
		}
	
		ctx.beginPath();
		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
		for (i = 0; i < arc.fullCircles; ++i) {
			ctx.stroke();
		}
	
		ctx.beginPath();
		ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
		for (i = 0; i < arc.fullCircles; ++i) {
			ctx.stroke();
		}
	}
	
	function drawBorder(ctx, vm, arc) {
		var inner = vm.borderAlign === 'inner';
	
		if (inner) {
			ctx.lineWidth = vm.borderWidth * 2;
			ctx.lineJoin = 'round';
		} else {
			ctx.lineWidth = vm.borderWidth;
			ctx.lineJoin = 'bevel';
		}
	
		if (arc.fullCircles) {
			drawFullCircleBorders(ctx, vm, arc, inner);
		}
	
		if (inner) {
			clipArc(ctx, arc);
		}
	
		ctx.beginPath();
		ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
		ctx.closePath();
		ctx.stroke();
	}
	
	var element_arc = core_element.extend({
		_type: 'arc',
	
		inLabelRange: function(mouseX) {
			var vm = this._view;
	
			if (vm) {
				return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
			}
			return false;
		},
	
		inRange: function(chartX, chartY) {
			var vm = this._view;
	
			if (vm) {
				var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
				var angle = pointRelativePosition.angle;
				var distance = pointRelativePosition.distance;
	
				// Sanitise angle range
				var startAngle = vm.startAngle;
				var endAngle = vm.endAngle;
				while (endAngle < startAngle) {
					endAngle += TAU;
				}
				while (angle > endAngle) {
					angle -= TAU;
				}
				while (angle < startAngle) {
					angle += TAU;
				}
	
				// Check if within the range of the open/close angle
				var betweenAngles = (angle >= startAngle && angle <= endAngle);
				var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);
	
				return (betweenAngles && withinRadius);
			}
			return false;
		},
	
		getCenterPoint: function() {
			var vm = this._view;
			var halfAngle = (vm.startAngle + vm.endAngle) / 2;
			var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
			return {
				x: vm.x + Math.cos(halfAngle) * halfRadius,
				y: vm.y + Math.sin(halfAngle) * halfRadius
			};
		},
	
		getArea: function() {
			var vm = this._view;
			return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
		},
	
		tooltipPosition: function() {
			var vm = this._view;
			var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
			var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
	
			return {
				x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
				y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
			};
		},
	
		draw: function() {
			var ctx = this._chart.ctx;
			var vm = this._view;
			var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
			var arc = {
				x: vm.x,
				y: vm.y,
				innerRadius: vm.innerRadius,
				outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
				pixelMargin: pixelMargin,
				startAngle: vm.startAngle,
				endAngle: vm.endAngle,
				fullCircles: Math.floor(vm.circumference / TAU)
			};
			var i;
	
			ctx.save();
	
			ctx.fillStyle = vm.backgroundColor;
			ctx.strokeStyle = vm.borderColor;
	
			if (arc.fullCircles) {
				arc.endAngle = arc.startAngle + TAU;
				ctx.beginPath();
				ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
				ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
				ctx.closePath();
				for (i = 0; i < arc.fullCircles; ++i) {
					ctx.fill();
				}
				arc.endAngle = arc.startAngle + vm.circumference % TAU;
			}
	
			ctx.beginPath();
			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
			ctx.closePath();
			ctx.fill();
	
			if (vm.borderWidth) {
				drawBorder(ctx, vm, arc);
			}
	
			ctx.restore();
		}
	});
	
	var valueOrDefault$1 = helpers$1.valueOrDefault;
	
	var defaultColor = core_defaults.global.defaultColor;
	
	core_defaults._set('global', {
		elements: {
			line: {
				tension: 0.4,
				backgroundColor: defaultColor,
				borderWidth: 3,
				borderColor: defaultColor,
				borderCapStyle: 'butt',
				borderDash: [],
				borderDashOffset: 0.0,
				borderJoinStyle: 'miter',
				capBezierPoints: true,
				fill: true, // do we fill in the area between the line and its base axis
			}
		}
	});
	
	var element_line = core_element.extend({
		_type: 'line',
	
		draw: function() {
			var me = this;
			var vm = me._view;
			var ctx = me._chart.ctx;
			var spanGaps = vm.spanGaps;
			var points = me._children.slice(); // clone array
			var globalDefaults = core_defaults.global;
			var globalOptionLineElements = globalDefaults.elements.line;
			var lastDrawnIndex = -1;
			var closePath = me._loop;
			var index, previous, currentVM;
	
			if (!points.length) {
				return;
			}
	
			if (me._loop) {
				for (index = 0; index < points.length; ++index) {
					previous = helpers$1.previousItem(points, index);
					// If the line has an open path, shift the point array
					if (!points[index]._view.skip && previous._view.skip) {
						points = points.slice(index).concat(points.slice(0, index));
						closePath = spanGaps;
						break;
					}
				}
				// If the line has a close path, add the first point again
				if (closePath) {
					points.push(points[0]);
				}
			}
	
			ctx.save();
	
			// Stroke Line Options
			ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
	
			// IE 9 and 10 do not support line dash
			if (ctx.setLineDash) {
				ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
			}
	
			ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
			ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
			ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
			ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
	
			// Stroke Line
			ctx.beginPath();
	
			// First point moves to it's starting position no matter what
			currentVM = points[0]._view;
			if (!currentVM.skip) {
				ctx.moveTo(currentVM.x, currentVM.y);
				lastDrawnIndex = 0;
			}
	
			for (index = 1; index < points.length; ++index) {
				currentVM = points[index]._view;
				previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];
	
				if (!currentVM.skip) {
					if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
						// There was a gap and this is the first point after the gap
						ctx.moveTo(currentVM.x, currentVM.y);
					} else {
						// Line to next point
						helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
					}
					lastDrawnIndex = index;
				}
			}
	
			if (closePath) {
				ctx.closePath();
			}
	
			ctx.stroke();
			ctx.restore();
		}
	});
	
	var valueOrDefault$2 = helpers$1.valueOrDefault;
	
	var defaultColor$1 = core_defaults.global.defaultColor;
	
	core_defaults._set('global', {
		elements: {
			point: {
				radius: 3,
				pointStyle: 'circle',
				backgroundColor: defaultColor$1,
				borderColor: defaultColor$1,
				borderWidth: 1,
				// Hover
				hitRadius: 1,
				hoverRadius: 4,
				hoverBorderWidth: 1
			}
		}
	});
	
	function xRange(mouseX) {
		var vm = this._view;
		return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
	}
	
	function yRange(mouseY) {
		var vm = this._view;
		return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
	}
	
	var element_point = core_element.extend({
		_type: 'point',
	
		inRange: function(mouseX, mouseY) {
			var vm = this._view;
			return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
		},
	
		inLabelRange: xRange,
		inXRange: xRange,
		inYRange: yRange,
	
		getCenterPoint: function() {
			var vm = this._view;
			return {
				x: vm.x,
				y: vm.y
			};
		},
	
		getArea: function() {
			return Math.PI * Math.pow(this._view.radius, 2);
		},
	
		tooltipPosition: function() {
			var vm = this._view;
			return {
				x: vm.x,
				y: vm.y,
				padding: vm.radius + vm.borderWidth
			};
		},
	
		draw: function(chartArea) {
			var vm = this._view;
			var ctx = this._chart.ctx;
			var pointStyle = vm.pointStyle;
			var rotation = vm.rotation;
			var radius = vm.radius;
			var x = vm.x;
			var y = vm.y;
			var globalDefaults = core_defaults.global;
			var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow
	
			if (vm.skip) {
				return;
			}
	
			// Clipping for Points.
			if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
				ctx.strokeStyle = vm.borderColor || defaultColor;
				ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
				ctx.fillStyle = vm.backgroundColor || defaultColor;
				helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
			}
		}
	});
	
	var defaultColor$2 = core_defaults.global.defaultColor;
	
	core_defaults._set('global', {
		elements: {
			rectangle: {
				backgroundColor: defaultColor$2,
				borderColor: defaultColor$2,
				borderSkipped: 'bottom',
				borderWidth: 0
			}
		}
	});
	
	function isVertical(vm) {
		return vm && vm.width !== undefined;
	}
	
	/**
	 * Helper function to get the bounds of the bar regardless of the orientation
	 * @param bar {Chart.Element.Rectangle} the bar
	 * @return {Bounds} bounds of the bar
	 * @private
	 */
	function getBarBounds(vm) {
		var x1, x2, y1, y2, half;
	
		if (isVertical(vm)) {
			half = vm.width / 2;
			x1 = vm.x - half;
			x2 = vm.x + half;
			y1 = Math.min(vm.y, vm.base);
			y2 = Math.max(vm.y, vm.base);
		} else {
			half = vm.height / 2;
			x1 = Math.min(vm.x, vm.base);
			x2 = Math.max(vm.x, vm.base);
			y1 = vm.y - half;
			y2 = vm.y + half;
		}
	
		return {
			left: x1,
			top: y1,
			right: x2,
			bottom: y2
		};
	}
	
	function swap(orig, v1, v2) {
		return orig === v1 ? v2 : orig === v2 ? v1 : orig;
	}
	
	function parseBorderSkipped(vm) {
		var edge = vm.borderSkipped;
		var res = {};
	
		if (!edge) {
			return res;
		}
	
		if (vm.horizontal) {
			if (vm.base > vm.x) {
				edge = swap(edge, 'left', 'right');
			}
		} else if (vm.base < vm.y) {
			edge = swap(edge, 'bottom', 'top');
		}
	
		res[edge] = true;
		return res;
	}
	
	function parseBorderWidth(vm, maxW, maxH) {
		var value = vm.borderWidth;
		var skip = parseBorderSkipped(vm);
		var t, r, b, l;
	
		if (helpers$1.isObject(value)) {
			t = +value.top || 0;
			r = +value.right || 0;
			b = +value.bottom || 0;
			l = +value.left || 0;
		} else {
			t = r = b = l = +value || 0;
		}
	
		return {
			t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
			r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
			b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
			l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
		};
	}
	
	function boundingRects(vm) {
		var bounds = getBarBounds(vm);
		var width = bounds.right - bounds.left;
		var height = bounds.bottom - bounds.top;
		var border = parseBorderWidth(vm, width / 2, height / 2);
	
		return {
			outer: {
				x: bounds.left,
				y: bounds.top,
				w: width,
				h: height
			},
			inner: {
				x: bounds.left + border.l,
				y: bounds.top + border.t,
				w: width - border.l - border.r,
				h: height - border.t - border.b
			}
		};
	}
	
	function inRange(vm, x, y) {
		var skipX = x === null;
		var skipY = y === null;
		var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);
	
		return bounds
			&& (skipX || x >= bounds.left && x <= bounds.right)
			&& (skipY || y >= bounds.top && y <= bounds.bottom);
	}
	
	var element_rectangle = core_element.extend({
		_type: 'rectangle',
	
		draw: function() {
			var ctx = this._chart.ctx;
			var vm = this._view;
			var rects = boundingRects(vm);
			var outer = rects.outer;
			var inner = rects.inner;
	
			ctx.fillStyle = vm.backgroundColor;
			ctx.fillRect(outer.x, outer.y, outer.w, outer.h);
	
			if (outer.w === inner.w && outer.h === inner.h) {
				return;
			}
	
			ctx.save();
			ctx.beginPath();
			ctx.rect(outer.x, outer.y, outer.w, outer.h);
			ctx.clip();
			ctx.fillStyle = vm.borderColor;
			ctx.rect(inner.x, inner.y, inner.w, inner.h);
			ctx.fill('evenodd');
			ctx.restore();
		},
	
		height: function() {
			var vm = this._view;
			return vm.base - vm.y;
		},
	
		inRange: function(mouseX, mouseY) {
			return inRange(this._view, mouseX, mouseY);
		},
	
		inLabelRange: function(mouseX, mouseY) {
			var vm = this._view;
			return isVertical(vm)
				? inRange(vm, mouseX, null)
				: inRange(vm, null, mouseY);
		},
	
		inXRange: function(mouseX) {
			return inRange(this._view, mouseX, null);
		},
	
		inYRange: function(mouseY) {
			return inRange(this._view, null, mouseY);
		},
	
		getCenterPoint: function() {
			var vm = this._view;
			var x, y;
			if (isVertical(vm)) {
				x = vm.x;
				y = (vm.y + vm.base) / 2;
			} else {
				x = (vm.x + vm.base) / 2;
				y = vm.y;
			}
	
			return {x: x, y: y};
		},
	
		getArea: function() {
			var vm = this._view;
	
			return isVertical(vm)
				? vm.width * Math.abs(vm.y - vm.base)
				: vm.height * Math.abs(vm.x - vm.base);
		},
	
		tooltipPosition: function() {
			var vm = this._view;
			return {
				x: vm.x,
				y: vm.y
			};
		}
	});
	
	var elements = {};
	var Arc = element_arc;
	var Line = element_line;
	var Point = element_point;
	var Rectangle = element_rectangle;
	elements.Arc = Arc;
	elements.Line = Line;
	elements.Point = Point;
	elements.Rectangle = Rectangle;
	
	var deprecated = helpers$1._deprecated;
	var valueOrDefault$3 = helpers$1.valueOrDefault;
	
	core_defaults._set('bar', {
		hover: {
			mode: 'label'
		},
	
		scales: {
			xAxes: [{
				type: 'category',
				offset: true,
				gridLines: {
					offsetGridLines: true
				}
			}],
	
			yAxes: [{
				type: 'linear'
			}]
		}
	});
	
	core_defaults._set('global', {
		datasets: {
			bar: {
				categoryPercentage: 0.8,
				barPercentage: 0.9
			}
		}
	});
	
	/**
	 * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
	 * @private
	 */
	function computeMinSampleSize(scale, pixels) {
		var min = scale._length;
		var prev, curr, i, ilen;
	
		for (i = 1, ilen = pixels.length; i < ilen; ++i) {
			min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
		}
	
		for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
			curr = scale.getPixelForTick(i);
			min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
			prev = curr;
		}
	
		return min;
	}
	
	/**
	 * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
	 * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
	 * mode currently always generates bars equally sized (until we introduce scriptable options?).
	 * @private
	 */
	function computeFitCategoryTraits(index, ruler, options) {
		var thickness = options.barThickness;
		var count = ruler.stackCount;
		var curr = ruler.pixels[index];
		var min = helpers$1.isNullOrUndef(thickness)
			? computeMinSampleSize(ruler.scale, ruler.pixels)
			: -1;
		var size, ratio;
	
		if (helpers$1.isNullOrUndef(thickness)) {
			size = min * options.categoryPercentage;
			ratio = options.barPercentage;
		} else {
			// When bar thickness is enforced, category and bar percentages are ignored.
			// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
			// and deprecate barPercentage since this value is ignored when thickness is absolute.
			size = thickness * count;
			ratio = 1;
		}
	
		return {
			chunk: size / count,
			ratio: ratio,
			start: curr - (size / 2)
		};
	}
	
	/**
	 * Computes an "optimal" category that globally arranges bars side by side (no gap when
	 * percentage options are 1), based on the previous and following categories. This mode
	 * generates bars with different widths when data are not evenly spaced.
	 * @private
	 */
	function computeFlexCategoryTraits(index, ruler, options) {
		var pixels = ruler.pixels;
		var curr = pixels[index];
		var prev = index > 0 ? pixels[index - 1] : null;
		var next = index < pixels.length - 1 ? pixels[index + 1] : null;
		var percent = options.categoryPercentage;
		var start, size;
	
		if (prev === null) {
			// first data: its size is double based on the next point or,
			// if it's also the last data, we use the scale size.
			prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
		}
	
		if (next === null) {
			// last data: its size is also double based on the previous point.
			next = curr + curr - prev;
		}
	
		start = curr - (curr - Math.min(prev, next)) / 2 * percent;
		size = Math.abs(next - prev) / 2 * percent;
	
		return {
			chunk: size / ruler.stackCount,
			ratio: options.barPercentage,
			start: start
		};
	}
	
	var controller_bar = core_datasetController.extend({
	
		dataElementType: elements.Rectangle,
	
		/**
		 * @private
		 */
		_dataElementOptions: [
			'backgroundColor',
			'borderColor',
			'borderSkipped',
			'borderWidth',
			'barPercentage',
			'barThickness',
			'categoryPercentage',
			'maxBarThickness',
			'minBarLength'
		],
	
		initialize: function() {
			var me = this;
			var meta, scaleOpts;
	
			core_datasetController.prototype.initialize.apply(me, arguments);
	
			meta = me.getMeta();
			meta.stack = me.getDataset().stack;
			meta.bar = true;
	
			scaleOpts = me._getIndexScale().options;
			deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
			deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
			deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
			deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
			deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
		},
	
		update: function(reset) {
			var me = this;
			var rects = me.getMeta().data;
			var i, ilen;
	
			me._ruler = me.getRuler();
	
			for (i = 0, ilen = rects.length; i < ilen; ++i) {
				me.updateElement(rects[i], i, reset);
			}
		},
	
		updateElement: function(rectangle, index, reset) {
			var me = this;
			var meta = me.getMeta();
			var dataset = me.getDataset();
			var options = me._resolveDataElementOptions(rectangle, index);
	
			rectangle._xScale = me.getScaleForId(meta.xAxisID);
			rectangle._yScale = me.getScaleForId(meta.yAxisID);
			rectangle._datasetIndex = me.index;
			rectangle._index = index;
			rectangle._model = {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderSkipped: options.borderSkipped,
				borderWidth: options.borderWidth,
				datasetLabel: dataset.label,
				label: me.chart.data.labels[index]
			};
	
			if (helpers$1.isArray(dataset.data[index])) {
				rectangle._model.borderSkipped = null;
			}
	
			me._updateElementGeometry(rectangle, index, reset, options);
	
			rectangle.pivot();
		},
	
		/**
		 * @private
		 */
		_updateElementGeometry: function(rectangle, index, reset, options) {
			var me = this;
			var model = rectangle._model;
			var vscale = me._getValueScale();
			var base = vscale.getBasePixel();
			var horizontal = vscale.isHorizontal();
			var ruler = me._ruler || me.getRuler();
			var vpixels = me.calculateBarValuePixels(me.index, index, options);
			var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);
	
			model.horizontal = horizontal;
			model.base = reset ? base : vpixels.base;
			model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
			model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
			model.height = horizontal ? ipixels.size : undefined;
			model.width = horizontal ? undefined : ipixels.size;
		},
	
		/**
		 * Returns the stacks based on groups and bar visibility.
		 * @param {number} [last] - The dataset index
		 * @returns {string[]} The list of stack IDs
		 * @private
		 */
		_getStacks: function(last) {
			var me = this;
			var scale = me._getIndexScale();
			var metasets = scale._getMatchingVisibleMetas(me._type);
			var stacked = scale.options.stacked;
			var ilen = metasets.length;
			var stacks = [];
			var i, meta;
	
			for (i = 0; i < ilen; ++i) {
				meta = metasets[i];
				// stacked   | meta.stack
				//           | found | not found | undefined
				// false     |   x   |     x     |     x
				// true      |       |     x     |
				// undefined |       |     x     |     x
				if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
					(stacked === undefined && meta.stack === undefined)) {
					stacks.push(meta.stack);
				}
				if (meta.index === last) {
					break;
				}
			}
	
			return stacks;
		},
	
		/**
		 * Returns the effective number of stacks based on groups and bar visibility.
		 * @private
		 */
		getStackCount: function() {
			return this._getStacks().length;
		},
	
		/**
		 * Returns the stack index for the given dataset based on groups and bar visibility.
		 * @param {number} [datasetIndex] - The dataset index
		 * @param {string} [name] - The stack name to find
		 * @returns {number} The stack index
		 * @private
		 */
		getStackIndex: function(datasetIndex, name) {
			var stacks = this._getStacks(datasetIndex);
			var index = (name !== undefined)
				? stacks.indexOf(name)
				: -1; // indexOf returns -1 if element is not present
	
			return (index === -1)
				? stacks.length - 1
				: index;
		},
	
		/**
		 * @private
		 */
		getRuler: function() {
			var me = this;
			var scale = me._getIndexScale();
			var pixels = [];
			var i, ilen;
	
			for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
				pixels.push(scale.getPixelForValue(null, i, me.index));
			}
	
			return {
				pixels: pixels,
				start: scale._startPixel,
				end: scale._endPixel,
				stackCount: me.getStackCount(),
				scale: scale
			};
		},
	
		/**
		 * Note: pixel values are not clamped to the scale area.
		 * @private
		 */
		calculateBarValuePixels: function(datasetIndex, index, options) {
			var me = this;
			var chart = me.chart;
			var scale = me._getValueScale();
			var isHorizontal = scale.isHorizontal();
			var datasets = chart.data.datasets;
			var metasets = scale._getMatchingVisibleMetas(me._type);
			var value = scale._parseValue(datasets[datasetIndex].data[index]);
			var minBarLength = options.minBarLength;
			var stacked = scale.options.stacked;
			var stack = me.getMeta().stack;
			var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
			var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
			var ilen = metasets.length;
			var i, imeta, ivalue, base, head, size, stackLength;
	
			if (stacked || (stacked === undefined && stack !== undefined)) {
				for (i = 0; i < ilen; ++i) {
					imeta = metasets[i];
	
					if (imeta.index === datasetIndex) {
						break;
					}
	
					if (imeta.stack === stack) {
						stackLength = scale._parseValue(datasets[imeta.index].data[index]);
						ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;
	
						if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
							start += ivalue;
						}
					}
				}
			}
	
			base = scale.getPixelForValue(start);
			head = scale.getPixelForValue(start + length);
			size = head - base;
	
			if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
				size = minBarLength;
				if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
					head = base - minBarLength;
				} else {
					head = base + minBarLength;
				}
			}
	
			return {
				size: size,
				base: base,
				head: head,
				center: head + size / 2
			};
		},
	
		/**
		 * @private
		 */
		calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
			var me = this;
			var range = options.barThickness === 'flex'
				? computeFlexCategoryTraits(index, ruler, options)
				: computeFitCategoryTraits(index, ruler, options);
	
			var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
			var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
			var size = Math.min(
				valueOrDefault$3(options.maxBarThickness, Infinity),
				range.chunk * range.ratio);
	
			return {
				base: center - size / 2,
				head: center + size / 2,
				center: center,
				size: size
			};
		},
	
		draw: function() {
			var me = this;
			var chart = me.chart;
			var scale = me._getValueScale();
			var rects = me.getMeta().data;
			var dataset = me.getDataset();
			var ilen = rects.length;
			var i = 0;
	
			helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);
	
			for (; i < ilen; ++i) {
				var val = scale._parseValue(dataset.data[i]);
				if (!isNaN(val.min) && !isNaN(val.max)) {
					rects[i].draw();
				}
			}
	
			helpers$1.canvas.unclipArea(chart.ctx);
		},
	
		/**
		 * @private
		 */
		_resolveDataElementOptions: function() {
			var me = this;
			var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
			var indexOpts = me._getIndexScale().options;
			var valueOpts = me._getValueScale().options;
	
			values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
			values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
			values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
			values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
			values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);
	
			return values;
		}
	
	});
	
	var valueOrDefault$4 = helpers$1.valueOrDefault;
	var resolve$1 = helpers$1.options.resolve;
	
	core_defaults._set('bubble', {
		hover: {
			mode: 'single'
		},
	
		scales: {
			xAxes: [{
				type: 'linear', // bubble should probably use a linear scale by default
				position: 'bottom',
				id: 'x-axis-0' // need an ID so datasets can reference the scale
			}],
			yAxes: [{
				type: 'linear',
				position: 'left',
				id: 'y-axis-0'
			}]
		},
	
		tooltips: {
			callbacks: {
				title: function() {
					// Title doesn't make sense for scatter since we format the data as a point
					return '';
				},
				label: function(item, data) {
					var datasetLabel = data.datasets[item.datasetIndex].label || '';
					var dataPoint = data.datasets[item.datasetIndex].data[item.index];
					return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
				}
			}
		}
	});
	
	var controller_bubble = core_datasetController.extend({
		/**
		 * @protected
		 */
		dataElementType: elements.Point,
	
		/**
		 * @private
		 */
		_dataElementOptions: [
			'backgroundColor',
			'borderColor',
			'borderWidth',
			'hoverBackgroundColor',
			'hoverBorderColor',
			'hoverBorderWidth',
			'hoverRadius',
			'hitRadius',
			'pointStyle',
			'rotation'
		],
	
		/**
		 * @protected
		 */
		update: function(reset) {
			var me = this;
			var meta = me.getMeta();
			var points = meta.data;
	
			// Update Points
			helpers$1.each(points, function(point, index) {
				me.updateElement(point, index, reset);
			});
		},
	
		/**
		 * @protected
		 */
		updateElement: function(point, index, reset) {
			var me = this;
			var meta = me.getMeta();
			var custom = point.custom || {};
			var xScale = me.getScaleForId(meta.xAxisID);
			var yScale = me.getScaleForId(meta.yAxisID);
			var options = me._resolveDataElementOptions(point, index);
			var data = me.getDataset().data[index];
			var dsIndex = me.index;
	
			var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
			var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
	
			point._xScale = xScale;
			point._yScale = yScale;
			point._options = options;
			point._datasetIndex = dsIndex;
			point._index = index;
			point._model = {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				hitRadius: options.hitRadius,
				pointStyle: options.pointStyle,
				rotation: options.rotation,
				radius: reset ? 0 : options.radius,
				skip: custom.skip || isNaN(x) || isNaN(y),
				x: x,
				y: y,
			};
	
			point.pivot();
		},
	
		/**
		 * @protected
		 */
		setHoverStyle: function(point) {
			var model = point._model;
			var options = point._options;
			var getHoverColor = helpers$1.getHoverColor;
	
			point.$previousStyle = {
				backgroundColor: model.backgroundColor,
				borderColor: model.borderColor,
				borderWidth: model.borderWidth,
				radius: model.radius
			};
	
			model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
			model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
			model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
			model.radius = options.radius + options.hoverRadius;
		},
	
		/**
		 * @private
		 */
		_resolveDataElementOptions: function(point, index) {
			var me = this;
			var chart = me.chart;
			var dataset = me.getDataset();
			var custom = point.custom || {};
			var data = dataset.data[index] || {};
			var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);
	
			// Scriptable options
			var context = {
				chart: chart,
				dataIndex: index,
				dataset: dataset,
				datasetIndex: me.index
			};
	
			// In case values were cached (and thus frozen), we need to clone the values
			if (me._cachedDataOpts === values) {
				values = helpers$1.extend({}, values);
			}
	
			// Custom radius resolution
			values.radius = resolve$1([
				custom.radius,
				data.r,
				me._config.radius,
				chart.options.elements.point.radius
			], context, index);
	
			return values;
		}
	});
	
	var valueOrDefault$5 = helpers$1.valueOrDefault;
	
	var PI$1 = Math.PI;
	var DOUBLE_PI$1 = PI$1 * 2;
	var HALF_PI$1 = PI$1 / 2;
	
	core_defaults._set('doughnut', {
		animation: {
			// Boolean - Whether we animate the rotation of the Doughnut
			animateRotate: true,
			// Boolean - Whether we animate scaling the Doughnut from the centre
			animateScale: false
		},
		hover: {
			mode: 'single'
		},
		legendCallback: function(chart) {
			var list = document.createElement('ul');
			var data = chart.data;
			var datasets = data.datasets;
			var labels = data.labels;
			var i, ilen, listItem, listItemSpan;
	
			list.setAttribute('class', chart.id + '-legend');
			if (datasets.length) {
				for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
					listItem = list.appendChild(document.createElement('li'));
					listItemSpan = listItem.appendChild(document.createElement('span'));
					listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
					if (labels[i]) {
						listItem.appendChild(document.createTextNode(labels[i]));
					}
				}
			}
	
			return list.outerHTML;
		},
		legend: {
			labels: {
				generateLabels: function(chart) {
					var data = chart.data;
					if (data.labels.length && data.datasets.length) {
						return data.labels.map(function(label, i) {
							var meta = chart.getDatasetMeta(0);
							var style = meta.controller.getStyle(i);
	
							return {
								text: label,
								fillStyle: style.backgroundColor,
								strokeStyle: style.borderColor,
								lineWidth: style.borderWidth,
								hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,
	
								// Extra data used for toggling the correct item
								index: i
							};
						});
					}
					return [];
				}
			},
	
			onClick: function(e, legendItem) {
				var index = legendItem.index;
				var chart = this.chart;
				var i, ilen, meta;
	
				for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
					meta = chart.getDatasetMeta(i);
					// toggle visibility of index if exists
					if (meta.data[index]) {
						meta.data[index].hidden = !meta.data[index].hidden;
					}
				}
	
				chart.update();
			}
		},
	
		// The percentage of the chart that we cut out of the middle.
		cutoutPercentage: 50,
	
		// The rotation of the chart, where the first data arc begins.
		rotation: -HALF_PI$1,
	
		// The total circumference of the chart.
		circumference: DOUBLE_PI$1,
	
		// Need to override these to give a nice default
		tooltips: {
			callbacks: {
				title: function() {
					return '';
				},
				label: function(tooltipItem, data) {
					var dataLabel = data.labels[tooltipItem.index];
					var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
	
					if (helpers$1.isArray(dataLabel)) {
						// show value on first line of multiline label
						// need to clone because we are changing the value
						dataLabel = dataLabel.slice();
						dataLabel[0] += value;
					} else {
						dataLabel += value;
					}
	
					return dataLabel;
				}
			}
		}
	});
	
	var controller_doughnut = core_datasetController.extend({
	
		dataElementType: elements.Arc,
	
		linkScales: helpers$1.noop,
	
		/**
		 * @private
		 */
		_dataElementOptions: [
			'backgroundColor',
			'borderColor',
			'borderWidth',
			'borderAlign',
			'hoverBackgroundColor',
			'hoverBorderColor',
			'hoverBorderWidth',
		],
	
		// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
		getRingIndex: function(datasetIndex) {
			var ringIndex = 0;
	
			for (var j = 0; j < datasetIndex; ++j) {
				if (this.chart.isDatasetVisible(j)) {
					++ringIndex;
				}
			}
	
			return ringIndex;
		},
	
		update: function(reset) {
			var me = this;
			var chart = me.chart;
			var chartArea = chart.chartArea;
			var opts = chart.options;
			var ratioX = 1;
			var ratioY = 1;
			var offsetX = 0;
			var offsetY = 0;
			var meta = me.getMeta();
			var arcs = meta.data;
			var cutout = opts.cutoutPercentage / 100 || 0;
			var circumference = opts.circumference;
			var chartWeight = me._getRingWeight(me.index);
			var maxWidth, maxHeight, i, ilen;
	
			// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
			if (circumference < DOUBLE_PI$1) {
				var startAngle = opts.rotation % DOUBLE_PI$1;
				startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
				var endAngle = startAngle + circumference;
				var startX = Math.cos(startAngle);
				var startY = Math.sin(startAngle);
				var endX = Math.cos(endAngle);
				var endY = Math.sin(endAngle);
				var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
				var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
				var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
				var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
				var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
				var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
				var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
				var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
				ratioX = (maxX - minX) / 2;
				ratioY = (maxY - minY) / 2;
				offsetX = -(maxX + minX) / 2;
				offsetY = -(maxY + minY) / 2;
			}
	
			for (i = 0, ilen = arcs.length; i < ilen; ++i) {
				arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
			}
	
			chart.borderWidth = me.getMaxBorderWidth();
			maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
			maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
			chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
			chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
			chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
			chart.offsetX = offsetX * chart.outerRadius;
			chart.offsetY = offsetY * chart.outerRadius;
	
			meta.total = me.calculateTotal();
	
			me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
			me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);
	
			for (i = 0, ilen = arcs.length; i < ilen; ++i) {
				me.updateElement(arcs[i], i, reset);
			}
		},
	
		updateElement: function(arc, index, reset) {
			var me = this;
			var chart = me.chart;
			var chartArea = chart.chartArea;
			var opts = chart.options;
			var animationOpts = opts.animation;
			var centerX = (chartArea.left + chartArea.right) / 2;
			var centerY = (chartArea.top + chartArea.bottom) / 2;
			var startAngle = opts.rotation; // non reset case handled later
			var endAngle = opts.rotation; // non reset case handled later
			var dataset = me.getDataset();
			var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
			var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
			var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
			var options = arc._options || {};
	
			helpers$1.extend(arc, {
				// Utility
				_datasetIndex: me.index,
				_index: index,
	
				// Desired view properties
				_model: {
					backgroundColor: options.backgroundColor,
					borderColor: options.borderColor,
					borderWidth: options.borderWidth,
					borderAlign: options.borderAlign,
					x: centerX + chart.offsetX,
					y: centerY + chart.offsetY,
					startAngle: startAngle,
					endAngle: endAngle,
					circumference: circumference,
					outerRadius: outerRadius,
					innerRadius: innerRadius,
					label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
				}
			});
	
			var model = arc._model;
	
			// Set correct angles if not resetting
			if (!reset || !animationOpts.animateRotate) {
				if (index === 0) {
					model.startAngle = opts.rotation;
				} else {
					model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
				}
	
				model.endAngle = model.startAngle + model.circumference;
			}
	
			arc.pivot();
		},
	
		calculateTotal: function() {
			var dataset = this.getDataset();
			var meta = this.getMeta();
			var total = 0;
			var value;
	
			helpers$1.each(meta.data, function(element, index) {
				value = dataset.data[index];
				if (!isNaN(value) && !element.hidden) {
					total += Math.abs(value);
				}
			});
	
			/* if (total === 0) {
				total = NaN;
			}*/
	
			return total;
		},
	
		calculateCircumference: function(value) {
			var total = this.getMeta().total;
			if (total > 0 && !isNaN(value)) {
				return DOUBLE_PI$1 * (Math.abs(value) / total);
			}
			return 0;
		},
	
		// gets the max border or hover width to properly scale pie charts
		getMaxBorderWidth: function(arcs) {
			var me = this;
			var max = 0;
			var chart = me.chart;
			var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;
	
			if (!arcs) {
				// Find the outmost visible dataset
				for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
					if (chart.isDatasetVisible(i)) {
						meta = chart.getDatasetMeta(i);
						arcs = meta.data;
						if (i !== me.index) {
							controller = meta.controller;
						}
						break;
					}
				}
			}
	
			if (!arcs) {
				return 0;
			}
	
			for (i = 0, ilen = arcs.length; i < ilen; ++i) {
				arc = arcs[i];
				if (controller) {
					controller._configure();
					options = controller._resolveDataElementOptions(arc, i);
				} else {
					options = arc._options;
				}
				if (options.borderAlign !== 'inner') {
					borderWidth = options.borderWidth;
					hoverWidth = options.hoverBorderWidth;
	
					max = borderWidth > max ? borderWidth : max;
					max = hoverWidth > max ? hoverWidth : max;
				}
			}
			return max;
		},
	
		/**
		 * @protected
		 */
		setHoverStyle: function(arc) {
			var model = arc._model;
			var options = arc._options;
			var getHoverColor = helpers$1.getHoverColor;
	
			arc.$previousStyle = {
				backgroundColor: model.backgroundColor,
				borderColor: model.borderColor,
				borderWidth: model.borderWidth,
			};
	
			model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
			model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
			model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
		},
	
		/**
		 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
		 * @private
		 */
		_getRingWeightOffset: function(datasetIndex) {
			var ringWeightOffset = 0;
	
			for (var i = 0; i < datasetIndex; ++i) {
				if (this.chart.isDatasetVisible(i)) {
					ringWeightOffset += this._getRingWeight(i);
				}
			}
	
			return ringWeightOffset;
		},
	
		/**
		 * @private
		 */
		_getRingWeight: function(dataSetIndex) {
			return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
		},
	
		/**
		 * Returns the sum of all visibile data set weights.  This value can be 0.
		 * @private
		 */
		_getVisibleDatasetWeightTotal: function() {
			return this._getRingWeightOffset(this.chart.data.datasets.length);
		}
	});
	
	core_defaults._set('horizontalBar', {
		hover: {
			mode: 'index',
			axis: 'y'
		},
	
		scales: {
			xAxes: [{
				type: 'linear',
				position: 'bottom'
			}],
	
			yAxes: [{
				type: 'category',
				position: 'left',
				offset: true,
				gridLines: {
					offsetGridLines: true
				}
			}]
		},
	
		elements: {
			rectangle: {
				borderSkipped: 'left'
			}
		},
	
		tooltips: {
			mode: 'index',
			axis: 'y'
		}
	});
	
	core_defaults._set('global', {
		datasets: {
			horizontalBar: {
				categoryPercentage: 0.8,
				barPercentage: 0.9
			}
		}
	});
	
	var controller_horizontalBar = controller_bar.extend({
		/**
		 * @private
		 */
		_getValueScaleId: function() {
			return this.getMeta().xAxisID;
		},
	
		/**
		 * @private
		 */
		_getIndexScaleId: function() {
			return this.getMeta().yAxisID;
		}
	});
	
	var valueOrDefault$6 = helpers$1.valueOrDefault;
	var resolve$2 = helpers$1.options.resolve;
	var isPointInArea = helpers$1.canvas._isPointInArea;
	
	core_defaults._set('line', {
		showLines: true,
		spanGaps: false,
	
		hover: {
			mode: 'label'
		},
	
		scales: {
			xAxes: [{
				type: 'category',
				id: 'x-axis-0'
			}],
			yAxes: [{
				type: 'linear',
				id: 'y-axis-0'
			}]
		}
	});
	
	function scaleClip(scale, halfBorderWidth) {
		var tickOpts = scale && scale.options.ticks || {};
		var reverse = tickOpts.reverse;
		var min = tickOpts.min === undefined ? halfBorderWidth : 0;
		var max = tickOpts.max === undefined ? halfBorderWidth : 0;
		return {
			start: reverse ? max : min,
			end: reverse ? min : max
		};
	}
	
	function defaultClip(xScale, yScale, borderWidth) {
		var halfBorderWidth = borderWidth / 2;
		var x = scaleClip(xScale, halfBorderWidth);
		var y = scaleClip(yScale, halfBorderWidth);
	
		return {
			top: y.end,
			right: x.end,
			bottom: y.start,
			left: x.start
		};
	}
	
	function toClip(value) {
		var t, r, b, l;
	
		if (helpers$1.isObject(value)) {
			t = value.top;
			r = value.right;
			b = value.bottom;
			l = value.left;
		} else {
			t = r = b = l = value;
		}
	
		return {
			top: t,
			right: r,
			bottom: b,
			left: l
		};
	}
	
	
	var controller_line = core_datasetController.extend({
	
		datasetElementType: elements.Line,
	
		dataElementType: elements.Point,
	
		/**
		 * @private
		 */
		_datasetElementOptions: [
			'backgroundColor',
			'borderCapStyle',
			'borderColor',
			'borderDash',
			'borderDashOffset',
			'borderJoinStyle',
			'borderWidth',
			'cubicInterpolationMode',
			'fill'
		],
	
		/**
		 * @private
		 */
		_dataElementOptions: {
			backgroundColor: 'pointBackgroundColor',
			borderColor: 'pointBorderColor',
			borderWidth: 'pointBorderWidth',
			hitRadius: 'pointHitRadius',
			hoverBackgroundColor: 'pointHoverBackgroundColor',
			hoverBorderColor: 'pointHoverBorderColor',
			hoverBorderWidth: 'pointHoverBorderWidth',
			hoverRadius: 'pointHoverRadius',
			pointStyle: 'pointStyle',
			radius: 'pointRadius',
			rotation: 'pointRotation'
		},
	
		update: function(reset) {
			var me = this;
			var meta = me.getMeta();
			var line = meta.dataset;
			var points = meta.data || [];
			var options = me.chart.options;
			var config = me._config;
			var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
			var i, ilen;
	
			me._xScale = me.getScaleForId(meta.xAxisID);
			me._yScale = me.getScaleForId(meta.yAxisID);
	
			// Update Line
			if (showLine) {
				// Compatibility: If the properties are defined with only the old name, use those values
				if (config.tension !== undefined && config.lineTension === undefined) {
					config.lineTension = config.tension;
				}
	
				// Utility
				line._scale = me._yScale;
				line._datasetIndex = me.index;
				// Data
				line._children = points;
				// Model
				line._model = me._resolveDatasetElementOptions(line);
	
				line.pivot();
			}
	
			// Update Points
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				me.updateElement(points[i], i, reset);
			}
	
			if (showLine && line._model.tension !== 0) {
				me.updateBezierControlPoints();
			}
	
			// Now pivot the point for animation
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				points[i].pivot();
			}
		},
	
		updateElement: function(point, index, reset) {
			var me = this;
			var meta = me.getMeta();
			var custom = point.custom || {};
			var dataset = me.getDataset();
			var datasetIndex = me.index;
			var value = dataset.data[index];
			var xScale = me._xScale;
			var yScale = me._yScale;
			var lineModel = meta.dataset._model;
			var x, y;
	
			var options = me._resolveDataElementOptions(point, index);
	
			x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
			y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
	
			// Utility
			point._xScale = xScale;
			point._yScale = yScale;
			point._options = options;
			point._datasetIndex = datasetIndex;
			point._index = index;
	
			// Desired view properties
			point._model = {
				x: x,
				y: y,
				skip: custom.skip || isNaN(x) || isNaN(y),
				// Appearance
				radius: options.radius,
				pointStyle: options.pointStyle,
				rotation: options.rotation,
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
				steppedLine: lineModel ? lineModel.steppedLine : false,
				// Tooltip
				hitRadius: options.hitRadius
			};
		},
	
		/**
		 * @private
		 */
		_resolveDatasetElementOptions: function(element) {
			var me = this;
			var config = me._config;
			var custom = element.custom || {};
			var options = me.chart.options;
			var lineOptions = options.elements.line;
			var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
	
			// The default behavior of lines is to break at null values, according
			// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
			// This option gives lines the ability to span gaps
			values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
			values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
			values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
			values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));
	
			return values;
		},
	
		calculatePointY: function(value, index, datasetIndex) {
			var me = this;
			var chart = me.chart;
			var yScale = me._yScale;
			var sumPos = 0;
			var sumNeg = 0;
			var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;
	
			if (yScale.options.stacked) {
				rightValue = +yScale.getRightValue(value);
				metasets = chart._getSortedVisibleDatasetMetas();
				ilen = metasets.length;
	
				for (i = 0; i < ilen; ++i) {
					dsMeta = metasets[i];
					if (dsMeta.index === datasetIndex) {
						break;
					}
	
					ds = chart.data.datasets[dsMeta.index];
					if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
						stackedRightValue = +yScale.getRightValue(ds.data[index]);
						if (stackedRightValue < 0) {
							sumNeg += stackedRightValue || 0;
						} else {
							sumPos += stackedRightValue || 0;
						}
					}
				}
	
				if (rightValue < 0) {
					return yScale.getPixelForValue(sumNeg + rightValue);
				}
				return yScale.getPixelForValue(sumPos + rightValue);
			}
			return yScale.getPixelForValue(value);
		},
	
		updateBezierControlPoints: function() {
			var me = this;
			var chart = me.chart;
			var meta = me.getMeta();
			var lineModel = meta.dataset._model;
			var area = chart.chartArea;
			var points = meta.data || [];
			var i, ilen, model, controlPoints;
	
			// Only consider points that are drawn in case the spanGaps option is used
			if (lineModel.spanGaps) {
				points = points.filter(function(pt) {
					return !pt._model.skip;
				});
			}
	
			function capControlPoint(pt, min, max) {
				return Math.max(Math.min(pt, max), min);
			}
	
			if (lineModel.cubicInterpolationMode === 'monotone') {
				helpers$1.splineCurveMonotone(points);
			} else {
				for (i = 0, ilen = points.length; i < ilen; ++i) {
					model = points[i]._model;
					controlPoints = helpers$1.splineCurve(
						helpers$1.previousItem(points, i)._model,
						model,
						helpers$1.nextItem(points, i)._model,
						lineModel.tension
					);
					model.controlPointPreviousX = controlPoints.previous.x;
					model.controlPointPreviousY = controlPoints.previous.y;
					model.controlPointNextX = controlPoints.next.x;
					model.controlPointNextY = controlPoints.next.y;
				}
			}
	
			if (chart.options.elements.line.capBezierPoints) {
				for (i = 0, ilen = points.length; i < ilen; ++i) {
					model = points[i]._model;
					if (isPointInArea(model, area)) {
						if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
							model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
							model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
						}
						if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
							model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
							model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
						}
					}
				}
			}
		},
	
		draw: function() {
			var me = this;
			var chart = me.chart;
			var meta = me.getMeta();
			var points = meta.data || [];
			var area = chart.chartArea;
			var canvas = chart.canvas;
			var i = 0;
			var ilen = points.length;
			var clip;
	
			if (me._showLine) {
				clip = meta.dataset._model.clip;
	
				helpers$1.canvas.clipArea(chart.ctx, {
					left: clip.left === false ? 0 : area.left - clip.left,
					right: clip.right === false ? canvas.width : area.right + clip.right,
					top: clip.top === false ? 0 : area.top - clip.top,
					bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
				});
	
				meta.dataset.draw();
	
				helpers$1.canvas.unclipArea(chart.ctx);
			}
	
			// Draw the points
			for (; i < ilen; ++i) {
				points[i].draw(area);
			}
		},
	
		/**
		 * @protected
		 */
		setHoverStyle: function(point) {
			var model = point._model;
			var options = point._options;
			var getHoverColor = helpers$1.getHoverColor;
	
			point.$previousStyle = {
				backgroundColor: model.backgroundColor,
				borderColor: model.borderColor,
				borderWidth: model.borderWidth,
				radius: model.radius
			};
	
			model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
			model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
			model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
			model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
		},
	});
	
	var resolve$3 = helpers$1.options.resolve;
	
	core_defaults._set('polarArea', {
		scale: {
			type: 'radialLinear',
			angleLines: {
				display: false
			},
			gridLines: {
				circular: true
			},
			pointLabels: {
				display: false
			},
			ticks: {
				beginAtZero: true
			}
		},
	
		// Boolean - Whether to animate the rotation of the chart
		animation: {
			animateRotate: true,
			animateScale: true
		},
	
		startAngle: -0.5 * Math.PI,
		legendCallback: function(chart) {
			var list = document.createElement('ul');
			var data = chart.data;
			var datasets = data.datasets;
			var labels = data.labels;
			var i, ilen, listItem, listItemSpan;
	
			list.setAttribute('class', chart.id + '-legend');
			if (datasets.length) {
				for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
					listItem = list.appendChild(document.createElement('li'));
					listItemSpan = listItem.appendChild(document.createElement('span'));
					listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
					if (labels[i]) {
						listItem.appendChild(document.createTextNode(labels[i]));
					}
				}
			}
	
			return list.outerHTML;
		},
		legend: {
			labels: {
				generateLabels: function(chart) {
					var data = chart.data;
					if (data.labels.length && data.datasets.length) {
						return data.labels.map(function(label, i) {
							var meta = chart.getDatasetMeta(0);
							var style = meta.controller.getStyle(i);
	
							return {
								text: label,
								fillStyle: style.backgroundColor,
								strokeStyle: style.borderColor,
								lineWidth: style.borderWidth,
								hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,
	
								// Extra data used for toggling the correct item
								index: i
							};
						});
					}
					return [];
				}
			},
	
			onClick: function(e, legendItem) {
				var index = legendItem.index;
				var chart = this.chart;
				var i, ilen, meta;
	
				for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
					meta = chart.getDatasetMeta(i);
					meta.data[index].hidden = !meta.data[index].hidden;
				}
	
				chart.update();
			}
		},
	
		// Need to override these to give a nice default
		tooltips: {
			callbacks: {
				title: function() {
					return '';
				},
				label: function(item, data) {
					return data.labels[item.index] + ': ' + item.yLabel;
				}
			}
		}
	});
	
	var controller_polarArea = core_datasetController.extend({
	
		dataElementType: elements.Arc,
	
		linkScales: helpers$1.noop,
	
		/**
		 * @private
		 */
		_dataElementOptions: [
			'backgroundColor',
			'borderColor',
			'borderWidth',
			'borderAlign',
			'hoverBackgroundColor',
			'hoverBorderColor',
			'hoverBorderWidth',
		],
	
		/**
		 * @private
		 */
		_getIndexScaleId: function() {
			return this.chart.scale.id;
		},
	
		/**
		 * @private
		 */
		_getValueScaleId: function() {
			return this.chart.scale.id;
		},
	
		update: function(reset) {
			var me = this;
			var dataset = me.getDataset();
			var meta = me.getMeta();
			var start = me.chart.options.startAngle || 0;
			var starts = me._starts = [];
			var angles = me._angles = [];
			var arcs = meta.data;
			var i, ilen, angle;
	
			me._updateRadius();
	
			meta.count = me.countVisibleElements();
	
			for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
				starts[i] = start;
				angle = me._computeAngle(i);
				angles[i] = angle;
				start += angle;
			}
	
			for (i = 0, ilen = arcs.length; i < ilen; ++i) {
				arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
				me.updateElement(arcs[i], i, reset);
			}
		},
	
		/**
		 * @private
		 */
		_updateRadius: function() {
			var me = this;
			var chart = me.chart;
			var chartArea = chart.chartArea;
			var opts = chart.options;
			var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
	
			chart.outerRadius = Math.max(minSize / 2, 0);
			chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
			chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
	
			me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
			me.innerRadius = me.outerRadius - chart.radiusLength;
		},
	
		updateElement: function(arc, index, reset) {
			var me = this;
			var chart = me.chart;
			var dataset = me.getDataset();
			var opts = chart.options;
			var animationOpts = opts.animation;
			var scale = chart.scale;
			var labels = chart.data.labels;
	
			var centerX = scale.xCenter;
			var centerY = scale.yCenter;
	
			// var negHalfPI = -0.5 * Math.PI;
			var datasetStartAngle = opts.startAngle;
			var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
			var startAngle = me._starts[index];
			var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);
	
			var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
			var options = arc._options || {};
	
			helpers$1.extend(arc, {
				// Utility
				_datasetIndex: me.index,
				_index: index,
				_scale: scale,
	
				// Desired view properties
				_model: {
					backgroundColor: options.backgroundColor,
					borderColor: options.borderColor,
					borderWidth: options.borderWidth,
					borderAlign: options.borderAlign,
					x: centerX,
					y: centerY,
					innerRadius: 0,
					outerRadius: reset ? resetRadius : distance,
					startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
					endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
					label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
				}
			});
	
			arc.pivot();
		},
	
		countVisibleElements: function() {
			var dataset = this.getDataset();
			var meta = this.getMeta();
			var count = 0;
	
			helpers$1.each(meta.data, function(element, index) {
				if (!isNaN(dataset.data[index]) && !element.hidden) {
					count++;
				}
			});
	
			return count;
		},
	
		/**
		 * @protected
		 */
		setHoverStyle: function(arc) {
			var model = arc._model;
			var options = arc._options;
			var getHoverColor = helpers$1.getHoverColor;
			var valueOrDefault = helpers$1.valueOrDefault;
	
			arc.$previousStyle = {
				backgroundColor: model.backgroundColor,
				borderColor: model.borderColor,
				borderWidth: model.borderWidth,
			};
	
			model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
			model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
			model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
		},
	
		/**
		 * @private
		 */
		_computeAngle: function(index) {
			var me = this;
			var count = this.getMeta().count;
			var dataset = me.getDataset();
			var meta = me.getMeta();
	
			if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
				return 0;
			}
	
			// Scriptable options
			var context = {
				chart: me.chart,
				dataIndex: index,
				dataset: dataset,
				datasetIndex: me.index
			};
	
			return resolve$3([
				me.chart.options.elements.arc.angle,
				(2 * Math.PI) / count
			], context, index);
		}
	});
	
	core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
	core_defaults._set('pie', {
		cutoutPercentage: 0
	});
	
	// Pie charts are Doughnut chart with different defaults
	var controller_pie = controller_doughnut;
	
	var valueOrDefault$7 = helpers$1.valueOrDefault;
	
	core_defaults._set('radar', {
		spanGaps: false,
		scale: {
			type: 'radialLinear'
		},
		elements: {
			line: {
				fill: 'start',
				tension: 0 // no bezier in radar
			}
		}
	});
	
	var controller_radar = core_datasetController.extend({
		datasetElementType: elements.Line,
	
		dataElementType: elements.Point,
	
		linkScales: helpers$1.noop,
	
		/**
		 * @private
		 */
		_datasetElementOptions: [
			'backgroundColor',
			'borderWidth',
			'borderColor',
			'borderCapStyle',
			'borderDash',
			'borderDashOffset',
			'borderJoinStyle',
			'fill'
		],
	
		/**
		 * @private
		 */
		_dataElementOptions: {
			backgroundColor: 'pointBackgroundColor',
			borderColor: 'pointBorderColor',
			borderWidth: 'pointBorderWidth',
			hitRadius: 'pointHitRadius',
			hoverBackgroundColor: 'pointHoverBackgroundColor',
			hoverBorderColor: 'pointHoverBorderColor',
			hoverBorderWidth: 'pointHoverBorderWidth',
			hoverRadius: 'pointHoverRadius',
			pointStyle: 'pointStyle',
			radius: 'pointRadius',
			rotation: 'pointRotation'
		},
	
		/**
		 * @private
		 */
		_getIndexScaleId: function() {
			return this.chart.scale.id;
		},
	
		/**
		 * @private
		 */
		_getValueScaleId: function() {
			return this.chart.scale.id;
		},
	
		update: function(reset) {
			var me = this;
			var meta = me.getMeta();
			var line = meta.dataset;
			var points = meta.data || [];
			var scale = me.chart.scale;
			var config = me._config;
			var i, ilen;
	
			// Compatibility: If the properties are defined with only the old name, use those values
			if (config.tension !== undefined && config.lineTension === undefined) {
				config.lineTension = config.tension;
			}
	
			// Utility
			line._scale = scale;
			line._datasetIndex = me.index;
			// Data
			line._children = points;
			line._loop = true;
			// Model
			line._model = me._resolveDatasetElementOptions(line);
	
			line.pivot();
	
			// Update Points
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				me.updateElement(points[i], i, reset);
			}
	
			// Update bezier control points
			me.updateBezierControlPoints();
	
			// Now pivot the point for animation
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				points[i].pivot();
			}
		},
	
		updateElement: function(point, index, reset) {
			var me = this;
			var custom = point.custom || {};
			var dataset = me.getDataset();
			var scale = me.chart.scale;
			var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
			var options = me._resolveDataElementOptions(point, index);
			var lineModel = me.getMeta().dataset._model;
			var x = reset ? scale.xCenter : pointPosition.x;
			var y = reset ? scale.yCenter : pointPosition.y;
	
			// Utility
			point._scale = scale;
			point._options = options;
			point._datasetIndex = me.index;
			point._index = index;
	
			// Desired view properties
			point._model = {
				x: x, // value not used in dataset scale, but we want a consistent API between scales
				y: y,
				skip: custom.skip || isNaN(x) || isNaN(y),
				// Appearance
				radius: options.radius,
				pointStyle: options.pointStyle,
				rotation: options.rotation,
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),
	
				// Tooltip
				hitRadius: options.hitRadius
			};
		},
	
		/**
		 * @private
		 */
		_resolveDatasetElementOptions: function() {
			var me = this;
			var config = me._config;
			var options = me.chart.options;
			var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
	
			values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
			values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);
	
			return values;
		},
	
		updateBezierControlPoints: function() {
			var me = this;
			var meta = me.getMeta();
			var area = me.chart.chartArea;
			var points = meta.data || [];
			var i, ilen, model, controlPoints;
	
			// Only consider points that are drawn in case the spanGaps option is used
			if (meta.dataset._model.spanGaps) {
				points = points.filter(function(pt) {
					return !pt._model.skip;
				});
			}
	
			function capControlPoint(pt, min, max) {
				return Math.max(Math.min(pt, max), min);
			}
	
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				controlPoints = helpers$1.splineCurve(
					helpers$1.previousItem(points, i, true)._model,
					model,
					helpers$1.nextItem(points, i, true)._model,
					model.tension
				);
	
				// Prevent the bezier going outside of the bounds of the graph
				model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
				model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
				model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
				model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
			}
		},
	
		setHoverStyle: function(point) {
			var model = point._model;
			var options = point._options;
			var getHoverColor = helpers$1.getHoverColor;
	
			point.$previousStyle = {
				backgroundColor: model.backgroundColor,
				borderColor: model.borderColor,
				borderWidth: model.borderWidth,
				radius: model.radius
			};
	
			model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
			model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
			model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
			model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
		}
	});
	
	core_defaults._set('scatter', {
		hover: {
			mode: 'single'
		},
	
		scales: {
			xAxes: [{
				id: 'x-axis-1',    // need an ID so datasets can reference the scale
				type: 'linear',    // scatter should not use a category axis
				position: 'bottom'
			}],
			yAxes: [{
				id: 'y-axis-1',
				type: 'linear',
				position: 'left'
			}]
		},
	
		tooltips: {
			callbacks: {
				title: function() {
					return '';     // doesn't make sense for scatter since data are formatted as a point
				},
				label: function(item) {
					return '(' + item.xLabel + ', ' + item.yLabel + ')';
				}
			}
		}
	});
	
	core_defaults._set('global', {
		datasets: {
			scatter: {
				showLine: false
			}
		}
	});
	
	// Scatter charts use line controllers
	var controller_scatter = controller_line;
	
	// NOTE export a map in which the key represents the controller type, not
	// the class, and so must be CamelCase in order to be correctly retrieved
	// by the controller in core.controller.js (`controllers[meta.type]`).
	
	var controllers = {
		bar: controller_bar,
		bubble: controller_bubble,
		doughnut: controller_doughnut,
		horizontalBar: controller_horizontalBar,
		line: controller_line,
		polarArea: controller_polarArea,
		pie: controller_pie,
		radar: controller_radar,
		scatter: controller_scatter
	};
	
	/**
	 * Helper function to get relative position for an event
	 * @param {Event|IEvent} event - The event to get the position for
	 * @param {Chart} chart - The chart
	 * @returns {object} the event position
	 */
	function getRelativePosition(e, chart) {
		if (e.native) {
			return {
				x: e.x,
				y: e.y
			};
		}
	
		return helpers$1.getRelativePosition(e, chart);
	}
	
	/**
	 * Helper function to traverse all of the visible elements in the chart
	 * @param {Chart} chart - the chart
	 * @param {function} handler - the callback to execute for each visible item
	 */
	function parseVisibleItems(chart, handler) {
		var metasets = chart._getSortedVisibleDatasetMetas();
		var metadata, i, j, ilen, jlen, element;
	
		for (i = 0, ilen = metasets.length; i < ilen; ++i) {
			metadata = metasets[i].data;
			for (j = 0, jlen = metadata.length; j < jlen; ++j) {
				element = metadata[j];
				if (!element._view.skip) {
					handler(element);
				}
			}
		}
	}
	
	/**
	 * Helper function to get the items that intersect the event position
	 * @param {ChartElement[]} items - elements to filter
	 * @param {object} position - the point to be nearest to
	 * @return {ChartElement[]} the nearest items
	 */
	function getIntersectItems(chart, position) {
		var elements = [];
	
		parseVisibleItems(chart, function(element) {
			if (element.inRange(position.x, position.y)) {
				elements.push(element);
			}
		});
	
		return elements;
	}
	
	/**
	 * Helper function to get the items nearest to the event position considering all visible items in teh chart
	 * @param {Chart} chart - the chart to look at elements from
	 * @param {object} position - the point to be nearest to
	 * @param {boolean} intersect - if true, only consider items that intersect the position
	 * @param {function} distanceMetric - function to provide the distance between points
	 * @return {ChartElement[]} the nearest items
	 */
	function getNearestItems(chart, position, intersect, distanceMetric) {
		var minDistance = Number.POSITIVE_INFINITY;
		var nearestItems = [];
	
		parseVisibleItems(chart, function(element) {
			if (intersect && !element.inRange(position.x, position.y)) {
				return;
			}
	
			var center = element.getCenterPoint();
			var distance = distanceMetric(position, center);
			if (distance < minDistance) {
				nearestItems = [element];
				minDistance = distance;
			} else if (distance === minDistance) {
				// Can have multiple items at the same distance in which case we sort by size
				nearestItems.push(element);
			}
		});
	
		return nearestItems;
	}
	
	/**
	 * Get a distance metric function for two points based on the
	 * axis mode setting
	 * @param {string} axis - the axis mode. x|y|xy
	 */
	function getDistanceMetricForAxis(axis) {
		var useX = axis.indexOf('x') !== -1;
		var useY = axis.indexOf('y') !== -1;
	
		return function(pt1, pt2) {
			var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
			var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
			return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
		};
	}
	
	function indexMode(chart, e, options) {
		var position = getRelativePosition(e, chart);
		// Default axis for index mode is 'x' to match old behaviour
		options.axis = options.axis || 'x';
		var distanceMetric = getDistanceMetricForAxis(options.axis);
		var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
		var elements = [];
	
		if (!items.length) {
			return [];
		}
	
		chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
			var element = meta.data[items[0]._index];
	
			// don't count items that are skipped (null data)
			if (element && !element._view.skip) {
				elements.push(element);
			}
		});
	
		return elements;
	}
	
	/**
	 * @interface IInteractionOptions
	 */
	/**
	 * If true, only consider items that intersect the point
	 * @name IInterfaceOptions#boolean
	 * @type Boolean
	 */
	
	/**
	 * Contains interaction related functions
	 * @namespace Chart.Interaction
	 */
	var core_interaction = {
		// Helper function for different modes
		modes: {
			single: function(chart, e) {
				var position = getRelativePosition(e, chart);
				var elements = [];
	
				parseVisibleItems(chart, function(element) {
					if (element.inRange(position.x, position.y)) {
						elements.push(element);
						return elements;
					}
				});
	
				return elements.slice(0, 1);
			},
	
			/**
			 * @function Chart.Interaction.modes.label
			 * @deprecated since version 2.4.0
			 * @todo remove at version 3
			 * @private
			 */
			label: indexMode,
	
			/**
			 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
			 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
			 * @function Chart.Interaction.modes.index
			 * @since v2.4.0
			 * @param {Chart} chart - the chart we are returning items from
			 * @param {Event} e - the event we are find things at
			 * @param {IInteractionOptions} options - options to use during interaction
			 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
			 */
			index: indexMode,
	
			/**
			 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
			 * If the options.intersect is false, we find the nearest item and return the items in that dataset
			 * @function Chart.Interaction.modes.dataset
			 * @param {Chart} chart - the chart we are returning items from
			 * @param {Event} e - the event we are find things at
			 * @param {IInteractionOptions} options - options to use during interaction
			 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
			 */
			dataset: function(chart, e, options) {
				var position = getRelativePosition(e, chart);
				options.axis = options.axis || 'xy';
				var distanceMetric = getDistanceMetricForAxis(options.axis);
				var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
	
				if (items.length > 0) {
					items = chart.getDatasetMeta(items[0]._datasetIndex).data;
				}
	
				return items;
			},
	
			/**
			 * @function Chart.Interaction.modes.x-axis
			 * @deprecated since version 2.4.0. Use index mode and intersect == true
			 * @todo remove at version 3
			 * @private
			 */
			'x-axis': function(chart, e) {
				return indexMode(chart, e, {intersect: false});
			},
	
			/**
			 * Point mode returns all elements that hit test based on the event position
			 * of the event
			 * @function Chart.Interaction.modes.intersect
			 * @param {Chart} chart - the chart we are returning items from
			 * @param {Event} e - the event we are find things at
			 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
			 */
			point: function(chart, e) {
				var position = getRelativePosition(e, chart);
				return getIntersectItems(chart, position);
			},
	
			/**
			 * nearest mode returns the element closest to the point
			 * @function Chart.Interaction.modes.intersect
			 * @param {Chart} chart - the chart we are returning items from
			 * @param {Event} e - the event we are find things at
			 * @param {IInteractionOptions} options - options to use
			 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
			 */
			nearest: function(chart, e, options) {
				var position = getRelativePosition(e, chart);
				options.axis = options.axis || 'xy';
				var distanceMetric = getDistanceMetricForAxis(options.axis);
				return getNearestItems(chart, position, options.intersect, distanceMetric);
			},
	
			/**
			 * x mode returns the elements that hit-test at the current x coordinate
			 * @function Chart.Interaction.modes.x
			 * @param {Chart} chart - the chart we are returning items from
			 * @param {Event} e - the event we are find things at
			 * @param {IInteractionOptions} options - options to use
			 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
			 */
			x: function(chart, e, options) {
				var position = getRelativePosition(e, chart);
				var items = [];
				var intersectsItem = false;
	
				parseVisibleItems(chart, function(element) {
					if (element.inXRange(position.x)) {
						items.push(element);
					}
	
					if (element.inRange(position.x, position.y)) {
						intersectsItem = true;
					}
				});
	
				// If we want to trigger on an intersect and we don't have any items
				// that intersect the position, return nothing
				if (options.intersect && !intersectsItem) {
					items = [];
				}
				return items;
			},
	
			/**
			 * y mode returns the elements that hit-test at the current y coordinate
			 * @function Chart.Interaction.modes.y
			 * @param {Chart} chart - the chart we are returning items from
			 * @param {Event} e - the event we are find things at
			 * @param {IInteractionOptions} options - options to use
			 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
			 */
			y: function(chart, e, options) {
				var position = getRelativePosition(e, chart);
				var items = [];
				var intersectsItem = false;
	
				parseVisibleItems(chart, function(element) {
					if (element.inYRange(position.y)) {
						items.push(element);
					}
	
					if (element.inRange(position.x, position.y)) {
						intersectsItem = true;
					}
				});
	
				// If we want to trigger on an intersect and we don't have any items
				// that intersect the position, return nothing
				if (options.intersect && !intersectsItem) {
					items = [];
				}
				return items;
			}
		}
	};
	
	var extend = helpers$1.extend;
	
	function filterByPosition(array, position) {
		return helpers$1.where(array, function(v) {
			return v.pos === position;
		});
	}
	
	function sortByWeight(array, reverse) {
		return array.sort(function(a, b) {
			var v0 = reverse ? b : a;
			var v1 = reverse ? a : b;
			return v0.weight === v1.weight ?
				v0.index - v1.index :
				v0.weight - v1.weight;
		});
	}
	
	function wrapBoxes(boxes) {
		var layoutBoxes = [];
		var i, ilen, box;
	
		for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
			box = boxes[i];
			layoutBoxes.push({
				index: i,
				box: box,
				pos: box.position,
				horizontal: box.isHorizontal(),
				weight: box.weight
			});
		}
		return layoutBoxes;
	}
	
	function setLayoutDims(layouts, params) {
		var i, ilen, layout;
		for (i = 0, ilen = layouts.length; i < ilen; ++i) {
			layout = layouts[i];
			// store width used instead of chartArea.w in fitBoxes
			layout.width = layout.horizontal
				? layout.box.fullWidth && params.availableWidth
				: params.vBoxMaxWidth;
			// store height used instead of chartArea.h in fitBoxes
			layout.height = layout.horizontal && params.hBoxMaxHeight;
		}
	}
	
	function buildLayoutBoxes(boxes) {
		var layoutBoxes = wrapBoxes(boxes);
		var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
		var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
		var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
		var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
	
		return {
			leftAndTop: left.concat(top),
			rightAndBottom: right.concat(bottom),
			chartArea: filterByPosition(layoutBoxes, 'chartArea'),
			vertical: left.concat(right),
			horizontal: top.concat(bottom)
		};
	}
	
	function getCombinedMax(maxPadding, chartArea, a, b) {
		return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
	}
	
	function updateDims(chartArea, params, layout) {
		var box = layout.box;
		var maxPadding = chartArea.maxPadding;
		var newWidth, newHeight;
	
		if (layout.size) {
			// this layout was already counted for, lets first reduce old size
			chartArea[layout.pos] -= layout.size;
		}
		layout.size = layout.horizontal ? box.height : box.width;
		chartArea[layout.pos] += layout.size;
	
		if (box.getPadding) {
			var boxPadding = box.getPadding();
			maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
			maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
			maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
			maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
		}
	
		newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
		newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');
	
		if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
			chartArea.w = newWidth;
			chartArea.h = newHeight;
	
			// return true if chart area changed in layout's direction
			return layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;
		}
	}
	
	function handleMaxPadding(chartArea) {
		var maxPadding = chartArea.maxPadding;
	
		function updatePos(pos) {
			var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
			chartArea[pos] += change;
			return change;
		}
		chartArea.y += updatePos('top');
		chartArea.x += updatePos('left');
		updatePos('right');
		updatePos('bottom');
	}
	
	function getMargins(horizontal, chartArea) {
		var maxPadding = chartArea.maxPadding;
	
		function marginForPositions(positions) {
			var margin = {left: 0, top: 0, right: 0, bottom: 0};
			positions.forEach(function(pos) {
				margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
			});
			return margin;
		}
	
		return horizontal
			? marginForPositions(['left', 'right'])
			: marginForPositions(['top', 'bottom']);
	}
	
	function fitBoxes(boxes, chartArea, params) {
		var refitBoxes = [];
		var i, ilen, layout, box, refit, changed;
	
		for (i = 0, ilen = boxes.length; i < ilen; ++i) {
			layout = boxes[i];
			box = layout.box;
	
			box.update(
				layout.width || chartArea.w,
				layout.height || chartArea.h,
				getMargins(layout.horizontal, chartArea)
			);
			if (updateDims(chartArea, params, layout)) {
				changed = true;
				if (refitBoxes.length) {
					// Dimensions changed and there were non full width boxes before this
					// -> we have to refit those
					refit = true;
				}
			}
			if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
				refitBoxes.push(layout);
			}
		}
	
		return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
	}
	
	function placeBoxes(boxes, chartArea, params) {
		var userPadding = params.padding;
		var x = chartArea.x;
		var y = chartArea.y;
		var i, ilen, layout, box;
	
		for (i = 0, ilen = boxes.length; i < ilen; ++i) {
			layout = boxes[i];
			box = layout.box;
			if (layout.horizontal) {
				box.left = box.fullWidth ? userPadding.left : chartArea.left;
				box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
				box.top = y;
				box.bottom = y + box.height;
				box.width = box.right - box.left;
				y = box.bottom;
			} else {
				box.left = x;
				box.right = x + box.width;
				box.top = chartArea.top;
				box.bottom = chartArea.top + chartArea.h;
				box.height = box.bottom - box.top;
				x = box.right;
			}
		}
	
		chartArea.x = x;
		chartArea.y = y;
	}
	
	core_defaults._set('global', {
		layout: {
			padding: {
				top: 0,
				right: 0,
				bottom: 0,
				left: 0
			}
		}
	});
	
	/**
	 * @interface ILayoutItem
	 * @prop {string} position - The position of the item in the chart layout. Possible values are
	 * 'left', 'top', 'right', 'bottom', and 'chartArea'
	 * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
	 * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
	 * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
	 * @prop {function} update - Takes two parameters: width and height. Returns size of item
	 * @prop {function} getPadding -  Returns an object with padding on the edges
	 * @prop {number} width - Width of item. Must be valid after update()
	 * @prop {number} height - Height of item. Must be valid after update()
	 * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
	 * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
	 * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
	 * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
	 */
	
	// The layout service is very self explanatory.  It's responsible for the layout within a chart.
	// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
	// It is this service's responsibility of carrying out that layout.
	var core_layouts = {
		defaults: {},
	
		/**
		 * Register a box to a chart.
		 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
		 * @param {Chart} chart - the chart to use
		 * @param {ILayoutItem} item - the item to add to be layed out
		 */
		addBox: function(chart, item) {
			if (!chart.boxes) {
				chart.boxes = [];
			}
	
			// initialize item with default values
			item.fullWidth = item.fullWidth || false;
			item.position = item.position || 'top';
			item.weight = item.weight || 0;
			item._layers = item._layers || function() {
				return [{
					z: 0,
					draw: function() {
						item.draw.apply(item, arguments);
					}
				}];
			};
	
			chart.boxes.push(item);
		},
	
		/**
		 * Remove a layoutItem from a chart
		 * @param {Chart} chart - the chart to remove the box from
		 * @param {ILayoutItem} layoutItem - the item to remove from the layout
		 */
		removeBox: function(chart, layoutItem) {
			var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
			if (index !== -1) {
				chart.boxes.splice(index, 1);
			}
		},
	
		/**
		 * Sets (or updates) options on the given `item`.
		 * @param {Chart} chart - the chart in which the item lives (or will be added to)
		 * @param {ILayoutItem} item - the item to configure with the given options
		 * @param {object} options - the new item options.
		 */
		configure: function(chart, item, options) {
			var props = ['fullWidth', 'position', 'weight'];
			var ilen = props.length;
			var i = 0;
			var prop;
	
			for (; i < ilen; ++i) {
				prop = props[i];
				if (options.hasOwnProperty(prop)) {
					item[prop] = options[prop];
				}
			}
		},
	
		/**
		 * Fits boxes of the given chart into the given size by having each box measure itself
		 * then running a fitting algorithm
		 * @param {Chart} chart - the chart
		 * @param {number} width - the width to fit into
		 * @param {number} height - the height to fit into
		 */
		update: function(chart, width, height) {
			if (!chart) {
				return;
			}
	
			var layoutOptions = chart.options.layout || {};
			var padding = helpers$1.options.toPadding(layoutOptions.padding);
	
			var availableWidth = width - padding.width;
			var availableHeight = height - padding.height;
			var boxes = buildLayoutBoxes(chart.boxes);
			var verticalBoxes = boxes.vertical;
			var horizontalBoxes = boxes.horizontal;
	
			// Essentially we now have any number of boxes on each of the 4 sides.
			// Our canvas looks like the following.
			// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
			// B1 is the bottom axis
			// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
			// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
			// an error will be thrown.
			//
			// |----------------------------------------------------|
			// |                  T1 (Full Width)                   |
			// |----------------------------------------------------|
			// |    |    |                 T2                  |    |
			// |    |----|-------------------------------------|----|
			// |    |    | C1 |                           | C2 |    |
			// |    |    |----|                           |----|    |
			// |    |    |                                     |    |
			// | L1 | L2 |           ChartArea (C0)            | R1 |
			// |    |    |                                     |    |
			// |    |    |----|                           |----|    |
			// |    |    | C3 |                           | C4 |    |
			// |    |----|-------------------------------------|----|
			// |    |    |                 B1                  |    |
			// |----------------------------------------------------|
			// |                  B2 (Full Width)                   |
			// |----------------------------------------------------|
			//
	
			var params = Object.freeze({
				outerWidth: width,
				outerHeight: height,
				padding: padding,
				availableWidth: availableWidth,
				vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
				hBoxMaxHeight: availableHeight / 2
			});
			var chartArea = extend({
				maxPadding: extend({}, padding),
				w: availableWidth,
				h: availableHeight,
				x: padding.left,
				y: padding.top
			}, padding);
	
			setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
	
			// First fit vertical boxes
			fitBoxes(verticalBoxes, chartArea, params);
	
			// Then fit horizontal boxes
			if (fitBoxes(horizontalBoxes, chartArea, params)) {
				// if the area changed, re-fit vertical boxes
				fitBoxes(verticalBoxes, chartArea, params);
			}
	
			handleMaxPadding(chartArea);
	
			// Finally place the boxes to correct coordinates
			placeBoxes(boxes.leftAndTop, chartArea, params);
	
			// Move to opposite side of chart
			chartArea.x += chartArea.w;
			chartArea.y += chartArea.h;
	
			placeBoxes(boxes.rightAndBottom, chartArea, params);
	
			chart.chartArea = {
				left: chartArea.left,
				top: chartArea.top,
				right: chartArea.left + chartArea.w,
				bottom: chartArea.top + chartArea.h
			};
	
			// Finally update boxes in chartArea (radial scale for example)
			helpers$1.each(boxes.chartArea, function(layout) {
				var box = layout.box;
				extend(box, chart.chartArea);
				box.update(chartArea.w, chartArea.h);
			});
		}
	};
	
	/**
	 * Platform fallback implementation (minimal).
	 * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
	 */
	
	var platform_basic = {
		acquireContext: function(item) {
			if (item && item.canvas) {
				// Support for any object associated to a canvas (including a context2d)
				item = item.canvas;
			}
	
			return item && item.getContext('2d') || null;
		}
	};
	
	var platform_dom = "/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n";
	
	var platform_dom$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': platform_dom
	});
	
	var stylesheet = getCjsExportFromNamespace(platform_dom$1);
	
	var EXPANDO_KEY = '$chartjs';
	var CSS_PREFIX = 'chartjs-';
	var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
	var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
	var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
	var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];
	
	/**
	 * DOM event types -> Chart.js event types.
	 * Note: only events with different types are mapped.
	 * @see https://developer.mozilla.org/en-US/docs/Web/Events
	 */
	var EVENT_TYPES = {
		touchstart: 'mousedown',
		touchmove: 'mousemove',
		touchend: 'mouseup',
		pointerenter: 'mouseenter',
		pointerdown: 'mousedown',
		pointermove: 'mousemove',
		pointerup: 'mouseup',
		pointerleave: 'mouseout',
		pointerout: 'mouseout'
	};
	
	/**
	 * The "used" size is the final value of a dimension property after all calculations have
	 * been performed. This method uses the computed style of `element` but returns undefined
	 * if the computed style is not expressed in pixels. That can happen in some cases where
	 * `element` has a size relative to its parent and this last one is not yet displayed,
	 * for example because of `display: none` on a parent node.
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
	 * @returns {number} Size in pixels or undefined if unknown.
	 */
	function readUsedSize(element, property) {
		var value = helpers$1.getStyle(element, property);
		var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
		return matches ? Number(matches[1]) : undefined;
	}
	
	/**
	 * Initializes the canvas style and render size without modifying the canvas display size,
	 * since responsiveness is handled by the controller.resize() method. The config is used
	 * to determine the aspect ratio to apply in case no explicit height has been specified.
	 */
	function initCanvas(canvas, config) {
		var style = canvas.style;
	
		// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
		// returns null or '' if no explicit value has been set to the canvas attribute.
		var renderHeight = canvas.getAttribute('height');
		var renderWidth = canvas.getAttribute('width');
	
		// Chart.js modifies some canvas values that we want to restore on destroy
		canvas[EXPANDO_KEY] = {
			initial: {
				height: renderHeight,
				width: renderWidth,
				style: {
					display: style.display,
					height: style.height,
					width: style.width
				}
			}
		};
	
		// Force canvas to display as block to avoid extra space caused by inline
		// elements, which would interfere with the responsive resize process.
		// https://github.com/chartjs/Chart.js/issues/2538
		style.display = style.display || 'block';
	
		if (renderWidth === null || renderWidth === '') {
			var displayWidth = readUsedSize(canvas, 'width');
			if (displayWidth !== undefined) {
				canvas.width = displayWidth;
			}
		}
	
		if (renderHeight === null || renderHeight === '') {
			if (canvas.style.height === '') {
				// If no explicit render height and style height, let's apply the aspect ratio,
				// which one can be specified by the user but also by charts as default option
				// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
				canvas.height = canvas.width / (config.options.aspectRatio || 2);
			} else {
				var displayHeight = readUsedSize(canvas, 'height');
				if (displayWidth !== undefined) {
					canvas.height = displayHeight;
				}
			}
		}
	
		return canvas;
	}
	
	/**
	 * Detects support for options object argument in addEventListener.
	 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
	 * @private
	 */
	var supportsEventListenerOptions = (function() {
		var supports = false;
		try {
			var options = Object.defineProperty({}, 'passive', {
				// eslint-disable-next-line getter-return
				get: function() {
					supports = true;
				}
			});
			window.addEventListener('e', null, options);
		} catch (e) {
			// continue regardless of error
		}
		return supports;
	}());
	
	// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
	// https://github.com/chartjs/Chart.js/issues/4287
	var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;
	
	function addListener(node, type, listener) {
		node.addEventListener(type, listener, eventListenerOptions);
	}
	
	function removeListener(node, type, listener) {
		node.removeEventListener(type, listener, eventListenerOptions);
	}
	
	function createEvent(type, chart, x, y, nativeEvent) {
		return {
			type: type,
			chart: chart,
			native: nativeEvent || null,
			x: x !== undefined ? x : null,
			y: y !== undefined ? y : null,
		};
	}
	
	function fromNativeEvent(event, chart) {
		var type = EVENT_TYPES[event.type] || event.type;
		var pos = helpers$1.getRelativePosition(event, chart);
		return createEvent(type, chart, pos.x, pos.y, event);
	}
	
	function throttled(fn, thisArg) {
		var ticking = false;
		var args = [];
	
		return function() {
			args = Array.prototype.slice.call(arguments);
			thisArg = thisArg || this;
	
			if (!ticking) {
				ticking = true;
				helpers$1.requestAnimFrame.call(window, function() {
					ticking = false;
					fn.apply(thisArg, args);
				});
			}
		};
	}
	
	function createDiv(cls) {
		var el = document.createElement('div');
		el.className = cls || '';
		return el;
	}
	
	// Implementation based on https://github.com/marcj/css-element-queries
	function createResizer(handler) {
		var maxSize = 1000000;
	
		// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
		// https://github.com/chartjs/Chart.js/issues/5902
		var resizer = createDiv(CSS_SIZE_MONITOR);
		var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
		var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');
	
		expand.appendChild(createDiv());
		shrink.appendChild(createDiv());
	
		resizer.appendChild(expand);
		resizer.appendChild(shrink);
		resizer._reset = function() {
			expand.scrollLeft = maxSize;
			expand.scrollTop = maxSize;
			shrink.scrollLeft = maxSize;
			shrink.scrollTop = maxSize;
		};
	
		var onScroll = function() {
			resizer._reset();
			handler();
		};
	
		addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
		addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));
	
		return resizer;
	}
	
	// https://davidwalsh.name/detect-node-insertion
	function watchForRender(node, handler) {
		var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
		var proxy = expando.renderProxy = function(e) {
			if (e.animationName === CSS_RENDER_ANIMATION) {
				handler();
			}
		};
	
		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
			addListener(node, type, proxy);
		});
	
		// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
		// is removed then added back immediately (same animation frame?). Accessing the
		// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
		// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
		// https://github.com/chartjs/Chart.js/issues/4737
		expando.reflow = !!node.offsetParent;
	
		node.classList.add(CSS_RENDER_MONITOR);
	}
	
	function unwatchForRender(node) {
		var expando = node[EXPANDO_KEY] || {};
		var proxy = expando.renderProxy;
	
		if (proxy) {
			helpers$1.each(ANIMATION_START_EVENTS, function(type) {
				removeListener(node, type, proxy);
			});
	
			delete expando.renderProxy;
		}
	
		node.classList.remove(CSS_RENDER_MONITOR);
	}
	
	function addResizeListener(node, listener, chart) {
		var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
	
		// Let's keep track of this added resizer and thus avoid DOM query when removing it.
		var resizer = expando.resizer = createResizer(throttled(function() {
			if (expando.resizer) {
				var container = chart.options.maintainAspectRatio && node.parentNode;
				var w = container ? container.clientWidth : 0;
				listener(createEvent('resize', chart));
				if (container && container.clientWidth < w && chart.canvas) {
					// If the container size shrank during chart resize, let's assume
					// scrollbar appeared. So we resize again with the scrollbar visible -
					// effectively making chart smaller and the scrollbar hidden again.
					// Because we are inside `throttled`, and currently `ticking`, scroll
					// events are ignored during this whole 2 resize process.
					// If we assumed wrong and something else happened, we are resizing
					// twice in a frame (potential performance issue)
					listener(createEvent('resize', chart));
				}
			}
		}));
	
		// The resizer needs to be attached to the node parent, so we first need to be
		// sure that `node` is attached to the DOM before injecting the resizer element.
		watchForRender(node, function() {
			if (expando.resizer) {
				var container = node.parentNode;
				if (container && container !== resizer.parentNode) {
					container.insertBefore(resizer, container.firstChild);
				}
	
				// The container size might have changed, let's reset the resizer state.
				resizer._reset();
			}
		});
	}
	
	function removeResizeListener(node) {
		var expando = node[EXPANDO_KEY] || {};
		var resizer = expando.resizer;
	
		delete expando.resizer;
		unwatchForRender(node);
	
		if (resizer && resizer.parentNode) {
			resizer.parentNode.removeChild(resizer);
		}
	}
	
	/**
	 * Injects CSS styles inline if the styles are not already present.
	 * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
	 * @param {string} css - the CSS to be injected.
	 */
	function injectCSS(rootNode, css) {
		// https://stackoverflow.com/q/3922139
		var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
		if (!expando.containsStyles) {
			expando.containsStyles = true;
			css = '/* Chart.js */\n' + css;
			var style = document.createElement('style');
			style.setAttribute('type', 'text/css');
			style.appendChild(document.createTextNode(css));
			rootNode.appendChild(style);
		}
	}
	
	var platform_dom$2 = {
		/**
		 * When `true`, prevents the automatic injection of the stylesheet required to
		 * correctly detect when the chart is added to the DOM and then resized. This
		 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
		 * to be manually imported to make this library compatible with any CSP.
		 * See https://github.com/chartjs/Chart.js/issues/5208
		 */
		disableCSSInjection: false,
	
		/**
		 * This property holds whether this platform is enabled for the current environment.
		 * Currently used by platform.js to select the proper implementation.
		 * @private
		 */
		_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',
	
		/**
		 * Initializes resources that depend on platform options.
		 * @param {HTMLCanvasElement} canvas - The Canvas element.
		 * @private
		 */
		_ensureLoaded: function(canvas) {
			if (!this.disableCSSInjection) {
				// If the canvas is in a shadow DOM, then the styles must also be inserted
				// into the same shadow DOM.
				// https://github.com/chartjs/Chart.js/issues/5763
				var root = canvas.getRootNode ? canvas.getRootNode() : document;
				var targetNode = root.host ? root : document.head;
				injectCSS(targetNode, stylesheet);
			}
		},
	
		acquireContext: function(item, config) {
			if (typeof item === 'string') {
				item = document.getElementById(item);
			} else if (item.length) {
				// Support for array based queries (such as jQuery)
				item = item[0];
			}
	
			if (item && item.canvas) {
				// Support for any object associated to a canvas (including a context2d)
				item = item.canvas;
			}
	
			// To prevent canvas fingerprinting, some add-ons undefine the getContext
			// method, for example: https://github.com/kkapsner/CanvasBlocker
			// https://github.com/chartjs/Chart.js/issues/2807
			var context = item && item.getContext && item.getContext('2d');
	
			// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
			// inside an iframe or when running in a protected environment. We could guess the
			// types from their toString() value but let's keep things flexible and assume it's
			// a sufficient condition if the item has a context2D which has item as `canvas`.
			// https://github.com/chartjs/Chart.js/issues/3887
			// https://github.com/chartjs/Chart.js/issues/4102
			// https://github.com/chartjs/Chart.js/issues/4152
			if (context && context.canvas === item) {
				// Load platform resources on first chart creation, to make it possible to
				// import the library before setting platform options.
				this._ensureLoaded(item);
				initCanvas(item, config);
				return context;
			}
	
			return null;
		},
	
		releaseContext: function(context) {
			var canvas = context.canvas;
			if (!canvas[EXPANDO_KEY]) {
				return;
			}
	
			var initial = canvas[EXPANDO_KEY].initial;
			['height', 'width'].forEach(function(prop) {
				var value = initial[prop];
				if (helpers$1.isNullOrUndef(value)) {
					canvas.removeAttribute(prop);
				} else {
					canvas.setAttribute(prop, value);
				}
			});
	
			helpers$1.each(initial.style || {}, function(value, key) {
				canvas.style[key] = value;
			});
	
			// The canvas render size might have been changed (and thus the state stack discarded),
			// we can't use save() and restore() to restore the initial state. So make sure that at
			// least the canvas context is reset to the default state by setting the canvas width.
			// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
			// eslint-disable-next-line no-self-assign
			canvas.width = canvas.width;
	
			delete canvas[EXPANDO_KEY];
		},
	
		addEventListener: function(chart, type, listener) {
			var canvas = chart.canvas;
			if (type === 'resize') {
				// Note: the resize event is not supported on all browsers.
				addResizeListener(canvas, listener, chart);
				return;
			}
	
			var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
			var proxies = expando.proxies || (expando.proxies = {});
			var proxy = proxies[chart.id + '_' + type] = function(event) {
				listener(fromNativeEvent(event, chart));
			};
	
			addListener(canvas, type, proxy);
		},
	
		removeEventListener: function(chart, type, listener) {
			var canvas = chart.canvas;
			if (type === 'resize') {
				// Note: the resize event is not supported on all browsers.
				removeResizeListener(canvas);
				return;
			}
	
			var expando = listener[EXPANDO_KEY] || {};
			var proxies = expando.proxies || {};
			var proxy = proxies[chart.id + '_' + type];
			if (!proxy) {
				return;
			}
	
			removeListener(canvas, type, proxy);
		}
	};
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, use EventTarget.addEventListener instead.
	 * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
	 * @function Chart.helpers.addEvent
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers$1.addEvent = addListener;
	
	/**
	 * Provided for backward compatibility, use EventTarget.removeEventListener instead.
	 * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
	 * @function Chart.helpers.removeEvent
	 * @deprecated since version 2.7.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers$1.removeEvent = removeListener;
	
	// @TODO Make possible to select another platform at build time.
	var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;
	
	/**
	 * @namespace Chart.platform
	 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
	 * @since 2.4.0
	 */
	var platform = helpers$1.extend({
		/**
		 * @since 2.7.0
		 */
		initialize: function() {},
	
		/**
		 * Called at chart construction time, returns a context2d instance implementing
		 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
		 * @param {*} item - The native item from which to acquire context (platform specific)
		 * @param {object} options - The chart options
		 * @returns {CanvasRenderingContext2D} context2d instance
		 */
		acquireContext: function() {},
	
		/**
		 * Called at chart destruction time, releases any resources associated to the context
		 * previously returned by the acquireContext() method.
		 * @param {CanvasRenderingContext2D} context - The context2d instance
		 * @returns {boolean} true if the method succeeded, else false
		 */
		releaseContext: function() {},
	
		/**
		 * Registers the specified listener on the given chart.
		 * @param {Chart} chart - Chart from which to listen for event
		 * @param {string} type - The ({@link IEvent}) type to listen for
		 * @param {function} listener - Receives a notification (an object that implements
		 * the {@link IEvent} interface) when an event of the specified type occurs.
		 */
		addEventListener: function() {},
	
		/**
		 * Removes the specified listener previously registered with addEventListener.
		 * @param {Chart} chart - Chart from which to remove the listener
		 * @param {string} type - The ({@link IEvent}) type to remove
		 * @param {function} listener - The listener function to remove from the event target.
		 */
		removeEventListener: function() {}
	
	}, implementation);
	
	core_defaults._set('global', {
		plugins: {}
	});
	
	/**
	 * The plugin service singleton
	 * @namespace Chart.plugins
	 * @since 2.1.0
	 */
	var core_plugins = {
		/**
		 * Globally registered plugins.
		 * @private
		 */
		_plugins: [],
	
		/**
		 * This identifier is used to invalidate the descriptors cache attached to each chart
		 * when a global plugin is registered or unregistered. In this case, the cache ID is
		 * incremented and descriptors are regenerated during following API calls.
		 * @private
		 */
		_cacheId: 0,
	
		/**
		 * Registers the given plugin(s) if not already registered.
		 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
		 */
		register: function(plugins) {
			var p = this._plugins;
			([]).concat(plugins).forEach(function(plugin) {
				if (p.indexOf(plugin) === -1) {
					p.push(plugin);
				}
			});
	
			this._cacheId++;
		},
	
		/**
		 * Unregisters the given plugin(s) only if registered.
		 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
		 */
		unregister: function(plugins) {
			var p = this._plugins;
			([]).concat(plugins).forEach(function(plugin) {
				var idx = p.indexOf(plugin);
				if (idx !== -1) {
					p.splice(idx, 1);
				}
			});
	
			this._cacheId++;
		},
	
		/**
		 * Remove all registered plugins.
		 * @since 2.1.5
		 */
		clear: function() {
			this._plugins = [];
			this._cacheId++;
		},
	
		/**
		 * Returns the number of registered plugins?
		 * @returns {number}
		 * @since 2.1.5
		 */
		count: function() {
			return this._plugins.length;
		},
	
		/**
		 * Returns all registered plugin instances.
		 * @returns {IPlugin[]} array of plugin objects.
		 * @since 2.1.5
		 */
		getAll: function() {
			return this._plugins;
		},
	
		/**
		 * Calls enabled plugins for `chart` on the specified hook and with the given args.
		 * This method immediately returns as soon as a plugin explicitly returns false. The
		 * returned value can be used, for instance, to interrupt the current action.
		 * @param {Chart} chart - The chart instance for which plugins should be called.
		 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
		 * @param {Array} [args] - Extra arguments to apply to the hook call.
		 * @returns {boolean} false if any of the plugins return false, else returns true.
		 */
		notify: function(chart, hook, args) {
			var descriptors = this.descriptors(chart);
			var ilen = descriptors.length;
			var i, descriptor, plugin, params, method;
	
			for (i = 0; i < ilen; ++i) {
				descriptor = descriptors[i];
				plugin = descriptor.plugin;
				method = plugin[hook];
				if (typeof method === 'function') {
					params = [chart].concat(args || []);
					params.push(descriptor.options);
					if (method.apply(plugin, params) === false) {
						return false;
					}
				}
			}
	
			return true;
		},
	
		/**
		 * Returns descriptors of enabled plugins for the given chart.
		 * @returns {object[]} [{ plugin, options }]
		 * @private
		 */
		descriptors: function(chart) {
			var cache = chart.$plugins || (chart.$plugins = {});
			if (cache.id === this._cacheId) {
				return cache.descriptors;
			}
	
			var plugins = [];
			var descriptors = [];
			var config = (chart && chart.config) || {};
			var options = (config.options && config.options.plugins) || {};
	
			this._plugins.concat(config.plugins || []).forEach(function(plugin) {
				var idx = plugins.indexOf(plugin);
				if (idx !== -1) {
					return;
				}
	
				var id = plugin.id;
				var opts = options[id];
				if (opts === false) {
					return;
				}
	
				if (opts === true) {
					opts = helpers$1.clone(core_defaults.global.plugins[id]);
				}
	
				plugins.push(plugin);
				descriptors.push({
					plugin: plugin,
					options: opts || {}
				});
			});
	
			cache.descriptors = descriptors;
			cache.id = this._cacheId;
			return descriptors;
		},
	
		/**
		 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
		 * but in some cases, this reference can be changed by the user when updating options.
		 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
		 * @private
		 */
		_invalidate: function(chart) {
			delete chart.$plugins;
		}
	};
	
	var core_scaleService = {
		// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
		// use the new chart options to grab the correct scale
		constructors: {},
		// Use a registration function so that we can move to an ES6 map when we no longer need to support
		// old browsers
	
		// Scale config defaults
		defaults: {},
		registerScaleType: function(type, scaleConstructor, scaleDefaults) {
			this.constructors[type] = scaleConstructor;
			this.defaults[type] = helpers$1.clone(scaleDefaults);
		},
		getScaleConstructor: function(type) {
			return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
		},
		getScaleDefaults: function(type) {
			// Return the scale defaults merged with the global settings so that we always use the latest ones
			return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};
		},
		updateScaleDefaults: function(type, additions) {
			var me = this;
			if (me.defaults.hasOwnProperty(type)) {
				me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
			}
		},
		addScalesToLayout: function(chart) {
			// Adds each scale to the chart.boxes array to be sized accordingly
			helpers$1.each(chart.scales, function(scale) {
				// Set ILayoutItem parameters for backwards compatibility
				scale.fullWidth = scale.options.fullWidth;
				scale.position = scale.options.position;
				scale.weight = scale.options.weight;
				core_layouts.addBox(chart, scale);
			});
		}
	};
	
	var valueOrDefault$8 = helpers$1.valueOrDefault;
	var getRtlHelper = helpers$1.rtl.getRtlAdapter;
	
	core_defaults._set('global', {
		tooltips: {
			enabled: true,
			custom: null,
			mode: 'nearest',
			position: 'average',
			intersect: true,
			backgroundColor: 'rgba(0,0,0,0.8)',
			titleFontStyle: 'bold',
			titleSpacing: 2,
			titleMarginBottom: 6,
			titleFontColor: '#fff',
			titleAlign: 'left',
			bodySpacing: 2,
			bodyFontColor: '#fff',
			bodyAlign: 'left',
			footerFontStyle: 'bold',
			footerSpacing: 2,
			footerMarginTop: 6,
			footerFontColor: '#fff',
			footerAlign: 'left',
			yPadding: 6,
			xPadding: 6,
			caretPadding: 2,
			caretSize: 5,
			cornerRadius: 6,
			multiKeyBackground: '#fff',
			displayColors: true,
			borderColor: 'rgba(0,0,0,0)',
			borderWidth: 0,
			callbacks: {
				// Args are: (tooltipItems, data)
				beforeTitle: helpers$1.noop,
				title: function(tooltipItems, data) {
					var title = '';
					var labels = data.labels;
					var labelCount = labels ? labels.length : 0;
	
					if (tooltipItems.length > 0) {
						var item = tooltipItems[0];
						if (item.label) {
							title = item.label;
						} else if (item.xLabel) {
							title = item.xLabel;
						} else if (labelCount > 0 && item.index < labelCount) {
							title = labels[item.index];
						}
					}
	
					return title;
				},
				afterTitle: helpers$1.noop,
	
				// Args are: (tooltipItems, data)
				beforeBody: helpers$1.noop,
	
				// Args are: (tooltipItem, data)
				beforeLabel: helpers$1.noop,
				label: function(tooltipItem, data) {
					var label = data.datasets[tooltipItem.datasetIndex].label || '';
	
					if (label) {
						label += ': ';
					}
					if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
						label += tooltipItem.value;
					} else {
						label += tooltipItem.yLabel;
					}
					return label;
				},
				labelColor: function(tooltipItem, chart) {
					var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
					var activeElement = meta.data[tooltipItem.index];
					var view = activeElement._view;
					return {
						borderColor: view.borderColor,
						backgroundColor: view.backgroundColor
					};
				},
				labelTextColor: function() {
					return this._options.bodyFontColor;
				},
				afterLabel: helpers$1.noop,
	
				// Args are: (tooltipItems, data)
				afterBody: helpers$1.noop,
	
				// Args are: (tooltipItems, data)
				beforeFooter: helpers$1.noop,
				footer: helpers$1.noop,
				afterFooter: helpers$1.noop
			}
		}
	});
	
	var positioners = {
		/**
		 * Average mode places the tooltip at the average position of the elements shown
		 * @function Chart.Tooltip.positioners.average
		 * @param elements {ChartElement[]} the elements being displayed in the tooltip
		 * @returns {object} tooltip position
		 */
		average: function(elements) {
			if (!elements.length) {
				return false;
			}
	
			var i, len;
			var x = 0;
			var y = 0;
			var count = 0;
	
			for (i = 0, len = elements.length; i < len; ++i) {
				var el = elements[i];
				if (el && el.hasValue()) {
					var pos = el.tooltipPosition();
					x += pos.x;
					y += pos.y;
					++count;
				}
			}
	
			return {
				x: x / count,
				y: y / count
			};
		},
	
		/**
		 * Gets the tooltip position nearest of the item nearest to the event position
		 * @function Chart.Tooltip.positioners.nearest
		 * @param elements {Chart.Element[]} the tooltip elements
		 * @param eventPosition {object} the position of the event in canvas coordinates
		 * @returns {object} the tooltip position
		 */
		nearest: function(elements, eventPosition) {
			var x = eventPosition.x;
			var y = eventPosition.y;
			var minDistance = Number.POSITIVE_INFINITY;
			var i, len, nearestElement;
	
			for (i = 0, len = elements.length; i < len; ++i) {
				var el = elements[i];
				if (el && el.hasValue()) {
					var center = el.getCenterPoint();
					var d = helpers$1.distanceBetweenPoints(eventPosition, center);
	
					if (d < minDistance) {
						minDistance = d;
						nearestElement = el;
					}
				}
			}
	
			if (nearestElement) {
				var tp = nearestElement.tooltipPosition();
				x = tp.x;
				y = tp.y;
			}
	
			return {
				x: x,
				y: y
			};
		}
	};
	
	// Helper to push or concat based on if the 2nd parameter is an array or not
	function pushOrConcat(base, toPush) {
		if (toPush) {
			if (helpers$1.isArray(toPush)) {
				// base = base.concat(toPush);
				Array.prototype.push.apply(base, toPush);
			} else {
				base.push(toPush);
			}
		}
	
		return base;
	}
	
	/**
	 * Returns array of strings split by newline
	 * @param {string} value - The value to split by newline.
	 * @returns {string[]} value if newline present - Returned from String split() method
	 * @function
	 */
	function splitNewlines(str) {
		if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
			return str.split('\n');
		}
		return str;
	}
	
	
	/**
	 * Private helper to create a tooltip item model
	 * @param element - the chart element (point, arc, bar) to create the tooltip item for
	 * @return new tooltip item
	 */
	function createTooltipItem(element) {
		var xScale = element._xScale;
		var yScale = element._yScale || element._scale; // handle radar || polarArea charts
		var index = element._index;
		var datasetIndex = element._datasetIndex;
		var controller = element._chart.getDatasetMeta(datasetIndex).controller;
		var indexScale = controller._getIndexScale();
		var valueScale = controller._getValueScale();
	
		return {
			xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
			yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
			label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
			value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
			index: index,
			datasetIndex: datasetIndex,
			x: element._model.x,
			y: element._model.y
		};
	}
	
	/**
	 * Helper to get the reset model for the tooltip
	 * @param tooltipOpts {object} the tooltip options
	 */
	function getBaseModel(tooltipOpts) {
		var globalDefaults = core_defaults.global;
	
		return {
			// Positioning
			xPadding: tooltipOpts.xPadding,
			yPadding: tooltipOpts.yPadding,
			xAlign: tooltipOpts.xAlign,
			yAlign: tooltipOpts.yAlign,
	
			// Drawing direction and text direction
			rtl: tooltipOpts.rtl,
			textDirection: tooltipOpts.textDirection,
	
			// Body
			bodyFontColor: tooltipOpts.bodyFontColor,
			_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
			_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
			_bodyAlign: tooltipOpts.bodyAlign,
			bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
			bodySpacing: tooltipOpts.bodySpacing,
	
			// Title
			titleFontColor: tooltipOpts.titleFontColor,
			_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
			_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
			titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
			_titleAlign: tooltipOpts.titleAlign,
			titleSpacing: tooltipOpts.titleSpacing,
			titleMarginBottom: tooltipOpts.titleMarginBottom,
	
			// Footer
			footerFontColor: tooltipOpts.footerFontColor,
			_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
			_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
			footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
			_footerAlign: tooltipOpts.footerAlign,
			footerSpacing: tooltipOpts.footerSpacing,
			footerMarginTop: tooltipOpts.footerMarginTop,
	
			// Appearance
			caretSize: tooltipOpts.caretSize,
			cornerRadius: tooltipOpts.cornerRadius,
			backgroundColor: tooltipOpts.backgroundColor,
			opacity: 0,
			legendColorBackground: tooltipOpts.multiKeyBackground,
			displayColors: tooltipOpts.displayColors,
			borderColor: tooltipOpts.borderColor,
			borderWidth: tooltipOpts.borderWidth
		};
	}
	
	/**
	 * Get the size of the tooltip
	 */
	function getTooltipSize(tooltip, model) {
		var ctx = tooltip._chart.ctx;
	
		var height = model.yPadding * 2; // Tooltip Padding
		var width = 0;
	
		// Count of all lines in the body
		var body = model.body;
		var combinedBodyLength = body.reduce(function(count, bodyItem) {
			return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
		}, 0);
		combinedBodyLength += model.beforeBody.length + model.afterBody.length;
	
		var titleLineCount = model.title.length;
		var footerLineCount = model.footer.length;
		var titleFontSize = model.titleFontSize;
		var bodyFontSize = model.bodyFontSize;
		var footerFontSize = model.footerFontSize;
	
		height += titleLineCount * titleFontSize; // Title Lines
		height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
		height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
		height += combinedBodyLength * bodyFontSize; // Body Lines
		height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
		height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
		height += footerLineCount * (footerFontSize); // Footer Lines
		height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
	
		// Title width
		var widthPadding = 0;
		var maxLineWidth = function(line) {
			width = Math.max(width, ctx.measureText(line).width + widthPadding);
		};
	
		ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
		helpers$1.each(model.title, maxLineWidth);
	
		// Body width
		ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
		helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
	
		// Body lines may include some extra width due to the color box
		widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
		helpers$1.each(body, function(bodyItem) {
			helpers$1.each(bodyItem.before, maxLineWidth);
			helpers$1.each(bodyItem.lines, maxLineWidth);
			helpers$1.each(bodyItem.after, maxLineWidth);
		});
	
		// Reset back to 0
		widthPadding = 0;
	
		// Footer width
		ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
		helpers$1.each(model.footer, maxLineWidth);
	
		// Add padding
		width += 2 * model.xPadding;
	
		return {
			width: width,
			height: height
		};
	}
	
	/**
	 * Helper to get the alignment of a tooltip given the size
	 */
	function determineAlignment(tooltip, size) {
		var model = tooltip._model;
		var chart = tooltip._chart;
		var chartArea = tooltip._chart.chartArea;
		var xAlign = 'center';
		var yAlign = 'center';
	
		if (model.y < size.height) {
			yAlign = 'top';
		} else if (model.y > (chart.height - size.height)) {
			yAlign = 'bottom';
		}
	
		var lf, rf; // functions to determine left, right alignment
		var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
		var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
		var midX = (chartArea.left + chartArea.right) / 2;
		var midY = (chartArea.top + chartArea.bottom) / 2;
	
		if (yAlign === 'center') {
			lf = function(x) {
				return x <= midX;
			};
			rf = function(x) {
				return x > midX;
			};
		} else {
			lf = function(x) {
				return x <= (size.width / 2);
			};
			rf = function(x) {
				return x >= (chart.width - (size.width / 2));
			};
		}
	
		olf = function(x) {
			return x + size.width + model.caretSize + model.caretPadding > chart.width;
		};
		orf = function(x) {
			return x - size.width - model.caretSize - model.caretPadding < 0;
		};
		yf = function(y) {
			return y <= midY ? 'top' : 'bottom';
		};
	
		if (lf(model.x)) {
			xAlign = 'left';
	
			// Is tooltip too wide and goes over the right side of the chart.?
			if (olf(model.x)) {
				xAlign = 'center';
				yAlign = yf(model.y);
			}
		} else if (rf(model.x)) {
			xAlign = 'right';
	
			// Is tooltip too wide and goes outside left edge of canvas?
			if (orf(model.x)) {
				xAlign = 'center';
				yAlign = yf(model.y);
			}
		}
	
		var opts = tooltip._options;
		return {
			xAlign: opts.xAlign ? opts.xAlign : xAlign,
			yAlign: opts.yAlign ? opts.yAlign : yAlign
		};
	}
	
	/**
	 * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
	 */
	function getBackgroundPoint(vm, size, alignment, chart) {
		// Background Position
		var x = vm.x;
		var y = vm.y;
	
		var caretSize = vm.caretSize;
		var caretPadding = vm.caretPadding;
		var cornerRadius = vm.cornerRadius;
		var xAlign = alignment.xAlign;
		var yAlign = alignment.yAlign;
		var paddingAndSize = caretSize + caretPadding;
		var radiusAndPadding = cornerRadius + caretPadding;
	
		if (xAlign === 'right') {
			x -= size.width;
		} else if (xAlign === 'center') {
			x -= (size.width / 2);
			if (x + size.width > chart.width) {
				x = chart.width - size.width;
			}
			if (x < 0) {
				x = 0;
			}
		}
	
		if (yAlign === 'top') {
			y += paddingAndSize;
		} else if (yAlign === 'bottom') {
			y -= size.height + paddingAndSize;
		} else {
			y -= (size.height / 2);
		}
	
		if (yAlign === 'center') {
			if (xAlign === 'left') {
				x += paddingAndSize;
			} else if (xAlign === 'right') {
				x -= paddingAndSize;
			}
		} else if (xAlign === 'left') {
			x -= radiusAndPadding;
		} else if (xAlign === 'right') {
			x += radiusAndPadding;
		}
	
		return {
			x: x,
			y: y
		};
	}
	
	function getAlignedX(vm, align) {
		return align === 'center'
			? vm.x + vm.width / 2
			: align === 'right'
				? vm.x + vm.width - vm.xPadding
				: vm.x + vm.xPadding;
	}
	
	/**
	 * Helper to build before and after body lines
	 */
	function getBeforeAfterBodyLines(callback) {
		return pushOrConcat([], splitNewlines(callback));
	}
	
	var exports$4 = core_element.extend({
		initialize: function() {
			this._model = getBaseModel(this._options);
			this._lastActive = [];
		},
	
		// Get the title
		// Args are: (tooltipItem, data)
		getTitle: function() {
			var me = this;
			var opts = me._options;
			var callbacks = opts.callbacks;
	
			var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
			var title = callbacks.title.apply(me, arguments);
			var afterTitle = callbacks.afterTitle.apply(me, arguments);
	
			var lines = [];
			lines = pushOrConcat(lines, splitNewlines(beforeTitle));
			lines = pushOrConcat(lines, splitNewlines(title));
			lines = pushOrConcat(lines, splitNewlines(afterTitle));
	
			return lines;
		},
	
		// Args are: (tooltipItem, data)
		getBeforeBody: function() {
			return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
		},
	
		// Args are: (tooltipItem, data)
		getBody: function(tooltipItems, data) {
			var me = this;
			var callbacks = me._options.callbacks;
			var bodyItems = [];
	
			helpers$1.each(tooltipItems, function(tooltipItem) {
				var bodyItem = {
					before: [],
					lines: [],
					after: []
				};
				pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
				pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
				pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
	
				bodyItems.push(bodyItem);
			});
	
			return bodyItems;
		},
	
		// Args are: (tooltipItem, data)
		getAfterBody: function() {
			return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
		},
	
		// Get the footer and beforeFooter and afterFooter lines
		// Args are: (tooltipItem, data)
		getFooter: function() {
			var me = this;
			var callbacks = me._options.callbacks;
	
			var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
			var footer = callbacks.footer.apply(me, arguments);
			var afterFooter = callbacks.afterFooter.apply(me, arguments);
	
			var lines = [];
			lines = pushOrConcat(lines, splitNewlines(beforeFooter));
			lines = pushOrConcat(lines, splitNewlines(footer));
			lines = pushOrConcat(lines, splitNewlines(afterFooter));
	
			return lines;
		},
	
		update: function(changed) {
			var me = this;
			var opts = me._options;
	
			// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
			// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
			// which breaks any animations.
			var existingModel = me._model;
			var model = me._model = getBaseModel(opts);
			var active = me._active;
	
			var data = me._data;
	
			// In the case where active.length === 0 we need to keep these at existing values for good animations
			var alignment = {
				xAlign: existingModel.xAlign,
				yAlign: existingModel.yAlign
			};
			var backgroundPoint = {
				x: existingModel.x,
				y: existingModel.y
			};
			var tooltipSize = {
				width: existingModel.width,
				height: existingModel.height
			};
			var tooltipPosition = {
				x: existingModel.caretX,
				y: existingModel.caretY
			};
	
			var i, len;
	
			if (active.length) {
				model.opacity = 1;
	
				var labelColors = [];
				var labelTextColors = [];
				tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);
	
				var tooltipItems = [];
				for (i = 0, len = active.length; i < len; ++i) {
					tooltipItems.push(createTooltipItem(active[i]));
				}
	
				// If the user provided a filter function, use it to modify the tooltip items
				if (opts.filter) {
					tooltipItems = tooltipItems.filter(function(a) {
						return opts.filter(a, data);
					});
				}
	
				// If the user provided a sorting function, use it to modify the tooltip items
				if (opts.itemSort) {
					tooltipItems = tooltipItems.sort(function(a, b) {
						return opts.itemSort(a, b, data);
					});
				}
	
				// Determine colors for boxes
				helpers$1.each(tooltipItems, function(tooltipItem) {
					labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
					labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
				});
	
	
				// Build the Text Lines
				model.title = me.getTitle(tooltipItems, data);
				model.beforeBody = me.getBeforeBody(tooltipItems, data);
				model.body = me.getBody(tooltipItems, data);
				model.afterBody = me.getAfterBody(tooltipItems, data);
				model.footer = me.getFooter(tooltipItems, data);
	
				// Initial positioning and colors
				model.x = tooltipPosition.x;
				model.y = tooltipPosition.y;
				model.caretPadding = opts.caretPadding;
				model.labelColors = labelColors;
				model.labelTextColors = labelTextColors;
	
				// data points
				model.dataPoints = tooltipItems;
	
				// We need to determine alignment of the tooltip
				tooltipSize = getTooltipSize(this, model);
				alignment = determineAlignment(this, tooltipSize);
				// Final Size and Position
				backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
			} else {
				model.opacity = 0;
			}
	
			model.xAlign = alignment.xAlign;
			model.yAlign = alignment.yAlign;
			model.x = backgroundPoint.x;
			model.y = backgroundPoint.y;
			model.width = tooltipSize.width;
			model.height = tooltipSize.height;
	
			// Point where the caret on the tooltip points to
			model.caretX = tooltipPosition.x;
			model.caretY = tooltipPosition.y;
	
			me._model = model;
	
			if (changed && opts.custom) {
				opts.custom.call(me, model);
			}
	
			return me;
		},
	
		drawCaret: function(tooltipPoint, size) {
			var ctx = this._chart.ctx;
			var vm = this._view;
			var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
	
			ctx.lineTo(caretPosition.x1, caretPosition.y1);
			ctx.lineTo(caretPosition.x2, caretPosition.y2);
			ctx.lineTo(caretPosition.x3, caretPosition.y3);
		},
		getCaretPosition: function(tooltipPoint, size, vm) {
			var x1, x2, x3, y1, y2, y3;
			var caretSize = vm.caretSize;
			var cornerRadius = vm.cornerRadius;
			var xAlign = vm.xAlign;
			var yAlign = vm.yAlign;
			var ptX = tooltipPoint.x;
			var ptY = tooltipPoint.y;
			var width = size.width;
			var height = size.height;
	
			if (yAlign === 'center') {
				y2 = ptY + (height / 2);
	
				if (xAlign === 'left') {
					x1 = ptX;
					x2 = x1 - caretSize;
					x3 = x1;
	
					y1 = y2 + caretSize;
					y3 = y2 - caretSize;
				} else {
					x1 = ptX + width;
					x2 = x1 + caretSize;
					x3 = x1;
	
					y1 = y2 - caretSize;
					y3 = y2 + caretSize;
				}
			} else {
				if (xAlign === 'left') {
					x2 = ptX + cornerRadius + (caretSize);
					x1 = x2 - caretSize;
					x3 = x2 + caretSize;
				} else if (xAlign === 'right') {
					x2 = ptX + width - cornerRadius - caretSize;
					x1 = x2 - caretSize;
					x3 = x2 + caretSize;
				} else {
					x2 = vm.caretX;
					x1 = x2 - caretSize;
					x3 = x2 + caretSize;
				}
				if (yAlign === 'top') {
					y1 = ptY;
					y2 = y1 - caretSize;
					y3 = y1;
				} else {
					y1 = ptY + height;
					y2 = y1 + caretSize;
					y3 = y1;
					// invert drawing order
					var tmp = x3;
					x3 = x1;
					x1 = tmp;
				}
			}
			return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
		},
	
		drawTitle: function(pt, vm, ctx) {
			var title = vm.title;
			var length = title.length;
			var titleFontSize, titleSpacing, i;
	
			if (length) {
				var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
	
				pt.x = getAlignedX(vm, vm._titleAlign);
	
				ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
				ctx.textBaseline = 'middle';
	
				titleFontSize = vm.titleFontSize;
				titleSpacing = vm.titleSpacing;
	
				ctx.fillStyle = vm.titleFontColor;
				ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
	
				for (i = 0; i < length; ++i) {
					ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
					pt.y += titleFontSize + titleSpacing; // Line Height and spacing
	
					if (i + 1 === length) {
						pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
					}
				}
			}
		},
	
		drawBody: function(pt, vm, ctx) {
			var bodyFontSize = vm.bodyFontSize;
			var bodySpacing = vm.bodySpacing;
			var bodyAlign = vm._bodyAlign;
			var body = vm.body;
			var drawColorBoxes = vm.displayColors;
			var xLinePadding = 0;
			var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;
	
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
	
			var fillLineOfText = function(line) {
				ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
				pt.y += bodyFontSize + bodySpacing;
			};
	
			var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
			var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
	
			ctx.textAlign = bodyAlign;
			ctx.textBaseline = 'middle';
			ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
	
			pt.x = getAlignedX(vm, bodyAlignForCalculation);
	
			// Before body lines
			ctx.fillStyle = vm.bodyFontColor;
			helpers$1.each(vm.beforeBody, fillLineOfText);
	
			xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
				? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
				: 0;
	
			// Draw body lines now
			for (i = 0, ilen = body.length; i < ilen; ++i) {
				bodyItem = body[i];
				textColor = vm.labelTextColors[i];
				labelColors = vm.labelColors[i];
	
				ctx.fillStyle = textColor;
				helpers$1.each(bodyItem.before, fillLineOfText);
	
				lines = bodyItem.lines;
				for (j = 0, jlen = lines.length; j < jlen; ++j) {
					// Draw Legend-like boxes if needed
					if (drawColorBoxes) {
						var rtlColorX = rtlHelper.x(colorX);
	
						// Fill a white rect so that colours merge nicely if the opacity is < 1
						ctx.fillStyle = vm.legendColorBackground;
						ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
	
						// Border
						ctx.lineWidth = 1;
						ctx.strokeStyle = labelColors.borderColor;
						ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
	
						// Inner square
						ctx.fillStyle = labelColors.backgroundColor;
						ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
						ctx.fillStyle = textColor;
					}
	
					fillLineOfText(lines[j]);
				}
	
				helpers$1.each(bodyItem.after, fillLineOfText);
			}
	
			// Reset back to 0 for after body
			xLinePadding = 0;
	
			// After body lines
			helpers$1.each(vm.afterBody, fillLineOfText);
			pt.y -= bodySpacing; // Remove last body spacing
		},
	
		drawFooter: function(pt, vm, ctx) {
			var footer = vm.footer;
			var length = footer.length;
			var footerFontSize, i;
	
			if (length) {
				var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
	
				pt.x = getAlignedX(vm, vm._footerAlign);
				pt.y += vm.footerMarginTop;
	
				ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
				ctx.textBaseline = 'middle';
	
				footerFontSize = vm.footerFontSize;
	
				ctx.fillStyle = vm.footerFontColor;
				ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
	
				for (i = 0; i < length; ++i) {
					ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
					pt.y += footerFontSize + vm.footerSpacing;
				}
			}
		},
	
		drawBackground: function(pt, vm, ctx, tooltipSize) {
			ctx.fillStyle = vm.backgroundColor;
			ctx.strokeStyle = vm.borderColor;
			ctx.lineWidth = vm.borderWidth;
			var xAlign = vm.xAlign;
			var yAlign = vm.yAlign;
			var x = pt.x;
			var y = pt.y;
			var width = tooltipSize.width;
			var height = tooltipSize.height;
			var radius = vm.cornerRadius;
	
			ctx.beginPath();
			ctx.moveTo(x + radius, y);
			if (yAlign === 'top') {
				this.drawCaret(pt, tooltipSize);
			}
			ctx.lineTo(x + width - radius, y);
			ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
			if (yAlign === 'center' && xAlign === 'right') {
				this.drawCaret(pt, tooltipSize);
			}
			ctx.lineTo(x + width, y + height - radius);
			ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
			if (yAlign === 'bottom') {
				this.drawCaret(pt, tooltipSize);
			}
			ctx.lineTo(x + radius, y + height);
			ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
			if (yAlign === 'center' && xAlign === 'left') {
				this.drawCaret(pt, tooltipSize);
			}
			ctx.lineTo(x, y + radius);
			ctx.quadraticCurveTo(x, y, x + radius, y);
			ctx.closePath();
	
			ctx.fill();
	
			if (vm.borderWidth > 0) {
				ctx.stroke();
			}
		},
	
		draw: function() {
			var ctx = this._chart.ctx;
			var vm = this._view;
	
			if (vm.opacity === 0) {
				return;
			}
	
			var tooltipSize = {
				width: vm.width,
				height: vm.height
			};
			var pt = {
				x: vm.x,
				y: vm.y
			};
	
			// IE11/Edge does not like very small opacities, so snap to 0
			var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
	
			// Truthy/falsey value for empty tooltip
			var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;
	
			if (this._options.enabled && hasTooltipContent) {
				ctx.save();
				ctx.globalAlpha = opacity;
	
				// Draw Background
				this.drawBackground(pt, vm, ctx, tooltipSize);
	
				// Draw Title, Body, and Footer
				pt.y += vm.yPadding;
	
				helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);
	
				// Titles
				this.drawTitle(pt, vm, ctx);
	
				// Body
				this.drawBody(pt, vm, ctx);
	
				// Footer
				this.drawFooter(pt, vm, ctx);
	
				helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);
	
				ctx.restore();
			}
		},
	
		/**
		 * Handle an event
		 * @private
		 * @param {IEvent} event - The event to handle
		 * @returns {boolean} true if the tooltip changed
		 */
		handleEvent: function(e) {
			var me = this;
			var options = me._options;
			var changed = false;
	
			me._lastActive = me._lastActive || [];
	
			// Find Active Elements for tooltips
			if (e.type === 'mouseout') {
				me._active = [];
			} else {
				me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
				if (options.reverse) {
					me._active.reverse();
				}
			}
	
			// Remember Last Actives
			changed = !helpers$1.arrayEquals(me._active, me._lastActive);
	
			// Only handle target event on tooltip change
			if (changed) {
				me._lastActive = me._active;
	
				if (options.enabled || options.custom) {
					me._eventPosition = {
						x: e.x,
						y: e.y
					};
	
					me.update(true);
					me.pivot();
				}
			}
	
			return changed;
		}
	});
	
	/**
	 * @namespace Chart.Tooltip.positioners
	 */
	var positioners_1 = positioners;
	
	var core_tooltip = exports$4;
	core_tooltip.positioners = positioners_1;
	
	var valueOrDefault$9 = helpers$1.valueOrDefault;
	
	core_defaults._set('global', {
		elements: {},
		events: [
			'mousemove',
			'mouseout',
			'click',
			'touchstart',
			'touchmove'
		],
		hover: {
			onHover: null,
			mode: 'nearest',
			intersect: true,
			animationDuration: 400
		},
		onClick: null,
		maintainAspectRatio: true,
		responsive: true,
		responsiveAnimationDuration: 0
	});
	
	/**
	 * Recursively merge the given config objects representing the `scales` option
	 * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
	 * returns a deep copy of the result, thus doesn't alter inputs.
	 */
	function mergeScaleConfig(/* config objects ... */) {
		return helpers$1.merge({}, [].slice.call(arguments), {
			merger: function(key, target, source, options) {
				if (key === 'xAxes' || key === 'yAxes') {
					var slen = source[key].length;
					var i, type, scale;
	
					if (!target[key]) {
						target[key] = [];
					}
	
					for (i = 0; i < slen; ++i) {
						scale = source[key][i];
						type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');
	
						if (i >= target[key].length) {
							target[key].push({});
						}
	
						if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
							// new/untyped scale or type changed: let's apply the new defaults
							// then merge source scale to correctly overwrite the defaults.
							helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
						} else {
							// scales type are the same
							helpers$1.merge(target[key][i], scale);
						}
					}
				} else {
					helpers$1._merger(key, target, source, options);
				}
			}
		});
	}
	
	/**
	 * Recursively merge the given config objects as the root options by handling
	 * default scale options for the `scales` and `scale` properties, then returns
	 * a deep copy of the result, thus doesn't alter inputs.
	 */
	function mergeConfig(/* config objects ... */) {
		return helpers$1.merge({}, [].slice.call(arguments), {
			merger: function(key, target, source, options) {
				var tval = target[key] || {};
				var sval = source[key];
	
				if (key === 'scales') {
					// scale config merging is complex. Add our own function here for that
					target[key] = mergeScaleConfig(tval, sval);
				} else if (key === 'scale') {
					// used in polar area & radar charts since there is only one scale
					target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
				} else {
					helpers$1._merger(key, target, source, options);
				}
			}
		});
	}
	
	function initConfig(config) {
		config = config || {};
	
		// Do NOT use mergeConfig for the data object because this method merges arrays
		// and so would change references to labels and datasets, preventing data updates.
		var data = config.data = config.data || {};
		data.datasets = data.datasets || [];
		data.labels = data.labels || [];
	
		config.options = mergeConfig(
			core_defaults.global,
			core_defaults[config.type],
			config.options || {});
	
		return config;
	}
	
	function updateConfig(chart) {
		var newOptions = chart.options;
	
		helpers$1.each(chart.scales, function(scale) {
			core_layouts.removeBox(chart, scale);
		});
	
		newOptions = mergeConfig(
			core_defaults.global,
			core_defaults[chart.config.type],
			newOptions);
	
		chart.options = chart.config.options = newOptions;
		chart.ensureScalesHaveIDs();
		chart.buildOrUpdateScales();
	
		// Tooltip
		chart.tooltip._options = newOptions.tooltips;
		chart.tooltip.initialize();
	}
	
	function nextAvailableScaleId(axesOpts, prefix, index) {
		var id;
		var hasId = function(obj) {
			return obj.id === id;
		};
	
		do {
			id = prefix + index++;
		} while (helpers$1.findIndex(axesOpts, hasId) >= 0);
	
		return id;
	}
	
	function positionIsHorizontal(position) {
		return position === 'top' || position === 'bottom';
	}
	
	function compare2Level(l1, l2) {
		return function(a, b) {
			return a[l1] === b[l1]
				? a[l2] - b[l2]
				: a[l1] - b[l1];
		};
	}
	
	var Chart = function(item, config) {
		this.construct(item, config);
		return this;
	};
	
	helpers$1.extend(Chart.prototype, /** @lends Chart */ {
		/**
		 * @private
		 */
		construct: function(item, config) {
			var me = this;
	
			config = initConfig(config);
	
			var context = platform.acquireContext(item, config);
			var canvas = context && context.canvas;
			var height = canvas && canvas.height;
			var width = canvas && canvas.width;
	
			me.id = helpers$1.uid();
			me.ctx = context;
			me.canvas = canvas;
			me.config = config;
			me.width = width;
			me.height = height;
			me.aspectRatio = height ? width / height : null;
			me.options = config.options;
			me._bufferedRender = false;
			me._layers = [];
	
			/**
			 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
			 * the "instance" still need to be defined since it might be called from plugins.
			 * @prop Chart#chart
			 * @deprecated since version 2.6.0
			 * @todo remove at version 3
			 * @private
			 */
			me.chart = me;
			me.controller = me; // chart.chart.controller #inception
	
			// Add the chart instance to the global namespace
			Chart.instances[me.id] = me;
	
			// Define alias to the config data: `chart.data === chart.config.data`
			Object.defineProperty(me, 'data', {
				get: function() {
					return me.config.data;
				},
				set: function(value) {
					me.config.data = value;
				}
			});
	
			if (!context || !canvas) {
				// The given item is not a compatible context2d element, let's return before finalizing
				// the chart initialization but after setting basic chart / controller properties that
				// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
				// https://github.com/chartjs/Chart.js/issues/2807
				console.error("Failed to create chart: can't acquire context from the given item");
				return;
			}
	
			me.initialize();
			me.update();
		},
	
		/**
		 * @private
		 */
		initialize: function() {
			var me = this;
	
			// Before init plugin notification
			core_plugins.notify(me, 'beforeInit');
	
			helpers$1.retinaScale(me, me.options.devicePixelRatio);
	
			me.bindEvents();
	
			if (me.options.responsive) {
				// Initial resize before chart draws (must be silent to preserve initial animations).
				me.resize(true);
			}
	
			me.initToolTip();
	
			// After init plugin notification
			core_plugins.notify(me, 'afterInit');
	
			return me;
		},
	
		clear: function() {
			helpers$1.canvas.clear(this);
			return this;
		},
	
		stop: function() {
			// Stops any current animation loop occurring
			core_animations.cancelAnimation(this);
			return this;
		},
	
		resize: function(silent) {
			var me = this;
			var options = me.options;
			var canvas = me.canvas;
			var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;
	
			// the canvas render width and height will be casted to integers so make sure that
			// the canvas display style uses the same integer values to avoid blurring effect.
	
			// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
			var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
			var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));
	
			if (me.width === newWidth && me.height === newHeight) {
				return;
			}
	
			canvas.width = me.width = newWidth;
			canvas.height = me.height = newHeight;
			canvas.style.width = newWidth + 'px';
			canvas.style.height = newHeight + 'px';
	
			helpers$1.retinaScale(me, options.devicePixelRatio);
	
			if (!silent) {
				// Notify any plugins about the resize
				var newSize = {width: newWidth, height: newHeight};
				core_plugins.notify(me, 'resize', [newSize]);
	
				// Notify of resize
				if (options.onResize) {
					options.onResize(me, newSize);
				}
	
				me.stop();
				me.update({
					duration: options.responsiveAnimationDuration
				});
			}
		},
	
		ensureScalesHaveIDs: function() {
			var options = this.options;
			var scalesOptions = options.scales || {};
			var scaleOptions = options.scale;
	
			helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
				if (!xAxisOptions.id) {
					xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
				}
			});
	
			helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
				if (!yAxisOptions.id) {
					yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
				}
			});
	
			if (scaleOptions) {
				scaleOptions.id = scaleOptions.id || 'scale';
			}
		},
	
		/**
		 * Builds a map of scale ID to scale object for future lookup.
		 */
		buildOrUpdateScales: function() {
			var me = this;
			var options = me.options;
			var scales = me.scales || {};
			var items = [];
			var updated = Object.keys(scales).reduce(function(obj, id) {
				obj[id] = false;
				return obj;
			}, {});
	
			if (options.scales) {
				items = items.concat(
					(options.scales.xAxes || []).map(function(xAxisOptions) {
						return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
					}),
					(options.scales.yAxes || []).map(function(yAxisOptions) {
						return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
					})
				);
			}
	
			if (options.scale) {
				items.push({
					options: options.scale,
					dtype: 'radialLinear',
					isDefault: true,
					dposition: 'chartArea'
				});
			}
	
			helpers$1.each(items, function(item) {
				var scaleOptions = item.options;
				var id = scaleOptions.id;
				var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);
	
				if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
					scaleOptions.position = item.dposition;
				}
	
				updated[id] = true;
				var scale = null;
				if (id in scales && scales[id].type === scaleType) {
					scale = scales[id];
					scale.options = scaleOptions;
					scale.ctx = me.ctx;
					scale.chart = me;
				} else {
					var scaleClass = core_scaleService.getScaleConstructor(scaleType);
					if (!scaleClass) {
						return;
					}
					scale = new scaleClass({
						id: id,
						type: scaleType,
						options: scaleOptions,
						ctx: me.ctx,
						chart: me
					});
					scales[scale.id] = scale;
				}
	
				scale.mergeTicksOptions();
	
				// TODO(SB): I think we should be able to remove this custom case (options.scale)
				// and consider it as a regular scale part of the "scales"" map only! This would
				// make the logic easier and remove some useless? custom code.
				if (item.isDefault) {
					me.scale = scale;
				}
			});
			// clear up discarded scales
			helpers$1.each(updated, function(hasUpdated, id) {
				if (!hasUpdated) {
					delete scales[id];
				}
			});
	
			me.scales = scales;
	
			core_scaleService.addScalesToLayout(this);
		},
	
		buildOrUpdateControllers: function() {
			var me = this;
			var newControllers = [];
			var datasets = me.data.datasets;
			var i, ilen;
	
			for (i = 0, ilen = datasets.length; i < ilen; i++) {
				var dataset = datasets[i];
				var meta = me.getDatasetMeta(i);
				var type = dataset.type || me.config.type;
	
				if (meta.type && meta.type !== type) {
					me.destroyDatasetMeta(i);
					meta = me.getDatasetMeta(i);
				}
				meta.type = type;
				meta.order = dataset.order || 0;
				meta.index = i;
	
				if (meta.controller) {
					meta.controller.updateIndex(i);
					meta.controller.linkScales();
				} else {
					var ControllerClass = controllers[meta.type];
					if (ControllerClass === undefined) {
						throw new Error('"' + meta.type + '" is not a chart type.');
					}
	
					meta.controller = new ControllerClass(me, i);
					newControllers.push(meta.controller);
				}
			}
	
			return newControllers;
		},
	
		/**
		 * Reset the elements of all datasets
		 * @private
		 */
		resetElements: function() {
			var me = this;
			helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
				me.getDatasetMeta(datasetIndex).controller.reset();
			}, me);
		},
	
		/**
		* Resets the chart back to it's state before the initial animation
		*/
		reset: function() {
			this.resetElements();
			this.tooltip.initialize();
		},
	
		update: function(config) {
			var me = this;
			var i, ilen;
	
			if (!config || typeof config !== 'object') {
				// backwards compatibility
				config = {
					duration: config,
					lazy: arguments[1]
				};
			}
	
			updateConfig(me);
	
			// plugins options references might have change, let's invalidate the cache
			// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
			core_plugins._invalidate(me);
	
			if (core_plugins.notify(me, 'beforeUpdate') === false) {
				return;
			}
	
			// In case the entire data object changed
			me.tooltip._data = me.data;
	
			// Make sure dataset controllers are updated and new controllers are reset
			var newControllers = me.buildOrUpdateControllers();
	
			// Make sure all dataset controllers have correct meta data counts
			for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
				me.getDatasetMeta(i).controller.buildOrUpdateElements();
			}
	
			me.updateLayout();
	
			// Can only reset the new controllers after the scales have been updated
			if (me.options.animation && me.options.animation.duration) {
				helpers$1.each(newControllers, function(controller) {
					controller.reset();
				});
			}
	
			me.updateDatasets();
	
			// Need to reset tooltip in case it is displayed with elements that are removed
			// after update.
			me.tooltip.initialize();
	
			// Last active contains items that were previously in the tooltip.
			// When we reset the tooltip, we need to clear it
			me.lastActive = [];
	
			// Do this before render so that any plugins that need final scale updates can use it
			core_plugins.notify(me, 'afterUpdate');
	
			me._layers.sort(compare2Level('z', '_idx'));
	
			if (me._bufferedRender) {
				me._bufferedRequest = {
					duration: config.duration,
					easing: config.easing,
					lazy: config.lazy
				};
			} else {
				me.render(config);
			}
		},
	
		/**
		 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
		 * hook, in which case, plugins will not be called on `afterLayout`.
		 * @private
		 */
		updateLayout: function() {
			var me = this;
	
			if (core_plugins.notify(me, 'beforeLayout') === false) {
				return;
			}
	
			core_layouts.update(this, this.width, this.height);
	
			me._layers = [];
			helpers$1.each(me.boxes, function(box) {
				// _configure is called twice, once in core.scale.update and once here.
				// Here the boxes are fully updated and at their final positions.
				if (box._configure) {
					box._configure();
				}
				me._layers.push.apply(me._layers, box._layers());
			}, me);
	
			me._layers.forEach(function(item, index) {
				item._idx = index;
			});
	
			/**
			 * Provided for backward compatibility, use `afterLayout` instead.
			 * @method IPlugin#afterScaleUpdate
			 * @deprecated since version 2.5.0
			 * @todo remove at version 3
			 * @private
			 */
			core_plugins.notify(me, 'afterScaleUpdate');
			core_plugins.notify(me, 'afterLayout');
		},
	
		/**
		 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
		 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
		 * @private
		 */
		updateDatasets: function() {
			var me = this;
	
			if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
				return;
			}
	
			for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
				me.updateDataset(i);
			}
	
			core_plugins.notify(me, 'afterDatasetsUpdate');
		},
	
		/**
		 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
		 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
		 * @private
		 */
		updateDataset: function(index) {
			var me = this;
			var meta = me.getDatasetMeta(index);
			var args = {
				meta: meta,
				index: index
			};
	
			if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
				return;
			}
	
			meta.controller._update();
	
			core_plugins.notify(me, 'afterDatasetUpdate', [args]);
		},
	
		render: function(config) {
			var me = this;
	
			if (!config || typeof config !== 'object') {
				// backwards compatibility
				config = {
					duration: config,
					lazy: arguments[1]
				};
			}
	
			var animationOptions = me.options.animation;
			var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
			var lazy = config.lazy;
	
			if (core_plugins.notify(me, 'beforeRender') === false) {
				return;
			}
	
			var onComplete = function(animation) {
				core_plugins.notify(me, 'afterRender');
				helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
			};
	
			if (animationOptions && duration) {
				var animation = new core_animation({
					numSteps: duration / 16.66, // 60 fps
					easing: config.easing || animationOptions.easing,
	
					render: function(chart, animationObject) {
						var easingFunction = helpers$1.easing.effects[animationObject.easing];
						var currentStep = animationObject.currentStep;
						var stepDecimal = currentStep / animationObject.numSteps;
	
						chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
					},
	
					onAnimationProgress: animationOptions.onProgress,
					onAnimationComplete: onComplete
				});
	
				core_animations.addAnimation(me, animation, duration, lazy);
			} else {
				me.draw();
	
				// See https://github.com/chartjs/Chart.js/issues/3781
				onComplete(new core_animation({numSteps: 0, chart: me}));
			}
	
			return me;
		},
	
		draw: function(easingValue) {
			var me = this;
			var i, layers;
	
			me.clear();
	
			if (helpers$1.isNullOrUndef(easingValue)) {
				easingValue = 1;
			}
	
			me.transition(easingValue);
	
			if (me.width <= 0 || me.height <= 0) {
				return;
			}
	
			if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
				return;
			}
	
			// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
			// currently be part of layers. Instead, we draw
			// layers <= 0 before(default, backward compat), and the rest after
			layers = me._layers;
			for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
				layers[i].draw(me.chartArea);
			}
	
			me.drawDatasets(easingValue);
	
			// Rest of layers
			for (; i < layers.length; ++i) {
				layers[i].draw(me.chartArea);
			}
	
			me._drawTooltip(easingValue);
	
			core_plugins.notify(me, 'afterDraw', [easingValue]);
		},
	
		/**
		 * @private
		 */
		transition: function(easingValue) {
			var me = this;
	
			for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
				if (me.isDatasetVisible(i)) {
					me.getDatasetMeta(i).controller.transition(easingValue);
				}
			}
	
			me.tooltip.transition(easingValue);
		},
	
		/**
		 * @private
		 */
		_getSortedDatasetMetas: function(filterVisible) {
			var me = this;
			var datasets = me.data.datasets || [];
			var result = [];
			var i, ilen;
	
			for (i = 0, ilen = datasets.length; i < ilen; ++i) {
				if (!filterVisible || me.isDatasetVisible(i)) {
					result.push(me.getDatasetMeta(i));
				}
			}
	
			result.sort(compare2Level('order', 'index'));
	
			return result;
		},
	
		/**
		 * @private
		 */
		_getSortedVisibleDatasetMetas: function() {
			return this._getSortedDatasetMetas(true);
		},
	
		/**
		 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
		 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
		 * @private
		 */
		drawDatasets: function(easingValue) {
			var me = this;
			var metasets, i;
	
			if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
				return;
			}
	
			metasets = me._getSortedVisibleDatasetMetas();
			for (i = metasets.length - 1; i >= 0; --i) {
				me.drawDataset(metasets[i], easingValue);
			}
	
			core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
		},
	
		/**
		 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
		 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
		 * @private
		 */
		drawDataset: function(meta, easingValue) {
			var me = this;
			var args = {
				meta: meta,
				index: meta.index,
				easingValue: easingValue
			};
	
			if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
				return;
			}
	
			meta.controller.draw(easingValue);
	
			core_plugins.notify(me, 'afterDatasetDraw', [args]);
		},
	
		/**
		 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
		 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
		 * @private
		 */
		_drawTooltip: function(easingValue) {
			var me = this;
			var tooltip = me.tooltip;
			var args = {
				tooltip: tooltip,
				easingValue: easingValue
			};
	
			if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
				return;
			}
	
			tooltip.draw();
	
			core_plugins.notify(me, 'afterTooltipDraw', [args]);
		},
	
		/**
		 * Get the single element that was clicked on
		 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
		 */
		getElementAtEvent: function(e) {
			return core_interaction.modes.single(this, e);
		},
	
		getElementsAtEvent: function(e) {
			return core_interaction.modes.label(this, e, {intersect: true});
		},
	
		getElementsAtXAxis: function(e) {
			return core_interaction.modes['x-axis'](this, e, {intersect: true});
		},
	
		getElementsAtEventForMode: function(e, mode, options) {
			var method = core_interaction.modes[mode];
			if (typeof method === 'function') {
				return method(this, e, options);
			}
	
			return [];
		},
	
		getDatasetAtEvent: function(e) {
			return core_interaction.modes.dataset(this, e, {intersect: true});
		},
	
		getDatasetMeta: function(datasetIndex) {
			var me = this;
			var dataset = me.data.datasets[datasetIndex];
			if (!dataset._meta) {
				dataset._meta = {};
			}
	
			var meta = dataset._meta[me.id];
			if (!meta) {
				meta = dataset._meta[me.id] = {
					type: null,
					data: [],
					dataset: null,
					controller: null,
					hidden: null,			// See isDatasetVisible() comment
					xAxisID: null,
					yAxisID: null,
					order: dataset.order || 0,
					index: datasetIndex
				};
			}
	
			return meta;
		},
	
		getVisibleDatasetCount: function() {
			var count = 0;
			for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
				if (this.isDatasetVisible(i)) {
					count++;
				}
			}
			return count;
		},
	
		isDatasetVisible: function(datasetIndex) {
			var meta = this.getDatasetMeta(datasetIndex);
	
			// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
			// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
			return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
		},
	
		generateLegend: function() {
			return this.options.legendCallback(this);
		},
	
		/**
		 * @private
		 */
		destroyDatasetMeta: function(datasetIndex) {
			var id = this.id;
			var dataset = this.data.datasets[datasetIndex];
			var meta = dataset._meta && dataset._meta[id];
	
			if (meta) {
				meta.controller.destroy();
				delete dataset._meta[id];
			}
		},
	
		destroy: function() {
			var me = this;
			var canvas = me.canvas;
			var i, ilen;
	
			me.stop();
	
			// dataset controllers need to cleanup associated data
			for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
				me.destroyDatasetMeta(i);
			}
	
			if (canvas) {
				me.unbindEvents();
				helpers$1.canvas.clear(me);
				platform.releaseContext(me.ctx);
				me.canvas = null;
				me.ctx = null;
			}
	
			core_plugins.notify(me, 'destroy');
	
			delete Chart.instances[me.id];
		},
	
		toBase64Image: function() {
			return this.canvas.toDataURL.apply(this.canvas, arguments);
		},
	
		initToolTip: function() {
			var me = this;
			me.tooltip = new core_tooltip({
				_chart: me,
				_chartInstance: me, // deprecated, backward compatibility
				_data: me.data,
				_options: me.options.tooltips
			}, me);
		},
	
		/**
		 * @private
		 */
		bindEvents: function() {
			var me = this;
			var listeners = me._listeners = {};
			var listener = function() {
				me.eventHandler.apply(me, arguments);
			};
	
			helpers$1.each(me.options.events, function(type) {
				platform.addEventListener(me, type, listener);
				listeners[type] = listener;
			});
	
			// Elements used to detect size change should not be injected for non responsive charts.
			// See https://github.com/chartjs/Chart.js/issues/2210
			if (me.options.responsive) {
				listener = function() {
					me.resize();
				};
	
				platform.addEventListener(me, 'resize', listener);
				listeners.resize = listener;
			}
		},
	
		/**
		 * @private
		 */
		unbindEvents: function() {
			var me = this;
			var listeners = me._listeners;
			if (!listeners) {
				return;
			}
	
			delete me._listeners;
			helpers$1.each(listeners, function(listener, type) {
				platform.removeEventListener(me, type, listener);
			});
		},
	
		updateHoverStyle: function(elements, mode, enabled) {
			var prefix = enabled ? 'set' : 'remove';
			var element, i, ilen;
	
			for (i = 0, ilen = elements.length; i < ilen; ++i) {
				element = elements[i];
				if (element) {
					this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
				}
			}
	
			if (mode === 'dataset') {
				this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
			}
		},
	
		/**
		 * @private
		 */
		eventHandler: function(e) {
			var me = this;
			var tooltip = me.tooltip;
	
			if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
				return;
			}
	
			// Buffer any update calls so that renders do not occur
			me._bufferedRender = true;
			me._bufferedRequest = null;
	
			var changed = me.handleEvent(e);
			// for smooth tooltip animations issue #4989
			// the tooltip should be the source of change
			// Animation check workaround:
			// tooltip._start will be null when tooltip isn't animating
			if (tooltip) {
				changed = tooltip._start
					? tooltip.handleEvent(e)
					: changed | tooltip.handleEvent(e);
			}
	
			core_plugins.notify(me, 'afterEvent', [e]);
	
			var bufferedRequest = me._bufferedRequest;
			if (bufferedRequest) {
				// If we have an update that was triggered, we need to do a normal render
				me.render(bufferedRequest);
			} else if (changed && !me.animating) {
				// If entering, leaving, or changing elements, animate the change via pivot
				me.stop();
	
				// We only need to render at this point. Updating will cause scales to be
				// recomputed generating flicker & using more memory than necessary.
				me.render({
					duration: me.options.hover.animationDuration,
					lazy: true
				});
			}
	
			me._bufferedRender = false;
			me._bufferedRequest = null;
	
			return me;
		},
	
		/**
		 * Handle an event
		 * @private
		 * @param {IEvent} event the event to handle
		 * @return {boolean} true if the chart needs to re-render
		 */
		handleEvent: function(e) {
			var me = this;
			var options = me.options || {};
			var hoverOptions = options.hover;
			var changed = false;
	
			me.lastActive = me.lastActive || [];
	
			// Find Active Elements for hover and tooltips
			if (e.type === 'mouseout') {
				me.active = [];
			} else {
				me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
			}
	
			// Invoke onHover hook
			// Need to call with native event here to not break backwards compatibility
			helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);
	
			if (e.type === 'mouseup' || e.type === 'click') {
				if (options.onClick) {
					// Use e.native here for backwards compatibility
					options.onClick.call(me, e.native, me.active);
				}
			}
	
			// Remove styling for last active (even if it may still be active)
			if (me.lastActive.length) {
				me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
			}
	
			// Built in hover styling
			if (me.active.length && hoverOptions.mode) {
				me.updateHoverStyle(me.active, hoverOptions.mode, true);
			}
	
			changed = !helpers$1.arrayEquals(me.active, me.lastActive);
	
			// Remember Last Actives
			me.lastActive = me.active;
	
			return changed;
		}
	});
	
	/**
	 * NOTE(SB) We actually don't use this container anymore but we need to keep it
	 * for backward compatibility. Though, it can still be useful for plugins that
	 * would need to work on multiple charts?!
	 */
	Chart.instances = {};
	
	var core_controller = Chart;
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, use Chart instead.
	 * @class Chart.Controller
	 * @deprecated since version 2.6
	 * @todo remove at version 3
	 * @private
	 */
	Chart.Controller = Chart;
	
	/**
	 * Provided for backward compatibility, not available anymore.
	 * @namespace Chart
	 * @deprecated since version 2.8
	 * @todo remove at version 3
	 * @private
	 */
	Chart.types = {};
	
	/**
	 * Provided for backward compatibility, not available anymore.
	 * @namespace Chart.helpers.configMerge
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers$1.configMerge = mergeConfig;
	
	/**
	 * Provided for backward compatibility, not available anymore.
	 * @namespace Chart.helpers.scaleMerge
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	helpers$1.scaleMerge = mergeScaleConfig;
	
	var core_helpers = function() {
	
		// -- Basic js utility methods
	
		helpers$1.where = function(collection, filterCallback) {
			if (helpers$1.isArray(collection) && Array.prototype.filter) {
				return collection.filter(filterCallback);
			}
			var filtered = [];
	
			helpers$1.each(collection, function(item) {
				if (filterCallback(item)) {
					filtered.push(item);
				}
			});
	
			return filtered;
		};
		helpers$1.findIndex = Array.prototype.findIndex ?
			function(array, callback, scope) {
				return array.findIndex(callback, scope);
			} :
			function(array, callback, scope) {
				scope = scope === undefined ? array : scope;
				for (var i = 0, ilen = array.length; i < ilen; ++i) {
					if (callback.call(scope, array[i], i, array)) {
						return i;
					}
				}
				return -1;
			};
		helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to start of the array
			if (helpers$1.isNullOrUndef(startIndex)) {
				startIndex = -1;
			}
			for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
		helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to end of the array
			if (helpers$1.isNullOrUndef(startIndex)) {
				startIndex = arrayToSearch.length;
			}
			for (var i = startIndex - 1; i >= 0; i--) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
	
		// -- Math methods
		helpers$1.isNumber = function(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		};
		helpers$1.almostEquals = function(x, y, epsilon) {
			return Math.abs(x - y) < epsilon;
		};
		helpers$1.almostWhole = function(x, epsilon) {
			var rounded = Math.round(x);
			return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
		};
		helpers$1.max = function(array) {
			return array.reduce(function(max, value) {
				if (!isNaN(value)) {
					return Math.max(max, value);
				}
				return max;
			}, Number.NEGATIVE_INFINITY);
		};
		helpers$1.min = function(array) {
			return array.reduce(function(min, value) {
				if (!isNaN(value)) {
					return Math.min(min, value);
				}
				return min;
			}, Number.POSITIVE_INFINITY);
		};
		helpers$1.sign = Math.sign ?
			function(x) {
				return Math.sign(x);
			} :
			function(x) {
				x = +x; // convert to a number
				if (x === 0 || isNaN(x)) {
					return x;
				}
				return x > 0 ? 1 : -1;
			};
		helpers$1.toRadians = function(degrees) {
			return degrees * (Math.PI / 180);
		};
		helpers$1.toDegrees = function(radians) {
			return radians * (180 / Math.PI);
		};
	
		/**
		 * Returns the number of decimal places
		 * i.e. the number of digits after the decimal point, of the value of this Number.
		 * @param {number} x - A number.
		 * @returns {number} The number of decimal places.
		 * @private
		 */
		helpers$1._decimalPlaces = function(x) {
			if (!helpers$1.isFinite(x)) {
				return;
			}
			var e = 1;
			var p = 0;
			while (Math.round(x * e) / e !== x) {
				e *= 10;
				p++;
			}
			return p;
		};
	
		// Gets the angle from vertical upright to the point about a centre.
		helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
			var distanceFromXCenter = anglePoint.x - centrePoint.x;
			var distanceFromYCenter = anglePoint.y - centrePoint.y;
			var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
	
			var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
	
			if (angle < (-0.5 * Math.PI)) {
				angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
			}
	
			return {
				angle: angle,
				distance: radialDistanceFromCenter
			};
		};
		helpers$1.distanceBetweenPoints = function(pt1, pt2) {
			return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
		};
	
		/**
		 * Provided for backward compatibility, not available anymore
		 * @function Chart.helpers.aliasPixel
		 * @deprecated since version 2.8.0
		 * @todo remove at version 3
		 */
		helpers$1.aliasPixel = function(pixelWidth) {
			return (pixelWidth % 2 === 0) ? 0 : 0.5;
		};
	
		/**
		 * Returns the aligned pixel value to avoid anti-aliasing blur
		 * @param {Chart} chart - The chart instance.
		 * @param {number} pixel - A pixel value.
		 * @param {number} width - The width of the element.
		 * @returns {number} The aligned pixel value.
		 * @private
		 */
		helpers$1._alignPixel = function(chart, pixel, width) {
			var devicePixelRatio = chart.currentDevicePixelRatio;
			var halfWidth = width / 2;
			return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
		};
	
		helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
			// Props to Rob Spencer at scaled innovation for his post on splining between points
			// http://scaledinnovation.com/analytics/splines/aboutSplines.html
	
			// This function must also respect "skipped" points
	
			var previous = firstPoint.skip ? middlePoint : firstPoint;
			var current = middlePoint;
			var next = afterPoint.skip ? middlePoint : afterPoint;
	
			var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
			var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
	
			var s01 = d01 / (d01 + d12);
			var s12 = d12 / (d01 + d12);
	
			// If all points are the same, s01 & s02 will be inf
			s01 = isNaN(s01) ? 0 : s01;
			s12 = isNaN(s12) ? 0 : s12;
	
			var fa = t * s01; // scaling factor for triangle Ta
			var fb = t * s12;
	
			return {
				previous: {
					x: current.x - fa * (next.x - previous.x),
					y: current.y - fa * (next.y - previous.y)
				},
				next: {
					x: current.x + fb * (next.x - previous.x),
					y: current.y + fb * (next.y - previous.y)
				}
			};
		};
		helpers$1.EPSILON = Number.EPSILON || 1e-14;
		helpers$1.splineCurveMonotone = function(points) {
			// This function calculates Bézier control points in a similar way than |splineCurve|,
			// but preserves monotonicity of the provided data and ensures no local extremums are added
			// between the dataset discrete points due to the interpolation.
			// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
	
			var pointsWithTangents = (points || []).map(function(point) {
				return {
					model: point._model,
					deltaK: 0,
					mK: 0
				};
			});
	
			// Calculate slopes (deltaK) and initialize tangents (mK)
			var pointsLen = pointsWithTangents.length;
			var i, pointBefore, pointCurrent, pointAfter;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}
	
				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointAfter && !pointAfter.model.skip) {
					var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);
	
					// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
					pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
				}
	
				if (!pointBefore || pointBefore.model.skip) {
					pointCurrent.mK = pointCurrent.deltaK;
				} else if (!pointAfter || pointAfter.model.skip) {
					pointCurrent.mK = pointBefore.deltaK;
				} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
					pointCurrent.mK = 0;
				} else {
					pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
				}
			}
	
			// Adjust tangents to ensure monotonic properties
			var alphaK, betaK, tauK, squaredMagnitude;
			for (i = 0; i < pointsLen - 1; ++i) {
				pointCurrent = pointsWithTangents[i];
				pointAfter = pointsWithTangents[i + 1];
				if (pointCurrent.model.skip || pointAfter.model.skip) {
					continue;
				}
	
				if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
					pointCurrent.mK = pointAfter.mK = 0;
					continue;
				}
	
				alphaK = pointCurrent.mK / pointCurrent.deltaK;
				betaK = pointAfter.mK / pointCurrent.deltaK;
				squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
				if (squaredMagnitude <= 9) {
					continue;
				}
	
				tauK = 3 / Math.sqrt(squaredMagnitude);
				pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
				pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
			}
	
			// Compute control points
			var deltaX;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}
	
				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointBefore && !pointBefore.model.skip) {
					deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
					pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
					pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
				}
				if (pointAfter && !pointAfter.model.skip) {
					deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
					pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
					pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
				}
			}
		};
		helpers$1.nextItem = function(collection, index, loop) {
			if (loop) {
				return index >= collection.length - 1 ? collection[0] : collection[index + 1];
			}
			return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
		};
		helpers$1.previousItem = function(collection, index, loop) {
			if (loop) {
				return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
			}
			return index <= 0 ? collection[0] : collection[index - 1];
		};
		// Implementation of the nice number algorithm used in determining where axis labels will go
		helpers$1.niceNum = function(range, round) {
			var exponent = Math.floor(helpers$1.log10(range));
			var fraction = range / Math.pow(10, exponent);
			var niceFraction;
	
			if (round) {
				if (fraction < 1.5) {
					niceFraction = 1;
				} else if (fraction < 3) {
					niceFraction = 2;
				} else if (fraction < 7) {
					niceFraction = 5;
				} else {
					niceFraction = 10;
				}
			} else if (fraction <= 1.0) {
				niceFraction = 1;
			} else if (fraction <= 2) {
				niceFraction = 2;
			} else if (fraction <= 5) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
	
			return niceFraction * Math.pow(10, exponent);
		};
		// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
		helpers$1.requestAnimFrame = (function() {
			if (typeof window === 'undefined') {
				return function(callback) {
					callback();
				};
			}
			return window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				window.oRequestAnimationFrame ||
				window.msRequestAnimationFrame ||
				function(callback) {
					return window.setTimeout(callback, 1000 / 60);
				};
		}());
		// -- DOM methods
		helpers$1.getRelativePosition = function(evt, chart) {
			var mouseX, mouseY;
			var e = evt.originalEvent || evt;
			var canvas = evt.target || evt.srcElement;
			var boundingRect = canvas.getBoundingClientRect();
	
			var touches = e.touches;
			if (touches && touches.length > 0) {
				mouseX = touches[0].clientX;
				mouseY = touches[0].clientY;
	
			} else {
				mouseX = e.clientX;
				mouseY = e.clientY;
			}
	
			// Scale mouse coordinates into canvas coordinates
			// by following the pattern laid out by 'jerryj' in the comments of
			// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
			var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
			var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
			var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
			var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
			var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
			var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
	
			// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
			// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
			mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
			mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);
	
			return {
				x: mouseX,
				y: mouseY
			};
	
		};
	
		// Private helper function to convert max-width/max-height values that may be percentages into a number
		function parseMaxStyle(styleValue, node, parentProperty) {
			var valueInPixels;
			if (typeof styleValue === 'string') {
				valueInPixels = parseInt(styleValue, 10);
	
				if (styleValue.indexOf('%') !== -1) {
					// percentage * size in dimension
					valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
				}
			} else {
				valueInPixels = styleValue;
			}
	
			return valueInPixels;
		}
	
		/**
		 * Returns if the given value contains an effective constraint.
		 * @private
		 */
		function isConstrainedValue(value) {
			return value !== undefined && value !== null && value !== 'none';
		}
	
		/**
		 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
		 * @param {HTMLElement} domNode - the node to check the constraint on
		 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
		 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
		 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
		 */
		function getConstraintDimension(domNode, maxStyle, percentageProperty) {
			var view = document.defaultView;
			var parentNode = helpers$1._getParentNode(domNode);
			var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
			var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
			var hasCNode = isConstrainedValue(constrainedNode);
			var hasCContainer = isConstrainedValue(constrainedContainer);
			var infinity = Number.POSITIVE_INFINITY;
	
			if (hasCNode || hasCContainer) {
				return Math.min(
					hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
					hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
			}
	
			return 'none';
		}
		// returns Number or undefined if no constraint
		helpers$1.getConstraintWidth = function(domNode) {
			return getConstraintDimension(domNode, 'max-width', 'clientWidth');
		};
		// returns Number or undefined if no constraint
		helpers$1.getConstraintHeight = function(domNode) {
			return getConstraintDimension(domNode, 'max-height', 'clientHeight');
		};
		/**
		 * @private
		  */
		helpers$1._calculatePadding = function(container, padding, parentDimension) {
			padding = helpers$1.getStyle(container, padding);
	
			return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
		};
		/**
		 * @private
		 */
		helpers$1._getParentNode = function(domNode) {
			var parent = domNode.parentNode;
			if (parent && parent.toString() === '[object ShadowRoot]') {
				parent = parent.host;
			}
			return parent;
		};
		helpers$1.getMaximumWidth = function(domNode) {
			var container = helpers$1._getParentNode(domNode);
			if (!container) {
				return domNode.clientWidth;
			}
	
			var clientWidth = container.clientWidth;
			var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
			var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);
	
			var w = clientWidth - paddingLeft - paddingRight;
			var cw = helpers$1.getConstraintWidth(domNode);
			return isNaN(cw) ? w : Math.min(w, cw);
		};
		helpers$1.getMaximumHeight = function(domNode) {
			var container = helpers$1._getParentNode(domNode);
			if (!container) {
				return domNode.clientHeight;
			}
	
			var clientHeight = container.clientHeight;
			var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
			var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);
	
			var h = clientHeight - paddingTop - paddingBottom;
			var ch = helpers$1.getConstraintHeight(domNode);
			return isNaN(ch) ? h : Math.min(h, ch);
		};
		helpers$1.getStyle = function(el, property) {
			return el.currentStyle ?
				el.currentStyle[property] :
				document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
		};
		helpers$1.retinaScale = function(chart, forceRatio) {
			var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
			if (pixelRatio === 1) {
				return;
			}
	
			var canvas = chart.canvas;
			var height = chart.height;
			var width = chart.width;
	
			canvas.height = height * pixelRatio;
			canvas.width = width * pixelRatio;
			chart.ctx.scale(pixelRatio, pixelRatio);
	
			// If no style has been set on the canvas, the render size is used as display size,
			// making the chart visually bigger, so let's enforce it to the "correct" values.
			// See https://github.com/chartjs/Chart.js/issues/3575
			if (!canvas.style.height && !canvas.style.width) {
				canvas.style.height = height + 'px';
				canvas.style.width = width + 'px';
			}
		};
		// -- Canvas methods
		helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
			return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
		};
		helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
			cache = cache || {};
			var data = cache.data = cache.data || {};
			var gc = cache.garbageCollect = cache.garbageCollect || [];
	
			if (cache.font !== font) {
				data = cache.data = {};
				gc = cache.garbageCollect = [];
				cache.font = font;
			}
	
			ctx.font = font;
			var longest = 0;
			var ilen = arrayOfThings.length;
			var i, j, jlen, thing, nestedThing;
			for (i = 0; i < ilen; i++) {
				thing = arrayOfThings[i];
	
				// Undefined strings and arrays should not be measured
				if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
					longest = helpers$1.measureText(ctx, data, gc, longest, thing);
				} else if (helpers$1.isArray(thing)) {
					// if it is an array lets measure each element
					// to do maybe simplify this function a bit so we can do this more recursively?
					for (j = 0, jlen = thing.length; j < jlen; j++) {
						nestedThing = thing[j];
						// Undefined strings and arrays should not be measured
						if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
							longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
						}
					}
				}
			}
	
			var gcLen = gc.length / 2;
			if (gcLen > arrayOfThings.length) {
				for (i = 0; i < gcLen; i++) {
					delete data[gc[i]];
				}
				gc.splice(0, gcLen);
			}
			return longest;
		};
		helpers$1.measureText = function(ctx, data, gc, longest, string) {
			var textWidth = data[string];
			if (!textWidth) {
				textWidth = data[string] = ctx.measureText(string).width;
				gc.push(string);
			}
			if (textWidth > longest) {
				longest = textWidth;
			}
			return longest;
		};
	
		/**
		 * @deprecated
		 */
		helpers$1.numberOfLabelLines = function(arrayOfThings) {
			var numberOfLines = 1;
			helpers$1.each(arrayOfThings, function(thing) {
				if (helpers$1.isArray(thing)) {
					if (thing.length > numberOfLines) {
						numberOfLines = thing.length;
					}
				}
			});
			return numberOfLines;
		};
	
		helpers$1.color = !chartjsColor ?
			function(value) {
				console.error('Color.js not found!');
				return value;
			} :
			function(value) {
				/* global CanvasGradient */
				if (value instanceof CanvasGradient) {
					value = core_defaults.global.defaultColor;
				}
	
				return chartjsColor(value);
			};
	
		helpers$1.getHoverColor = function(colorValue) {
			/* global CanvasPattern */
			return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
				colorValue :
				helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
		};
	};
	
	function abstract() {
		throw new Error(
			'This method is not implemented: either no adapter can ' +
			'be found or an incomplete integration was provided.'
		);
	}
	
	/**
	 * Date adapter (current used by the time scale)
	 * @namespace Chart._adapters._date
	 * @memberof Chart._adapters
	 * @private
	 */
	
	/**
	 * Currently supported unit string values.
	 * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
	 * @memberof Chart._adapters._date
	 * @name Unit
	 */
	
	/**
	 * @class
	 */
	function DateAdapter(options) {
		this.options = options || {};
	}
	
	helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
		/**
		 * Returns a map of time formats for the supported formatting units defined
		 * in Unit as well as 'datetime' representing a detailed date/time string.
		 * @returns {{string: string}}
		 */
		formats: abstract,
	
		/**
		 * Parses the given `value` and return the associated timestamp.
		 * @param {any} value - the value to parse (usually comes from the data)
		 * @param {string} [format] - the expected data format
		 * @returns {(number|null)}
		 * @function
		 */
		parse: abstract,
	
		/**
		 * Returns the formatted date in the specified `format` for a given `timestamp`.
		 * @param {number} timestamp - the timestamp to format
		 * @param {string} format - the date/time token
		 * @return {string}
		 * @function
		 */
		format: abstract,
	
		/**
		 * Adds the specified `amount` of `unit` to the given `timestamp`.
		 * @param {number} timestamp - the input timestamp
		 * @param {number} amount - the amount to add
		 * @param {Unit} unit - the unit as string
		 * @return {number}
		 * @function
		 */
		add: abstract,
	
		/**
		 * Returns the number of `unit` between the given timestamps.
		 * @param {number} max - the input timestamp (reference)
		 * @param {number} min - the timestamp to substract
		 * @param {Unit} unit - the unit as string
		 * @return {number}
		 * @function
		 */
		diff: abstract,
	
		/**
		 * Returns start of `unit` for the given `timestamp`.
		 * @param {number} timestamp - the input timestamp
		 * @param {Unit} unit - the unit as string
		 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
		 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
		 * @function
		 */
		startOf: abstract,
	
		/**
		 * Returns end of `unit` for the given `timestamp`.
		 * @param {number} timestamp - the input timestamp
		 * @param {Unit} unit - the unit as string
		 * @function
		 */
		endOf: abstract,
	
		// DEPRECATIONS
	
		/**
		 * Provided for backward compatibility for scale.getValueForPixel(),
		 * this method should be overridden only by the moment adapter.
		 * @deprecated since version 2.8.0
		 * @todo remove at version 3
		 * @private
		 */
		_create: function(value) {
			return value;
		}
	});
	
	DateAdapter.override = function(members) {
		helpers$1.extend(DateAdapter.prototype, members);
	};
	
	var _date = DateAdapter;
	
	var core_adapters = {
		_date: _date
	};
	
	/**
	 * Namespace to hold static tick generation functions
	 * @namespace Chart.Ticks
	 */
	var core_ticks = {
		/**
		 * Namespace to hold formatters for different types of ticks
		 * @namespace Chart.Ticks.formatters
		 */
		formatters: {
			/**
			 * Formatter for value labels
			 * @method Chart.Ticks.formatters.values
			 * @param value the value to display
			 * @return {string|string[]} the label to display
			 */
			values: function(value) {
				return helpers$1.isArray(value) ? value : '' + value;
			},
	
			/**
			 * Formatter for linear numeric ticks
			 * @method Chart.Ticks.formatters.linear
			 * @param tickValue {number} the value to be formatted
			 * @param index {number} the position of the tickValue parameter in the ticks array
			 * @param ticks {number[]} the list of ticks being converted
			 * @return {string} string representation of the tickValue parameter
			 */
			linear: function(tickValue, index, ticks) {
				// If we have lots of ticks, don't use the ones
				var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
	
				// If we have a number like 2.5 as the delta, figure out how many decimal places we need
				if (Math.abs(delta) > 1) {
					if (tickValue !== Math.floor(tickValue)) {
						// not an integer
						delta = tickValue - Math.floor(tickValue);
					}
				}
	
				var logDelta = helpers$1.log10(Math.abs(delta));
				var tickString = '';
	
				if (tickValue !== 0) {
					var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
					if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
						var logTick = helpers$1.log10(Math.abs(tickValue));
						var numExponential = Math.floor(logTick) - Math.floor(logDelta);
						numExponential = Math.max(Math.min(numExponential, 20), 0);
						tickString = tickValue.toExponential(numExponential);
					} else {
						var numDecimal = -1 * Math.floor(logDelta);
						numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
						tickString = tickValue.toFixed(numDecimal);
					}
				} else {
					tickString = '0'; // never show decimal places for 0
				}
	
				return tickString;
			},
	
			logarithmic: function(tickValue, index, ticks) {
				var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));
	
				if (tickValue === 0) {
					return '0';
				} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
					return tickValue.toExponential();
				}
				return '';
			}
		}
	};
	
	var isArray = helpers$1.isArray;
	var isNullOrUndef = helpers$1.isNullOrUndef;
	var valueOrDefault$a = helpers$1.valueOrDefault;
	var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;
	
	core_defaults._set('scale', {
		display: true,
		position: 'left',
		offset: false,
	
		// grid line settings
		gridLines: {
			display: true,
			color: 'rgba(0,0,0,0.1)',
			lineWidth: 1,
			drawBorder: true,
			drawOnChartArea: true,
			drawTicks: true,
			tickMarkLength: 10,
			zeroLineWidth: 1,
			zeroLineColor: 'rgba(0,0,0,0.25)',
			zeroLineBorderDash: [],
			zeroLineBorderDashOffset: 0.0,
			offsetGridLines: false,
			borderDash: [],
			borderDashOffset: 0.0
		},
	
		// scale label
		scaleLabel: {
			// display property
			display: false,
	
			// actual label
			labelString: '',
	
			// top/bottom padding
			padding: {
				top: 4,
				bottom: 4
			}
		},
	
		// label settings
		ticks: {
			beginAtZero: false,
			minRotation: 0,
			maxRotation: 50,
			mirror: false,
			padding: 0,
			reverse: false,
			display: true,
			autoSkip: true,
			autoSkipPadding: 0,
			labelOffset: 0,
			// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
			callback: core_ticks.formatters.values,
			minor: {},
			major: {}
		}
	});
	
	/** Returns a new array containing numItems from arr */
	function sample(arr, numItems) {
		var result = [];
		var increment = arr.length / numItems;
		var i = 0;
		var len = arr.length;
	
		for (; i < len; i += increment) {
			result.push(arr[Math.floor(i)]);
		}
		return result;
	}
	
	function getPixelForGridLine(scale, index, offsetGridLines) {
		var length = scale.getTicks().length;
		var validIndex = Math.min(index, length - 1);
		var lineValue = scale.getPixelForTick(validIndex);
		var start = scale._startPixel;
		var end = scale._endPixel;
		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
		var offset;
	
		if (offsetGridLines) {
			if (length === 1) {
				offset = Math.max(lineValue - start, end - lineValue);
			} else if (index === 0) {
				offset = (scale.getPixelForTick(1) - lineValue) / 2;
			} else {
				offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
			}
			lineValue += validIndex < index ? offset : -offset;
	
			// Return undefined if the pixel is out of the range
			if (lineValue < start - epsilon || lineValue > end + epsilon) {
				return;
			}
		}
		return lineValue;
	}
	
	function garbageCollect(caches, length) {
		helpers$1.each(caches, function(cache) {
			var gc = cache.gc;
			var gcLen = gc.length / 2;
			var i;
			if (gcLen > length) {
				for (i = 0; i < gcLen; ++i) {
					delete cache.data[gc[i]];
				}
				gc.splice(0, gcLen);
			}
		});
	}
	
	/**
	 * Returns {width, height, offset} objects for the first, last, widest, highest tick
	 * labels where offset indicates the anchor point offset from the top in pixels.
	 */
	function computeLabelSizes(ctx, tickFonts, ticks, caches) {
		var length = ticks.length;
		var widths = [];
		var heights = [];
		var offsets = [];
		var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;
	
		for (i = 0; i < length; ++i) {
			label = ticks[i].label;
			tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
			ctx.font = fontString = tickFont.string;
			cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
			lineHeight = tickFont.lineHeight;
			width = height = 0;
			// Undefined labels and arrays should not be measured
			if (!isNullOrUndef(label) && !isArray(label)) {
				width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
				height = lineHeight;
			} else if (isArray(label)) {
				// if it is an array let's measure each element
				for (j = 0, jlen = label.length; j < jlen; ++j) {
					nestedLabel = label[j];
					// Undefined labels and arrays should not be measured
					if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
						width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
						height += lineHeight;
					}
				}
			}
			widths.push(width);
			heights.push(height);
			offsets.push(lineHeight / 2);
		}
		garbageCollect(caches, length);
	
		widest = widths.indexOf(Math.max.apply(null, widths));
		highest = heights.indexOf(Math.max.apply(null, heights));
	
		function valueAt(idx) {
			return {
				width: widths[idx] || 0,
				height: heights[idx] || 0,
				offset: offsets[idx] || 0
			};
		}
	
		return {
			first: valueAt(0),
			last: valueAt(length - 1),
			widest: valueAt(widest),
			highest: valueAt(highest)
		};
	}
	
	function getTickMarkLength(options) {
		return options.drawTicks ? options.tickMarkLength : 0;
	}
	
	function getScaleLabelHeight(options) {
		var font, padding;
	
		if (!options.display) {
			return 0;
		}
	
		font = helpers$1.options._parseFont(options);
		padding = helpers$1.options.toPadding(options.padding);
	
		return font.lineHeight + padding.height;
	}
	
	function parseFontOptions(options, nestedOpts) {
		return helpers$1.extend(helpers$1.options._parseFont({
			fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
			fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
			fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
			lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
		}), {
			color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
		});
	}
	
	function parseTickFontOptions(options) {
		var minor = parseFontOptions(options, options.minor);
		var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;
	
		return {minor: minor, major: major};
	}
	
	function nonSkipped(ticksToFilter) {
		var filtered = [];
		var item, index, len;
		for (index = 0, len = ticksToFilter.length; index < len; ++index) {
			item = ticksToFilter[index];
			if (typeof item._index !== 'undefined') {
				filtered.push(item);
			}
		}
		return filtered;
	}
	
	function getEvenSpacing(arr) {
		var len = arr.length;
		var i, diff;
	
		if (len < 2) {
			return false;
		}
	
		for (diff = arr[0], i = 1; i < len; ++i) {
			if (arr[i] - arr[i - 1] !== diff) {
				return false;
			}
		}
		return diff;
	}
	
	function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
		var evenMajorSpacing = getEvenSpacing(majorIndices);
		var spacing = (ticks.length - 1) / ticksLimit;
		var factors, factor, i, ilen;
	
		// If the major ticks are evenly spaced apart, place the minor ticks
		// so that they divide the major ticks into even chunks
		if (!evenMajorSpacing) {
			return Math.max(spacing, 1);
		}
	
		factors = helpers$1.math._factorize(evenMajorSpacing);
		for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
			factor = factors[i];
			if (factor > spacing) {
				return factor;
			}
		}
		return Math.max(spacing, 1);
	}
	
	function getMajorIndices(ticks) {
		var result = [];
		var i, ilen;
		for (i = 0, ilen = ticks.length; i < ilen; i++) {
			if (ticks[i].major) {
				result.push(i);
			}
		}
		return result;
	}
	
	function skipMajors(ticks, majorIndices, spacing) {
		var count = 0;
		var next = majorIndices[0];
		var i, tick;
	
		spacing = Math.ceil(spacing);
		for (i = 0; i < ticks.length; i++) {
			tick = ticks[i];
			if (i === next) {
				tick._index = i;
				count++;
				next = majorIndices[count * spacing];
			} else {
				delete tick.label;
			}
		}
	}
	
	function skip(ticks, spacing, majorStart, majorEnd) {
		var start = valueOrDefault$a(majorStart, 0);
		var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
		var count = 0;
		var length, i, tick, next;
	
		spacing = Math.ceil(spacing);
		if (majorEnd) {
			length = majorEnd - majorStart;
			spacing = length / Math.floor(length / spacing);
		}
	
		next = start;
	
		while (next < 0) {
			count++;
			next = Math.round(start + count * spacing);
		}
	
		for (i = Math.max(start, 0); i < end; i++) {
			tick = ticks[i];
			if (i === next) {
				tick._index = i;
				count++;
				next = Math.round(start + count * spacing);
			} else {
				delete tick.label;
			}
		}
	}
	
	var Scale = core_element.extend({
	
		zeroLineIndex: 0,
	
		/**
		 * Get the padding needed for the scale
		 * @method getPadding
		 * @private
		 * @returns {Padding} the necessary padding
		 */
		getPadding: function() {
			var me = this;
			return {
				left: me.paddingLeft || 0,
				top: me.paddingTop || 0,
				right: me.paddingRight || 0,
				bottom: me.paddingBottom || 0
			};
		},
	
		/**
		 * Returns the scale tick objects ({label, major})
		 * @since 2.7
		 */
		getTicks: function() {
			return this._ticks;
		},
	
		/**
		* @private
		*/
		_getLabels: function() {
			var data = this.chart.data;
			return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
		},
	
		// These methods are ordered by lifecyle. Utilities then follow.
		// Any function defined here is inherited by all scale types.
		// Any function can be extended by the scale type
	
		/**
		 * Provided for backward compatibility, not available anymore
		 * @function Chart.Scale.mergeTicksOptions
		 * @deprecated since version 2.8.0
		 * @todo remove at version 3
		 */
		mergeTicksOptions: function() {
			// noop
		},
	
		beforeUpdate: function() {
			helpers$1.callback(this.options.beforeUpdate, [this]);
		},
	
		/**
		 * @param {number} maxWidth - the max width in pixels
		 * @param {number} maxHeight - the max height in pixels
		 * @param {object} margins - the space between the edge of the other scales and edge of the chart
		 *   This space comes from two sources:
		 *     - padding - space that's required to show the labels at the edges of the scale
		 *     - thickness of scales or legends in another orientation
		 */
		update: function(maxWidth, maxHeight, margins) {
			var me = this;
			var tickOpts = me.options.ticks;
			var sampleSize = tickOpts.sampleSize;
			var i, ilen, labels, ticks, samplingEnabled;
	
			// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
			me.beforeUpdate();
	
			// Absorb the master measurements
			me.maxWidth = maxWidth;
			me.maxHeight = maxHeight;
			me.margins = helpers$1.extend({
				left: 0,
				right: 0,
				top: 0,
				bottom: 0
			}, margins);
	
			me._ticks = null;
			me.ticks = null;
			me._labelSizes = null;
			me._maxLabelLines = 0;
			me.longestLabelWidth = 0;
			me.longestTextCache = me.longestTextCache || {};
			me._gridLineItems = null;
			me._labelItems = null;
	
			// Dimensions
			me.beforeSetDimensions();
			me.setDimensions();
			me.afterSetDimensions();
	
			// Data min/max
			me.beforeDataLimits();
			me.determineDataLimits();
			me.afterDataLimits();
	
			// Ticks - `this.ticks` is now DEPRECATED!
			// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
			// and must not be accessed directly from outside this class. `this.ticks` being
			// around for long time and not marked as private, we can't change its structure
			// without unexpected breaking changes. If you need to access the scale ticks,
			// use scale.getTicks() instead.
	
			me.beforeBuildTicks();
	
			// New implementations should return an array of objects but for BACKWARD COMPAT,
			// we still support no return (`this.ticks` internally set by calling this method).
			ticks = me.buildTicks() || [];
	
			// Allow modification of ticks in callback.
			ticks = me.afterBuildTicks(ticks) || ticks;
	
			// Ensure ticks contains ticks in new tick format
			if ((!ticks || !ticks.length) && me.ticks) {
				ticks = [];
				for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
					ticks.push({
						value: me.ticks[i],
						major: false
					});
				}
			}
	
			me._ticks = ticks;
	
			// Compute tick rotation and fit using a sampled subset of labels
			// We generally don't need to compute the size of every single label for determining scale size
			samplingEnabled = sampleSize < ticks.length;
			labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);
	
			// _configure is called twice, once here, once from core.controller.updateLayout.
			// Here we haven't been positioned yet, but dimensions are correct.
			// Variables set in _configure are needed for calculateTickRotation, and
			// it's ok that coordinates are not correct there, only dimensions matter.
			me._configure();
	
			// Tick Rotation
			me.beforeCalculateTickRotation();
			me.calculateTickRotation();
			me.afterCalculateTickRotation();
	
			me.beforeFit();
			me.fit();
			me.afterFit();
	
			// Auto-skip
			me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;
	
			if (samplingEnabled) {
				// Generate labels using all non-skipped ticks
				labels = me._convertTicksToLabels(me._ticksToDraw);
			}
	
			me.ticks = labels;   // BACKWARD COMPATIBILITY
	
			// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!
	
			me.afterUpdate();
	
			// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
			// make maxWidth and maxHeight private
			return me.minSize;
		},
	
		/**
		 * @private
		 */
		_configure: function() {
			var me = this;
			var reversePixels = me.options.ticks.reverse;
			var startPixel, endPixel;
	
			if (me.isHorizontal()) {
				startPixel = me.left;
				endPixel = me.right;
			} else {
				startPixel = me.top;
				endPixel = me.bottom;
				// by default vertical scales are from bottom to top, so pixels are reversed
				reversePixels = !reversePixels;
			}
			me._startPixel = startPixel;
			me._endPixel = endPixel;
			me._reversePixels = reversePixels;
			me._length = endPixel - startPixel;
		},
	
		afterUpdate: function() {
			helpers$1.callback(this.options.afterUpdate, [this]);
		},
	
		//
	
		beforeSetDimensions: function() {
			helpers$1.callback(this.options.beforeSetDimensions, [this]);
		},
		setDimensions: function() {
			var me = this;
			// Set the unconstrained dimension before label rotation
			if (me.isHorizontal()) {
				// Reset position before calculating rotation
				me.width = me.maxWidth;
				me.left = 0;
				me.right = me.width;
			} else {
				me.height = me.maxHeight;
	
				// Reset position before calculating rotation
				me.top = 0;
				me.bottom = me.height;
			}
	
			// Reset padding
			me.paddingLeft = 0;
			me.paddingTop = 0;
			me.paddingRight = 0;
			me.paddingBottom = 0;
		},
		afterSetDimensions: function() {
			helpers$1.callback(this.options.afterSetDimensions, [this]);
		},
	
		// Data limits
		beforeDataLimits: function() {
			helpers$1.callback(this.options.beforeDataLimits, [this]);
		},
		determineDataLimits: helpers$1.noop,
		afterDataLimits: function() {
			helpers$1.callback(this.options.afterDataLimits, [this]);
		},
	
		//
		beforeBuildTicks: function() {
			helpers$1.callback(this.options.beforeBuildTicks, [this]);
		},
		buildTicks: helpers$1.noop,
		afterBuildTicks: function(ticks) {
			var me = this;
			// ticks is empty for old axis implementations here
			if (isArray(ticks) && ticks.length) {
				return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
			}
			// Support old implementations (that modified `this.ticks` directly in buildTicks)
			me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
			return ticks;
		},
	
		beforeTickToLabelConversion: function() {
			helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
		},
		convertTicksToLabels: function() {
			var me = this;
			// Convert ticks to strings
			var tickOpts = me.options.ticks;
			me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
		},
		afterTickToLabelConversion: function() {
			helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
		},
	
		//
	
		beforeCalculateTickRotation: function() {
			helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
		},
		calculateTickRotation: function() {
			var me = this;
			var options = me.options;
			var tickOpts = options.ticks;
			var numTicks = me.getTicks().length;
			var minRotation = tickOpts.minRotation || 0;
			var maxRotation = tickOpts.maxRotation;
			var labelRotation = minRotation;
			var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;
	
			if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
				me.labelRotation = minRotation;
				return;
			}
	
			labelSizes = me._getLabelSizes();
			maxLabelWidth = labelSizes.widest.width;
			maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;
	
			// Estimate the width of each grid based on the canvas width, the maximum
			// label width and the number of tick intervals
			maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
			tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);
	
			// Allow 3 pixels x2 padding either side for label readability
			if (maxLabelWidth + 6 > tickWidth) {
				tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
				maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
					- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
				maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
				labelRotation = helpers$1.toDegrees(Math.min(
					Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
					Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
				));
				labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
			}
	
			me.labelRotation = labelRotation;
		},
		afterCalculateTickRotation: function() {
			helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
		},
	
		//
	
		beforeFit: function() {
			helpers$1.callback(this.options.beforeFit, [this]);
		},
		fit: function() {
			var me = this;
			// Reset
			var minSize = me.minSize = {
				width: 0,
				height: 0
			};
	
			var chart = me.chart;
			var opts = me.options;
			var tickOpts = opts.ticks;
			var scaleLabelOpts = opts.scaleLabel;
			var gridLineOpts = opts.gridLines;
			var display = me._isVisible();
			var isBottom = opts.position === 'bottom';
			var isHorizontal = me.isHorizontal();
	
			// Width
			if (isHorizontal) {
				minSize.width = me.maxWidth;
			} else if (display) {
				minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
			}
	
			// height
			if (!isHorizontal) {
				minSize.height = me.maxHeight; // fill all the height
			} else if (display) {
				minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
			}
	
			// Don't bother fitting the ticks if we are not showing the labels
			if (tickOpts.display && display) {
				var tickFonts = parseTickFontOptions(tickOpts);
				var labelSizes = me._getLabelSizes();
				var firstLabelSize = labelSizes.first;
				var lastLabelSize = labelSizes.last;
				var widestLabelSize = labelSizes.widest;
				var highestLabelSize = labelSizes.highest;
				var lineSpace = tickFonts.minor.lineHeight * 0.4;
				var tickPadding = tickOpts.padding;
	
				if (isHorizontal) {
					// A horizontal axis is more constrained by the height.
					var isRotated = me.labelRotation !== 0;
					var angleRadians = helpers$1.toRadians(me.labelRotation);
					var cosRotation = Math.cos(angleRadians);
					var sinRotation = Math.sin(angleRadians);
	
					var labelHeight = sinRotation * widestLabelSize.width
						+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
						+ (isRotated ? 0 : lineSpace); // padding
	
					minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
	
					var offsetLeft = me.getPixelForTick(0) - me.left;
					var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
					var paddingLeft, paddingRight;
	
					// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
					// which means that the right padding is dominated by the font height
					if (isRotated) {
						paddingLeft = isBottom ?
							cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
							sinRotation * (firstLabelSize.height - firstLabelSize.offset);
						paddingRight = isBottom ?
							sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
							cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
					} else {
						paddingLeft = firstLabelSize.width / 2;
						paddingRight = lastLabelSize.width / 2;
					}
	
					// Adjust padding taking into account changes in offsets
					// and add 3 px to move away from canvas edges
					me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
					me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
				} else {
					// A vertical axis is more constrained by the width. Labels are the
					// dominant factor here, so get that length first and account for padding
					var labelWidth = tickOpts.mirror ? 0 :
						// use lineSpace for consistency with horizontal axis
						// tickPadding is not implemented for horizontal
						widestLabelSize.width + tickPadding + lineSpace;
	
					minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);
	
					me.paddingTop = firstLabelSize.height / 2;
					me.paddingBottom = lastLabelSize.height / 2;
				}
			}
	
			me.handleMargins();
	
			if (isHorizontal) {
				me.width = me._length = chart.width - me.margins.left - me.margins.right;
				me.height = minSize.height;
			} else {
				me.width = minSize.width;
				me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
			}
		},
	
		/**
		 * Handle margins and padding interactions
		 * @private
		 */
		handleMargins: function() {
			var me = this;
			if (me.margins) {
				me.margins.left = Math.max(me.paddingLeft, me.margins.left);
				me.margins.top = Math.max(me.paddingTop, me.margins.top);
				me.margins.right = Math.max(me.paddingRight, me.margins.right);
				me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
			}
		},
	
		afterFit: function() {
			helpers$1.callback(this.options.afterFit, [this]);
		},
	
		// Shared Methods
		isHorizontal: function() {
			var pos = this.options.position;
			return pos === 'top' || pos === 'bottom';
		},
		isFullWidth: function() {
			return this.options.fullWidth;
		},
	
		// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
		getRightValue: function(rawValue) {
			// Null and undefined values first
			if (isNullOrUndef(rawValue)) {
				return NaN;
			}
			// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
			if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
				return NaN;
			}
	
			// If it is in fact an object, dive in one more level
			if (rawValue) {
				if (this.isHorizontal()) {
					if (rawValue.x !== undefined) {
						return this.getRightValue(rawValue.x);
					}
				} else if (rawValue.y !== undefined) {
					return this.getRightValue(rawValue.y);
				}
			}
	
			// Value is good, return it
			return rawValue;
		},
	
		_convertTicksToLabels: function(ticks) {
			var me = this;
			var labels, i, ilen;
	
			me.ticks = ticks.map(function(tick) {
				return tick.value;
			});
	
			me.beforeTickToLabelConversion();
	
			// New implementations should return the formatted tick labels but for BACKWARD
			// COMPAT, we still support no return (`this.ticks` internally changed by calling
			// this method and supposed to contain only string values).
			labels = me.convertTicksToLabels(ticks) || me.ticks;
	
			me.afterTickToLabelConversion();
	
			// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
			for (i = 0, ilen = ticks.length; i < ilen; ++i) {
				ticks[i].label = labels[i];
			}
	
			return labels;
		},
	
		/**
		 * @private
		 */
		_getLabelSizes: function() {
			var me = this;
			var labelSizes = me._labelSizes;
	
			if (!labelSizes) {
				me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
				me.longestLabelWidth = labelSizes.widest.width;
			}
	
			return labelSizes;
		},
	
		/**
		 * @private
		 */
		_parseValue: function(value) {
			var start, end, min, max;
	
			if (isArray(value)) {
				start = +this.getRightValue(value[0]);
				end = +this.getRightValue(value[1]);
				min = Math.min(start, end);
				max = Math.max(start, end);
			} else {
				value = +this.getRightValue(value);
				start = undefined;
				end = value;
				min = value;
				max = value;
			}
	
			return {
				min: min,
				max: max,
				start: start,
				end: end
			};
		},
	
		/**
		* @private
		*/
		_getScaleLabel: function(rawValue) {
			var v = this._parseValue(rawValue);
			if (v.start !== undefined) {
				return '[' + v.start + ', ' + v.end + ']';
			}
	
			return +this.getRightValue(rawValue);
		},
	
		/**
		 * Used to get the value to display in the tooltip for the data at the given index
		 * @param index
		 * @param datasetIndex
		 */
		getLabelForIndex: helpers$1.noop,
	
		/**
		 * Returns the location of the given data point. Value can either be an index or a numerical value
		 * The coordinate (0, 0) is at the upper-left corner of the canvas
		 * @param value
		 * @param index
		 * @param datasetIndex
		 */
		getPixelForValue: helpers$1.noop,
	
		/**
		 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
		 * The coordinate (0, 0) is at the upper-left corner of the canvas
		 * @param pixel
		 */
		getValueForPixel: helpers$1.noop,
	
		/**
		 * Returns the location of the tick at the given index
		 * The coordinate (0, 0) is at the upper-left corner of the canvas
		 */
		getPixelForTick: function(index) {
			var me = this;
			var offset = me.options.offset;
			var numTicks = me._ticks.length;
			var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);
	
			return index < 0 || index > numTicks - 1
				? null
				: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
		},
	
		/**
		 * Utility for getting the pixel location of a percentage of scale
		 * The coordinate (0, 0) is at the upper-left corner of the canvas
		 */
		getPixelForDecimal: function(decimal) {
			var me = this;
	
			if (me._reversePixels) {
				decimal = 1 - decimal;
			}
	
			return me._startPixel + decimal * me._length;
		},
	
		getDecimalForPixel: function(pixel) {
			var decimal = (pixel - this._startPixel) / this._length;
			return this._reversePixels ? 1 - decimal : decimal;
		},
	
		/**
		 * Returns the pixel for the minimum chart value
		 * The coordinate (0, 0) is at the upper-left corner of the canvas
		 */
		getBasePixel: function() {
			return this.getPixelForValue(this.getBaseValue());
		},
	
		getBaseValue: function() {
			var me = this;
			var min = me.min;
			var max = me.max;
	
			return me.beginAtZero ? 0 :
				min < 0 && max < 0 ? max :
				min > 0 && max > 0 ? min :
				0;
		},
	
		/**
		 * Returns a subset of ticks to be plotted to avoid overlapping labels.
		 * @private
		 */
		_autoSkip: function(ticks) {
			var me = this;
			var tickOpts = me.options.ticks;
			var axisLength = me._length;
			var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
			var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
			var numMajorIndices = majorIndices.length;
			var first = majorIndices[0];
			var last = majorIndices[numMajorIndices - 1];
			var i, ilen, spacing, avgMajorSpacing;
	
			// If there are too many major ticks to display them all
			if (numMajorIndices > ticksLimit) {
				skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
				return nonSkipped(ticks);
			}
	
			spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);
	
			if (numMajorIndices > 0) {
				for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
					skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
				}
				avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
				skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
				skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
				return nonSkipped(ticks);
			}
			skip(ticks, spacing);
			return nonSkipped(ticks);
		},
	
		/**
		 * @private
		 */
		_tickSize: function() {
			var me = this;
			var optionTicks = me.options.ticks;
	
			// Calculate space needed by label in axis direction.
			var rot = helpers$1.toRadians(me.labelRotation);
			var cos = Math.abs(Math.cos(rot));
			var sin = Math.abs(Math.sin(rot));
	
			var labelSizes = me._getLabelSizes();
			var padding = optionTicks.autoSkipPadding || 0;
			var w = labelSizes ? labelSizes.widest.width + padding : 0;
			var h = labelSizes ? labelSizes.highest.height + padding : 0;
	
			// Calculate space needed for 1 tick in axis direction.
			return me.isHorizontal()
				? h * cos > w * sin ? w / cos : h / sin
				: h * sin < w * cos ? h / cos : w / sin;
		},
	
		/**
		 * @private
		 */
		_isVisible: function() {
			var me = this;
			var chart = me.chart;
			var display = me.options.display;
			var i, ilen, meta;
	
			if (display !== 'auto') {
				return !!display;
			}
	
			// When 'auto', the scale is visible if at least one associated dataset is visible.
			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
				if (chart.isDatasetVisible(i)) {
					meta = chart.getDatasetMeta(i);
					if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
						return true;
					}
				}
			}
	
			return false;
		},
	
		/**
		 * @private
		 */
		_computeGridLineItems: function(chartArea) {
			var me = this;
			var chart = me.chart;
			var options = me.options;
			var gridLines = options.gridLines;
			var position = options.position;
			var offsetGridLines = gridLines.offsetGridLines;
			var isHorizontal = me.isHorizontal();
			var ticks = me._ticksToDraw;
			var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);
	
			var tl = getTickMarkLength(gridLines);
			var items = [];
			var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
			var axisHalfWidth = axisWidth / 2;
			var alignPixel = helpers$1._alignPixel;
			var alignBorderValue = function(pixel) {
				return alignPixel(chart, pixel, axisWidth);
			};
			var borderValue, i, tick, lineValue, alignedLineValue;
			var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;
	
			if (position === 'top') {
				borderValue = alignBorderValue(me.bottom);
				ty1 = me.bottom - tl;
				ty2 = borderValue - axisHalfWidth;
				y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
				y2 = chartArea.bottom;
			} else if (position === 'bottom') {
				borderValue = alignBorderValue(me.top);
				y1 = chartArea.top;
				y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
				ty1 = borderValue + axisHalfWidth;
				ty2 = me.top + tl;
			} else if (position === 'left') {
				borderValue = alignBorderValue(me.right);
				tx1 = me.right - tl;
				tx2 = borderValue - axisHalfWidth;
				x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
				x2 = chartArea.right;
			} else {
				borderValue = alignBorderValue(me.left);
				x1 = chartArea.left;
				x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
				tx1 = borderValue + axisHalfWidth;
				tx2 = me.left + tl;
			}
	
			for (i = 0; i < ticksLength; ++i) {
				tick = ticks[i] || {};
	
				// autoskipper skipped this tick (#4635)
				if (isNullOrUndef(tick.label) && i < ticks.length) {
					continue;
				}
	
				if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
					// Draw the first index specially
					lineWidth = gridLines.zeroLineWidth;
					lineColor = gridLines.zeroLineColor;
					borderDash = gridLines.zeroLineBorderDash || [];
					borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
				} else {
					lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
					lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
					borderDash = gridLines.borderDash || [];
					borderDashOffset = gridLines.borderDashOffset || 0.0;
				}
	
				lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);
	
				// Skip if the pixel is out of the range
				if (lineValue === undefined) {
					continue;
				}
	
				alignedLineValue = alignPixel(chart, lineValue, lineWidth);
	
				if (isHorizontal) {
					tx1 = tx2 = x1 = x2 = alignedLineValue;
				} else {
					ty1 = ty2 = y1 = y2 = alignedLineValue;
				}
	
				items.push({
					tx1: tx1,
					ty1: ty1,
					tx2: tx2,
					ty2: ty2,
					x1: x1,
					y1: y1,
					x2: x2,
					y2: y2,
					width: lineWidth,
					color: lineColor,
					borderDash: borderDash,
					borderDashOffset: borderDashOffset,
				});
			}
	
			items.ticksLength = ticksLength;
			items.borderValue = borderValue;
	
			return items;
		},
	
		/**
		 * @private
		 */
		_computeLabelItems: function() {
			var me = this;
			var options = me.options;
			var optionTicks = options.ticks;
			var position = options.position;
			var isMirrored = optionTicks.mirror;
			var isHorizontal = me.isHorizontal();
			var ticks = me._ticksToDraw;
			var fonts = parseTickFontOptions(optionTicks);
			var tickPadding = optionTicks.padding;
			var tl = getTickMarkLength(options.gridLines);
			var rotation = -helpers$1.toRadians(me.labelRotation);
			var items = [];
			var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
	
			if (position === 'top') {
				y = me.bottom - tl - tickPadding;
				textAlign = !rotation ? 'center' : 'left';
			} else if (position === 'bottom') {
				y = me.top + tl + tickPadding;
				textAlign = !rotation ? 'center' : 'right';
			} else if (position === 'left') {
				x = me.right - (isMirrored ? 0 : tl) - tickPadding;
				textAlign = isMirrored ? 'left' : 'right';
			} else {
				x = me.left + (isMirrored ? 0 : tl) + tickPadding;
				textAlign = isMirrored ? 'right' : 'left';
			}
	
			for (i = 0, ilen = ticks.length; i < ilen; ++i) {
				tick = ticks[i];
				label = tick.label;
	
				// autoskipper skipped this tick (#4635)
				if (isNullOrUndef(label)) {
					continue;
				}
	
				pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
				font = tick.major ? fonts.major : fonts.minor;
				lineHeight = font.lineHeight;
				lineCount = isArray(label) ? label.length : 1;
	
				if (isHorizontal) {
					x = pixel;
					textOffset = position === 'top'
						? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
						: (!rotation ? 0.5 : 0) * lineHeight;
				} else {
					y = pixel;
					textOffset = (1 - lineCount) * lineHeight / 2;
				}
	
				items.push({
					x: x,
					y: y,
					rotation: rotation,
					label: label,
					font: font,
					textOffset: textOffset,
					textAlign: textAlign
				});
			}
	
			return items;
		},
	
		/**
		 * @private
		 */
		_drawGrid: function(chartArea) {
			var me = this;
			var gridLines = me.options.gridLines;
	
			if (!gridLines.display) {
				return;
			}
	
			var ctx = me.ctx;
			var chart = me.chart;
			var alignPixel = helpers$1._alignPixel;
			var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
			var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
			var width, color, i, ilen, item;
	
			for (i = 0, ilen = items.length; i < ilen; ++i) {
				item = items[i];
				width = item.width;
				color = item.color;
	
				if (width && color) {
					ctx.save();
					ctx.lineWidth = width;
					ctx.strokeStyle = color;
					if (ctx.setLineDash) {
						ctx.setLineDash(item.borderDash);
						ctx.lineDashOffset = item.borderDashOffset;
					}
	
					ctx.beginPath();
	
					if (gridLines.drawTicks) {
						ctx.moveTo(item.tx1, item.ty1);
						ctx.lineTo(item.tx2, item.ty2);
					}
	
					if (gridLines.drawOnChartArea) {
						ctx.moveTo(item.x1, item.y1);
						ctx.lineTo(item.x2, item.y2);
					}
	
					ctx.stroke();
					ctx.restore();
				}
			}
	
			if (axisWidth) {
				// Draw the line at the edge of the axis
				var firstLineWidth = axisWidth;
				var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
				var borderValue = items.borderValue;
				var x1, x2, y1, y2;
	
				if (me.isHorizontal()) {
					x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
					x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
					y1 = y2 = borderValue;
				} else {
					y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
					y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
					x1 = x2 = borderValue;
				}
	
				ctx.lineWidth = axisWidth;
				ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
				ctx.beginPath();
				ctx.moveTo(x1, y1);
				ctx.lineTo(x2, y2);
				ctx.stroke();
			}
		},
	
		/**
		 * @private
		 */
		_drawLabels: function() {
			var me = this;
			var optionTicks = me.options.ticks;
	
			if (!optionTicks.display) {
				return;
			}
	
			var ctx = me.ctx;
			var items = me._labelItems || (me._labelItems = me._computeLabelItems());
			var i, j, ilen, jlen, item, tickFont, label, y;
	
			for (i = 0, ilen = items.length; i < ilen; ++i) {
				item = items[i];
				tickFont = item.font;
	
				// Make sure we draw text in the correct color and font
				ctx.save();
				ctx.translate(item.x, item.y);
				ctx.rotate(item.rotation);
				ctx.font = tickFont.string;
				ctx.fillStyle = tickFont.color;
				ctx.textBaseline = 'middle';
				ctx.textAlign = item.textAlign;
	
				label = item.label;
				y = item.textOffset;
				if (isArray(label)) {
					for (j = 0, jlen = label.length; j < jlen; ++j) {
						// We just make sure the multiline element is a string here..
						ctx.fillText('' + label[j], 0, y);
						y += tickFont.lineHeight;
					}
				} else {
					ctx.fillText(label, 0, y);
				}
				ctx.restore();
			}
		},
	
		/**
		 * @private
		 */
		_drawTitle: function() {
			var me = this;
			var ctx = me.ctx;
			var options = me.options;
			var scaleLabel = options.scaleLabel;
	
			if (!scaleLabel.display) {
				return;
			}
	
			var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
			var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
			var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
			var halfLineHeight = scaleLabelFont.lineHeight / 2;
			var position = options.position;
			var rotation = 0;
			var scaleLabelX, scaleLabelY;
	
			if (me.isHorizontal()) {
				scaleLabelX = me.left + me.width / 2; // midpoint of the width
				scaleLabelY = position === 'bottom'
					? me.bottom - halfLineHeight - scaleLabelPadding.bottom
					: me.top + halfLineHeight + scaleLabelPadding.top;
			} else {
				var isLeft = position === 'left';
				scaleLabelX = isLeft
					? me.left + halfLineHeight + scaleLabelPadding.top
					: me.right - halfLineHeight - scaleLabelPadding.top;
				scaleLabelY = me.top + me.height / 2;
				rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
			}
	
			ctx.save();
			ctx.translate(scaleLabelX, scaleLabelY);
			ctx.rotate(rotation);
			ctx.textAlign = 'center';
			ctx.textBaseline = 'middle';
			ctx.fillStyle = scaleLabelFontColor; // render in correct colour
			ctx.font = scaleLabelFont.string;
			ctx.fillText(scaleLabel.labelString, 0, 0);
			ctx.restore();
		},
	
		draw: function(chartArea) {
			var me = this;
	
			if (!me._isVisible()) {
				return;
			}
	
			me._drawGrid(chartArea);
			me._drawTitle();
			me._drawLabels();
		},
	
		/**
		 * @private
		 */
		_layers: function() {
			var me = this;
			var opts = me.options;
			var tz = opts.ticks && opts.ticks.z || 0;
			var gz = opts.gridLines && opts.gridLines.z || 0;
	
			if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
				// backward compatibility: draw has been overridden by custom scale
				return [{
					z: tz,
					draw: function() {
						me.draw.apply(me, arguments);
					}
				}];
			}
	
			return [{
				z: gz,
				draw: function() {
					me._drawGrid.apply(me, arguments);
					me._drawTitle.apply(me, arguments);
				}
			}, {
				z: tz,
				draw: function() {
					me._drawLabels.apply(me, arguments);
				}
			}];
		},
	
		/**
		 * @private
		 */
		_getMatchingVisibleMetas: function(type) {
			var me = this;
			var isHorizontal = me.isHorizontal();
			return me.chart._getSortedVisibleDatasetMetas()
				.filter(function(meta) {
					return (!type || meta.type === type)
						&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
				});
		}
	});
	
	Scale.prototype._draw = Scale.prototype.draw;
	
	var core_scale = Scale;
	
	var isNullOrUndef$1 = helpers$1.isNullOrUndef;
	
	var defaultConfig = {
		position: 'bottom'
	};
	
	var scale_category = core_scale.extend({
		determineDataLimits: function() {
			var me = this;
			var labels = me._getLabels();
			var ticksOpts = me.options.ticks;
			var min = ticksOpts.min;
			var max = ticksOpts.max;
			var minIndex = 0;
			var maxIndex = labels.length - 1;
			var findIndex;
	
			if (min !== undefined) {
				// user specified min value
				findIndex = labels.indexOf(min);
				if (findIndex >= 0) {
					minIndex = findIndex;
				}
			}
	
			if (max !== undefined) {
				// user specified max value
				findIndex = labels.indexOf(max);
				if (findIndex >= 0) {
					maxIndex = findIndex;
				}
			}
	
			me.minIndex = minIndex;
			me.maxIndex = maxIndex;
			me.min = labels[minIndex];
			me.max = labels[maxIndex];
		},
	
		buildTicks: function() {
			var me = this;
			var labels = me._getLabels();
			var minIndex = me.minIndex;
			var maxIndex = me.maxIndex;
	
			// If we are viewing some subset of labels, slice the original array
			me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
		},
	
		getLabelForIndex: function(index, datasetIndex) {
			var me = this;
			var chart = me.chart;
	
			if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
				return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
			}
	
			return me._getLabels()[index];
		},
	
		_configure: function() {
			var me = this;
			var offset = me.options.offset;
			var ticks = me.ticks;
	
			core_scale.prototype._configure.call(me);
	
			if (!me.isHorizontal()) {
				// For backward compatibility, vertical category scale reverse is inverted.
				me._reversePixels = !me._reversePixels;
			}
	
			if (!ticks) {
				return;
			}
	
			me._startValue = me.minIndex - (offset ? 0.5 : 0);
			me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
		},
	
		// Used to get data value locations.  Value can either be an index or a numerical value
		getPixelForValue: function(value, index, datasetIndex) {
			var me = this;
			var valueCategory, labels, idx;
	
			if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
				value = me.chart.data.datasets[datasetIndex].data[index];
			}
	
			// If value is a data object, then index is the index in the data array,
			// not the index of the scale. We need to change that.
			if (!isNullOrUndef$1(value)) {
				valueCategory = me.isHorizontal() ? value.x : value.y;
			}
			if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
				labels = me._getLabels();
				value = helpers$1.valueOrDefault(valueCategory, value);
				idx = labels.indexOf(value);
				index = idx !== -1 ? idx : index;
				if (isNaN(index)) {
					index = value;
				}
			}
			return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
		},
	
		getPixelForTick: function(index) {
			var ticks = this.ticks;
			return index < 0 || index > ticks.length - 1
				? null
				: this.getPixelForValue(ticks[index], index + this.minIndex);
		},
	
		getValueForPixel: function(pixel) {
			var me = this;
			var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
			return Math.min(Math.max(value, 0), me.ticks.length - 1);
		},
	
		getBasePixel: function() {
			return this.bottom;
		}
	});
	
	// INTERNAL: static default options, registered in src/index.js
	var _defaults = defaultConfig;
	scale_category._defaults = _defaults;
	
	var noop = helpers$1.noop;
	var isNullOrUndef$2 = helpers$1.isNullOrUndef;
	
	/**
	 * Generate a set of linear ticks
	 * @param generationOptions the options used to generate the ticks
	 * @param dataRange the range of the data
	 * @returns {number[]} array of tick values
	 */
	function generateTicks(generationOptions, dataRange) {
		var ticks = [];
		// To get a "nice" value for the tick spacing, we will use the appropriately named
		// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
		// for details.
	
		var MIN_SPACING = 1e-14;
		var stepSize = generationOptions.stepSize;
		var unit = stepSize || 1;
		var maxNumSpaces = generationOptions.maxTicks - 1;
		var min = generationOptions.min;
		var max = generationOptions.max;
		var precision = generationOptions.precision;
		var rmin = dataRange.min;
		var rmax = dataRange.max;
		var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
		var factor, niceMin, niceMax, numSpaces;
	
		// Beyond MIN_SPACING floating point numbers being to lose precision
		// such that we can't do the math necessary to generate ticks
		if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
			return [rmin, rmax];
		}
	
		numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
		if (numSpaces > maxNumSpaces) {
			// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
			spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
		}
	
		if (stepSize || isNullOrUndef$2(precision)) {
			// If a precision is not specified, calculate factor based on spacing
			factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
		} else {
			// If the user specified a precision, round to that number of decimal places
			factor = Math.pow(10, precision);
			spacing = Math.ceil(spacing * factor) / factor;
		}
	
		niceMin = Math.floor(rmin / spacing) * spacing;
		niceMax = Math.ceil(rmax / spacing) * spacing;
	
		// If min, max and stepSize is set and they make an evenly spaced scale use it.
		if (stepSize) {
			// If very close to our whole number, use it.
			if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
				niceMin = min;
			}
			if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
				niceMax = max;
			}
		}
	
		numSpaces = (niceMax - niceMin) / spacing;
		// If very close to our rounded value, use it.
		if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
			numSpaces = Math.round(numSpaces);
		} else {
			numSpaces = Math.ceil(numSpaces);
		}
	
		niceMin = Math.round(niceMin * factor) / factor;
		niceMax = Math.round(niceMax * factor) / factor;
		ticks.push(isNullOrUndef$2(min) ? niceMin : min);
		for (var j = 1; j < numSpaces; ++j) {
			ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
		}
		ticks.push(isNullOrUndef$2(max) ? niceMax : max);
	
		return ticks;
	}
	
	var scale_linearbase = core_scale.extend({
		getRightValue: function(value) {
			if (typeof value === 'string') {
				return +value;
			}
			return core_scale.prototype.getRightValue.call(this, value);
		},
	
		handleTickRangeOptions: function() {
			var me = this;
			var opts = me.options;
			var tickOpts = opts.ticks;
	
			// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
			// do nothing since that would make the chart weird. If the user really wants a weird chart
			// axis, they can manually override it
			if (tickOpts.beginAtZero) {
				var minSign = helpers$1.sign(me.min);
				var maxSign = helpers$1.sign(me.max);
	
				if (minSign < 0 && maxSign < 0) {
					// move the top up to 0
					me.max = 0;
				} else if (minSign > 0 && maxSign > 0) {
					// move the bottom down to 0
					me.min = 0;
				}
			}
	
			var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
			var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;
	
			if (tickOpts.min !== undefined) {
				me.min = tickOpts.min;
			} else if (tickOpts.suggestedMin !== undefined) {
				if (me.min === null) {
					me.min = tickOpts.suggestedMin;
				} else {
					me.min = Math.min(me.min, tickOpts.suggestedMin);
				}
			}
	
			if (tickOpts.max !== undefined) {
				me.max = tickOpts.max;
			} else if (tickOpts.suggestedMax !== undefined) {
				if (me.max === null) {
					me.max = tickOpts.suggestedMax;
				} else {
					me.max = Math.max(me.max, tickOpts.suggestedMax);
				}
			}
	
			if (setMin !== setMax) {
				// We set the min or the max but not both.
				// So ensure that our range is good
				// Inverted or 0 length range can happen when
				// ticks.min is set, and no datasets are visible
				if (me.min >= me.max) {
					if (setMin) {
						me.max = me.min + 1;
					} else {
						me.min = me.max - 1;
					}
				}
			}
	
			if (me.min === me.max) {
				me.max++;
	
				if (!tickOpts.beginAtZero) {
					me.min--;
				}
			}
		},
	
		getTickLimit: function() {
			var me = this;
			var tickOpts = me.options.ticks;
			var stepSize = tickOpts.stepSize;
			var maxTicksLimit = tickOpts.maxTicksLimit;
			var maxTicks;
	
			if (stepSize) {
				maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
			} else {
				maxTicks = me._computeTickLimit();
				maxTicksLimit = maxTicksLimit || 11;
			}
	
			if (maxTicksLimit) {
				maxTicks = Math.min(maxTicksLimit, maxTicks);
			}
	
			return maxTicks;
		},
	
		_computeTickLimit: function() {
			return Number.POSITIVE_INFINITY;
		},
	
		handleDirectionalChanges: noop,
	
		buildTicks: function() {
			var me = this;
			var opts = me.options;
			var tickOpts = opts.ticks;
	
			// Figure out what the max number of ticks we can support it is based on the size of
			// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
			// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
			// the graph. Make sure we always have at least 2 ticks
			var maxTicks = me.getTickLimit();
			maxTicks = Math.max(2, maxTicks);
	
			var numericGeneratorOptions = {
				maxTicks: maxTicks,
				min: tickOpts.min,
				max: tickOpts.max,
				precision: tickOpts.precision,
				stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
			};
			var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
	
			me.handleDirectionalChanges();
	
			// At this point, we need to update our max and min given the tick values since we have expanded the
			// range of the scale
			me.max = helpers$1.max(ticks);
			me.min = helpers$1.min(ticks);
	
			if (tickOpts.reverse) {
				ticks.reverse();
	
				me.start = me.max;
				me.end = me.min;
			} else {
				me.start = me.min;
				me.end = me.max;
			}
		},
	
		convertTicksToLabels: function() {
			var me = this;
			me.ticksAsNumbers = me.ticks.slice();
			me.zeroLineIndex = me.ticks.indexOf(0);
	
			core_scale.prototype.convertTicksToLabels.call(me);
		},
	
		_configure: function() {
			var me = this;
			var ticks = me.getTicks();
			var start = me.min;
			var end = me.max;
			var offset;
	
			core_scale.prototype._configure.call(me);
	
			if (me.options.offset && ticks.length) {
				offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
				start -= offset;
				end += offset;
			}
			me._startValue = start;
			me._endValue = end;
			me._valueRange = end - start;
		}
	});
	
	var defaultConfig$1 = {
		position: 'left',
		ticks: {
			callback: core_ticks.formatters.linear
		}
	};
	
	var DEFAULT_MIN = 0;
	var DEFAULT_MAX = 1;
	
	function getOrCreateStack(stacks, stacked, meta) {
		var key = [
			meta.type,
			// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
			stacked === undefined && meta.stack === undefined ? meta.index : '',
			meta.stack
		].join('.');
	
		if (stacks[key] === undefined) {
			stacks[key] = {
				pos: [],
				neg: []
			};
		}
	
		return stacks[key];
	}
	
	function stackData(scale, stacks, meta, data) {
		var opts = scale.options;
		var stacked = opts.stacked;
		var stack = getOrCreateStack(stacks, stacked, meta);
		var pos = stack.pos;
		var neg = stack.neg;
		var ilen = data.length;
		var i, value;
	
		for (i = 0; i < ilen; ++i) {
			value = scale._parseValue(data[i]);
			if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
				continue;
			}
	
			pos[i] = pos[i] || 0;
			neg[i] = neg[i] || 0;
	
			if (opts.relativePoints) {
				pos[i] = 100;
			} else if (value.min < 0 || value.max < 0) {
				neg[i] += value.min;
			} else {
				pos[i] += value.max;
			}
		}
	}
	
	function updateMinMax(scale, meta, data) {
		var ilen = data.length;
		var i, value;
	
		for (i = 0; i < ilen; ++i) {
			value = scale._parseValue(data[i]);
			if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
				continue;
			}
	
			scale.min = Math.min(scale.min, value.min);
			scale.max = Math.max(scale.max, value.max);
		}
	}
	
	var scale_linear = scale_linearbase.extend({
		determineDataLimits: function() {
			var me = this;
			var opts = me.options;
			var chart = me.chart;
			var datasets = chart.data.datasets;
			var metasets = me._getMatchingVisibleMetas();
			var hasStacks = opts.stacked;
			var stacks = {};
			var ilen = metasets.length;
			var i, meta, data, values;
	
			me.min = Number.POSITIVE_INFINITY;
			me.max = Number.NEGATIVE_INFINITY;
	
			if (hasStacks === undefined) {
				for (i = 0; !hasStacks && i < ilen; ++i) {
					meta = metasets[i];
					hasStacks = meta.stack !== undefined;
				}
			}
	
			for (i = 0; i < ilen; ++i) {
				meta = metasets[i];
				data = datasets[meta.index].data;
				if (hasStacks) {
					stackData(me, stacks, meta, data);
				} else {
					updateMinMax(me, meta, data);
				}
			}
	
			helpers$1.each(stacks, function(stackValues) {
				values = stackValues.pos.concat(stackValues.neg);
				me.min = Math.min(me.min, helpers$1.min(values));
				me.max = Math.max(me.max, helpers$1.max(values));
			});
	
			me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
			me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;
	
			// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
			me.handleTickRangeOptions();
		},
	
		// Returns the maximum number of ticks based on the scale dimension
		_computeTickLimit: function() {
			var me = this;
			var tickFont;
	
			if (me.isHorizontal()) {
				return Math.ceil(me.width / 40);
			}
			tickFont = helpers$1.options._parseFont(me.options.ticks);
			return Math.ceil(me.height / tickFont.lineHeight);
		},
	
		// Called after the ticks are built. We need
		handleDirectionalChanges: function() {
			if (!this.isHorizontal()) {
				// We are in a vertical orientation. The top value is the highest. So reverse the array
				this.ticks.reverse();
			}
		},
	
		getLabelForIndex: function(index, datasetIndex) {
			return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
		},
	
		// Utils
		getPixelForValue: function(value) {
			var me = this;
			return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
		},
	
		getValueForPixel: function(pixel) {
			return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
		},
	
		getPixelForTick: function(index) {
			var ticks = this.ticksAsNumbers;
			if (index < 0 || index > ticks.length - 1) {
				return null;
			}
			return this.getPixelForValue(ticks[index]);
		}
	});
	
	// INTERNAL: static default options, registered in src/index.js
	var _defaults$1 = defaultConfig$1;
	scale_linear._defaults = _defaults$1;
	
	var valueOrDefault$b = helpers$1.valueOrDefault;
	var log10 = helpers$1.math.log10;
	
	/**
	 * Generate a set of logarithmic ticks
	 * @param generationOptions the options used to generate the ticks
	 * @param dataRange the range of the data
	 * @returns {number[]} array of tick values
	 */
	function generateTicks$1(generationOptions, dataRange) {
		var ticks = [];
	
		var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
	
		var endExp = Math.floor(log10(dataRange.max));
		var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
		var exp, significand;
	
		if (tickVal === 0) {
			exp = Math.floor(log10(dataRange.minNotZero));
			significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
	
			ticks.push(tickVal);
			tickVal = significand * Math.pow(10, exp);
		} else {
			exp = Math.floor(log10(tickVal));
			significand = Math.floor(tickVal / Math.pow(10, exp));
		}
		var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
	
		do {
			ticks.push(tickVal);
	
			++significand;
			if (significand === 10) {
				significand = 1;
				++exp;
				precision = exp >= 0 ? 1 : precision;
			}
	
			tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
		} while (exp < endExp || (exp === endExp && significand < endSignificand));
	
		var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
		ticks.push(lastTick);
	
		return ticks;
	}
	
	var defaultConfig$2 = {
		position: 'left',
	
		// label settings
		ticks: {
			callback: core_ticks.formatters.logarithmic
		}
	};
	
	// TODO(v3): change this to positiveOrDefault
	function nonNegativeOrDefault(value, defaultValue) {
		return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
	}
	
	var scale_logarithmic = core_scale.extend({
		determineDataLimits: function() {
			var me = this;
			var opts = me.options;
			var chart = me.chart;
			var datasets = chart.data.datasets;
			var isHorizontal = me.isHorizontal();
			function IDMatches(meta) {
				return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
			}
			var datasetIndex, meta, value, data, i, ilen;
	
			// Calculate Range
			me.min = Number.POSITIVE_INFINITY;
			me.max = Number.NEGATIVE_INFINITY;
			me.minNotZero = Number.POSITIVE_INFINITY;
	
			var hasStacks = opts.stacked;
			if (hasStacks === undefined) {
				for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
					meta = chart.getDatasetMeta(datasetIndex);
					if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
						meta.stack !== undefined) {
						hasStacks = true;
						break;
					}
				}
			}
	
			if (opts.stacked || hasStacks) {
				var valuesPerStack = {};
	
				for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
					meta = chart.getDatasetMeta(datasetIndex);
					var key = [
						meta.type,
						// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
						((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
						meta.stack
					].join('.');
	
					if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
						if (valuesPerStack[key] === undefined) {
							valuesPerStack[key] = [];
						}
	
						data = datasets[datasetIndex].data;
						for (i = 0, ilen = data.length; i < ilen; i++) {
							var values = valuesPerStack[key];
							value = me._parseValue(data[i]);
							// invalid, hidden and negative values are ignored
							if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
								continue;
							}
							values[i] = values[i] || 0;
							values[i] += value.max;
						}
					}
				}
	
				helpers$1.each(valuesPerStack, function(valuesForType) {
					if (valuesForType.length > 0) {
						var minVal = helpers$1.min(valuesForType);
						var maxVal = helpers$1.max(valuesForType);
						me.min = Math.min(me.min, minVal);
						me.max = Math.max(me.max, maxVal);
					}
				});
	
			} else {
				for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
					meta = chart.getDatasetMeta(datasetIndex);
					if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
						data = datasets[datasetIndex].data;
						for (i = 0, ilen = data.length; i < ilen; i++) {
							value = me._parseValue(data[i]);
							// invalid, hidden and negative values are ignored
							if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
								continue;
							}
	
							me.min = Math.min(value.min, me.min);
							me.max = Math.max(value.max, me.max);
	
							if (value.min !== 0) {
								me.minNotZero = Math.min(value.min, me.minNotZero);
							}
						}
					}
				}
			}
	
			me.min = helpers$1.isFinite(me.min) ? me.min : null;
			me.max = helpers$1.isFinite(me.max) ? me.max : null;
			me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;
	
			// Common base implementation to handle ticks.min, ticks.max
			this.handleTickRangeOptions();
		},
	
		handleTickRangeOptions: function() {
			var me = this;
			var tickOpts = me.options.ticks;
			var DEFAULT_MIN = 1;
			var DEFAULT_MAX = 10;
	
			me.min = nonNegativeOrDefault(tickOpts.min, me.min);
			me.max = nonNegativeOrDefault(tickOpts.max, me.max);
	
			if (me.min === me.max) {
				if (me.min !== 0 && me.min !== null) {
					me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
					me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
				} else {
					me.min = DEFAULT_MIN;
					me.max = DEFAULT_MAX;
				}
			}
			if (me.min === null) {
				me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
			}
			if (me.max === null) {
				me.max = me.min !== 0
					? Math.pow(10, Math.floor(log10(me.min)) + 1)
					: DEFAULT_MAX;
			}
			if (me.minNotZero === null) {
				if (me.min > 0) {
					me.minNotZero = me.min;
				} else if (me.max < 1) {
					me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
				} else {
					me.minNotZero = DEFAULT_MIN;
				}
			}
		},
	
		buildTicks: function() {
			var me = this;
			var tickOpts = me.options.ticks;
			var reverse = !me.isHorizontal();
	
			var generationOptions = {
				min: nonNegativeOrDefault(tickOpts.min),
				max: nonNegativeOrDefault(tickOpts.max)
			};
			var ticks = me.ticks = generateTicks$1(generationOptions, me);
	
			// At this point, we need to update our max and min given the tick values since we have expanded the
			// range of the scale
			me.max = helpers$1.max(ticks);
			me.min = helpers$1.min(ticks);
	
			if (tickOpts.reverse) {
				reverse = !reverse;
				me.start = me.max;
				me.end = me.min;
			} else {
				me.start = me.min;
				me.end = me.max;
			}
			if (reverse) {
				ticks.reverse();
			}
		},
	
		convertTicksToLabels: function() {
			this.tickValues = this.ticks.slice();
	
			core_scale.prototype.convertTicksToLabels.call(this);
		},
	
		// Get the correct tooltip label
		getLabelForIndex: function(index, datasetIndex) {
			return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
		},
	
		getPixelForTick: function(index) {
			var ticks = this.tickValues;
			if (index < 0 || index > ticks.length - 1) {
				return null;
			}
			return this.getPixelForValue(ticks[index]);
		},
	
		/**
		 * Returns the value of the first tick.
		 * @param {number} value - The minimum not zero value.
		 * @return {number} The first tick value.
		 * @private
		 */
		_getFirstTickValue: function(value) {
			var exp = Math.floor(log10(value));
			var significand = Math.floor(value / Math.pow(10, exp));
	
			return significand * Math.pow(10, exp);
		},
	
		_configure: function() {
			var me = this;
			var start = me.min;
			var offset = 0;
	
			core_scale.prototype._configure.call(me);
	
			if (start === 0) {
				start = me._getFirstTickValue(me.minNotZero);
				offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
			}
	
			me._startValue = log10(start);
			me._valueOffset = offset;
			me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
		},
	
		getPixelForValue: function(value) {
			var me = this;
			var decimal = 0;
	
			value = +me.getRightValue(value);
	
			if (value > me.min && value > 0) {
				decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
			}
			return me.getPixelForDecimal(decimal);
		},
	
		getValueForPixel: function(pixel) {
			var me = this;
			var decimal = me.getDecimalForPixel(pixel);
			return decimal === 0 && me.min === 0
				? 0
				: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
		}
	});
	
	// INTERNAL: static default options, registered in src/index.js
	var _defaults$2 = defaultConfig$2;
	scale_logarithmic._defaults = _defaults$2;
	
	var valueOrDefault$c = helpers$1.valueOrDefault;
	var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
	var resolve$4 = helpers$1.options.resolve;
	
	var defaultConfig$3 = {
		display: true,
	
		// Boolean - Whether to animate scaling the chart from the centre
		animate: true,
		position: 'chartArea',
	
		angleLines: {
			display: true,
			color: 'rgba(0,0,0,0.1)',
			lineWidth: 1,
			borderDash: [],
			borderDashOffset: 0.0
		},
	
		gridLines: {
			circular: false
		},
	
		// label settings
		ticks: {
			// Boolean - Show a backdrop to the scale label
			showLabelBackdrop: true,
	
			// String - The colour of the label backdrop
			backdropColor: 'rgba(255,255,255,0.75)',
	
			// Number - The backdrop padding above & below the label in pixels
			backdropPaddingY: 2,
	
			// Number - The backdrop padding to the side of the label in pixels
			backdropPaddingX: 2,
	
			callback: core_ticks.formatters.linear
		},
	
		pointLabels: {
			// Boolean - if true, show point labels
			display: true,
	
			// Number - Point label font size in pixels
			fontSize: 10,
	
			// Function - Used to convert point labels
			callback: function(label) {
				return label;
			}
		}
	};
	
	function getTickBackdropHeight(opts) {
		var tickOpts = opts.ticks;
	
		if (tickOpts.display && opts.display) {
			return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
		}
		return 0;
	}
	
	function measureLabelSize(ctx, lineHeight, label) {
		if (helpers$1.isArray(label)) {
			return {
				w: helpers$1.longestText(ctx, ctx.font, label),
				h: label.length * lineHeight
			};
		}
	
		return {
			w: ctx.measureText(label).width,
			h: lineHeight
		};
	}
	
	function determineLimits(angle, pos, size, min, max) {
		if (angle === min || angle === max) {
			return {
				start: pos - (size / 2),
				end: pos + (size / 2)
			};
		} else if (angle < min || angle > max) {
			return {
				start: pos - size,
				end: pos
			};
		}
	
		return {
			start: pos,
			end: pos + size
		};
	}
	
	/**
	 * Helper function to fit a radial linear scale with point labels
	 */
	function fitWithPointLabels(scale) {
	
		// Right, this is really confusing and there is a lot of maths going on here
		// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
		//
		// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
		//
		// Solution:
		//
		// We assume the radius of the polygon is half the size of the canvas at first
		// at each index we check if the text overlaps.
		//
		// Where it does, we store that angle and that index.
		//
		// After finding the largest index and angle we calculate how much we need to remove
		// from the shape radius to move the point inwards by that x.
		//
		// We average the left and right distances to get the maximum shape radius that can fit in the box
		// along with labels.
		//
		// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
		// on each side, removing that from the size, halving it and adding the left x protrusion width.
		//
		// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
		// and position it in the most space efficient manner
		//
		// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
	
		var plFont = helpers$1.options._parseFont(scale.options.pointLabels);
	
		// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
		// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
		var furthestLimits = {
			l: 0,
			r: scale.width,
			t: 0,
			b: scale.height - scale.paddingTop
		};
		var furthestAngles = {};
		var i, textSize, pointPosition;
	
		scale.ctx.font = plFont.string;
		scale._pointLabelSizes = [];
	
		var valueCount = scale.chart.data.labels.length;
		for (i = 0; i < valueCount; i++) {
			pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
			textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
			scale._pointLabelSizes[i] = textSize;
	
			// Add quarter circle to make degree 0 mean top of circle
			var angleRadians = scale.getIndexAngle(i);
			var angle = helpers$1.toDegrees(angleRadians) % 360;
			var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
			var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
	
			if (hLimits.start < furthestLimits.l) {
				furthestLimits.l = hLimits.start;
				furthestAngles.l = angleRadians;
			}
	
			if (hLimits.end > furthestLimits.r) {
				furthestLimits.r = hLimits.end;
				furthestAngles.r = angleRadians;
			}
	
			if (vLimits.start < furthestLimits.t) {
				furthestLimits.t = vLimits.start;
				furthestAngles.t = angleRadians;
			}
	
			if (vLimits.end > furthestLimits.b) {
				furthestLimits.b = vLimits.end;
				furthestAngles.b = angleRadians;
			}
		}
	
		scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
	}
	
	function getTextAlignForAngle(angle) {
		if (angle === 0 || angle === 180) {
			return 'center';
		} else if (angle < 180) {
			return 'left';
		}
	
		return 'right';
	}
	
	function fillText(ctx, text, position, lineHeight) {
		var y = position.y + lineHeight / 2;
		var i, ilen;
	
		if (helpers$1.isArray(text)) {
			for (i = 0, ilen = text.length; i < ilen; ++i) {
				ctx.fillText(text[i], position.x, y);
				y += lineHeight;
			}
		} else {
			ctx.fillText(text, position.x, y);
		}
	}
	
	function adjustPointPositionForLabelHeight(angle, textSize, position) {
		if (angle === 90 || angle === 270) {
			position.y -= (textSize.h / 2);
		} else if (angle > 270 || angle < 90) {
			position.y -= textSize.h;
		}
	}
	
	function drawPointLabels(scale) {
		var ctx = scale.ctx;
		var opts = scale.options;
		var pointLabelOpts = opts.pointLabels;
		var tickBackdropHeight = getTickBackdropHeight(opts);
		var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
		var plFont = helpers$1.options._parseFont(pointLabelOpts);
	
		ctx.save();
	
		ctx.font = plFont.string;
		ctx.textBaseline = 'middle';
	
		for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
			// Extra pixels out for some label spacing
			var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
			var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);
	
			// Keep this in loop since we may support array properties here
			var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
			ctx.fillStyle = pointLabelFontColor;
	
			var angleRadians = scale.getIndexAngle(i);
			var angle = helpers$1.toDegrees(angleRadians);
			ctx.textAlign = getTextAlignForAngle(angle);
			adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
			fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
		}
		ctx.restore();
	}
	
	function drawRadiusLine(scale, gridLineOpts, radius, index) {
		var ctx = scale.ctx;
		var circular = gridLineOpts.circular;
		var valueCount = scale.chart.data.labels.length;
		var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
		var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
		var pointPosition;
	
		if ((!circular && !valueCount) || !lineColor || !lineWidth) {
			return;
		}
	
		ctx.save();
		ctx.strokeStyle = lineColor;
		ctx.lineWidth = lineWidth;
		if (ctx.setLineDash) {
			ctx.setLineDash(gridLineOpts.borderDash || []);
			ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
		}
	
		ctx.beginPath();
		if (circular) {
			// Draw circular arcs between the points
			ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
		} else {
			// Draw straight lines connecting each index
			pointPosition = scale.getPointPosition(0, radius);
			ctx.moveTo(pointPosition.x, pointPosition.y);
	
			for (var i = 1; i < valueCount; i++) {
				pointPosition = scale.getPointPosition(i, radius);
				ctx.lineTo(pointPosition.x, pointPosition.y);
			}
		}
		ctx.closePath();
		ctx.stroke();
		ctx.restore();
	}
	
	function numberOrZero(param) {
		return helpers$1.isNumber(param) ? param : 0;
	}
	
	var scale_radialLinear = scale_linearbase.extend({
		setDimensions: function() {
			var me = this;
	
			// Set the unconstrained dimension before label rotation
			me.width = me.maxWidth;
			me.height = me.maxHeight;
			me.paddingTop = getTickBackdropHeight(me.options) / 2;
			me.xCenter = Math.floor(me.width / 2);
			me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
			me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
		},
	
		determineDataLimits: function() {
			var me = this;
			var chart = me.chart;
			var min = Number.POSITIVE_INFINITY;
			var max = Number.NEGATIVE_INFINITY;
	
			helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
				if (chart.isDatasetVisible(datasetIndex)) {
					var meta = chart.getDatasetMeta(datasetIndex);
	
					helpers$1.each(dataset.data, function(rawValue, index) {
						var value = +me.getRightValue(rawValue);
						if (isNaN(value) || meta.data[index].hidden) {
							return;
						}
	
						min = Math.min(value, min);
						max = Math.max(value, max);
					});
				}
			});
	
			me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
			me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);
	
			// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
			me.handleTickRangeOptions();
		},
	
		// Returns the maximum number of ticks based on the scale dimension
		_computeTickLimit: function() {
			return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
		},
	
		convertTicksToLabels: function() {
			var me = this;
	
			scale_linearbase.prototype.convertTicksToLabels.call(me);
	
			// Point labels
			me.pointLabels = me.chart.data.labels.map(function() {
				var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
				return label || label === 0 ? label : '';
			});
		},
	
		getLabelForIndex: function(index, datasetIndex) {
			return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
		},
	
		fit: function() {
			var me = this;
			var opts = me.options;
	
			if (opts.display && opts.pointLabels.display) {
				fitWithPointLabels(me);
			} else {
				me.setCenterPoint(0, 0, 0, 0);
			}
		},
	
		/**
		 * Set radius reductions and determine new radius and center point
		 * @private
		 */
		setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
			var me = this;
			var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
			var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
			var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
			var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
	
			radiusReductionLeft = numberOrZero(radiusReductionLeft);
			radiusReductionRight = numberOrZero(radiusReductionRight);
			radiusReductionTop = numberOrZero(radiusReductionTop);
			radiusReductionBottom = numberOrZero(radiusReductionBottom);
	
			me.drawingArea = Math.min(
				Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
				Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
			me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
		},
	
		setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
			var me = this;
			var maxRight = me.width - rightMovement - me.drawingArea;
			var maxLeft = leftMovement + me.drawingArea;
			var maxTop = topMovement + me.drawingArea;
			var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;
	
			me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
			me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
		},
	
		getIndexAngle: function(index) {
			var chart = this.chart;
			var angleMultiplier = 360 / chart.data.labels.length;
			var options = chart.options || {};
			var startAngle = options.startAngle || 0;
	
			// Start from the top instead of right, so remove a quarter of the circle
			var angle = (index * angleMultiplier + startAngle) % 360;
	
			return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
		},
	
		getDistanceFromCenterForValue: function(value) {
			var me = this;
	
			if (helpers$1.isNullOrUndef(value)) {
				return NaN;
			}
	
			// Take into account half font size + the yPadding of the top value
			var scalingFactor = me.drawingArea / (me.max - me.min);
			if (me.options.ticks.reverse) {
				return (me.max - value) * scalingFactor;
			}
			return (value - me.min) * scalingFactor;
		},
	
		getPointPosition: function(index, distanceFromCenter) {
			var me = this;
			var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
			return {
				x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
				y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
			};
		},
	
		getPointPositionForValue: function(index, value) {
			return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
		},
	
		getBasePosition: function(index) {
			var me = this;
			var min = me.min;
			var max = me.max;
	
			return me.getPointPositionForValue(index || 0,
				me.beginAtZero ? 0 :
				min < 0 && max < 0 ? max :
				min > 0 && max > 0 ? min :
				0);
		},
	
		/**
		 * @private
		 */
		_drawGrid: function() {
			var me = this;
			var ctx = me.ctx;
			var opts = me.options;
			var gridLineOpts = opts.gridLines;
			var angleLineOpts = opts.angleLines;
			var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
			var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
			var i, offset, position;
	
			if (opts.pointLabels.display) {
				drawPointLabels(me);
			}
	
			if (gridLineOpts.display) {
				helpers$1.each(me.ticks, function(label, index) {
					if (index !== 0) {
						offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
						drawRadiusLine(me, gridLineOpts, offset, index);
					}
				});
			}
	
			if (angleLineOpts.display && lineWidth && lineColor) {
				ctx.save();
				ctx.lineWidth = lineWidth;
				ctx.strokeStyle = lineColor;
				if (ctx.setLineDash) {
					ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
					ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
				}
	
				for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
					offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
					position = me.getPointPosition(i, offset);
					ctx.beginPath();
					ctx.moveTo(me.xCenter, me.yCenter);
					ctx.lineTo(position.x, position.y);
					ctx.stroke();
				}
	
				ctx.restore();
			}
		},
	
		/**
		 * @private
		 */
		_drawLabels: function() {
			var me = this;
			var ctx = me.ctx;
			var opts = me.options;
			var tickOpts = opts.ticks;
	
			if (!tickOpts.display) {
				return;
			}
	
			var startAngle = me.getIndexAngle(0);
			var tickFont = helpers$1.options._parseFont(tickOpts);
			var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
			var offset, width;
	
			ctx.save();
			ctx.font = tickFont.string;
			ctx.translate(me.xCenter, me.yCenter);
			ctx.rotate(startAngle);
			ctx.textAlign = 'center';
			ctx.textBaseline = 'middle';
	
			helpers$1.each(me.ticks, function(label, index) {
				if (index === 0 && !tickOpts.reverse) {
					return;
				}
	
				offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
	
				if (tickOpts.showLabelBackdrop) {
					width = ctx.measureText(label).width;
					ctx.fillStyle = tickOpts.backdropColor;
	
					ctx.fillRect(
						-width / 2 - tickOpts.backdropPaddingX,
						-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
						width + tickOpts.backdropPaddingX * 2,
						tickFont.size + tickOpts.backdropPaddingY * 2
					);
				}
	
				ctx.fillStyle = tickFontColor;
				ctx.fillText(label, 0, -offset);
			});
	
			ctx.restore();
		},
	
		/**
		 * @private
		 */
		_drawTitle: helpers$1.noop
	});
	
	// INTERNAL: static default options, registered in src/index.js
	var _defaults$3 = defaultConfig$3;
	scale_radialLinear._defaults = _defaults$3;
	
	var deprecated$1 = helpers$1._deprecated;
	var resolve$5 = helpers$1.options.resolve;
	var valueOrDefault$d = helpers$1.valueOrDefault;
	
	// Integer constants are from the ES6 spec.
	var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
	var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
	
	var INTERVALS = {
		millisecond: {
			common: true,
			size: 1,
			steps: 1000
		},
		second: {
			common: true,
			size: 1000,
			steps: 60
		},
		minute: {
			common: true,
			size: 60000,
			steps: 60
		},
		hour: {
			common: true,
			size: 3600000,
			steps: 24
		},
		day: {
			common: true,
			size: 86400000,
			steps: 30
		},
		week: {
			common: false,
			size: 604800000,
			steps: 4
		},
		month: {
			common: true,
			size: 2.628e9,
			steps: 12
		},
		quarter: {
			common: false,
			size: 7.884e9,
			steps: 4
		},
		year: {
			common: true,
			size: 3.154e10
		}
	};
	
	var UNITS = Object.keys(INTERVALS);
	
	function sorter(a, b) {
		return a - b;
	}
	
	function arrayUnique(items) {
		var hash = {};
		var out = [];
		var i, ilen, item;
	
		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			if (!hash[item]) {
				hash[item] = true;
				out.push(item);
			}
		}
	
		return out;
	}
	
	function getMin(options) {
		return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
	}
	
	function getMax(options) {
		return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
	}
	
	/**
	 * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
	 * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
	 * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
	 * extremity (left + width or top + height). Note that it would be more optimized to directly
	 * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
	 * to create the lookup table. The table ALWAYS contains at least two items: min and max.
	 *
	 * @param {number[]} timestamps - timestamps sorted from lowest to highest.
	 * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
	 * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
	 * If 'series', timestamps will be positioned at the same distance from each other. In this
	 * case, only timestamps that break the time linearity are registered, meaning that in the
	 * best case, all timestamps are linear, the table contains only min and max.
	 */
	function buildLookupTable(timestamps, min, max, distribution) {
		if (distribution === 'linear' || !timestamps.length) {
			return [
				{time: min, pos: 0},
				{time: max, pos: 1}
			];
		}
	
		var table = [];
		var items = [min];
		var i, ilen, prev, curr, next;
	
		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
			curr = timestamps[i];
			if (curr > min && curr < max) {
				items.push(curr);
			}
		}
	
		items.push(max);
	
		for (i = 0, ilen = items.length; i < ilen; ++i) {
			next = items[i + 1];
			prev = items[i - 1];
			curr = items[i];
	
			// only add points that breaks the scale linearity
			if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
				table.push({time: curr, pos: i / (ilen - 1)});
			}
		}
	
		return table;
	}
	
	// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
	function lookup(table, key, value) {
		var lo = 0;
		var hi = table.length - 1;
		var mid, i0, i1;
	
		while (lo >= 0 && lo <= hi) {
			mid = (lo + hi) >> 1;
			i0 = table[mid - 1] || null;
			i1 = table[mid];
	
			if (!i0) {
				// given value is outside table (before first item)
				return {lo: null, hi: i1};
			} else if (i1[key] < value) {
				lo = mid + 1;
			} else if (i0[key] > value) {
				hi = mid - 1;
			} else {
				return {lo: i0, hi: i1};
			}
		}
	
		// given value is outside table (after last item)
		return {lo: i1, hi: null};
	}
	
	/**
	 * Linearly interpolates the given source `value` using the table items `skey` values and
	 * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
	 * returns the position for a timestamp equal to 42. If value is out of bounds, values at
	 * index [0, 1] or [n - 1, n] are used for the interpolation.
	 */
	function interpolate$1(table, skey, sval, tkey) {
		var range = lookup(table, skey, sval);
	
		// Note: the lookup table ALWAYS contains at least 2 items (min and max)
		var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
		var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
	
		var span = next[skey] - prev[skey];
		var ratio = span ? (sval - prev[skey]) / span : 0;
		var offset = (next[tkey] - prev[tkey]) * ratio;
	
		return prev[tkey] + offset;
	}
	
	function toTimestamp(scale, input) {
		var adapter = scale._adapter;
		var options = scale.options.time;
		var parser = options.parser;
		var format = parser || options.format;
		var value = input;
	
		if (typeof parser === 'function') {
			value = parser(value);
		}
	
		// Only parse if its not a timestamp already
		if (!helpers$1.isFinite(value)) {
			value = typeof format === 'string'
				? adapter.parse(value, format)
				: adapter.parse(value);
		}
	
		if (value !== null) {
			return +value;
		}
	
		// Labels are in an incompatible format and no `parser` has been provided.
		// The user might still use the deprecated `format` option for parsing.
		if (!parser && typeof format === 'function') {
			value = format(input);
	
			// `format` could return something else than a timestamp, if so, parse it
			if (!helpers$1.isFinite(value)) {
				value = adapter.parse(value);
			}
		}
	
		return value;
	}
	
	function parse(scale, input) {
		if (helpers$1.isNullOrUndef(input)) {
			return null;
		}
	
		var options = scale.options.time;
		var value = toTimestamp(scale, scale.getRightValue(input));
		if (value === null) {
			return value;
		}
	
		if (options.round) {
			value = +scale._adapter.startOf(value, options.round);
		}
	
		return value;
	}
	
	/**
	 * Figures out what unit results in an appropriate number of auto-generated ticks
	 */
	function determineUnitForAutoTicks(minUnit, min, max, capacity) {
		var ilen = UNITS.length;
		var i, interval, factor;
	
		for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
			interval = INTERVALS[UNITS[i]];
			factor = interval.steps ? interval.steps : MAX_INTEGER;
	
			if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
				return UNITS[i];
			}
		}
	
		return UNITS[ilen - 1];
	}
	
	/**
	 * Figures out what unit to format a set of ticks with
	 */
	function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
		var i, unit;
	
		for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
			unit = UNITS[i];
			if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
				return unit;
			}
		}
	
		return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
	}
	
	function determineMajorUnit(unit) {
		for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
			if (INTERVALS[UNITS[i]].common) {
				return UNITS[i];
			}
		}
	}
	
	/**
	 * Generates a maximum of `capacity` timestamps between min and max, rounded to the
	 * `minor` unit using the given scale time `options`.
	 * Important: this method can return ticks outside the min and max range, it's the
	 * responsibility of the calling code to clamp values if needed.
	 */
	function generate(scale, min, max, capacity) {
		var adapter = scale._adapter;
		var options = scale.options;
		var timeOpts = options.time;
		var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
		var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
		var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
		var first = min;
		var ticks = [];
		var time;
	
		// For 'week' unit, handle the first day of week option
		if (weekday) {
			first = +adapter.startOf(first, 'isoWeek', weekday);
		}
	
		// Align first ticks on unit
		first = +adapter.startOf(first, weekday ? 'day' : minor);
	
		// Prevent browser from freezing in case user options request millions of milliseconds
		if (adapter.diff(max, min, minor) > 100000 * stepSize) {
			throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
		}
	
		for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
			ticks.push(time);
		}
	
		if (time === max || options.bounds === 'ticks') {
			ticks.push(time);
		}
	
		return ticks;
	}
	
	/**
	 * Returns the start and end offsets from edges in the form of {start, end}
	 * where each value is a relative width to the scale and ranges between 0 and 1.
	 * They add extra margins on the both sides by scaling down the original scale.
	 * Offsets are added when the `offset` option is true.
	 */
	function computeOffsets(table, ticks, min, max, options) {
		var start = 0;
		var end = 0;
		var first, last;
	
		if (options.offset && ticks.length) {
			first = interpolate$1(table, 'time', ticks[0], 'pos');
			if (ticks.length === 1) {
				start = 1 - first;
			} else {
				start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
			}
			last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
			if (ticks.length === 1) {
				end = last;
			} else {
				end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
			}
		}
	
		return {start: start, end: end, factor: 1 / (start + 1 + end)};
	}
	
	function setMajorTicks(scale, ticks, map, majorUnit) {
		var adapter = scale._adapter;
		var first = +adapter.startOf(ticks[0].value, majorUnit);
		var last = ticks[ticks.length - 1].value;
		var major, index;
	
		for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
			index = map[major];
			if (index >= 0) {
				ticks[index].major = true;
			}
		}
		return ticks;
	}
	
	function ticksFromTimestamps(scale, values, majorUnit) {
		var ticks = [];
		var map = {};
		var ilen = values.length;
		var i, value;
	
		for (i = 0; i < ilen; ++i) {
			value = values[i];
			map[value] = i;
	
			ticks.push({
				value: value,
				major: false
			});
		}
	
		// We set the major ticks separately from the above loop because calling startOf for every tick
		// is expensive when there is a large number of ticks
		return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
	}
	
	var defaultConfig$4 = {
		position: 'bottom',
	
		/**
		 * Data distribution along the scale:
		 * - 'linear': data are spread according to their time (distances can vary),
		 * - 'series': data are spread at the same distance from each other.
		 * @see https://github.com/chartjs/Chart.js/pull/4507
		 * @since 2.7.0
		 */
		distribution: 'linear',
	
		/**
		 * Scale boundary strategy (bypassed by min/max time options)
		 * - `data`: make sure data are fully visible, ticks outside are removed
		 * - `ticks`: make sure ticks are fully visible, data outside are truncated
		 * @see https://github.com/chartjs/Chart.js/pull/4556
		 * @since 2.7.0
		 */
		bounds: 'data',
	
		adapters: {},
		time: {
			parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
			unit: false, // false == automatic or override with week, month, year, etc.
			round: false, // none, or override with week, month, year, etc.
			displayFormat: false, // DEPRECATED
			isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
			minUnit: 'millisecond',
			displayFormats: {}
		},
		ticks: {
			autoSkip: false,
	
			/**
			 * Ticks generation input values:
			 * - 'auto': generates "optimal" ticks based on scale size and time options.
			 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
			 * - 'labels': generates ticks from user given `data.labels` values ONLY.
			 * @see https://github.com/chartjs/Chart.js/pull/4507
			 * @since 2.7.0
			 */
			source: 'auto',
	
			major: {
				enabled: false
			}
		}
	};
	
	var scale_time = core_scale.extend({
		initialize: function() {
			this.mergeTicksOptions();
			core_scale.prototype.initialize.call(this);
		},
	
		update: function() {
			var me = this;
			var options = me.options;
			var time = options.time || (options.time = {});
			var adapter = me._adapter = new core_adapters._date(options.adapters.date);
	
			// DEPRECATIONS: output a message only one time per update
			deprecated$1('time scale', time.format, 'time.format', 'time.parser');
			deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
			deprecated$1('time scale', time.max, 'time.max', 'ticks.max');
	
			// Backward compatibility: before introducing adapter, `displayFormats` was
			// supposed to contain *all* unit/string pairs but this can't be resolved
			// when loading the scale (adapters are loaded afterward), so let's populate
			// missing formats on update
			helpers$1.mergeIf(time.displayFormats, adapter.formats());
	
			return core_scale.prototype.update.apply(me, arguments);
		},
	
		/**
		 * Allows data to be referenced via 't' attribute
		 */
		getRightValue: function(rawValue) {
			if (rawValue && rawValue.t !== undefined) {
				rawValue = rawValue.t;
			}
			return core_scale.prototype.getRightValue.call(this, rawValue);
		},
	
		determineDataLimits: function() {
			var me = this;
			var chart = me.chart;
			var adapter = me._adapter;
			var options = me.options;
			var unit = options.time.unit || 'day';
			var min = MAX_INTEGER;
			var max = MIN_INTEGER;
			var timestamps = [];
			var datasets = [];
			var labels = [];
			var i, j, ilen, jlen, data, timestamp, labelsAdded;
			var dataLabels = me._getLabels();
	
			for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
				labels.push(parse(me, dataLabels[i]));
			}
	
			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				if (chart.isDatasetVisible(i)) {
					data = chart.data.datasets[i].data;
	
					// Let's consider that all data have the same format.
					if (helpers$1.isObject(data[0])) {
						datasets[i] = [];
	
						for (j = 0, jlen = data.length; j < jlen; ++j) {
							timestamp = parse(me, data[j]);
							timestamps.push(timestamp);
							datasets[i][j] = timestamp;
						}
					} else {
						datasets[i] = labels.slice(0);
						if (!labelsAdded) {
							timestamps = timestamps.concat(labels);
							labelsAdded = true;
						}
					}
				} else {
					datasets[i] = [];
				}
			}
	
			if (labels.length) {
				min = Math.min(min, labels[0]);
				max = Math.max(max, labels[labels.length - 1]);
			}
	
			if (timestamps.length) {
				timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
				min = Math.min(min, timestamps[0]);
				max = Math.max(max, timestamps[timestamps.length - 1]);
			}
	
			min = parse(me, getMin(options)) || min;
			max = parse(me, getMax(options)) || max;
	
			// In case there is no valid min/max, set limits based on unit time option
			min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
			max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;
	
			// Make sure that max is strictly higher than min (required by the lookup table)
			me.min = Math.min(min, max);
			me.max = Math.max(min + 1, max);
	
			// PRIVATE
			me._table = [];
			me._timestamps = {
				data: timestamps,
				datasets: datasets,
				labels: labels
			};
		},
	
		buildTicks: function() {
			var me = this;
			var min = me.min;
			var max = me.max;
			var options = me.options;
			var tickOpts = options.ticks;
			var timeOpts = options.time;
			var timestamps = me._timestamps;
			var ticks = [];
			var capacity = me.getLabelCapacity(min);
			var source = tickOpts.source;
			var distribution = options.distribution;
			var i, ilen, timestamp;
	
			if (source === 'data' || (source === 'auto' && distribution === 'series')) {
				timestamps = timestamps.data;
			} else if (source === 'labels') {
				timestamps = timestamps.labels;
			} else {
				timestamps = generate(me, min, max, capacity);
			}
	
			if (options.bounds === 'ticks' && timestamps.length) {
				min = timestamps[0];
				max = timestamps[timestamps.length - 1];
			}
	
			// Enforce limits with user min/max options
			min = parse(me, getMin(options)) || min;
			max = parse(me, getMax(options)) || max;
	
			// Remove ticks outside the min/max range
			for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
				timestamp = timestamps[i];
				if (timestamp >= min && timestamp <= max) {
					ticks.push(timestamp);
				}
			}
	
			me.min = min;
			me.max = max;
	
			// PRIVATE
			// determineUnitForFormatting relies on the number of ticks so we don't use it when
			// autoSkip is enabled because we don't yet know what the final number of ticks will be
			me._unit = timeOpts.unit || (tickOpts.autoSkip
				? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
				: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
			me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
				: determineMajorUnit(me._unit);
			me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
			me._offsets = computeOffsets(me._table, ticks, min, max, options);
	
			if (tickOpts.reverse) {
				ticks.reverse();
			}
	
			return ticksFromTimestamps(me, ticks, me._majorUnit);
		},
	
		getLabelForIndex: function(index, datasetIndex) {
			var me = this;
			var adapter = me._adapter;
			var data = me.chart.data;
			var timeOpts = me.options.time;
			var label = data.labels && index < data.labels.length ? data.labels[index] : '';
			var value = data.datasets[datasetIndex].data[index];
	
			if (helpers$1.isObject(value)) {
				label = me.getRightValue(value);
			}
			if (timeOpts.tooltipFormat) {
				return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
			}
			if (typeof label === 'string') {
				return label;
			}
			return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
		},
	
		/**
		 * Function to format an individual tick mark
		 * @private
		 */
		tickFormatFunction: function(time, index, ticks, format) {
			var me = this;
			var adapter = me._adapter;
			var options = me.options;
			var formats = options.time.displayFormats;
			var minorFormat = formats[me._unit];
			var majorUnit = me._majorUnit;
			var majorFormat = formats[majorUnit];
			var tick = ticks[index];
			var tickOpts = options.ticks;
			var major = majorUnit && majorFormat && tick && tick.major;
			var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
			var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
			var formatter = resolve$5([
				nestedTickOpts.callback,
				nestedTickOpts.userCallback,
				tickOpts.callback,
				tickOpts.userCallback
			]);
	
			return formatter ? formatter(label, index, ticks) : label;
		},
	
		convertTicksToLabels: function(ticks) {
			var labels = [];
			var i, ilen;
	
			for (i = 0, ilen = ticks.length; i < ilen; ++i) {
				labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
			}
	
			return labels;
		},
	
		/**
		 * @private
		 */
		getPixelForOffset: function(time) {
			var me = this;
			var offsets = me._offsets;
			var pos = interpolate$1(me._table, 'time', time, 'pos');
			return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
		},
	
		getPixelForValue: function(value, index, datasetIndex) {
			var me = this;
			var time = null;
	
			if (index !== undefined && datasetIndex !== undefined) {
				time = me._timestamps.datasets[datasetIndex][index];
			}
	
			if (time === null) {
				time = parse(me, value);
			}
	
			if (time !== null) {
				return me.getPixelForOffset(time);
			}
		},
	
		getPixelForTick: function(index) {
			var ticks = this.getTicks();
			return index >= 0 && index < ticks.length ?
				this.getPixelForOffset(ticks[index].value) :
				null;
		},
	
		getValueForPixel: function(pixel) {
			var me = this;
			var offsets = me._offsets;
			var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
			var time = interpolate$1(me._table, 'pos', pos, 'time');
	
			// DEPRECATION, we should return time directly
			return me._adapter._create(time);
		},
	
		/**
		 * @private
		 */
		_getLabelSize: function(label) {
			var me = this;
			var ticksOpts = me.options.ticks;
			var tickLabelWidth = me.ctx.measureText(label).width;
			var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
			var cosRotation = Math.cos(angle);
			var sinRotation = Math.sin(angle);
			var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);
	
			return {
				w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
				h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
			};
		},
	
		/**
		 * Crude approximation of what the label width might be
		 * @private
		 */
		getLabelWidth: function(label) {
			return this._getLabelSize(label).w;
		},
	
		/**
		 * @private
		 */
		getLabelCapacity: function(exampleTime) {
			var me = this;
			var timeOpts = me.options.time;
			var displayFormats = timeOpts.displayFormats;
	
			// pick the longest format (milliseconds) for guestimation
			var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
			var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
			var size = me._getLabelSize(exampleLabel);
			var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);
	
			if (me.options.offset) {
				capacity--;
			}
	
			return capacity > 0 ? capacity : 1;
		}
	});
	
	// INTERNAL: static default options, registered in src/index.js
	var _defaults$4 = defaultConfig$4;
	scale_time._defaults = _defaults$4;
	
	var scales = {
		category: scale_category,
		linear: scale_linear,
		logarithmic: scale_logarithmic,
		radialLinear: scale_radialLinear,
		time: scale_time
	};
	
	var FORMATS = {
		datetime: 'MMM D, YYYY, h:mm:ss a',
		millisecond: 'h:mm:ss.SSS a',
		second: 'h:mm:ss a',
		minute: 'h:mm a',
		hour: 'hA',
		day: 'MMM D',
		week: 'll',
		month: 'MMM YYYY',
		quarter: '[Q]Q - YYYY',
		year: 'YYYY'
	};
	
	core_adapters._date.override(typeof moment === 'function' ? {
		_id: 'moment', // DEBUG ONLY
	
		formats: function() {
			return FORMATS;
		},
	
		parse: function(value, format) {
			if (typeof value === 'string' && typeof format === 'string') {
				value = moment(value, format);
			} else if (!(value instanceof moment)) {
				value = moment(value);
			}
			return value.isValid() ? value.valueOf() : null;
		},
	
		format: function(time, format) {
			return moment(time).format(format);
		},
	
		add: function(time, amount, unit) {
			return moment(time).add(amount, unit).valueOf();
		},
	
		diff: function(max, min, unit) {
			return moment(max).diff(moment(min), unit);
		},
	
		startOf: function(time, unit, weekday) {
			time = moment(time);
			if (unit === 'isoWeek') {
				return time.isoWeekday(weekday).valueOf();
			}
			return time.startOf(unit).valueOf();
		},
	
		endOf: function(time, unit) {
			return moment(time).endOf(unit).valueOf();
		},
	
		// DEPRECATIONS
	
		/**
		 * Provided for backward compatibility with scale.getValueForPixel().
		 * @deprecated since version 2.8.0
		 * @todo remove at version 3
		 * @private
		 */
		_create: function(time) {
			return moment(time);
		},
	} : {});
	
	core_defaults._set('global', {
		plugins: {
			filler: {
				propagate: true
			}
		}
	});
	
	var mappers = {
		dataset: function(source) {
			var index = source.fill;
			var chart = source.chart;
			var meta = chart.getDatasetMeta(index);
			var visible = meta && chart.isDatasetVisible(index);
			var points = (visible && meta.dataset._children) || [];
			var length = points.length || 0;
	
			return !length ? null : function(point, i) {
				return (i < length && points[i]._view) || null;
			};
		},
	
		boundary: function(source) {
			var boundary = source.boundary;
			var x = boundary ? boundary.x : null;
			var y = boundary ? boundary.y : null;
	
			if (helpers$1.isArray(boundary)) {
				return function(point, i) {
					return boundary[i];
				};
			}
	
			return function(point) {
				return {
					x: x === null ? point.x : x,
					y: y === null ? point.y : y,
				};
			};
		}
	};
	
	// @todo if (fill[0] === '#')
	function decodeFill(el, index, count) {
		var model = el._model || {};
		var fill = model.fill;
		var target;
	
		if (fill === undefined) {
			fill = !!model.backgroundColor;
		}
	
		if (fill === false || fill === null) {
			return false;
		}
	
		if (fill === true) {
			return 'origin';
		}
	
		target = parseFloat(fill, 10);
		if (isFinite(target) && Math.floor(target) === target) {
			if (fill[0] === '-' || fill[0] === '+') {
				target = index + target;
			}
	
			if (target === index || target < 0 || target >= count) {
				return false;
			}
	
			return target;
		}
	
		switch (fill) {
		// compatibility
		case 'bottom':
			return 'start';
		case 'top':
			return 'end';
		case 'zero':
			return 'origin';
		// supported boundaries
		case 'origin':
		case 'start':
		case 'end':
			return fill;
		// invalid fill values
		default:
			return false;
		}
	}
	
	function computeLinearBoundary(source) {
		var model = source.el._model || {};
		var scale = source.el._scale || {};
		var fill = source.fill;
		var target = null;
		var horizontal;
	
		if (isFinite(fill)) {
			return null;
		}
	
		// Backward compatibility: until v3, we still need to support boundary values set on
		// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
		// controllers might still use it (e.g. the Smith chart).
	
		if (fill === 'start') {
			target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
		} else if (fill === 'end') {
			target = model.scaleTop === undefined ? scale.top : model.scaleTop;
		} else if (model.scaleZero !== undefined) {
			target = model.scaleZero;
		} else if (scale.getBasePixel) {
			target = scale.getBasePixel();
		}
	
		if (target !== undefined && target !== null) {
			if (target.x !== undefined && target.y !== undefined) {
				return target;
			}
	
			if (helpers$1.isFinite(target)) {
				horizontal = scale.isHorizontal();
				return {
					x: horizontal ? target : null,
					y: horizontal ? null : target
				};
			}
		}
	
		return null;
	}
	
	function computeCircularBoundary(source) {
		var scale = source.el._scale;
		var options = scale.options;
		var length = scale.chart.data.labels.length;
		var fill = source.fill;
		var target = [];
		var start, end, center, i, point;
	
		if (!length) {
			return null;
		}
	
		start = options.ticks.reverse ? scale.max : scale.min;
		end = options.ticks.reverse ? scale.min : scale.max;
		center = scale.getPointPositionForValue(0, start);
		for (i = 0; i < length; ++i) {
			point = fill === 'start' || fill === 'end'
				? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
				: scale.getBasePosition(i);
			if (options.gridLines.circular) {
				point.cx = center.x;
				point.cy = center.y;
				point.angle = scale.getIndexAngle(i) - Math.PI / 2;
			}
			target.push(point);
		}
		return target;
	}
	
	function computeBoundary(source) {
		var scale = source.el._scale || {};
	
		if (scale.getPointPositionForValue) {
			return computeCircularBoundary(source);
		}
		return computeLinearBoundary(source);
	}
	
	function resolveTarget(sources, index, propagate) {
		var source = sources[index];
		var fill = source.fill;
		var visited = [index];
		var target;
	
		if (!propagate) {
			return fill;
		}
	
		while (fill !== false && visited.indexOf(fill) === -1) {
			if (!isFinite(fill)) {
				return fill;
			}
	
			target = sources[fill];
			if (!target) {
				return false;
			}
	
			if (target.visible) {
				return fill;
			}
	
			visited.push(fill);
			fill = target.fill;
		}
	
		return false;
	}
	
	function createMapper(source) {
		var fill = source.fill;
		var type = 'dataset';
	
		if (fill === false) {
			return null;
		}
	
		if (!isFinite(fill)) {
			type = 'boundary';
		}
	
		return mappers[type](source);
	}
	
	function isDrawable(point) {
		return point && !point.skip;
	}
	
	function drawArea(ctx, curve0, curve1, len0, len1) {
		var i, cx, cy, r;
	
		if (!len0 || !len1) {
			return;
		}
	
		// building first area curve (normal)
		ctx.moveTo(curve0[0].x, curve0[0].y);
		for (i = 1; i < len0; ++i) {
			helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
		}
	
		if (curve1[0].angle !== undefined) {
			cx = curve1[0].cx;
			cy = curve1[0].cy;
			r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
			for (i = len1 - 1; i > 0; --i) {
				ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
			}
			return;
		}
	
		// joining the two area curves
		ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);
	
		// building opposite area curve (reverse)
		for (i = len1 - 1; i > 0; --i) {
			helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
		}
	}
	
	function doFill(ctx, points, mapper, view, color, loop) {
		var count = points.length;
		var span = view.spanGaps;
		var curve0 = [];
		var curve1 = [];
		var len0 = 0;
		var len1 = 0;
		var i, ilen, index, p0, p1, d0, d1, loopOffset;
	
		ctx.beginPath();
	
		for (i = 0, ilen = count; i < ilen; ++i) {
			index = i % count;
			p0 = points[index]._view;
			p1 = mapper(p0, index, view);
			d0 = isDrawable(p0);
			d1 = isDrawable(p1);
	
			if (loop && loopOffset === undefined && d0) {
				loopOffset = i + 1;
				ilen = count + loopOffset;
			}
	
			if (d0 && d1) {
				len0 = curve0.push(p0);
				len1 = curve1.push(p1);
			} else if (len0 && len1) {
				if (!span) {
					drawArea(ctx, curve0, curve1, len0, len1);
					len0 = len1 = 0;
					curve0 = [];
					curve1 = [];
				} else {
					if (d0) {
						curve0.push(p0);
					}
					if (d1) {
						curve1.push(p1);
					}
				}
			}
		}
	
		drawArea(ctx, curve0, curve1, len0, len1);
	
		ctx.closePath();
		ctx.fillStyle = color;
		ctx.fill();
	}
	
	var plugin_filler = {
		id: 'filler',
	
		afterDatasetsUpdate: function(chart, options) {
			var count = (chart.data.datasets || []).length;
			var propagate = options.propagate;
			var sources = [];
			var meta, i, el, source;
	
			for (i = 0; i < count; ++i) {
				meta = chart.getDatasetMeta(i);
				el = meta.dataset;
				source = null;
	
				if (el && el._model && el instanceof elements.Line) {
					source = {
						visible: chart.isDatasetVisible(i),
						fill: decodeFill(el, i, count),
						chart: chart,
						el: el
					};
				}
	
				meta.$filler = source;
				sources.push(source);
			}
	
			for (i = 0; i < count; ++i) {
				source = sources[i];
				if (!source) {
					continue;
				}
	
				source.fill = resolveTarget(sources, i, propagate);
				source.boundary = computeBoundary(source);
				source.mapper = createMapper(source);
			}
		},
	
		beforeDatasetsDraw: function(chart) {
			var metasets = chart._getSortedVisibleDatasetMetas();
			var ctx = chart.ctx;
			var meta, i, el, view, points, mapper, color;
	
			for (i = metasets.length - 1; i >= 0; --i) {
				meta = metasets[i].$filler;
	
				if (!meta || !meta.visible) {
					continue;
				}
	
				el = meta.el;
				view = el._view;
				points = el._children || [];
				mapper = meta.mapper;
				color = view.backgroundColor || core_defaults.global.defaultColor;
	
				if (mapper && color && points.length) {
					helpers$1.canvas.clipArea(ctx, chart.chartArea);
					doFill(ctx, points, mapper, view, color, el._loop);
					helpers$1.canvas.unclipArea(ctx);
				}
			}
		}
	};
	
	var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
	var noop$1 = helpers$1.noop;
	var valueOrDefault$e = helpers$1.valueOrDefault;
	
	core_defaults._set('global', {
		legend: {
			display: true,
			position: 'top',
			align: 'center',
			fullWidth: true,
			reverse: false,
			weight: 1000,
	
			// a callback that will handle
			onClick: function(e, legendItem) {
				var index = legendItem.datasetIndex;
				var ci = this.chart;
				var meta = ci.getDatasetMeta(index);
	
				// See controller.isDatasetVisible comment
				meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
	
				// We hid a dataset ... rerender the chart
				ci.update();
			},
	
			onHover: null,
			onLeave: null,
	
			labels: {
				boxWidth: 40,
				padding: 10,
				// Generates labels shown in the legend
				// Valid properties to return:
				// text : text to display
				// fillStyle : fill of coloured box
				// strokeStyle: stroke of coloured box
				// hidden : if this legend item refers to a hidden item
				// lineCap : cap style for line
				// lineDash
				// lineDashOffset :
				// lineJoin :
				// lineWidth :
				generateLabels: function(chart) {
					var datasets = chart.data.datasets;
					var options = chart.options.legend || {};
					var usePointStyle = options.labels && options.labels.usePointStyle;
	
					return chart._getSortedDatasetMetas().map(function(meta) {
						var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
	
						return {
							text: datasets[meta.index].label,
							fillStyle: style.backgroundColor,
							hidden: !chart.isDatasetVisible(meta.index),
							lineCap: style.borderCapStyle,
							lineDash: style.borderDash,
							lineDashOffset: style.borderDashOffset,
							lineJoin: style.borderJoinStyle,
							lineWidth: style.borderWidth,
							strokeStyle: style.borderColor,
							pointStyle: style.pointStyle,
							rotation: style.rotation,
	
							// Below is extra data used for toggling the datasets
							datasetIndex: meta.index
						};
					}, this);
				}
			}
		},
	
		legendCallback: function(chart) {
			var list = document.createElement('ul');
			var datasets = chart.data.datasets;
			var i, ilen, listItem, listItemSpan;
	
			list.setAttribute('class', chart.id + '-legend');
	
			for (i = 0, ilen = datasets.length; i < ilen; i++) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
				if (datasets[i].label) {
					listItem.appendChild(document.createTextNode(datasets[i].label));
				}
			}
	
			return list.outerHTML;
		}
	});
	
	/**
	 * Helper function to get the box width based on the usePointStyle option
	 * @param {object} labelopts - the label options on the legend
	 * @param {number} fontSize - the label font size
	 * @return {number} width of the color box area
	 */
	function getBoxWidth(labelOpts, fontSize) {
		return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
			fontSize :
			labelOpts.boxWidth;
	}
	
	/**
	 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
	 */
	var Legend = core_element.extend({
	
		initialize: function(config) {
			var me = this;
			helpers$1.extend(me, config);
	
			// Contains hit boxes for each dataset (in dataset order)
			me.legendHitBoxes = [];
	
			/**
			  * @private
			  */
			me._hoveredItem = null;
	
			// Are we in doughnut mode which has a different data type
			me.doughnutMode = false;
		},
	
		// These methods are ordered by lifecycle. Utilities then follow.
		// Any function defined here is inherited by all legend types.
		// Any function can be extended by the legend type
	
		beforeUpdate: noop$1,
		update: function(maxWidth, maxHeight, margins) {
			var me = this;
	
			// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
			me.beforeUpdate();
	
			// Absorb the master measurements
			me.maxWidth = maxWidth;
			me.maxHeight = maxHeight;
			me.margins = margins;
	
			// Dimensions
			me.beforeSetDimensions();
			me.setDimensions();
			me.afterSetDimensions();
			// Labels
			me.beforeBuildLabels();
			me.buildLabels();
			me.afterBuildLabels();
	
			// Fit
			me.beforeFit();
			me.fit();
			me.afterFit();
			//
			me.afterUpdate();
	
			return me.minSize;
		},
		afterUpdate: noop$1,
	
		//
	
		beforeSetDimensions: noop$1,
		setDimensions: function() {
			var me = this;
			// Set the unconstrained dimension before label rotation
			if (me.isHorizontal()) {
				// Reset position before calculating rotation
				me.width = me.maxWidth;
				me.left = 0;
				me.right = me.width;
			} else {
				me.height = me.maxHeight;
	
				// Reset position before calculating rotation
				me.top = 0;
				me.bottom = me.height;
			}
	
			// Reset padding
			me.paddingLeft = 0;
			me.paddingTop = 0;
			me.paddingRight = 0;
			me.paddingBottom = 0;
	
			// Reset minSize
			me.minSize = {
				width: 0,
				height: 0
			};
		},
		afterSetDimensions: noop$1,
	
		//
	
		beforeBuildLabels: noop$1,
		buildLabels: function() {
			var me = this;
			var labelOpts = me.options.labels || {};
			var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];
	
			if (labelOpts.filter) {
				legendItems = legendItems.filter(function(item) {
					return labelOpts.filter(item, me.chart.data);
				});
			}
	
			if (me.options.reverse) {
				legendItems.reverse();
			}
	
			me.legendItems = legendItems;
		},
		afterBuildLabels: noop$1,
	
		//
	
		beforeFit: noop$1,
		fit: function() {
			var me = this;
			var opts = me.options;
			var labelOpts = opts.labels;
			var display = opts.display;
	
			var ctx = me.ctx;
	
			var labelFont = helpers$1.options._parseFont(labelOpts);
			var fontSize = labelFont.size;
	
			// Reset hit boxes
			var hitboxes = me.legendHitBoxes = [];
	
			var minSize = me.minSize;
			var isHorizontal = me.isHorizontal();
	
			if (isHorizontal) {
				minSize.width = me.maxWidth; // fill all the width
				minSize.height = display ? 10 : 0;
			} else {
				minSize.width = display ? 10 : 0;
				minSize.height = me.maxHeight; // fill all the height
			}
	
			// Increase sizes here
			if (!display) {
				me.width = minSize.width = me.height = minSize.height = 0;
				return;
			}
			ctx.font = labelFont.string;
	
			if (isHorizontal) {
				// Labels
	
				// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
				var lineWidths = me.lineWidths = [0];
				var totalHeight = 0;
	
				ctx.textAlign = 'left';
				ctx.textBaseline = 'middle';
	
				helpers$1.each(me.legendItems, function(legendItem, i) {
					var boxWidth = getBoxWidth(labelOpts, fontSize);
					var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
	
					if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
						totalHeight += fontSize + labelOpts.padding;
						lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
					}
	
					// Store the hitbox width and height here. Final position will be updated in `draw`
					hitboxes[i] = {
						left: 0,
						top: 0,
						width: width,
						height: fontSize
					};
	
					lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
				});
	
				minSize.height += totalHeight;
	
			} else {
				var vPadding = labelOpts.padding;
				var columnWidths = me.columnWidths = [];
				var columnHeights = me.columnHeights = [];
				var totalWidth = labelOpts.padding;
				var currentColWidth = 0;
				var currentColHeight = 0;
	
				helpers$1.each(me.legendItems, function(legendItem, i) {
					var boxWidth = getBoxWidth(labelOpts, fontSize);
					var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
	
					// If too tall, go to new column
					if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
						totalWidth += currentColWidth + labelOpts.padding;
						columnWidths.push(currentColWidth); // previous column width
						columnHeights.push(currentColHeight);
						currentColWidth = 0;
						currentColHeight = 0;
					}
	
					// Get max width
					currentColWidth = Math.max(currentColWidth, itemWidth);
					currentColHeight += fontSize + vPadding;
	
					// Store the hitbox width and height here. Final position will be updated in `draw`
					hitboxes[i] = {
						left: 0,
						top: 0,
						width: itemWidth,
						height: fontSize
					};
				});
	
				totalWidth += currentColWidth;
				columnWidths.push(currentColWidth);
				columnHeights.push(currentColHeight);
				minSize.width += totalWidth;
			}
	
			me.width = minSize.width;
			me.height = minSize.height;
		},
		afterFit: noop$1,
	
		// Shared Methods
		isHorizontal: function() {
			return this.options.position === 'top' || this.options.position === 'bottom';
		},
	
		// Actually draw the legend on the canvas
		draw: function() {
			var me = this;
			var opts = me.options;
			var labelOpts = opts.labels;
			var globalDefaults = core_defaults.global;
			var defaultColor = globalDefaults.defaultColor;
			var lineDefault = globalDefaults.elements.line;
			var legendHeight = me.height;
			var columnHeights = me.columnHeights;
			var legendWidth = me.width;
			var lineWidths = me.lineWidths;
	
			if (!opts.display) {
				return;
			}
	
			var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
			var ctx = me.ctx;
			var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
			var labelFont = helpers$1.options._parseFont(labelOpts);
			var fontSize = labelFont.size;
			var cursor;
	
			// Canvas setup
			ctx.textAlign = rtlHelper.textAlign('left');
			ctx.textBaseline = 'middle';
			ctx.lineWidth = 0.5;
			ctx.strokeStyle = fontColor; // for strikethrough effect
			ctx.fillStyle = fontColor; // render in correct colour
			ctx.font = labelFont.string;
	
			var boxWidth = getBoxWidth(labelOpts, fontSize);
			var hitboxes = me.legendHitBoxes;
	
			// current position
			var drawLegendBox = function(x, y, legendItem) {
				if (isNaN(boxWidth) || boxWidth <= 0) {
					return;
				}
	
				// Set the ctx for the box
				ctx.save();
	
				var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
				ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
				ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
				ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
				ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
				ctx.lineWidth = lineWidth;
				ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);
	
				if (ctx.setLineDash) {
					// IE 9 and 10 do not support line dash
					ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
				}
	
				if (labelOpts && labelOpts.usePointStyle) {
					// Recalculate x and y for drawPoint() because its expecting
					// x and y to be center of figure (instead of top left)
					var radius = boxWidth * Math.SQRT2 / 2;
					var centerX = rtlHelper.xPlus(x, boxWidth / 2);
					var centerY = y + fontSize / 2;
	
					// Draw pointStyle as legend symbol
					helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
				} else {
					// Draw box as legend symbol
					ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
					if (lineWidth !== 0) {
						ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
					}
				}
	
				ctx.restore();
			};
	
			var fillText = function(x, y, legendItem, textWidth) {
				var halfFontSize = fontSize / 2;
				var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
				var yMiddle = y + halfFontSize;
	
				ctx.fillText(legendItem.text, xLeft, yMiddle);
	
				if (legendItem.hidden) {
					// Strikethrough the text if hidden
					ctx.beginPath();
					ctx.lineWidth = 2;
					ctx.moveTo(xLeft, yMiddle);
					ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
					ctx.stroke();
				}
			};
	
			var alignmentOffset = function(dimension, blockSize) {
				switch (opts.align) {
				case 'start':
					return labelOpts.padding;
				case 'end':
					return dimension - blockSize;
				default: // center
					return (dimension - blockSize + labelOpts.padding) / 2;
				}
			};
	
			// Horizontal
			var isHorizontal = me.isHorizontal();
			if (isHorizontal) {
				cursor = {
					x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
					y: me.top + labelOpts.padding,
					line: 0
				};
			} else {
				cursor = {
					x: me.left + labelOpts.padding,
					y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
					line: 0
				};
			}
	
			helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);
	
			var itemHeight = fontSize + labelOpts.padding;
			helpers$1.each(me.legendItems, function(legendItem, i) {
				var textWidth = ctx.measureText(legendItem.text).width;
				var width = boxWidth + (fontSize / 2) + textWidth;
				var x = cursor.x;
				var y = cursor.y;
	
				rtlHelper.setWidth(me.minSize.width);
	
				// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
				// instead of me.right and me.bottom because me.width and me.height
				// may have been changed since me.minSize was calculated
				if (isHorizontal) {
					if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
						y = cursor.y += itemHeight;
						cursor.line++;
						x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
					}
				} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
					x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
					cursor.line++;
					y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
				}
	
				var realX = rtlHelper.x(x);
	
				drawLegendBox(realX, y, legendItem);
	
				hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
				hitboxes[i].top = y;
	
				// Fill the actual label
				fillText(realX, y, legendItem, textWidth);
	
				if (isHorizontal) {
					cursor.x += width + labelOpts.padding;
				} else {
					cursor.y += itemHeight;
				}
			});
	
			helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
		},
	
		/**
		 * @private
		 */
		_getLegendItemAt: function(x, y) {
			var me = this;
			var i, hitBox, lh;
	
			if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
				// See if we are touching one of the dataset boxes
				lh = me.legendHitBoxes;
				for (i = 0; i < lh.length; ++i) {
					hitBox = lh[i];
	
					if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
						// Touching an element
						return me.legendItems[i];
					}
				}
			}
	
			return null;
		},
	
		/**
		 * Handle an event
		 * @private
		 * @param {IEvent} event - The event to handle
		 */
		handleEvent: function(e) {
			var me = this;
			var opts = me.options;
			var type = e.type === 'mouseup' ? 'click' : e.type;
			var hoveredItem;
	
			if (type === 'mousemove') {
				if (!opts.onHover && !opts.onLeave) {
					return;
				}
			} else if (type === 'click') {
				if (!opts.onClick) {
					return;
				}
			} else {
				return;
			}
	
			// Chart event already has relative position in it
			hoveredItem = me._getLegendItemAt(e.x, e.y);
	
			if (type === 'click') {
				if (hoveredItem && opts.onClick) {
					// use e.native for backwards compatibility
					opts.onClick.call(me, e.native, hoveredItem);
				}
			} else {
				if (opts.onLeave && hoveredItem !== me._hoveredItem) {
					if (me._hoveredItem) {
						opts.onLeave.call(me, e.native, me._hoveredItem);
					}
					me._hoveredItem = hoveredItem;
				}
	
				if (opts.onHover && hoveredItem) {
					// use e.native for backwards compatibility
					opts.onHover.call(me, e.native, hoveredItem);
				}
			}
		}
	});
	
	function createNewLegendAndAttach(chart, legendOpts) {
		var legend = new Legend({
			ctx: chart.ctx,
			options: legendOpts,
			chart: chart
		});
	
		core_layouts.configure(chart, legend, legendOpts);
		core_layouts.addBox(chart, legend);
		chart.legend = legend;
	}
	
	var plugin_legend = {
		id: 'legend',
	
		/**
		 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
		 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
		 * the plugin, which one will be re-exposed in the chart.js file.
		 * https://github.com/chartjs/Chart.js/pull/2640
		 * @private
		 */
		_element: Legend,
	
		beforeInit: function(chart) {
			var legendOpts = chart.options.legend;
	
			if (legendOpts) {
				createNewLegendAndAttach(chart, legendOpts);
			}
		},
	
		beforeUpdate: function(chart) {
			var legendOpts = chart.options.legend;
			var legend = chart.legend;
	
			if (legendOpts) {
				helpers$1.mergeIf(legendOpts, core_defaults.global.legend);
	
				if (legend) {
					core_layouts.configure(chart, legend, legendOpts);
					legend.options = legendOpts;
				} else {
					createNewLegendAndAttach(chart, legendOpts);
				}
			} else if (legend) {
				core_layouts.removeBox(chart, legend);
				delete chart.legend;
			}
		},
	
		afterEvent: function(chart, e) {
			var legend = chart.legend;
			if (legend) {
				legend.handleEvent(e);
			}
		}
	};
	
	var noop$2 = helpers$1.noop;
	
	core_defaults._set('global', {
		title: {
			display: false,
			fontStyle: 'bold',
			fullWidth: true,
			padding: 10,
			position: 'top',
			text: '',
			weight: 2000         // by default greater than legend (1000) to be above
		}
	});
	
	/**
	 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
	 */
	var Title = core_element.extend({
		initialize: function(config) {
			var me = this;
			helpers$1.extend(me, config);
	
			// Contains hit boxes for each dataset (in dataset order)
			me.legendHitBoxes = [];
		},
	
		// These methods are ordered by lifecycle. Utilities then follow.
	
		beforeUpdate: noop$2,
		update: function(maxWidth, maxHeight, margins) {
			var me = this;
	
			// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
			me.beforeUpdate();
	
			// Absorb the master measurements
			me.maxWidth = maxWidth;
			me.maxHeight = maxHeight;
			me.margins = margins;
	
			// Dimensions
			me.beforeSetDimensions();
			me.setDimensions();
			me.afterSetDimensions();
			// Labels
			me.beforeBuildLabels();
			me.buildLabels();
			me.afterBuildLabels();
	
			// Fit
			me.beforeFit();
			me.fit();
			me.afterFit();
			//
			me.afterUpdate();
	
			return me.minSize;
	
		},
		afterUpdate: noop$2,
	
		//
	
		beforeSetDimensions: noop$2,
		setDimensions: function() {
			var me = this;
			// Set the unconstrained dimension before label rotation
			if (me.isHorizontal()) {
				// Reset position before calculating rotation
				me.width = me.maxWidth;
				me.left = 0;
				me.right = me.width;
			} else {
				me.height = me.maxHeight;
	
				// Reset position before calculating rotation
				me.top = 0;
				me.bottom = me.height;
			}
	
			// Reset padding
			me.paddingLeft = 0;
			me.paddingTop = 0;
			me.paddingRight = 0;
			me.paddingBottom = 0;
	
			// Reset minSize
			me.minSize = {
				width: 0,
				height: 0
			};
		},
		afterSetDimensions: noop$2,
	
		//
	
		beforeBuildLabels: noop$2,
		buildLabels: noop$2,
		afterBuildLabels: noop$2,
	
		//
	
		beforeFit: noop$2,
		fit: function() {
			var me = this;
			var opts = me.options;
			var minSize = me.minSize = {};
			var isHorizontal = me.isHorizontal();
			var lineCount, textSize;
	
			if (!opts.display) {
				me.width = minSize.width = me.height = minSize.height = 0;
				return;
			}
	
			lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
			textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;
	
			me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
			me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
		},
		afterFit: noop$2,
	
		// Shared Methods
		isHorizontal: function() {
			var pos = this.options.position;
			return pos === 'top' || pos === 'bottom';
		},
	
		// Actually draw the title block on the canvas
		draw: function() {
			var me = this;
			var ctx = me.ctx;
			var opts = me.options;
	
			if (!opts.display) {
				return;
			}
	
			var fontOpts = helpers$1.options._parseFont(opts);
			var lineHeight = fontOpts.lineHeight;
			var offset = lineHeight / 2 + opts.padding;
			var rotation = 0;
			var top = me.top;
			var left = me.left;
			var bottom = me.bottom;
			var right = me.right;
			var maxWidth, titleX, titleY;
	
			ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
			ctx.font = fontOpts.string;
	
			// Horizontal
			if (me.isHorizontal()) {
				titleX = left + ((right - left) / 2); // midpoint of the width
				titleY = top + offset;
				maxWidth = right - left;
			} else {
				titleX = opts.position === 'left' ? left + offset : right - offset;
				titleY = top + ((bottom - top) / 2);
				maxWidth = bottom - top;
				rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
			}
	
			ctx.save();
			ctx.translate(titleX, titleY);
			ctx.rotate(rotation);
			ctx.textAlign = 'center';
			ctx.textBaseline = 'middle';
	
			var text = opts.text;
			if (helpers$1.isArray(text)) {
				var y = 0;
				for (var i = 0; i < text.length; ++i) {
					ctx.fillText(text[i], 0, y, maxWidth);
					y += lineHeight;
				}
			} else {
				ctx.fillText(text, 0, 0, maxWidth);
			}
	
			ctx.restore();
		}
	});
	
	function createNewTitleBlockAndAttach(chart, titleOpts) {
		var title = new Title({
			ctx: chart.ctx,
			options: titleOpts,
			chart: chart
		});
	
		core_layouts.configure(chart, title, titleOpts);
		core_layouts.addBox(chart, title);
		chart.titleBlock = title;
	}
	
	var plugin_title = {
		id: 'title',
	
		/**
		 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
		 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
		 * the plugin, which one will be re-exposed in the chart.js file.
		 * https://github.com/chartjs/Chart.js/pull/2640
		 * @private
		 */
		_element: Title,
	
		beforeInit: function(chart) {
			var titleOpts = chart.options.title;
	
			if (titleOpts) {
				createNewTitleBlockAndAttach(chart, titleOpts);
			}
		},
	
		beforeUpdate: function(chart) {
			var titleOpts = chart.options.title;
			var titleBlock = chart.titleBlock;
	
			if (titleOpts) {
				helpers$1.mergeIf(titleOpts, core_defaults.global.title);
	
				if (titleBlock) {
					core_layouts.configure(chart, titleBlock, titleOpts);
					titleBlock.options = titleOpts;
				} else {
					createNewTitleBlockAndAttach(chart, titleOpts);
				}
			} else if (titleBlock) {
				core_layouts.removeBox(chart, titleBlock);
				delete chart.titleBlock;
			}
		}
	};
	
	var plugins = {};
	var filler = plugin_filler;
	var legend = plugin_legend;
	var title = plugin_title;
	plugins.filler = filler;
	plugins.legend = legend;
	plugins.title = title;
	
	/**
	 * @namespace Chart
	 */
	
	
	core_controller.helpers = helpers$1;
	
	// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
	core_helpers();
	
	core_controller._adapters = core_adapters;
	core_controller.Animation = core_animation;
	core_controller.animationService = core_animations;
	core_controller.controllers = controllers;
	core_controller.DatasetController = core_datasetController;
	core_controller.defaults = core_defaults;
	core_controller.Element = core_element;
	core_controller.elements = elements;
	core_controller.Interaction = core_interaction;
	core_controller.layouts = core_layouts;
	core_controller.platform = platform;
	core_controller.plugins = core_plugins;
	core_controller.Scale = core_scale;
	core_controller.scaleService = core_scaleService;
	core_controller.Ticks = core_ticks;
	core_controller.Tooltip = core_tooltip;
	
	// Register built-in scales
	
	core_controller.helpers.each(scales, function(scale, type) {
		core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
	});
	
	// Load to register built-in adapters (as side effects)
	
	
	// Loading built-in plugins
	
	for (var k in plugins) {
		if (plugins.hasOwnProperty(k)) {
			core_controller.plugins.register(plugins[k]);
		}
	}
	
	core_controller.platform.initialize();
	
	var src = core_controller;
	if (typeof window !== 'undefined') {
		window.Chart = core_controller;
	}
	
	// DEPRECATIONS
	
	/**
	 * Provided for backward compatibility, not available anymore
	 * @namespace Chart.Chart
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.Chart = core_controller;
	
	/**
	 * Provided for backward compatibility, not available anymore
	 * @namespace Chart.Legend
	 * @deprecated since version 2.1.5
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.Legend = plugins.legend._element;
	
	/**
	 * Provided for backward compatibility, not available anymore
	 * @namespace Chart.Title
	 * @deprecated since version 2.1.5
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.Title = plugins.title._element;
	
	/**
	 * Provided for backward compatibility, use Chart.plugins instead
	 * @namespace Chart.pluginService
	 * @deprecated since version 2.1.5
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.pluginService = core_controller.plugins;
	
	/**
	 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
	 * effect, instead simply create/register plugins via plain JavaScript objects.
	 * @interface Chart.PluginBase
	 * @deprecated since version 2.5.0
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.PluginBase = core_controller.Element.extend({});
	
	/**
	 * Provided for backward compatibility, use Chart.helpers.canvas instead.
	 * @namespace Chart.canvasHelpers
	 * @deprecated since version 2.6.0
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.canvasHelpers = core_controller.helpers.canvas;
	
	/**
	 * Provided for backward compatibility, use Chart.layouts instead.
	 * @namespace Chart.layoutService
	 * @deprecated since version 2.7.3
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.layoutService = core_controller.layouts;
	
	/**
	 * Provided for backward compatibility, not available anymore.
	 * @namespace Chart.LinearScaleBase
	 * @deprecated since version 2.8
	 * @todo remove at version 3
	 * @private
	 */
	core_controller.LinearScaleBase = scale_linearbase;
	
	/**
	 * Provided for backward compatibility, instead we should create a new Chart
	 * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	core_controller.helpers.each(
		[
			'Bar',
			'Bubble',
			'Doughnut',
			'Line',
			'PolarArea',
			'Radar',
			'Scatter'
		],
		function(klass) {
			core_controller[klass] = function(ctx, cfg) {
				return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
					type: klass.charAt(0).toLowerCase() + klass.slice(1)
				}));
			};
		}
	);
	
	return src;
	
	})));
	
	},{"moment":25}],23:[function(require,module,exports){
	/*! DataTables 1.10.21
	 * ©2008-2020 SpryMedia Ltd - datatables.net/license
	 */
	
	/**
	 * @summary     DataTables
	 * @description Paginate, search and order HTML tables
	 * @version     1.10.21
	 * @file        jquery.dataTables.js
	 * @author      SpryMedia Ltd
	 * @contact     www.datatables.net
	 * @copyright   Copyright 2008-2020 SpryMedia Ltd.
	 *
	 * This source file is free software, available under the following license:
	 *   MIT license - http://datatables.net/license
	 *
	 * This source file is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
	 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
	 *
	 * For details please refer to: http://www.datatables.net
	 */
	
	/*jslint evil: true, undef: true, browser: true */
	/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/
	
	(function( factory ) {
		"use strict";
	
		if ( typeof define === 'function' && define.amd ) {
			// AMD
			define( ['jquery'], function ( $ ) {
				return factory( $, window, document );
			} );
		}
		else if ( typeof exports === 'object' ) {
			// CommonJS
			module.exports = function (root, $) {
				if ( ! root ) {
					// CommonJS environments without a window global must pass a
					// root. This will give an error otherwise
					root = window;
				}
	
				if ( ! $ ) {
					$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
						require('jquery') :
						require('jquery')( root );
				}
	
				return factory( $, root, root.document );
			};
		}
		else {
			// Browser
			factory( jQuery, window, document );
		}
	}
	(function( $, window, document, undefined ) {
		"use strict";
	
		/**
		 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
		 * flexible tool, based upon the foundations of progressive enhancement,
		 * which will add advanced interaction controls to any HTML table. For a
		 * full list of features please refer to
		 * [DataTables.net](href="http://datatables.net).
		 *
		 * Note that the `DataTable` object is not a global variable but is aliased
		 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
		 * be  accessed.
		 *
		 *  @class
		 *  @param {object} [init={}] Configuration object for DataTables. Options
		 *    are defined by {@link DataTable.defaults}
		 *  @requires jQuery 1.7+
		 *
		 *  @example
		 *    // Basic initialisation
		 *    $(document).ready( function {
		 *      $('#example').dataTable();
		 *    } );
		 *
		 *  @example
		 *    // Initialisation with configuration options - in this case, disable
		 *    // pagination and sorting.
		 *    $(document).ready( function {
		 *      $('#example').dataTable( {
		 *        "paginate": false,
		 *        "sort": false
		 *      } );
		 *    } );
		 */
		var DataTable = function ( options )
		{
			/**
			 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
			 * return the resulting jQuery object.
			 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
			 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
			 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
			 *    criterion ("applied") or all TR elements (i.e. no filter).
			 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
			 *    Can be either 'current', whereby the current sorting of the table is used, or
			 *    'original' whereby the original order the data was read into the table is used.
			 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
			 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
			 *    'current' and filter is 'applied', regardless of what they might be given as.
			 *  @returns {object} jQuery object, filtered by the given selector.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Highlight every second row
			 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
			 *    } );
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Filter to rows with 'Webkit' in them, add a background colour and then
			 *      // remove the filter, thus highlighting the 'Webkit' rows only.
			 *      oTable.fnFilter('Webkit');
			 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
			 *      oTable.fnFilter('');
			 *    } );
			 */
			this.$ = function ( sSelector, oOpts )
			{
				return this.api(true).$( sSelector, oOpts );
			};
			
			
			/**
			 * Almost identical to $ in operation, but in this case returns the data for the matched
			 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
			 * rather than any descendants, so the data can be obtained for the row/cell. If matching
			 * rows are found, the data returned is the original data array/object that was used to
			 * create the row (or a generated array if from a DOM source).
			 *
			 * This method is often useful in-combination with $ where both functions are given the
			 * same parameters and the array indexes will match identically.
			 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
			 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
			 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
			 *    criterion ("applied") or all elements (i.e. no filter).
			 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
			 *    Can be either 'current', whereby the current sorting of the table is used, or
			 *    'original' whereby the original order the data was read into the table is used.
			 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
			 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
			 *    'current' and filter is 'applied', regardless of what they might be given as.
			 *  @returns {array} Data for the matched elements. If any elements, as a result of the
			 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
			 *    entry in the array.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Get the data from the first row in the table
			 *      var data = oTable._('tr:first');
			 *
			 *      // Do something useful with the data
			 *      alert( "First cell is: "+data[0] );
			 *    } );
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Filter to 'Webkit' and get all data for
			 *      oTable.fnFilter('Webkit');
			 *      var data = oTable._('tr', {"search": "applied"});
			 *
			 *      // Do something with the data
			 *      alert( data.length+" rows matched the search" );
			 *    } );
			 */
			this._ = function ( sSelector, oOpts )
			{
				return this.api(true).rows( sSelector, oOpts ).data();
			};
			
			
			/**
			 * Create a DataTables Api instance, with the currently selected tables for
			 * the Api's context.
			 * @param {boolean} [traditional=false] Set the API instance's context to be
			 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
			 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
			 *   or if all tables captured in the jQuery object should be used.
			 * @return {DataTables.Api}
			 */
			this.api = function ( traditional )
			{
				return traditional ?
					new _Api(
						_fnSettingsFromNode( this[ _ext.iApiIndex ] )
					) :
					new _Api( this );
			};
			
			
			/**
			 * Add a single new row or multiple rows of data to the table. Please note
			 * that this is suitable for client-side processing only - if you are using
			 * server-side processing (i.e. "bServerSide": true), then to add data, you
			 * must add it to the data source, i.e. the server-side, through an Ajax call.
			 *  @param {array|object} data The data to be added to the table. This can be:
			 *    <ul>
			 *      <li>1D array of data - add a single row with the data provided</li>
			 *      <li>2D array of arrays - add multiple rows in a single call</li>
			 *      <li>object - data object when using <i>mData</i></li>
			 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
			 *    </ul>
			 *  @param {bool} [redraw=true] redraw the table or not
			 *  @returns {array} An array of integers, representing the list of indexes in
			 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
			 *    the table.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    // Global var for counter
			 *    var giCount = 2;
			 *
			 *    $(document).ready(function() {
			 *      $('#example').dataTable();
			 *    } );
			 *
			 *    function fnClickAddRow() {
			 *      $('#example').dataTable().fnAddData( [
			 *        giCount+".1",
			 *        giCount+".2",
			 *        giCount+".3",
			 *        giCount+".4" ]
			 *      );
			 *
			 *      giCount++;
			 *    }
			 */
			this.fnAddData = function( data, redraw )
			{
				var api = this.api( true );
			
				/* Check if we want to add multiple rows or not */
				var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
					api.rows.add( data ) :
					api.row.add( data );
			
				if ( redraw === undefined || redraw ) {
					api.draw();
				}
			
				return rows.flatten().toArray();
			};
			
			
			/**
			 * This function will make DataTables recalculate the column sizes, based on the data
			 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
			 * through the sWidth parameter). This can be useful when the width of the table's
			 * parent element changes (for example a window resize).
			 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable( {
			 *        "sScrollY": "200px",
			 *        "bPaginate": false
			 *      } );
			 *
			 *      $(window).on('resize', function () {
			 *        oTable.fnAdjustColumnSizing();
			 *      } );
			 *    } );
			 */
			this.fnAdjustColumnSizing = function ( bRedraw )
			{
				var api = this.api( true ).columns.adjust();
				var settings = api.settings()[0];
				var scroll = settings.oScroll;
			
				if ( bRedraw === undefined || bRedraw ) {
					api.draw( false );
				}
				else if ( scroll.sX !== "" || scroll.sY !== "" ) {
					/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
					_fnScrollDraw( settings );
				}
			};
			
			
			/**
			 * Quickly and simply clear a table
			 *  @param {bool} [bRedraw=true] redraw the table or not
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
			 *      oTable.fnClearTable();
			 *    } );
			 */
			this.fnClearTable = function( bRedraw )
			{
				var api = this.api( true ).clear();
			
				if ( bRedraw === undefined || bRedraw ) {
					api.draw();
				}
			};
			
			
			/**
			 * The exact opposite of 'opening' a row, this function will close any rows which
			 * are currently 'open'.
			 *  @param {node} nTr the table row to 'close'
			 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable;
			 *
			 *      // 'open' an information row when a row is clicked on
			 *      $('#example tbody tr').click( function () {
			 *        if ( oTable.fnIsOpen(this) ) {
			 *          oTable.fnClose( this );
			 *        } else {
			 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
			 *        }
			 *      } );
			 *
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnClose = function( nTr )
			{
				this.api( true ).row( nTr ).child.hide();
			};
			
			
			/**
			 * Remove a row for the table
			 *  @param {mixed} target The index of the row from aoData to be deleted, or
			 *    the TR element you want to delete
			 *  @param {function|null} [callBack] Callback function
			 *  @param {bool} [redraw=true] Redraw the table or not
			 *  @returns {array} The row that was deleted
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Immediately remove the first row
			 *      oTable.fnDeleteRow( 0 );
			 *    } );
			 */
			this.fnDeleteRow = function( target, callback, redraw )
			{
				var api = this.api( true );
				var rows = api.rows( target );
				var settings = rows.settings()[0];
				var data = settings.aoData[ rows[0][0] ];
			
				rows.remove();
			
				if ( callback ) {
					callback.call( this, settings, data );
				}
			
				if ( redraw === undefined || redraw ) {
					api.draw();
				}
			
				return data;
			};
			
			
			/**
			 * Restore the table to it's original state in the DOM by removing all of DataTables
			 * enhancements, alterations to the DOM structure of the table and event listeners.
			 *  @param {boolean} [remove=false] Completely remove the table from the DOM
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
			 *      var oTable = $('#example').dataTable();
			 *      oTable.fnDestroy();
			 *    } );
			 */
			this.fnDestroy = function ( remove )
			{
				this.api( true ).destroy( remove );
			};
			
			
			/**
			 * Redraw the table
			 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
			 *      oTable.fnDraw();
			 *    } );
			 */
			this.fnDraw = function( complete )
			{
				// Note that this isn't an exact match to the old call to _fnDraw - it takes
				// into account the new data, but can hold position.
				this.api( true ).draw( complete );
			};
			
			
			/**
			 * Filter the input based on data
			 *  @param {string} sInput String to filter the table on
			 *  @param {int|null} [iColumn] Column to limit filtering to
			 *  @param {bool} [bRegex=false] Treat as regular expression or not
			 *  @param {bool} [bSmart=true] Perform smart filtering or not
			 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
			 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Sometime later - filter...
			 *      oTable.fnFilter( 'test string' );
			 *    } );
			 */
			this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
			{
				var api = this.api( true );
			
				if ( iColumn === null || iColumn === undefined ) {
					api.search( sInput, bRegex, bSmart, bCaseInsensitive );
				}
				else {
					api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
				}
			
				api.draw();
			};
			
			
			/**
			 * Get the data for the whole table, an individual row or an individual cell based on the
			 * provided parameters.
			 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
			 *    a TR node then the data source for the whole row will be returned. If given as a
			 *    TD/TH cell node then iCol will be automatically calculated and the data for the
			 *    cell returned. If given as an integer, then this is treated as the aoData internal
			 *    data index for the row (see fnGetPosition) and the data for that row used.
			 *  @param {int} [col] Optional column index that you want the data of.
			 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
			 *    returned. If mRow is defined, just data for that row, and is iCol is
			 *    defined, only data for the designated cell is returned.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    // Row data
			 *    $(document).ready(function() {
			 *      oTable = $('#example').dataTable();
			 *
			 *      oTable.$('tr').click( function () {
			 *        var data = oTable.fnGetData( this );
			 *        // ... do something with the array / object of data for the row
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Individual cell data
			 *    $(document).ready(function() {
			 *      oTable = $('#example').dataTable();
			 *
			 *      oTable.$('td').click( function () {
			 *        var sData = oTable.fnGetData( this );
			 *        alert( 'The cell clicked on had the value of '+sData );
			 *      } );
			 *    } );
			 */
			this.fnGetData = function( src, col )
			{
				var api = this.api( true );
			
				if ( src !== undefined ) {
					var type = src.nodeName ? src.nodeName.toLowerCase() : '';
			
					return col !== undefined || type == 'td' || type == 'th' ?
						api.cell( src, col ).data() :
						api.row( src ).data() || null;
				}
			
				return api.data().toArray();
			};
			
			
			/**
			 * Get an array of the TR nodes that are used in the table's body. Note that you will
			 * typically want to use the '$' API method in preference to this as it is more
			 * flexible.
			 *  @param {int} [iRow] Optional row index for the TR element you want
			 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
			 *    in the table's body, or iRow is defined, just the TR element requested.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Get the nodes from the table
			 *      var nNodes = oTable.fnGetNodes( );
			 *    } );
			 */
			this.fnGetNodes = function( iRow )
			{
				var api = this.api( true );
			
				return iRow !== undefined ?
					api.row( iRow ).node() :
					api.rows().nodes().flatten().toArray();
			};
			
			
			/**
			 * Get the array indexes of a particular cell from it's DOM element
			 * and column index including hidden columns
			 *  @param {node} node this can either be a TR, TD or TH in the table's body
			 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
			 *    if given as a cell, an array of [row index, column index (visible),
			 *    column index (all)] is given.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      $('#example tbody td').click( function () {
			 *        // Get the position of the current data from the node
			 *        var aPos = oTable.fnGetPosition( this );
			 *
			 *        // Get the data array for this row
			 *        var aData = oTable.fnGetData( aPos[0] );
			 *
			 *        // Update the data array and return the value
			 *        aData[ aPos[1] ] = 'clicked';
			 *        this.innerHTML = 'clicked';
			 *      } );
			 *
			 *      // Init DataTables
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnGetPosition = function( node )
			{
				var api = this.api( true );
				var nodeName = node.nodeName.toUpperCase();
			
				if ( nodeName == 'TR' ) {
					return api.row( node ).index();
				}
				else if ( nodeName == 'TD' || nodeName == 'TH' ) {
					var cell = api.cell( node ).index();
			
					return [
						cell.row,
						cell.columnVisible,
						cell.column
					];
				}
				return null;
			};
			
			
			/**
			 * Check to see if a row is 'open' or not.
			 *  @param {node} nTr the table row to check
			 *  @returns {boolean} true if the row is currently open, false otherwise
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable;
			 *
			 *      // 'open' an information row when a row is clicked on
			 *      $('#example tbody tr').click( function () {
			 *        if ( oTable.fnIsOpen(this) ) {
			 *          oTable.fnClose( this );
			 *        } else {
			 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
			 *        }
			 *      } );
			 *
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnIsOpen = function( nTr )
			{
				return this.api( true ).row( nTr ).child.isShown();
			};
			
			
			/**
			 * This function will place a new row directly after a row which is currently
			 * on display on the page, with the HTML contents that is passed into the
			 * function. This can be used, for example, to ask for confirmation that a
			 * particular record should be deleted.
			 *  @param {node} nTr The table row to 'open'
			 *  @param {string|node|jQuery} mHtml The HTML to put into the row
			 *  @param {string} sClass Class to give the new TD cell
			 *  @returns {node} The row opened. Note that if the table row passed in as the
			 *    first parameter, is not found in the table, this method will silently
			 *    return.
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable;
			 *
			 *      // 'open' an information row when a row is clicked on
			 *      $('#example tbody tr').click( function () {
			 *        if ( oTable.fnIsOpen(this) ) {
			 *          oTable.fnClose( this );
			 *        } else {
			 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
			 *        }
			 *      } );
			 *
			 *      oTable = $('#example').dataTable();
			 *    } );
			 */
			this.fnOpen = function( nTr, mHtml, sClass )
			{
				return this.api( true )
					.row( nTr )
					.child( mHtml, sClass )
					.show()
					.child()[0];
			};
			
			
			/**
			 * Change the pagination - provides the internal logic for pagination in a simple API
			 * function. With this function you can have a DataTables table go to the next,
			 * previous, first or last pages.
			 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
			 *    or page number to jump to (integer), note that page 0 is the first page.
			 *  @param {bool} [bRedraw=true] Redraw the table or not
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      oTable.fnPageChange( 'next' );
			 *    } );
			 */
			this.fnPageChange = function ( mAction, bRedraw )
			{
				var api = this.api( true ).page( mAction );
			
				if ( bRedraw === undefined || bRedraw ) {
					api.draw(false);
				}
			};
			
			
			/**
			 * Show a particular column
			 *  @param {int} iCol The column whose display should be changed
			 *  @param {bool} bShow Show (true) or hide (false) the column
			 *  @param {bool} [bRedraw=true] Redraw the table or not
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Hide the second column after initialisation
			 *      oTable.fnSetColumnVis( 1, false );
			 *    } );
			 */
			this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
			{
				var api = this.api( true ).column( iCol ).visible( bShow );
			
				if ( bRedraw === undefined || bRedraw ) {
					api.columns.adjust().draw();
				}
			};
			
			
			/**
			 * Get the settings for a particular table for external manipulation
			 *  @returns {object} DataTables settings object. See
			 *    {@link DataTable.models.oSettings}
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      var oSettings = oTable.fnSettings();
			 *
			 *      // Show an example parameter from the settings
			 *      alert( oSettings._iDisplayStart );
			 *    } );
			 */
			this.fnSettings = function()
			{
				return _fnSettingsFromNode( this[_ext.iApiIndex] );
			};
			
			
			/**
			 * Sort the table by a particular column
			 *  @param {int} iCol the data index to sort on. Note that this will not match the
			 *    'display index' if you have hidden data entries
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Sort immediately with columns 0 and 1
			 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
			 *    } );
			 */
			this.fnSort = function( aaSort )
			{
				this.api( true ).order( aaSort ).draw();
			};
			
			
			/**
			 * Attach a sort listener to an element for a given column
			 *  @param {node} nNode the element to attach the sort listener to
			 *  @param {int} iColumn the column that a click on this node will sort on
			 *  @param {function} [fnCallback] callback function when sort is run
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *
			 *      // Sort on column 1, when 'sorter' is clicked on
			 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
			 *    } );
			 */
			this.fnSortListener = function( nNode, iColumn, fnCallback )
			{
				this.api( true ).order.listener( nNode, iColumn, fnCallback );
			};
			
			
			/**
			 * Update a table cell or row - this method will accept either a single value to
			 * update the cell with, an array of values with one element for each column or
			 * an object in the same format as the original data source. The function is
			 * self-referencing in order to make the multi column updates easier.
			 *  @param {object|array|string} mData Data to update the cell/row with
			 *  @param {node|int} mRow TR element you want to update or the aoData index
			 *  @param {int} [iColumn] The column to update, give as null or undefined to
			 *    update a whole row.
			 *  @param {bool} [bRedraw=true] Redraw the table or not
			 *  @param {bool} [bAction=true] Perform pre-draw actions or not
			 *  @returns {int} 0 on success, 1 on error
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
			 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
			 *    } );
			 */
			this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
			{
				var api = this.api( true );
			
				if ( iColumn === undefined || iColumn === null ) {
					api.row( mRow ).data( mData );
				}
				else {
					api.cell( mRow, iColumn ).data( mData );
				}
			
				if ( bAction === undefined || bAction ) {
					api.columns.adjust();
				}
			
				if ( bRedraw === undefined || bRedraw ) {
					api.draw();
				}
				return 0;
			};
			
			
			/**
			 * Provide a common method for plug-ins to check the version of DataTables being used, in order
			 * to ensure compatibility.
			 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
			 *    formats "X" and "X.Y" are also acceptable.
			 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
			 *    version, or false if this version of DataTales is not suitable
			 *  @method
			 *  @dtopt API
			 *  @deprecated Since v1.10
			 *
			 *  @example
			 *    $(document).ready(function() {
			 *      var oTable = $('#example').dataTable();
			 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
			 *    } );
			 */
			this.fnVersionCheck = _ext.fnVersionCheck;
			
	
			var _that = this;
			var emptyInit = options === undefined;
			var len = this.length;
	
			if ( emptyInit ) {
				options = {};
			}
	
			this.oApi = this.internal = _ext.internal;
	
			// Extend with old style plug-in API methods
			for ( var fn in DataTable.ext.internal ) {
				if ( fn ) {
					this[fn] = _fnExternApiFunc(fn);
				}
			}
	
			this.each(function() {
				// For each initialisation we want to give it a clean initialisation
				// object that can be bashed around
				var o = {};
				var oInit = len > 1 ? // optimisation for single table case
					_fnExtend( o, options, true ) :
					options;
	
				/*global oInit,_that,emptyInit*/
				var i=0, iLen, j, jLen, k, kLen;
				var sId = this.getAttribute( 'id' );
				var bInitHandedOff = false;
				var defaults = DataTable.defaults;
				var $this = $(this);
				
				
				/* Sanity check */
				if ( this.nodeName.toLowerCase() != 'table' )
				{
					_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
					return;
				}
				
				/* Backwards compatibility for the defaults */
				_fnCompatOpts( defaults );
				_fnCompatCols( defaults.column );
				
				/* Convert the camel-case defaults to Hungarian */
				_fnCamelToHungarian( defaults, defaults, true );
				_fnCamelToHungarian( defaults.column, defaults.column, true );
				
				/* Setting up the initialisation object */
				_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );
				
				
				
				/* Check to see if we are re-initialising a table */
				var allSettings = DataTable.settings;
				for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
				{
					var s = allSettings[i];
				
					/* Base check on table node */
					if (
						s.nTable == this ||
						(s.nTHead && s.nTHead.parentNode == this) ||
						(s.nTFoot && s.nTFoot.parentNode == this)
					) {
						var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
						var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
				
						if ( emptyInit || bRetrieve )
						{
							return s.oInstance;
						}
						else if ( bDestroy )
						{
							s.oInstance.fnDestroy();
							break;
						}
						else
						{
							_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
							return;
						}
					}
				
					/* If the element we are initialising has the same ID as a table which was previously
					 * initialised, but the table nodes don't match (from before) then we destroy the old
					 * instance by simply deleting it. This is under the assumption that the table has been
					 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
					 */
					if ( s.sTableId == this.id )
					{
						allSettings.splice( i, 1 );
						break;
					}
				}
				
				/* Ensure the table has an ID - required for accessibility */
				if ( sId === null || sId === "" )
				{
					sId = "DataTables_Table_"+(DataTable.ext._unique++);
					this.id = sId;
				}
				
				/* Create the settings object for this table and set some of the default parameters */
				var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
					"sDestroyWidth": $this[0].style.width,
					"sInstance":     sId,
					"sTableId":      sId
				} );
				oSettings.nTable = this;
				oSettings.oApi   = _that.internal;
				oSettings.oInit  = oInit;
				
				allSettings.push( oSettings );
				
				// Need to add the instance after the instance after the settings object has been added
				// to the settings array, so we can self reference the table instance if more than one
				oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
				
				// Backwards compatibility, before we apply all the defaults
				_fnCompatOpts( oInit );
				_fnLanguageCompat( oInit.oLanguage );
				
				// If the length menu is given, but the init display length is not, use the length menu
				if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
				{
					oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
						oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
				}
				
				// Apply the defaults and init options to make a single init object will all
				// options defined from defaults and instance options.
				oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
				
				
				// Map the initialisation options onto the settings object
				_fnMap( oSettings.oFeatures, oInit, [
					"bPaginate",
					"bLengthChange",
					"bFilter",
					"bSort",
					"bSortMulti",
					"bInfo",
					"bProcessing",
					"bAutoWidth",
					"bSortClasses",
					"bServerSide",
					"bDeferRender"
				] );
				_fnMap( oSettings, oInit, [
					"asStripeClasses",
					"ajax",
					"fnServerData",
					"fnFormatNumber",
					"sServerMethod",
					"aaSorting",
					"aaSortingFixed",
					"aLengthMenu",
					"sPaginationType",
					"sAjaxSource",
					"sAjaxDataProp",
					"iStateDuration",
					"sDom",
					"bSortCellsTop",
					"iTabIndex",
					"fnStateLoadCallback",
					"fnStateSaveCallback",
					"renderer",
					"searchDelay",
					"rowId",
					[ "iCookieDuration", "iStateDuration" ], // backwards compat
					[ "oSearch", "oPreviousSearch" ],
					[ "aoSearchCols", "aoPreSearchCols" ],
					[ "iDisplayLength", "_iDisplayLength" ]
				] );
				_fnMap( oSettings.oScroll, oInit, [
					[ "sScrollX", "sX" ],
					[ "sScrollXInner", "sXInner" ],
					[ "sScrollY", "sY" ],
					[ "bScrollCollapse", "bCollapse" ]
				] );
				_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
				
				/* Callback functions which are array driven */
				_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
				_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
				_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
				_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
				_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
				_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
				_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
				_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
				_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
				_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
				_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
				
				oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
				
				/* Browser support detection */
				_fnBrowserDetect( oSettings );
				
				var oClasses = oSettings.oClasses;
				
				$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
				$this.addClass( oClasses.sTable );
				
				
				if ( oSettings.iInitDisplayStart === undefined )
				{
					/* Display start point, taking into account the save saving */
					oSettings.iInitDisplayStart = oInit.iDisplayStart;
					oSettings._iDisplayStart = oInit.iDisplayStart;
				}
				
				if ( oInit.iDeferLoading !== null )
				{
					oSettings.bDeferLoading = true;
					var tmp = $.isArray( oInit.iDeferLoading );
					oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
					oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
				}
				
				/* Language definitions */
				var oLanguage = oSettings.oLanguage;
				$.extend( true, oLanguage, oInit.oLanguage );
				
				if ( oLanguage.sUrl )
				{
					/* Get the language definitions from a file - because this Ajax call makes the language
					 * get async to the remainder of this function we use bInitHandedOff to indicate that
					 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
					 */
					$.ajax( {
						dataType: 'json',
						url: oLanguage.sUrl,
						success: function ( json ) {
							_fnLanguageCompat( json );
							_fnCamelToHungarian( defaults.oLanguage, json );
							$.extend( true, oLanguage, json );
							_fnInitialise( oSettings );
						},
						error: function () {
							// Error occurred loading language file, continue on as best we can
							_fnInitialise( oSettings );
						}
					} );
					bInitHandedOff = true;
				}
				
				/*
				 * Stripes
				 */
				if ( oInit.asStripeClasses === null )
				{
					oSettings.asStripeClasses =[
						oClasses.sStripeOdd,
						oClasses.sStripeEven
					];
				}
				
				/* Remove row stripe classes if they are already on the table row */
				var stripeClasses = oSettings.asStripeClasses;
				var rowOne = $this.children('tbody').find('tr').eq(0);
				if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
					return rowOne.hasClass(el);
				} ) ) !== -1 ) {
					$('tbody tr', this).removeClass( stripeClasses.join(' ') );
					oSettings.asDestroyStripes = stripeClasses.slice();
				}
				
				/*
				 * Columns
				 * See if we should load columns automatically or use defined ones
				 */
				var anThs = [];
				var aoColumnsInit;
				var nThead = this.getElementsByTagName('thead');
				if ( nThead.length !== 0 )
				{
					_fnDetectHeader( oSettings.aoHeader, nThead[0] );
					anThs = _fnGetUniqueThs( oSettings );
				}
				
				/* If not given a column array, generate one with nulls */
				if ( oInit.aoColumns === null )
				{
					aoColumnsInit = [];
					for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
					{
						aoColumnsInit.push( null );
					}
				}
				else
				{
					aoColumnsInit = oInit.aoColumns;
				}
				
				/* Add the columns */
				for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
				{
					_fnAddColumn( oSettings, anThs ? anThs[i] : null );
				}
				
				/* Apply the column definitions */
				_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
					_fnColumnOptions( oSettings, iCol, oDef );
				} );
				
				/* HTML5 attribute detection - build an mData object automatically if the
				 * attributes are found
				 */
				if ( rowOne.length ) {
					var a = function ( cell, name ) {
						return cell.getAttribute( 'data-'+name ) !== null ? name : null;
					};
				
					$( rowOne[0] ).children('th, td').each( function (i, cell) {
						var col = oSettings.aoColumns[i];
				
						if ( col.mData === i ) {
							var sort = a( cell, 'sort' ) || a( cell, 'order' );
							var filter = a( cell, 'filter' ) || a( cell, 'search' );
				
							if ( sort !== null || filter !== null ) {
								col.mData = {
									_:      i+'.display',
									sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
									type:   sort !== null   ? i+'.@data-'+sort   : undefined,
									filter: filter !== null ? i+'.@data-'+filter : undefined
								};
				
								_fnColumnOptions( oSettings, i );
							}
						}
					} );
				}
				
				var features = oSettings.oFeatures;
				var loadedInit = function () {
					/*
					 * Sorting
					 * @todo For modularisation (1.11) this needs to do into a sort start up handler
					 */
				
					// If aaSorting is not defined, then we use the first indicator in asSorting
					// in case that has been altered, so the default sort reflects that option
					if ( oInit.aaSorting === undefined ) {
						var sorting = oSettings.aaSorting;
						for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
							sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
						}
					}
				
					/* Do a first pass on the sorting classes (allows any size changes to be taken into
					 * account, and also will apply sorting disabled classes if disabled
					 */
					_fnSortingClasses( oSettings );
				
					if ( features.bSort ) {
						_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
							if ( oSettings.bSorted ) {
								var aSort = _fnSortFlatten( oSettings );
								var sortedColumns = {};
				
								$.each( aSort, function (i, val) {
									sortedColumns[ val.src ] = val.dir;
								} );
				
								_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
								_fnSortAria( oSettings );
							}
						} );
					}
				
					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
						if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
							_fnSortingClasses( oSettings );
						}
					}, 'sc' );
				
				
					/*
					 * Final init
					 * Cache the header, body and footer as required, creating them if needed
					 */
				
					// Work around for Webkit bug 83867 - store the caption-side before removing from doc
					var captions = $this.children('caption').each( function () {
						this._captionSide = $(this).css('caption-side');
					} );
				
					var thead = $this.children('thead');
					if ( thead.length === 0 ) {
						thead = $('<thead/>').appendTo($this);
					}
					oSettings.nTHead = thead[0];
				
					var tbody = $this.children('tbody');
					if ( tbody.length === 0 ) {
						tbody = $('<tbody/>').appendTo($this);
					}
					oSettings.nTBody = tbody[0];
				
					var tfoot = $this.children('tfoot');
					if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
						// If we are a scrolling table, and no footer has been given, then we need to create
						// a tfoot element for the caption element to be appended to
						tfoot = $('<tfoot/>').appendTo($this);
					}
				
					if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
						$this.addClass( oClasses.sNoFooter );
					}
					else if ( tfoot.length > 0 ) {
						oSettings.nTFoot = tfoot[0];
						_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
					}
				
					/* Check if there is data passing into the constructor */
					if ( oInit.aaData ) {
						for ( i=0 ; i<oInit.aaData.length ; i++ ) {
							_fnAddData( oSettings, oInit.aaData[ i ] );
						}
					}
					else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
						/* Grab the data from the page - only do this when deferred loading or no Ajax
						 * source since there is no point in reading the DOM data if we are then going
						 * to replace it with Ajax data
						 */
						_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
					}
				
					/* Copy the data index array */
					oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
				
					/* Initialisation complete - table can be drawn */
					oSettings.bInitialised = true;
				
					/* Check if we need to initialise the table (it might not have been handed off to the
					 * language processor)
					 */
					if ( bInitHandedOff === false ) {
						_fnInitialise( oSettings );
					}
				};
				
				/* Must be done after everything which can be overridden by the state saving! */
				if ( oInit.bStateSave )
				{
					features.bStateSave = true;
					_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
					_fnLoadState( oSettings, oInit, loadedInit );
				}
				else {
					loadedInit();
				}
				
			} );
			_that = null;
			return this;
		};
	
		
		/*
		 * It is useful to have variables which are scoped locally so only the
		 * DataTables functions can access them and they don't leak into global space.
		 * At the same time these functions are often useful over multiple files in the
		 * core and API, so we list, or at least document, all variables which are used
		 * by DataTables as private variables here. This also ensures that there is no
		 * clashing of variable names and that they can easily referenced for reuse.
		 */
		
		
		// Defined else where
		//  _selector_run
		//  _selector_opts
		//  _selector_first
		//  _selector_row_indexes
		
		var _ext; // DataTable.ext
		var _Api; // DataTable.Api
		var _api_register; // DataTable.Api.register
		var _api_registerPlural; // DataTable.Api.registerPlural
		
		var _re_dic = {};
		var _re_new_lines = /[\r\n\u2028]/g;
		var _re_html = /<.*?>/g;
		
		// This is not strict ISO8601 - Date.parse() is quite lax, although
		// implementations differ between browsers.
		var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
		
		// Escape regular expression special characters
		var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
		
		// http://en.wikipedia.org/wiki/Foreign_exchange_market
		// - \u20BD - Russian ruble.
		// - \u20a9 - South Korean Won
		// - \u20BA - Turkish Lira
		// - \u20B9 - Indian Rupee
		// - R - Brazil (R$) and South Africa
		// - fr - Swiss Franc
		// - kr - Swedish krona, Norwegian krone and Danish krone
		// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
		// - Ƀ - Bitcoin
		// - Ξ - Ethereum
		//   standards as thousands separators.
		var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;
		
		
		var _empty = function ( d ) {
			return !d || d === true || d === '-' ? true : false;
		};
		
		
		var _intVal = function ( s ) {
			var integer = parseInt( s, 10 );
			return !isNaN(integer) && isFinite(s) ? integer : null;
		};
		
		// Convert from a formatted number with characters other than `.` as the
		// decimal place, to a Javascript number
		var _numToDecimal = function ( num, decimalPoint ) {
			// Cache created regular expressions for speed as this function is called often
			if ( ! _re_dic[ decimalPoint ] ) {
				_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
			}
			return typeof num === 'string' && decimalPoint !== '.' ?
				num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
				num;
		};
		
		
		var _isNumber = function ( d, decimalPoint, formatted ) {
			var strType = typeof d === 'string';
		
			// If empty return immediately so there must be a number if it is a
			// formatted string (this stops the string "k", or "kr", etc being detected
			// as a formatted number for currency
			if ( _empty( d ) ) {
				return true;
			}
		
			if ( decimalPoint && strType ) {
				d = _numToDecimal( d, decimalPoint );
			}
		
			if ( formatted && strType ) {
				d = d.replace( _re_formatted_numeric, '' );
			}
		
			return !isNaN( parseFloat(d) ) && isFinite( d );
		};
		
		
		// A string without HTML in it can be considered to be HTML still
		var _isHtml = function ( d ) {
			return _empty( d ) || typeof d === 'string';
		};
		
		
		var _htmlNumeric = function ( d, decimalPoint, formatted ) {
			if ( _empty( d ) ) {
				return true;
			}
		
			var html = _isHtml( d );
			return ! html ?
				null :
				_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
					true :
					null;
		};
		
		
		var _pluck = function ( a, prop, prop2 ) {
			var out = [];
			var i=0, ien=a.length;
		
			// Could have the test in the loop for slightly smaller code, but speed
			// is essential here
			if ( prop2 !== undefined ) {
				for ( ; i<ien ; i++ ) {
					if ( a[i] && a[i][ prop ] ) {
						out.push( a[i][ prop ][ prop2 ] );
					}
				}
			}
			else {
				for ( ; i<ien ; i++ ) {
					if ( a[i] ) {
						out.push( a[i][ prop ] );
					}
				}
			}
		
			return out;
		};
		
		
		// Basically the same as _pluck, but rather than looping over `a` we use `order`
		// as the indexes to pick from `a`
		var _pluck_order = function ( a, order, prop, prop2 )
		{
			var out = [];
			var i=0, ien=order.length;
		
			// Could have the test in the loop for slightly smaller code, but speed
			// is essential here
			if ( prop2 !== undefined ) {
				for ( ; i<ien ; i++ ) {
					if ( a[ order[i] ][ prop ] ) {
						out.push( a[ order[i] ][ prop ][ prop2 ] );
					}
				}
			}
			else {
				for ( ; i<ien ; i++ ) {
					out.push( a[ order[i] ][ prop ] );
				}
			}
		
			return out;
		};
		
		
		var _range = function ( len, start )
		{
			var out = [];
			var end;
		
			if ( start === undefined ) {
				start = 0;
				end = len;
			}
			else {
				end = start;
				start = len;
			}
		
			for ( var i=start ; i<end ; i++ ) {
				out.push( i );
			}
		
			return out;
		};
		
		
		var _removeEmpty = function ( a )
		{
			var out = [];
		
			for ( var i=0, ien=a.length ; i<ien ; i++ ) {
				if ( a[i] ) { // careful - will remove all falsy values!
					out.push( a[i] );
				}
			}
		
			return out;
		};
		
		
		var _stripHtml = function ( d ) {
			return d.replace( _re_html, '' );
		};
		
		
		/**
		 * Determine if all values in the array are unique. This means we can short
		 * cut the _unique method at the cost of a single loop. A sorted array is used
		 * to easily check the values.
		 *
		 * @param  {array} src Source array
		 * @return {boolean} true if all unique, false otherwise
		 * @ignore
		 */
		var _areAllUnique = function ( src ) {
			if ( src.length < 2 ) {
				return true;
			}
		
			var sorted = src.slice().sort();
			var last = sorted[0];
		
			for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
				if ( sorted[i] === last ) {
					return false;
				}
		
				last = sorted[i];
			}
		
			return true;
		};
		
		
		/**
		 * Find the unique elements in a source array.
		 *
		 * @param  {array} src Source array
		 * @return {array} Array of unique items
		 * @ignore
		 */
		var _unique = function ( src )
		{
			if ( _areAllUnique( src ) ) {
				return src.slice();
			}
		
			// A faster unique method is to use object keys to identify used values,
			// but this doesn't work with arrays or objects, which we must also
			// consider. See jsperf.com/compare-array-unique-versions/4 for more
			// information.
			var
				out = [],
				val,
				i, ien=src.length,
				j, k=0;
		
			again: for ( i=0 ; i<ien ; i++ ) {
				val = src[i];
		
				for ( j=0 ; j<k ; j++ ) {
					if ( out[j] === val ) {
						continue again;
					}
				}
		
				out.push( val );
				k++;
			}
		
			return out;
		};
		
		
		/**
		 * DataTables utility methods
		 * 
		 * This namespace provides helper methods that DataTables uses internally to
		 * create a DataTable, but which are not exclusively used only for DataTables.
		 * These methods can be used by extension authors to save the duplication of
		 * code.
		 *
		 *  @namespace
		 */
		DataTable.util = {
			/**
			 * Throttle the calls to a function. Arguments and context are maintained
			 * for the throttled function.
			 *
			 * @param {function} fn Function to be called
			 * @param {integer} freq Call frequency in mS
			 * @return {function} Wrapped function
			 */
			throttle: function ( fn, freq ) {
				var
					frequency = freq !== undefined ? freq : 200,
					last,
					timer;
		
				return function () {
					var
						that = this,
						now  = +new Date(),
						args = arguments;
		
					if ( last && now < last + frequency ) {
						clearTimeout( timer );
		
						timer = setTimeout( function () {
							last = undefined;
							fn.apply( that, args );
						}, frequency );
					}
					else {
						last = now;
						fn.apply( that, args );
					}
				};
			},
		
		
			/**
			 * Escape a string such that it can be used in a regular expression
			 *
			 *  @param {string} val string to escape
			 *  @returns {string} escaped string
			 */
			escapeRegex: function ( val ) {
				return val.replace( _re_escape_regex, '\\$1' );
			}
		};
		
		
		
		/**
		 * Create a mapping object that allows camel case parameters to be looked up
		 * for their Hungarian counterparts. The mapping is stored in a private
		 * parameter called `_hungarianMap` which can be accessed on the source object.
		 *  @param {object} o
		 *  @memberof DataTable#oApi
		 */
		function _fnHungarianMap ( o )
		{
			var
				hungarian = 'a aa ai ao as b fn i m o s ',
				match,
				newKey,
				map = {};
		
			$.each( o, function (key, val) {
				match = key.match(/^([^A-Z]+?)([A-Z])/);
		
				if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
				{
					newKey = key.replace( match[0], match[2].toLowerCase() );
					map[ newKey ] = key;
		
					if ( match[1] === 'o' )
					{
						_fnHungarianMap( o[key] );
					}
				}
			} );
		
			o._hungarianMap = map;
		}
		
		
		/**
		 * Convert from camel case parameters to Hungarian, based on a Hungarian map
		 * created by _fnHungarianMap.
		 *  @param {object} src The model object which holds all parameters that can be
		 *    mapped.
		 *  @param {object} user The object to convert from camel case to Hungarian.
		 *  @param {boolean} force When set to `true`, properties which already have a
		 *    Hungarian value in the `user` object will be overwritten. Otherwise they
		 *    won't be.
		 *  @memberof DataTable#oApi
		 */
		function _fnCamelToHungarian ( src, user, force )
		{
			if ( ! src._hungarianMap ) {
				_fnHungarianMap( src );
			}
		
			var hungarianKey;
		
			$.each( user, function (key, val) {
				hungarianKey = src._hungarianMap[ key ];
		
				if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
				{
					// For objects, we need to buzz down into the object to copy parameters
					if ( hungarianKey.charAt(0) === 'o' )
					{
						// Copy the camelCase options over to the hungarian
						if ( ! user[ hungarianKey ] ) {
							user[ hungarianKey ] = {};
						}
						$.extend( true, user[hungarianKey], user[key] );
		
						_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
					}
					else {
						user[hungarianKey] = user[ key ];
					}
				}
			} );
		}
		
		
		/**
		 * Language compatibility - when certain options are given, and others aren't, we
		 * need to duplicate the values over, in order to provide backwards compatibility
		 * with older language files.
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnLanguageCompat( lang )
		{
			// Note the use of the Hungarian notation for the parameters in this method as
			// this is called after the mapping of camelCase to Hungarian
			var defaults = DataTable.defaults.oLanguage;
		
			// Default mapping
			var defaultDecimal = defaults.sDecimal;
			if ( defaultDecimal ) {
				_addNumericSort( defaultDecimal );
			}
		
			if ( lang ) {
				var zeroRecords = lang.sZeroRecords;
		
				// Backwards compatibility - if there is no sEmptyTable given, then use the same as
				// sZeroRecords - assuming that is given.
				if ( ! lang.sEmptyTable && zeroRecords &&
					defaults.sEmptyTable === "No data available in table" )
				{
					_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
				}
		
				// Likewise with loading records
				if ( ! lang.sLoadingRecords && zeroRecords &&
					defaults.sLoadingRecords === "Loading..." )
				{
					_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
				}
		
				// Old parameter name of the thousands separator mapped onto the new
				if ( lang.sInfoThousands ) {
					lang.sThousands = lang.sInfoThousands;
				}
		
				var decimal = lang.sDecimal;
				if ( decimal && defaultDecimal !== decimal ) {
					_addNumericSort( decimal );
				}
			}
		}
		
		
		/**
		 * Map one parameter onto another
		 *  @param {object} o Object to map
		 *  @param {*} knew The new parameter name
		 *  @param {*} old The old parameter name
		 */
		var _fnCompatMap = function ( o, knew, old ) {
			if ( o[ knew ] !== undefined ) {
				o[ old ] = o[ knew ];
			}
		};
		
		
		/**
		 * Provide backwards compatibility for the main DT options. Note that the new
		 * options are mapped onto the old parameters, so this is an external interface
		 * change only.
		 *  @param {object} init Object to map
		 */
		function _fnCompatOpts ( init )
		{
			_fnCompatMap( init, 'ordering',      'bSort' );
			_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
			_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
			_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
			_fnCompatMap( init, 'order',         'aaSorting' );
			_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
			_fnCompatMap( init, 'paging',        'bPaginate' );
			_fnCompatMap( init, 'pagingType',    'sPaginationType' );
			_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
			_fnCompatMap( init, 'searching',     'bFilter' );
		
			// Boolean initialisation of x-scrolling
			if ( typeof init.sScrollX === 'boolean' ) {
				init.sScrollX = init.sScrollX ? '100%' : '';
			}
			if ( typeof init.scrollX === 'boolean' ) {
				init.scrollX = init.scrollX ? '100%' : '';
			}
		
			// Column search objects are in an array, so it needs to be converted
			// element by element
			var searchCols = init.aoSearchCols;
		
			if ( searchCols ) {
				for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
					if ( searchCols[i] ) {
						_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
					}
				}
			}
		}
		
		
		/**
		 * Provide backwards compatibility for column options. Note that the new options
		 * are mapped onto the old parameters, so this is an external interface change
		 * only.
		 *  @param {object} init Object to map
		 */
		function _fnCompatCols ( init )
		{
			_fnCompatMap( init, 'orderable',     'bSortable' );
			_fnCompatMap( init, 'orderData',     'aDataSort' );
			_fnCompatMap( init, 'orderSequence', 'asSorting' );
			_fnCompatMap( init, 'orderDataType', 'sortDataType' );
		
			// orderData can be given as an integer
			var dataSort = init.aDataSort;
			if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {
				init.aDataSort = [ dataSort ];
			}
		}
		
		
		/**
		 * Browser feature detection for capabilities, quirks
		 *  @param {object} settings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnBrowserDetect( settings )
		{
			// We don't need to do this every time DataTables is constructed, the values
			// calculated are specific to the browser and OS configuration which we
			// don't expect to change between initialisations
			if ( ! DataTable.__browser ) {
				var browser = {};
				DataTable.__browser = browser;
		
				// Scrolling feature / quirks detection
				var n = $('<div/>')
					.css( {
						position: 'fixed',
						top: 0,
						left: $(window).scrollLeft()*-1, // allow for scrolling
						height: 1,
						width: 1,
						overflow: 'hidden'
					} )
					.append(
						$('<div/>')
							.css( {
								position: 'absolute',
								top: 1,
								left: 1,
								width: 100,
								overflow: 'scroll'
							} )
							.append(
								$('<div/>')
									.css( {
										width: '100%',
										height: 10
									} )
							)
					)
					.appendTo( 'body' );
		
				var outer = n.children();
				var inner = outer.children();
		
				// Numbers below, in order, are:
				// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
				//
				// IE6 XP:                           100 100 100  83
				// IE7 Vista:                        100 100 100  83
				// IE 8+ Windows:                     83  83 100  83
				// Evergreen Windows:                 83  83 100  83
				// Evergreen Mac with scrollbars:     85  85 100  85
				// Evergreen Mac without scrollbars: 100 100 100 100
		
				// Get scrollbar width
				browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
		
				// IE6/7 will oversize a width 100% element inside a scrolling element, to
				// include the width of the scrollbar, while other browsers ensure the inner
				// element is contained without forcing scrolling
				browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
		
				// In rtl text layout, some browsers (most, but not all) will place the
				// scrollbar on the left, rather than the right.
				browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
		
				// IE8- don't provide height and width for getBoundingClientRect
				browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
		
				n.remove();
			}
		
			$.extend( settings.oBrowser, DataTable.__browser );
			settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
		}
		
		
		/**
		 * Array.prototype reduce[Right] method, used for browsers which don't support
		 * JS 1.6. Done this way to reduce code size, since we iterate either way
		 *  @param {object} settings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnReduce ( that, fn, init, start, end, inc )
		{
			var
				i = start,
				value,
				isSet = false;
		
			if ( init !== undefined ) {
				value = init;
				isSet = true;
			}
		
			while ( i !== end ) {
				if ( ! that.hasOwnProperty(i) ) {
					continue;
				}
		
				value = isSet ?
					fn( value, that[i], i, that ) :
					that[i];
		
				isSet = true;
				i += inc;
			}
		
			return value;
		}
		
		/**
		 * Add a column to the list used for the table with default values
		 *  @param {object} oSettings dataTables settings object
		 *  @param {node} nTh The th element for this column
		 *  @memberof DataTable#oApi
		 */
		function _fnAddColumn( oSettings, nTh )
		{
			// Add column to aoColumns array
			var oDefaults = DataTable.defaults.column;
			var iCol = oSettings.aoColumns.length;
			var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
				"nTh": nTh ? nTh : document.createElement('th'),
				"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
				"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
				"mData": oDefaults.mData ? oDefaults.mData : iCol,
				idx: iCol
			} );
			oSettings.aoColumns.push( oCol );
		
			// Add search object for column specific search. Note that the `searchCols[ iCol ]`
			// passed into extend can be undefined. This allows the user to give a default
			// with only some of the parameters defined, and also not give a default
			var searchCols = oSettings.aoPreSearchCols;
			searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
		
			// Use the default column options function to initialise classes etc
			_fnColumnOptions( oSettings, iCol, $(nTh).data() );
		}
		
		
		/**
		 * Apply options for a column
		 *  @param {object} oSettings dataTables settings object
		 *  @param {int} iCol column index to consider
		 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
		 *  @memberof DataTable#oApi
		 */
		function _fnColumnOptions( oSettings, iCol, oOptions )
		{
			var oCol = oSettings.aoColumns[ iCol ];
			var oClasses = oSettings.oClasses;
			var th = $(oCol.nTh);
		
			// Try to get width information from the DOM. We can't get it from CSS
			// as we'd need to parse the CSS stylesheet. `width` option can override
			if ( ! oCol.sWidthOrig ) {
				// Width attribute
				oCol.sWidthOrig = th.attr('width') || null;
		
				// Style attribute
				var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
				if ( t ) {
					oCol.sWidthOrig = t[1];
				}
			}
		
			/* User specified column options */
			if ( oOptions !== undefined && oOptions !== null )
			{
				// Backwards compatibility
				_fnCompatCols( oOptions );
		
				// Map camel case parameters to their Hungarian counterparts
				_fnCamelToHungarian( DataTable.defaults.column, oOptions, true );
		
				/* Backwards compatibility for mDataProp */
				if ( oOptions.mDataProp !== undefined && !oOptions.mData )
				{
					oOptions.mData = oOptions.mDataProp;
				}
		
				if ( oOptions.sType )
				{
					oCol._sManualType = oOptions.sType;
				}
		
				// `class` is a reserved word in Javascript, so we need to provide
				// the ability to use a valid name for the camel case input
				if ( oOptions.className && ! oOptions.sClass )
				{
					oOptions.sClass = oOptions.className;
				}
				if ( oOptions.sClass ) {
					th.addClass( oOptions.sClass );
				}
		
				$.extend( oCol, oOptions );
				_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
		
				/* iDataSort to be applied (backwards compatibility), but aDataSort will take
				 * priority if defined
				 */
				if ( oOptions.iDataSort !== undefined )
				{
					oCol.aDataSort = [ oOptions.iDataSort ];
				}
				_fnMap( oCol, oOptions, "aDataSort" );
			}
		
			/* Cache the data get and set functions for speed */
			var mDataSrc = oCol.mData;
			var mData = _fnGetObjectDataFn( mDataSrc );
			var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
		
			var attrTest = function( src ) {
				return typeof src === 'string' && src.indexOf('@') !== -1;
			};
			oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
				attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
			);
			oCol._setter = null;
		
			oCol.fnGetData = function (rowData, type, meta) {
				var innerData = mData( rowData, type, undefined, meta );
		
				return mRender && type ?
					mRender( innerData, type, rowData, meta ) :
					innerData;
			};
			oCol.fnSetData = function ( rowData, val, meta ) {
				return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
			};
		
			// Indicate if DataTables should read DOM data as an object or array
			// Used in _fnGetRowElements
			if ( typeof mDataSrc !== 'number' ) {
				oSettings._rowReadObject = true;
			}
		
			/* Feature sorting overrides column specific when off */
			if ( !oSettings.oFeatures.bSort )
			{
				oCol.bSortable = false;
				th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
			}
		
			/* Check that the class assignment is correct for sorting */
			var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
			var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
			if ( !oCol.bSortable || (!bAsc && !bDesc) )
			{
				oCol.sSortingClass = oClasses.sSortableNone;
				oCol.sSortingClassJUI = "";
			}
			else if ( bAsc && !bDesc )
			{
				oCol.sSortingClass = oClasses.sSortableAsc;
				oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
			}
			else if ( !bAsc && bDesc )
			{
				oCol.sSortingClass = oClasses.sSortableDesc;
				oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
			}
			else
			{
				oCol.sSortingClass = oClasses.sSortable;
				oCol.sSortingClassJUI = oClasses.sSortJUI;
			}
		}
		
		
		/**
		 * Adjust the table column widths for new data. Note: you would probably want to
		 * do a redraw after calling this function!
		 *  @param {object} settings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnAdjustColumnSizing ( settings )
		{
			/* Not interested in doing column width calculation if auto-width is disabled */
			if ( settings.oFeatures.bAutoWidth !== false )
			{
				var columns = settings.aoColumns;
		
				_fnCalculateColumnWidths( settings );
				for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
				{
					columns[i].nTh.style.width = columns[i].sWidth;
				}
			}
		
			var scroll = settings.oScroll;
			if ( scroll.sY !== '' || scroll.sX !== '')
			{
				_fnScrollDraw( settings );
			}
		
			_fnCallbackFire( settings, null, 'column-sizing', [settings] );
		}
		
		
		/**
		 * Covert the index of a visible column to the index in the data array (take account
		 * of hidden columns)
		 *  @param {object} oSettings dataTables settings object
		 *  @param {int} iMatch Visible column index to lookup
		 *  @returns {int} i the data index
		 *  @memberof DataTable#oApi
		 */
		function _fnVisibleToColumnIndex( oSettings, iMatch )
		{
			var aiVis = _fnGetColumns( oSettings, 'bVisible' );
		
			return typeof aiVis[iMatch] === 'number' ?
				aiVis[iMatch] :
				null;
		}
		
		
		/**
		 * Covert the index of an index in the data array and convert it to the visible
		 *   column index (take account of hidden columns)
		 *  @param {int} iMatch Column index to lookup
		 *  @param {object} oSettings dataTables settings object
		 *  @returns {int} i the data index
		 *  @memberof DataTable#oApi
		 */
		function _fnColumnIndexToVisible( oSettings, iMatch )
		{
			var aiVis = _fnGetColumns( oSettings, 'bVisible' );
			var iPos = $.inArray( iMatch, aiVis );
		
			return iPos !== -1 ? iPos : null;
		}
		
		
		/**
		 * Get the number of visible columns
		 *  @param {object} oSettings dataTables settings object
		 *  @returns {int} i the number of visible columns
		 *  @memberof DataTable#oApi
		 */
		function _fnVisbleColumns( oSettings )
		{
			var vis = 0;
		
			// No reduce in IE8, use a loop for now
			$.each( oSettings.aoColumns, function ( i, col ) {
				if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
					vis++;
				}
			} );
		
			return vis;
		}
		
		
		/**
		 * Get an array of column indexes that match a given property
		 *  @param {object} oSettings dataTables settings object
		 *  @param {string} sParam Parameter in aoColumns to look for - typically
		 *    bVisible or bSearchable
		 *  @returns {array} Array of indexes with matched properties
		 *  @memberof DataTable#oApi
		 */
		function _fnGetColumns( oSettings, sParam )
		{
			var a = [];
		
			$.map( oSettings.aoColumns, function(val, i) {
				if ( val[sParam] ) {
					a.push( i );
				}
			} );
		
			return a;
		}
		
		
		/**
		 * Calculate the 'type' of a column
		 *  @param {object} settings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnColumnTypes ( settings )
		{
			var columns = settings.aoColumns;
			var data = settings.aoData;
			var types = DataTable.ext.type.detect;
			var i, ien, j, jen, k, ken;
			var col, cell, detectedType, cache;
		
			// For each column, spin over the 
			for ( i=0, ien=columns.length ; i<ien ; i++ ) {
				col = columns[i];
				cache = [];
		
				if ( ! col.sType && col._sManualType ) {
					col.sType = col._sManualType;
				}
				else if ( ! col.sType ) {
					for ( j=0, jen=types.length ; j<jen ; j++ ) {
						for ( k=0, ken=data.length ; k<ken ; k++ ) {
							// Use a cache array so we only need to get the type data
							// from the formatter once (when using multiple detectors)
							if ( cache[k] === undefined ) {
								cache[k] = _fnGetCellData( settings, k, i, 'type' );
							}
		
							detectedType = types[j]( cache[k], settings );
		
							// If null, then this type can't apply to this column, so
							// rather than testing all cells, break out. There is an
							// exception for the last type which is `html`. We need to
							// scan all rows since it is possible to mix string and HTML
							// types
							if ( ! detectedType && j !== types.length-1 ) {
								break;
							}
		
							// Only a single match is needed for html type since it is
							// bottom of the pile and very similar to string
							if ( detectedType === 'html' ) {
								break;
							}
						}
		
						// Type is valid for all data points in the column - use this
						// type
						if ( detectedType ) {
							col.sType = detectedType;
							break;
						}
					}
		
					// Fall back - if no type was detected, always use string
					if ( ! col.sType ) {
						col.sType = 'string';
					}
				}
			}
		}
		
		
		/**
		 * Take the column definitions and static columns arrays and calculate how
		 * they relate to column indexes. The callback function will then apply the
		 * definition found for a column to a suitable configuration object.
		 *  @param {object} oSettings dataTables settings object
		 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
		 *  @param {array} aoCols The aoColumns array that defines columns individually
		 *  @param {function} fn Callback function - takes two parameters, the calculated
		 *    column index and the definition for that column.
		 *  @memberof DataTable#oApi
		 */
		function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
		{
			var i, iLen, j, jLen, k, kLen, def;
			var columns = oSettings.aoColumns;
		
			// Column definitions with aTargets
			if ( aoColDefs )
			{
				/* Loop over the definitions array - loop in reverse so first instance has priority */
				for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
				{
					def = aoColDefs[i];
		
					/* Each definition can target multiple columns, as it is an array */
					var aTargets = def.targets !== undefined ?
						def.targets :
						def.aTargets;
		
					if ( ! $.isArray( aTargets ) )
					{
						aTargets = [ aTargets ];
					}
		
					for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
					{
						if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
						{
							/* Add columns that we don't yet know about */
							while( columns.length <= aTargets[j] )
							{
								_fnAddColumn( oSettings );
							}
		
							/* Integer, basic index */
							fn( aTargets[j], def );
						}
						else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
						{
							/* Negative integer, right to left column counting */
							fn( columns.length+aTargets[j], def );
						}
						else if ( typeof aTargets[j] === 'string' )
						{
							/* Class name matching on TH element */
							for ( k=0, kLen=columns.length ; k<kLen ; k++ )
							{
								if ( aTargets[j] == "_all" ||
									 $(columns[k].nTh).hasClass( aTargets[j] ) )
								{
									fn( k, def );
								}
							}
						}
					}
				}
			}
		
			// Statically defined columns array
			if ( aoCols )
			{
				for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
				{
					fn( i, aoCols[i] );
				}
			}
		}
		
		/**
		 * Add a data array to the table, creating DOM node etc. This is the parallel to
		 * _fnGatherData, but for adding rows from a Javascript source, rather than a
		 * DOM source.
		 *  @param {object} oSettings dataTables settings object
		 *  @param {array} aData data array to be added
		 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
		 *    DataTables will create a row automatically
		 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
		 *    if nTr is.
		 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
		 *  @memberof DataTable#oApi
		 */
		function _fnAddData ( oSettings, aDataIn, nTr, anTds )
		{
			/* Create the object for storing information about this new row */
			var iRow = oSettings.aoData.length;
			var oData = $.extend( true, {}, DataTable.models.oRow, {
				src: nTr ? 'dom' : 'data',
				idx: iRow
			} );
		
			oData._aData = aDataIn;
			oSettings.aoData.push( oData );
		
			/* Create the cells */
			var nTd, sThisType;
			var columns = oSettings.aoColumns;
		
			// Invalidate the column types as the new data needs to be revalidated
			for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
			{
				columns[i].sType = null;
			}
		
			/* Add to the display array */
			oSettings.aiDisplayMaster.push( iRow );
		
			var id = oSettings.rowIdFn( aDataIn );
			if ( id !== undefined ) {
				oSettings.aIds[ id ] = oData;
			}
		
			/* Create the DOM information, or register it if already present */
			if ( nTr || ! oSettings.oFeatures.bDeferRender )
			{
				_fnCreateTr( oSettings, iRow, nTr, anTds );
			}
		
			return iRow;
		}
		
		
		/**
		 * Add one or more TR elements to the table. Generally we'd expect to
		 * use this for reading data from a DOM sourced table, but it could be
		 * used for an TR element. Note that if a TR is given, it is used (i.e.
		 * it is not cloned).
		 *  @param {object} settings dataTables settings object
		 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
		 *  @returns {array} Array of indexes for the added rows
		 *  @memberof DataTable#oApi
		 */
		function _fnAddTr( settings, trs )
		{
			var row;
		
			// Allow an individual node to be passed in
			if ( ! (trs instanceof $) ) {
				trs = $(trs);
			}
		
			return trs.map( function (i, el) {
				row = _fnGetRowElements( settings, el );
				return _fnAddData( settings, row.data, el, row.cells );
			} );
		}
		
		
		/**
		 * Take a TR element and convert it to an index in aoData
		 *  @param {object} oSettings dataTables settings object
		 *  @param {node} n the TR element to find
		 *  @returns {int} index if the node is found, null if not
		 *  @memberof DataTable#oApi
		 */
		function _fnNodeToDataIndex( oSettings, n )
		{
			return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
		}
		
		
		/**
		 * Take a TD element and convert it into a column data index (not the visible index)
		 *  @param {object} oSettings dataTables settings object
		 *  @param {int} iRow The row number the TD/TH can be found in
		 *  @param {node} n The TD/TH element to find
		 *  @returns {int} index if the node is found, -1 if not
		 *  @memberof DataTable#oApi
		 */
		function _fnNodeToColumnIndex( oSettings, iRow, n )
		{
			return $.inArray( n, oSettings.aoData[ iRow ].anCells );
		}
		
		
		/**
		 * Get the data for a given cell from the internal cache, taking into account data mapping
		 *  @param {object} settings dataTables settings object
		 *  @param {int} rowIdx aoData row id
		 *  @param {int} colIdx Column index
		 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
		 *  @returns {*} Cell data
		 *  @memberof DataTable#oApi
		 */
		function _fnGetCellData( settings, rowIdx, colIdx, type )
		{
			var draw           = settings.iDraw;
			var col            = settings.aoColumns[colIdx];
			var rowData        = settings.aoData[rowIdx]._aData;
			var defaultContent = col.sDefaultContent;
			var cellData       = col.fnGetData( rowData, type, {
				settings: settings,
				row:      rowIdx,
				col:      colIdx
			} );
		
			if ( cellData === undefined ) {
				if ( settings.iDrawError != draw && defaultContent === null ) {
					_fnLog( settings, 0, "Requested unknown parameter "+
						(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
						" for row "+rowIdx+", column "+colIdx, 4 );
					settings.iDrawError = draw;
				}
				return defaultContent;
			}
		
			// When the data source is null and a specific data type is requested (i.e.
			// not the original data), we can use default column data
			if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
				cellData = defaultContent;
			}
			else if ( typeof cellData === 'function' ) {
				// If the data source is a function, then we run it and use the return,
				// executing in the scope of the data object (for instances)
				return cellData.call( rowData );
			}
		
			if ( cellData === null && type == 'display' ) {
				return '';
			}
			return cellData;
		}
		
		
		/**
		 * Set the value for a specific cell, into the internal data cache
		 *  @param {object} settings dataTables settings object
		 *  @param {int} rowIdx aoData row id
		 *  @param {int} colIdx Column index
		 *  @param {*} val Value to set
		 *  @memberof DataTable#oApi
		 */
		function _fnSetCellData( settings, rowIdx, colIdx, val )
		{
			var col     = settings.aoColumns[colIdx];
			var rowData = settings.aoData[rowIdx]._aData;
		
			col.fnSetData( rowData, val, {
				settings: settings,
				row:      rowIdx,
				col:      colIdx
			}  );
		}
		
		
		// Private variable that is used to match action syntax in the data property object
		var __reArray = /\[.*?\]$/;
		var __reFn = /\(\)$/;
		
		/**
		 * Split string on periods, taking into account escaped periods
		 * @param  {string} str String to split
		 * @return {array} Split string
		 */
		function _fnSplitObjNotation( str )
		{
			return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
				return s.replace(/\\\./g, '.');
			} );
		}
		
		
		/**
		 * Return a function that can be used to get data from a source object, taking
		 * into account the ability to use nested objects as a source
		 *  @param {string|int|function} mSource The data source for the object
		 *  @returns {function} Data get function
		 *  @memberof DataTable#oApi
		 */
		function _fnGetObjectDataFn( mSource )
		{
			if ( $.isPlainObject( mSource ) )
			{
				/* Build an object of get functions, and wrap them in a single call */
				var o = {};
				$.each( mSource, function (key, val) {
					if ( val ) {
						o[key] = _fnGetObjectDataFn( val );
					}
				} );
		
				return function (data, type, row, meta) {
					var t = o[type] || o._;
					return t !== undefined ?
						t(data, type, row, meta) :
						data;
				};
			}
			else if ( mSource === null )
			{
				/* Give an empty string for rendering / sorting etc */
				return function (data) { // type, row and meta also passed, but not used
					return data;
				};
			}
			else if ( typeof mSource === 'function' )
			{
				return function (data, type, row, meta) {
					return mSource( data, type, row, meta );
				};
			}
			else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
					  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
			{
				/* If there is a . in the source string then the data source is in a
				 * nested object so we loop over the data for each level to get the next
				 * level down. On each loop we test for undefined, and if found immediately
				 * return. This allows entire objects to be missing and sDefaultContent to
				 * be used if defined, rather than throwing an error
				 */
				var fetchData = function (data, type, src) {
					var arrayNotation, funcNotation, out, innerSrc;
		
					if ( src !== "" )
					{
						var a = _fnSplitObjNotation( src );
		
						for ( var i=0, iLen=a.length ; i<iLen ; i++ )
						{
							// Check if we are dealing with special notation
							arrayNotation = a[i].match(__reArray);
							funcNotation = a[i].match(__reFn);
		
							if ( arrayNotation )
							{
								// Array notation
								a[i] = a[i].replace(__reArray, '');
		
								// Condition allows simply [] to be passed in
								if ( a[i] !== "" ) {
									data = data[ a[i] ];
								}
								out = [];
		
								// Get the remainder of the nested object to get
								a.splice( 0, i+1 );
								innerSrc = a.join('.');
		
								// Traverse each entry in the array getting the properties requested
								if ( $.isArray( data ) ) {
									for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
										out.push( fetchData( data[j], type, innerSrc ) );
									}
								}
		
								// If a string is given in between the array notation indicators, that
								// is used to join the strings together, otherwise an array is returned
								var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
								data = (join==="") ? out : out.join(join);
		
								// The inner call to fetchData has already traversed through the remainder
								// of the source requested, so we exit from the loop
								break;
							}
							else if ( funcNotation )
							{
								// Function call
								a[i] = a[i].replace(__reFn, '');
								data = data[ a[i] ]();
								continue;
							}
		
							if ( data === null || data[ a[i] ] === undefined )
							{
								return undefined;
							}
							data = data[ a[i] ];
						}
					}
		
					return data;
				};
		
				return function (data, type) { // row and meta also passed, but not used
					return fetchData( data, type, mSource );
				};
			}
			else
			{
				/* Array or flat object mapping */
				return function (data, type) { // row and meta also passed, but not used
					return data[mSource];
				};
			}
		}
		
		
		/**
		 * Return a function that can be used to set data from a source object, taking
		 * into account the ability to use nested objects as a source
		 *  @param {string|int|function} mSource The data source for the object
		 *  @returns {function} Data set function
		 *  @memberof DataTable#oApi
		 */
		function _fnSetObjectDataFn( mSource )
		{
			if ( $.isPlainObject( mSource ) )
			{
				/* Unlike get, only the underscore (global) option is used for for
				 * setting data since we don't know the type here. This is why an object
				 * option is not documented for `mData` (which is read/write), but it is
				 * for `mRender` which is read only.
				 */
				return _fnSetObjectDataFn( mSource._ );
			}
			else if ( mSource === null )
			{
				/* Nothing to do when the data source is null */
				return function () {};
			}
			else if ( typeof mSource === 'function' )
			{
				return function (data, val, meta) {
					mSource( data, 'set', val, meta );
				};
			}
			else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
					  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
			{
				/* Like the get, we need to get data from a nested object */
				var setData = function (data, val, src) {
					var a = _fnSplitObjNotation( src ), b;
					var aLast = a[a.length-1];
					var arrayNotation, funcNotation, o, innerSrc;
		
					for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
					{
						// Check if we are dealing with an array notation request
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);
		
						if ( arrayNotation )
						{
							a[i] = a[i].replace(__reArray, '');
							data[ a[i] ] = [];
		
							// Get the remainder of the nested object to set so we can recurse
							b = a.slice();
							b.splice( 0, i+1 );
							innerSrc = b.join('.');
		
							// Traverse each entry in the array setting the properties requested
							if ( $.isArray( val ) )
							{
								for ( var j=0, jLen=val.length ; j<jLen ; j++ )
								{
									o = {};
									setData( o, val[j], innerSrc );
									data[ a[i] ].push( o );
								}
							}
							else
							{
								// We've been asked to save data to an array, but it
								// isn't array data to be saved. Best that can be done
								// is to just save the value.
								data[ a[i] ] = val;
							}
		
							// The inner call to setData has already traversed through the remainder
							// of the source and has set the data, thus we can exit here
							return;
						}
						else if ( funcNotation )
						{
							// Function call
							a[i] = a[i].replace(__reFn, '');
							data = data[ a[i] ]( val );
						}
		
						// If the nested object doesn't currently exist - since we are
						// trying to set the value - create it
						if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
						{
							data[ a[i] ] = {};
						}
						data = data[ a[i] ];
					}
		
					// Last item in the input - i.e, the actual set
					if ( aLast.match(__reFn ) )
					{
						// Function call
						data = data[ aLast.replace(__reFn, '') ]( val );
					}
					else
					{
						// If array notation is used, we just want to strip it and use the property name
						// and assign the value. If it isn't used, then we get the result we want anyway
						data[ aLast.replace(__reArray, '') ] = val;
					}
				};
		
				return function (data, val) { // meta is also passed in, but not used
					return setData( data, val, mSource );
				};
			}
			else
			{
				/* Array or flat object mapping */
				return function (data, val) { // meta is also passed in, but not used
					data[mSource] = val;
				};
			}
		}
		
		
		/**
		 * Return an array with the full table data
		 *  @param {object} oSettings dataTables settings object
		 *  @returns array {array} aData Master data array
		 *  @memberof DataTable#oApi
		 */
		function _fnGetDataMaster ( settings )
		{
			return _pluck( settings.aoData, '_aData' );
		}
		
		
		/**
		 * Nuke the table
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnClearTable( settings )
		{
			settings.aoData.length = 0;
			settings.aiDisplayMaster.length = 0;
			settings.aiDisplay.length = 0;
			settings.aIds = {};
		}
		
		
		 /**
		 * Take an array of integers (index array) and remove a target integer (value - not
		 * the key!)
		 *  @param {array} a Index array to target
		 *  @param {int} iTarget value to find
		 *  @memberof DataTable#oApi
		 */
		function _fnDeleteIndex( a, iTarget, splice )
		{
			var iTargetIndex = -1;
		
			for ( var i=0, iLen=a.length ; i<iLen ; i++ )
			{
				if ( a[i] == iTarget )
				{
					iTargetIndex = i;
				}
				else if ( a[i] > iTarget )
				{
					a[i]--;
				}
			}
		
			if ( iTargetIndex != -1 && splice === undefined )
			{
				a.splice( iTargetIndex, 1 );
			}
		}
		
		
		/**
		 * Mark cached data as invalid such that a re-read of the data will occur when
		 * the cached data is next requested. Also update from the data source object.
		 *
		 * @param {object} settings DataTables settings object
		 * @param {int}    rowIdx   Row index to invalidate
		 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
		 *     or 'data'
		 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
		 *     row will be invalidated
		 * @memberof DataTable#oApi
		 *
		 * @todo For the modularisation of v1.11 this will need to become a callback, so
		 *   the sort and filter methods can subscribe to it. That will required
		 *   initialisation options for sorting, which is why it is not already baked in
		 */
		function _fnInvalidate( settings, rowIdx, src, colIdx )
		{
			var row = settings.aoData[ rowIdx ];
			var i, ien;
			var cellWrite = function ( cell, col ) {
				// This is very frustrating, but in IE if you just write directly
				// to innerHTML, and elements that are overwritten are GC'ed,
				// even if there is a reference to them elsewhere
				while ( cell.childNodes.length ) {
					cell.removeChild( cell.firstChild );
				}
		
				cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
			};
		
			// Are we reading last data from DOM or the data object?
			if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
				// Read the data from the DOM
				row._aData = _fnGetRowElements(
						settings, row, colIdx, colIdx === undefined ? undefined : row._aData
					)
					.data;
			}
			else {
				// Reading from data object, update the DOM
				var cells = row.anCells;
		
				if ( cells ) {
					if ( colIdx !== undefined ) {
						cellWrite( cells[colIdx], colIdx );
					}
					else {
						for ( i=0, ien=cells.length ; i<ien ; i++ ) {
							cellWrite( cells[i], i );
						}
					}
				}
			}
		
			// For both row and cell invalidation, the cached data for sorting and
			// filtering is nulled out
			row._aSortData = null;
			row._aFilterData = null;
		
			// Invalidate the type for a specific column (if given) or all columns since
			// the data might have changed
			var cols = settings.aoColumns;
			if ( colIdx !== undefined ) {
				cols[ colIdx ].sType = null;
			}
			else {
				for ( i=0, ien=cols.length ; i<ien ; i++ ) {
					cols[i].sType = null;
				}
		
				// Update DataTables special `DT_*` attributes for the row
				_fnRowAttributes( settings, row );
			}
		}
		
		
		/**
		 * Build a data source object from an HTML row, reading the contents of the
		 * cells that are in the row.
		 *
		 * @param {object} settings DataTables settings object
		 * @param {node|object} TR element from which to read data or existing row
		 *   object from which to re-read the data from the cells
		 * @param {int} [colIdx] Optional column index
		 * @param {array|object} [d] Data source object. If `colIdx` is given then this
		 *   parameter should also be given and will be used to write the data into.
		 *   Only the column in question will be written
		 * @returns {object} Object with two parameters: `data` the data read, in
		 *   document order, and `cells` and array of nodes (they can be useful to the
		 *   caller, so rather than needing a second traversal to get them, just return
		 *   them from here).
		 * @memberof DataTable#oApi
		 */
		function _fnGetRowElements( settings, row, colIdx, d )
		{
			var
				tds = [],
				td = row.firstChild,
				name, col, o, i=0, contents,
				columns = settings.aoColumns,
				objectRead = settings._rowReadObject;
		
			// Allow the data object to be passed in, or construct
			d = d !== undefined ?
				d :
				objectRead ?
					{} :
					[];
		
			var attr = function ( str, td  ) {
				if ( typeof str === 'string' ) {
					var idx = str.indexOf('@');
		
					if ( idx !== -1 ) {
						var attr = str.substring( idx+1 );
						var setter = _fnSetObjectDataFn( str );
						setter( d, td.getAttribute( attr ) );
					}
				}
			};
		
			// Read data from a cell and store into the data object
			var cellProcess = function ( cell ) {
				if ( colIdx === undefined || colIdx === i ) {
					col = columns[i];
					contents = $.trim(cell.innerHTML);
		
					if ( col && col._bAttrSrc ) {
						var setter = _fnSetObjectDataFn( col.mData._ );
						setter( d, contents );
		
						attr( col.mData.sort, cell );
						attr( col.mData.type, cell );
						attr( col.mData.filter, cell );
					}
					else {
						// Depending on the `data` option for the columns the data can
						// be read to either an object or an array.
						if ( objectRead ) {
							if ( ! col._setter ) {
								// Cache the setter function
								col._setter = _fnSetObjectDataFn( col.mData );
							}
							col._setter( d, contents );
						}
						else {
							d[i] = contents;
						}
					}
				}
		
				i++;
			};
		
			if ( td ) {
				// `tr` element was passed in
				while ( td ) {
					name = td.nodeName.toUpperCase();
		
					if ( name == "TD" || name == "TH" ) {
						cellProcess( td );
						tds.push( td );
					}
		
					td = td.nextSibling;
				}
			}
			else {
				// Existing row object passed in
				tds = row.anCells;
		
				for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
					cellProcess( tds[j] );
				}
			}
		
			// Read the ID from the DOM if present
			var rowNode = row.firstChild ? row : row.nTr;
		
			if ( rowNode ) {
				var id = rowNode.getAttribute( 'id' );
		
				if ( id ) {
					_fnSetObjectDataFn( settings.rowId )( d, id );
				}
			}
		
			return {
				data: d,
				cells: tds
			};
		}
		/**
		 * Create a new TR element (and it's TD children) for a row
		 *  @param {object} oSettings dataTables settings object
		 *  @param {int} iRow Row to consider
		 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
		 *    DataTables will create a row automatically
		 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
		 *    if nTr is.
		 *  @memberof DataTable#oApi
		 */
		function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
		{
			var
				row = oSettings.aoData[iRow],
				rowData = row._aData,
				cells = [],
				nTr, nTd, oCol,
				i, iLen, create;
		
			if ( row.nTr === null )
			{
				nTr = nTrIn || document.createElement('tr');
		
				row.nTr = nTr;
				row.anCells = cells;
		
				/* Use a private property on the node to allow reserve mapping from the node
				 * to the aoData array for fast look up
				 */
				nTr._DT_RowIndex = iRow;
		
				/* Special parameters can be given by the data source to be used on the row */
				_fnRowAttributes( oSettings, row );
		
				/* Process each column */
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
				{
					oCol = oSettings.aoColumns[i];
					create = nTrIn ? false : true;
		
					nTd = create ? document.createElement( oCol.sCellType ) : anTds[i];
					nTd._DT_CellIndex = {
						row: iRow,
						column: i
					};
					
					cells.push( nTd );
		
					// Need to create the HTML if new, or if a rendering function is defined
					if ( create || ((!nTrIn || oCol.mRender || oCol.mData !== i) &&
						 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
					)) {
						nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
					}
		
					/* Add user defined class */
					if ( oCol.sClass )
					{
						nTd.className += ' '+oCol.sClass;
					}
		
					// Visibility - add or remove as required
					if ( oCol.bVisible && ! nTrIn )
					{
						nTr.appendChild( nTd );
					}
					else if ( ! oCol.bVisible && nTrIn )
					{
						nTd.parentNode.removeChild( nTd );
					}
		
					if ( oCol.fnCreatedCell )
					{
						oCol.fnCreatedCell.call( oSettings.oInstance,
							nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
						);
					}
				}
		
				_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
			}
		
			// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
			// and deployed
			row.nTr.setAttribute( 'role', 'row' );
		}
		
		
		/**
		 * Add attributes to a row based on the special `DT_*` parameters in a data
		 * source object.
		 *  @param {object} settings DataTables settings object
		 *  @param {object} DataTables row object for the row to be modified
		 *  @memberof DataTable#oApi
		 */
		function _fnRowAttributes( settings, row )
		{
			var tr = row.nTr;
			var data = row._aData;
		
			if ( tr ) {
				var id = settings.rowIdFn( data );
		
				if ( id ) {
					tr.id = id;
				}
		
				if ( data.DT_RowClass ) {
					// Remove any classes added by DT_RowClass before
					var a = data.DT_RowClass.split(' ');
					row.__rowc = row.__rowc ?
						_unique( row.__rowc.concat( a ) ) :
						a;
		
					$(tr)
						.removeClass( row.__rowc.join(' ') )
						.addClass( data.DT_RowClass );
				}
		
				if ( data.DT_RowAttr ) {
					$(tr).attr( data.DT_RowAttr );
				}
		
				if ( data.DT_RowData ) {
					$(tr).data( data.DT_RowData );
				}
			}
		}
		
		
		/**
		 * Create the HTML header for the table
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnBuildHead( oSettings )
		{
			var i, ien, cell, row, column;
			var thead = oSettings.nTHead;
			var tfoot = oSettings.nTFoot;
			var createHeader = $('th, td', thead).length === 0;
			var classes = oSettings.oClasses;
			var columns = oSettings.aoColumns;
		
			if ( createHeader ) {
				row = $('<tr/>').appendTo( thead );
			}
		
			for ( i=0, ien=columns.length ; i<ien ; i++ ) {
				column = columns[i];
				cell = $( column.nTh ).addClass( column.sClass );
		
				if ( createHeader ) {
					cell.appendTo( row );
				}
		
				// 1.11 move into sorting
				if ( oSettings.oFeatures.bSort ) {
					cell.addClass( column.sSortingClass );
		
					if ( column.bSortable !== false ) {
						cell
							.attr( 'tabindex', oSettings.iTabIndex )
							.attr( 'aria-controls', oSettings.sTableId );
		
						_fnSortAttachListener( oSettings, column.nTh, i );
					}
				}
		
				if ( column.sTitle != cell[0].innerHTML ) {
					cell.html( column.sTitle );
				}
		
				_fnRenderer( oSettings, 'header' )(
					oSettings, cell, column, classes
				);
			}
		
			if ( createHeader ) {
				_fnDetectHeader( oSettings.aoHeader, thead );
			}
			
			/* ARIA role for the rows */
			 $(thead).find('>tr').attr('role', 'row');
		
			/* Deal with the footer - add classes if required */
			$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
			$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
		
			// Cache the footer cells. Note that we only take the cells from the first
			// row in the footer. If there is more than one row the user wants to
			// interact with, they need to use the table().foot() method. Note also this
			// allows cells to be used for multiple columns using colspan
			if ( tfoot !== null ) {
				var cells = oSettings.aoFooter[0];
		
				for ( i=0, ien=cells.length ; i<ien ; i++ ) {
					column = columns[i];
					column.nTf = cells[i].cell;
		
					if ( column.sClass ) {
						$(column.nTf).addClass( column.sClass );
					}
				}
			}
		}
		
		
		/**
		 * Draw the header (or footer) element based on the column visibility states. The
		 * methodology here is to use the layout array from _fnDetectHeader, modified for
		 * the instantaneous column visibility, to construct the new layout. The grid is
		 * traversed over cell at a time in a rows x columns grid fashion, although each
		 * cell insert can cover multiple elements in the grid - which is tracks using the
		 * aApplied array. Cell inserts in the grid will only occur where there isn't
		 * already a cell in that position.
		 *  @param {object} oSettings dataTables settings object
		 *  @param array {objects} aoSource Layout array from _fnDetectHeader
		 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
		 *  @memberof DataTable#oApi
		 */
		function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
		{
			var i, iLen, j, jLen, k, kLen, n, nLocalTr;
			var aoLocal = [];
			var aApplied = [];
			var iColumns = oSettings.aoColumns.length;
			var iRowspan, iColspan;
		
			if ( ! aoSource )
			{
				return;
			}
		
			if (  bIncludeHidden === undefined )
			{
				bIncludeHidden = false;
			}
		
			/* Make a copy of the master layout array, but without the visible columns in it */
			for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
			{
				aoLocal[i] = aoSource[i].slice();
				aoLocal[i].nTr = aoSource[i].nTr;
		
				/* Remove any columns which are currently hidden */
				for ( j=iColumns-1 ; j>=0 ; j-- )
				{
					if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
					{
						aoLocal[i].splice( j, 1 );
					}
				}
		
				/* Prep the applied array - it needs an element for each row */
				aApplied.push( [] );
			}
		
			for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
			{
				nLocalTr = aoLocal[i].nTr;
		
				/* All cells are going to be replaced, so empty out the row */
				if ( nLocalTr )
				{
					while( (n = nLocalTr.firstChild) )
					{
						nLocalTr.removeChild( n );
					}
				}
		
				for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
				{
					iRowspan = 1;
					iColspan = 1;
		
					/* Check to see if there is already a cell (row/colspan) covering our target
					 * insert point. If there is, then there is nothing to do.
					 */
					if ( aApplied[i][j] === undefined )
					{
						nLocalTr.appendChild( aoLocal[i][j].cell );
						aApplied[i][j] = 1;
		
						/* Expand the cell to cover as many rows as needed */
						while ( aoLocal[i+iRowspan] !== undefined &&
								aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
						{
							aApplied[i+iRowspan][j] = 1;
							iRowspan++;
						}
		
						/* Expand the cell to cover as many columns as needed */
						while ( aoLocal[i][j+iColspan] !== undefined &&
								aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
						{
							/* Must update the applied array over the rows for the columns */
							for ( k=0 ; k<iRowspan ; k++ )
							{
								aApplied[i+k][j+iColspan] = 1;
							}
							iColspan++;
						}
		
						/* Do the actual expansion in the DOM */
						$(aoLocal[i][j].cell)
							.attr('rowspan', iRowspan)
							.attr('colspan', iColspan);
					}
				}
			}
		}
		
		
		/**
		 * Insert the required TR nodes into the table for display
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnDraw( oSettings )
		{
			/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
			var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
			if ( $.inArray( false, aPreDraw ) !== -1 )
			{
				_fnProcessingDisplay( oSettings, false );
				return;
			}
		
			var i, iLen, n;
			var anRows = [];
			var iRowCount = 0;
			var asStripeClasses = oSettings.asStripeClasses;
			var iStripes = asStripeClasses.length;
			var iOpenRows = oSettings.aoOpenRows.length;
			var oLang = oSettings.oLanguage;
			var iInitDisplayStart = oSettings.iInitDisplayStart;
			var bServerSide = _fnDataSource( oSettings ) == 'ssp';
			var aiDisplay = oSettings.aiDisplay;
		
			oSettings.bDrawing = true;
		
			/* Check and see if we have an initial draw position from state saving */
			if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
			{
				oSettings._iDisplayStart = bServerSide ?
					iInitDisplayStart :
					iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
						0 :
						iInitDisplayStart;
		
				oSettings.iInitDisplayStart = -1;
			}
		
			var iDisplayStart = oSettings._iDisplayStart;
			var iDisplayEnd = oSettings.fnDisplayEnd();
		
			/* Server-side processing draw intercept */
			if ( oSettings.bDeferLoading )
			{
				oSettings.bDeferLoading = false;
				oSettings.iDraw++;
				_fnProcessingDisplay( oSettings, false );
			}
			else if ( !bServerSide )
			{
				oSettings.iDraw++;
			}
			else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
			{
				return;
			}
		
			if ( aiDisplay.length !== 0 )
			{
				var iStart = bServerSide ? 0 : iDisplayStart;
				var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
		
				for ( var j=iStart ; j<iEnd ; j++ )
				{
					var iDataIndex = aiDisplay[j];
					var aoData = oSettings.aoData[ iDataIndex ];
					if ( aoData.nTr === null )
					{
						_fnCreateTr( oSettings, iDataIndex );
					}
		
					var nRow = aoData.nTr;
		
					/* Remove the old striping classes and then add the new one */
					if ( iStripes !== 0 )
					{
						var sStripe = asStripeClasses[ iRowCount % iStripes ];
						if ( aoData._sRowStripe != sStripe )
						{
							$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
							aoData._sRowStripe = sStripe;
						}
					}
		
					// Row callback functions - might want to manipulate the row
					// iRowCount and j are not currently documented. Are they at all
					// useful?
					_fnCallbackFire( oSettings, 'aoRowCallback', null,
						[nRow, aoData._aData, iRowCount, j, iDataIndex] );
		
					anRows.push( nRow );
					iRowCount++;
				}
			}
			else
			{
				/* Table is empty - create a row with an empty message in it */
				var sZero = oLang.sZeroRecords;
				if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
				{
					sZero = oLang.sLoadingRecords;
				}
				else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
				{
					sZero = oLang.sEmptyTable;
				}
		
				anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
					.append( $('<td />', {
						'valign':  'top',
						'colSpan': _fnVisbleColumns( oSettings ),
						'class':   oSettings.oClasses.sRowEmpty
					} ).html( sZero ) )[0];
			}
		
			/* Header and footer callbacks */
			_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
				_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
		
			_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
				_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
		
			var body = $(oSettings.nTBody);
		
			body.children().detach();
			body.append( $(anRows) );
		
			/* Call all required callback functions for the end of a draw */
			_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
		
			/* Draw is complete, sorting and filtering must be as well */
			oSettings.bSorted = false;
			oSettings.bFiltered = false;
			oSettings.bDrawing = false;
		}
		
		
		/**
		 * Redraw the table - taking account of the various features which are enabled
		 *  @param {object} oSettings dataTables settings object
		 *  @param {boolean} [holdPosition] Keep the current paging position. By default
		 *    the paging is reset to the first page
		 *  @memberof DataTable#oApi
		 */
		function _fnReDraw( settings, holdPosition )
		{
			var
				features = settings.oFeatures,
				sort     = features.bSort,
				filter   = features.bFilter;
		
			if ( sort ) {
				_fnSort( settings );
			}
		
			if ( filter ) {
				_fnFilterComplete( settings, settings.oPreviousSearch );
			}
			else {
				// No filtering, so we want to just use the display master
				settings.aiDisplay = settings.aiDisplayMaster.slice();
			}
		
			if ( holdPosition !== true ) {
				settings._iDisplayStart = 0;
			}
		
			// Let any modules know about the draw hold position state (used by
			// scrolling internally)
			settings._drawHold = holdPosition;
		
			_fnDraw( settings );
		
			settings._drawHold = false;
		}
		
		
		/**
		 * Add the options to the page HTML for the table
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnAddOptionsHtml ( oSettings )
		{
			var classes = oSettings.oClasses;
			var table = $(oSettings.nTable);
			var holding = $('<div/>').insertBefore( table ); // Holding element for speed
			var features = oSettings.oFeatures;
		
			// All DataTables are wrapped in a div
			var insert = $('<div/>', {
				id:      oSettings.sTableId+'_wrapper',
				'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
			} );
		
			oSettings.nHolding = holding[0];
			oSettings.nTableWrapper = insert[0];
			oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
		
			/* Loop over the user set positioning and place the elements as needed */
			var aDom = oSettings.sDom.split('');
			var featureNode, cOption, nNewNode, cNext, sAttr, j;
			for ( var i=0 ; i<aDom.length ; i++ )
			{
				featureNode = null;
				cOption = aDom[i];
		
				if ( cOption == '<' )
				{
					/* New container div */
					nNewNode = $('<div/>')[0];
		
					/* Check to see if we should append an id and/or a class name to the container */
					cNext = aDom[i+1];
					if ( cNext == "'" || cNext == '"' )
					{
						sAttr = "";
						j = 2;
						while ( aDom[i+j] != cNext )
						{
							sAttr += aDom[i+j];
							j++;
						}
		
						/* Replace jQuery UI constants @todo depreciated */
						if ( sAttr == "H" )
						{
							sAttr = classes.sJUIHeader;
						}
						else if ( sAttr == "F" )
						{
							sAttr = classes.sJUIFooter;
						}
		
						/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
						 * breaks the string into parts and applies them as needed
						 */
						if ( sAttr.indexOf('.') != -1 )
						{
							var aSplit = sAttr.split('.');
							nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
							nNewNode.className = aSplit[1];
						}
						else if ( sAttr.charAt(0) == "#" )
						{
							nNewNode.id = sAttr.substr(1, sAttr.length-1);
						}
						else
						{
							nNewNode.className = sAttr;
						}
		
						i += j; /* Move along the position array */
					}
		
					insert.append( nNewNode );
					insert = $(nNewNode);
				}
				else if ( cOption == '>' )
				{
					/* End container div */
					insert = insert.parent();
				}
				// @todo Move options into their own plugins?
				else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
				{
					/* Length */
					featureNode = _fnFeatureHtmlLength( oSettings );
				}
				else if ( cOption == 'f' && features.bFilter )
				{
					/* Filter */
					featureNode = _fnFeatureHtmlFilter( oSettings );
				}
				else if ( cOption == 'r' && features.bProcessing )
				{
					/* pRocessing */
					featureNode = _fnFeatureHtmlProcessing( oSettings );
				}
				else if ( cOption == 't' )
				{
					/* Table */
					featureNode = _fnFeatureHtmlTable( oSettings );
				}
				else if ( cOption ==  'i' && features.bInfo )
				{
					/* Info */
					featureNode = _fnFeatureHtmlInfo( oSettings );
				}
				else if ( cOption == 'p' && features.bPaginate )
				{
					/* Pagination */
					featureNode = _fnFeatureHtmlPaginate( oSettings );
				}
				else if ( DataTable.ext.feature.length !== 0 )
				{
					/* Plug-in features */
					var aoFeatures = DataTable.ext.feature;
					for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
					{
						if ( cOption == aoFeatures[k].cFeature )
						{
							featureNode = aoFeatures[k].fnInit( oSettings );
							break;
						}
					}
				}
		
				/* Add to the 2D features array */
				if ( featureNode )
				{
					var aanFeatures = oSettings.aanFeatures;
		
					if ( ! aanFeatures[cOption] )
					{
						aanFeatures[cOption] = [];
					}
		
					aanFeatures[cOption].push( featureNode );
					insert.append( featureNode );
				}
			}
		
			/* Built our DOM structure - replace the holding div with what we want */
			holding.replaceWith( insert );
			oSettings.nHolding = null;
		}
		
		
		/**
		 * Use the DOM source to create up an array of header cells. The idea here is to
		 * create a layout grid (array) of rows x columns, which contains a reference
		 * to the cell that that point in the grid (regardless of col/rowspan), such that
		 * any column / row could be removed and the new grid constructed
		 *  @param array {object} aLayout Array to store the calculated layout in
		 *  @param {node} nThead The header/footer element for the table
		 *  @memberof DataTable#oApi
		 */
		function _fnDetectHeader ( aLayout, nThead )
		{
			var nTrs = $(nThead).children('tr');
			var nTr, nCell;
			var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
			var bUnique;
			var fnShiftCol = function ( a, i, j ) {
				var k = a[i];
						while ( k[j] ) {
					j++;
				}
				return j;
			};
		
			aLayout.splice( 0, aLayout.length );
		
			/* We know how many rows there are in the layout - so prep it */
			for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
			{
				aLayout.push( [] );
			}
		
			/* Calculate a layout array */
			for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
			{
				nTr = nTrs[i];
				iColumn = 0;
		
				/* For every cell in the row... */
				nCell = nTr.firstChild;
				while ( nCell ) {
					if ( nCell.nodeName.toUpperCase() == "TD" ||
						 nCell.nodeName.toUpperCase() == "TH" )
					{
						/* Get the col and rowspan attributes from the DOM and sanitise them */
						iColspan = nCell.getAttribute('colspan') * 1;
						iRowspan = nCell.getAttribute('rowspan') * 1;
						iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
						iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
		
						/* There might be colspan cells already in this row, so shift our target
						 * accordingly
						 */
						iColShifted = fnShiftCol( aLayout, i, iColumn );
		
						/* Cache calculation for unique columns */
						bUnique = iColspan === 1 ? true : false;
		
						/* If there is col / rowspan, copy the information into the layout grid */
						for ( l=0 ; l<iColspan ; l++ )
						{
							for ( k=0 ; k<iRowspan ; k++ )
							{
								aLayout[i+k][iColShifted+l] = {
									"cell": nCell,
									"unique": bUnique
								};
								aLayout[i+k].nTr = nTr;
							}
						}
					}
					nCell = nCell.nextSibling;
				}
			}
		}
		
		
		/**
		 * Get an array of unique th elements, one for each column
		 *  @param {object} oSettings dataTables settings object
		 *  @param {node} nHeader automatically detect the layout from this node - optional
		 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
		 *  @returns array {node} aReturn list of unique th's
		 *  @memberof DataTable#oApi
		 */
		function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
		{
			var aReturn = [];
			if ( !aLayout )
			{
				aLayout = oSettings.aoHeader;
				if ( nHeader )
				{
					aLayout = [];
					_fnDetectHeader( aLayout, nHeader );
				}
			}
		
			for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
			{
				for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
				{
					if ( aLayout[i][j].unique &&
						 (!aReturn[j] || !oSettings.bSortCellsTop) )
					{
						aReturn[j] = aLayout[i][j].cell;
					}
				}
			}
		
			return aReturn;
		}
		
		/**
		 * Create an Ajax call based on the table's settings, taking into account that
		 * parameters can have multiple forms, and backwards compatibility.
		 *
		 * @param {object} oSettings dataTables settings object
		 * @param {array} data Data to send to the server, required by
		 *     DataTables - may be augmented by developer callbacks
		 * @param {function} fn Callback function to run when data is obtained
		 */
		function _fnBuildAjax( oSettings, data, fn )
		{
			// Compatibility with 1.9-, allow fnServerData and event to manipulate
			_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
		
			// Convert to object based for 1.10+ if using the old array scheme which can
			// come from server-side processing or serverParams
			if ( data && $.isArray(data) ) {
				var tmp = {};
				var rbracket = /(.*?)\[\]$/;
		
				$.each( data, function (key, val) {
					var match = val.name.match(rbracket);
		
					if ( match ) {
						// Support for arrays
						var name = match[0];
		
						if ( ! tmp[ name ] ) {
							tmp[ name ] = [];
						}
						tmp[ name ].push( val.value );
					}
					else {
						tmp[val.name] = val.value;
					}
				} );
				data = tmp;
			}
		
			var ajaxData;
			var ajax = oSettings.ajax;
			var instance = oSettings.oInstance;
			var callback = function ( json ) {
				_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
				fn( json );
			};
		
			if ( $.isPlainObject( ajax ) && ajax.data )
			{
				ajaxData = ajax.data;
		
				var newData = typeof ajaxData === 'function' ?
					ajaxData( data, oSettings ) :  // fn can manipulate data or return
					ajaxData;                      // an object object or array to merge
		
				// If the function returned something, use that alone
				data = typeof ajaxData === 'function' && newData ?
					newData :
					$.extend( true, data, newData );
		
				// Remove the data property as we've resolved it already and don't want
				// jQuery to do it again (it is restored at the end of the function)
				delete ajax.data;
			}
		
			var baseAjax = {
				"data": data,
				"success": function (json) {
					var error = json.error || json.sError;
					if ( error ) {
						_fnLog( oSettings, 0, error );
					}
		
					oSettings.json = json;
					callback( json );
				},
				"dataType": "json",
				"cache": false,
				"type": oSettings.sServerMethod,
				"error": function (xhr, error, thrown) {
					var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
		
					if ( $.inArray( true, ret ) === -1 ) {
						if ( error == "parsererror" ) {
							_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
						}
						else if ( xhr.readyState === 4 ) {
							_fnLog( oSettings, 0, 'Ajax error', 7 );
						}
					}
		
					_fnProcessingDisplay( oSettings, false );
				}
			};
		
			// Store the data submitted for the API
			oSettings.oAjaxData = data;
		
			// Allow plug-ins and external processes to modify the data
			_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
		
			if ( oSettings.fnServerData )
			{
				// DataTables 1.9- compatibility
				oSettings.fnServerData.call( instance,
					oSettings.sAjaxSource,
					$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
						return { name: key, value: val };
					} ),
					callback,
					oSettings
				);
			}
			else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
			{
				// DataTables 1.9- compatibility
				oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
					url: ajax || oSettings.sAjaxSource
				} ) );
			}
			else if ( typeof ajax === 'function' )
			{
				// Is a function - let the caller define what needs to be done
				oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
			}
			else
			{
				// Object to extend the base settings
				oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
		
				// Restore for next time around
				ajax.data = ajaxData;
			}
		}
		
		
		/**
		 * Update the table using an Ajax call
		 *  @param {object} settings dataTables settings object
		 *  @returns {boolean} Block the table drawing or not
		 *  @memberof DataTable#oApi
		 */
		function _fnAjaxUpdate( settings )
		{
			if ( settings.bAjaxDataGet ) {
				settings.iDraw++;
				_fnProcessingDisplay( settings, true );
		
				_fnBuildAjax(
					settings,
					_fnAjaxParameters( settings ),
					function(json) {
						_fnAjaxUpdateDraw( settings, json );
					}
				);
		
				return false;
			}
			return true;
		}
		
		
		/**
		 * Build up the parameters in an object needed for a server-side processing
		 * request. Note that this is basically done twice, is different ways - a modern
		 * method which is used by default in DataTables 1.10 which uses objects and
		 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
		 * the sAjaxSource option is used in the initialisation, or the legacyAjax
		 * option is set.
		 *  @param {object} oSettings dataTables settings object
		 *  @returns {bool} block the table drawing or not
		 *  @memberof DataTable#oApi
		 */
		function _fnAjaxParameters( settings )
		{
			var
				columns = settings.aoColumns,
				columnCount = columns.length,
				features = settings.oFeatures,
				preSearch = settings.oPreviousSearch,
				preColSearch = settings.aoPreSearchCols,
				i, data = [], dataProp, column, columnSearch,
				sort = _fnSortFlatten( settings ),
				displayStart = settings._iDisplayStart,
				displayLength = features.bPaginate !== false ?
					settings._iDisplayLength :
					-1;
		
			var param = function ( name, value ) {
				data.push( { 'name': name, 'value': value } );
			};
		
			// DataTables 1.9- compatible method
			param( 'sEcho',          settings.iDraw );
			param( 'iColumns',       columnCount );
			param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
			param( 'iDisplayStart',  displayStart );
			param( 'iDisplayLength', displayLength );
		
			// DataTables 1.10+ method
			var d = {
				draw:    settings.iDraw,
				columns: [],
				order:   [],
				start:   displayStart,
				length:  displayLength,
				search:  {
					value: preSearch.sSearch,
					regex: preSearch.bRegex
				}
			};
		
			for ( i=0 ; i<columnCount ; i++ ) {
				column = columns[i];
				columnSearch = preColSearch[i];
				dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
		
				d.columns.push( {
					data:       dataProp,
					name:       column.sName,
					searchable: column.bSearchable,
					orderable:  column.bSortable,
					search:     {
						value: columnSearch.sSearch,
						regex: columnSearch.bRegex
					}
				} );
		
				param( "mDataProp_"+i, dataProp );
		
				if ( features.bFilter ) {
					param( 'sSearch_'+i,     columnSearch.sSearch );
					param( 'bRegex_'+i,      columnSearch.bRegex );
					param( 'bSearchable_'+i, column.bSearchable );
				}
		
				if ( features.bSort ) {
					param( 'bSortable_'+i, column.bSortable );
				}
			}
		
			if ( features.bFilter ) {
				param( 'sSearch', preSearch.sSearch );
				param( 'bRegex', preSearch.bRegex );
			}
		
			if ( features.bSort ) {
				$.each( sort, function ( i, val ) {
					d.order.push( { column: val.col, dir: val.dir } );
		
					param( 'iSortCol_'+i, val.col );
					param( 'sSortDir_'+i, val.dir );
				} );
		
				param( 'iSortingCols', sort.length );
			}
		
			// If the legacy.ajax parameter is null, then we automatically decide which
			// form to use, based on sAjaxSource
			var legacy = DataTable.ext.legacy.ajax;
			if ( legacy === null ) {
				return settings.sAjaxSource ? data : d;
			}
		
			// Otherwise, if legacy has been specified then we use that to decide on the
			// form
			return legacy ? data : d;
		}
		
		
		/**
		 * Data the data from the server (nuking the old) and redraw the table
		 *  @param {object} oSettings dataTables settings object
		 *  @param {object} json json data return from the server.
		 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
		 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
		 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
		 *  @param {array} json.aaData The data to display on this page
		 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
		 *  @memberof DataTable#oApi
		 */
		function _fnAjaxUpdateDraw ( settings, json )
		{
			// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
			// Support both
			var compat = function ( old, modern ) {
				return json[old] !== undefined ? json[old] : json[modern];
			};
		
			var data = _fnAjaxDataSrc( settings, json );
			var draw            = compat( 'sEcho',                'draw' );
			var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
			var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
		
			if ( draw !== undefined ) {
				// Protect against out of sequence returns
				if ( draw*1 < settings.iDraw ) {
					return;
				}
				settings.iDraw = draw * 1;
			}
		
			_fnClearTable( settings );
			settings._iRecordsTotal   = parseInt(recordsTotal, 10);
			settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
		
			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
				_fnAddData( settings, data[i] );
			}
			settings.aiDisplay = settings.aiDisplayMaster.slice();
		
			settings.bAjaxDataGet = false;
			_fnDraw( settings );
		
			if ( ! settings._bInitComplete ) {
				_fnInitComplete( settings, json );
			}
		
			settings.bAjaxDataGet = true;
			_fnProcessingDisplay( settings, false );
		}
		
		
		/**
		 * Get the data from the JSON data source to use for drawing a table. Using
		 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
		 * source object, or from a processing function.
		 *  @param {object} oSettings dataTables settings object
		 *  @param  {object} json Data source object / array from the server
		 *  @return {array} Array of data to use
		 */
		function _fnAjaxDataSrc ( oSettings, json )
		{
			var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
				oSettings.ajax.dataSrc :
				oSettings.sAjaxDataProp; // Compatibility with 1.9-.
		
			// Compatibility with 1.9-. In order to read from aaData, check if the
			// default has been changed, if not, check for aaData
			if ( dataSrc === 'data' ) {
				return json.aaData || json[dataSrc];
			}
		
			return dataSrc !== "" ?
				_fnGetObjectDataFn( dataSrc )( json ) :
				json;
		}
		
		/**
		 * Generate the node required for filtering text
		 *  @returns {node} Filter control element
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnFeatureHtmlFilter ( settings )
		{
			var classes = settings.oClasses;
			var tableId = settings.sTableId;
			var language = settings.oLanguage;
			var previousSearch = settings.oPreviousSearch;
			var features = settings.aanFeatures;
			var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
		
			var str = language.sSearch;
			str = str.match(/_INPUT_/) ?
				str.replace('_INPUT_', input) :
				str+input;
		
			var filter = $('<div/>', {
					'id': ! features.f ? tableId+'_filter' : null,
					'class': classes.sFilter
				} )
				.append( $('<label/>' ).append( str ) );
		
			var searchFn = function() {
				/* Update all other filter input elements for the new display */
				var n = features.f;
				var val = !this.value ? "" : this.value; // mental IE8 fix :-(
		
				/* Now do the filter */
				if ( val != previousSearch.sSearch ) {
					_fnFilterComplete( settings, {
						"sSearch": val,
						"bRegex": previousSearch.bRegex,
						"bSmart": previousSearch.bSmart ,
						"bCaseInsensitive": previousSearch.bCaseInsensitive
					} );
		
					// Need to redraw, without resorting
					settings._iDisplayStart = 0;
					_fnDraw( settings );
				}
			};
		
			var searchDelay = settings.searchDelay !== null ?
				settings.searchDelay :
				_fnDataSource( settings ) === 'ssp' ?
					400 :
					0;
		
			var jqFilter = $('input', filter)
				.val( previousSearch.sSearch )
				.attr( 'placeholder', language.sSearchPlaceholder )
				.on(
					'keyup.DT search.DT input.DT paste.DT cut.DT',
					searchDelay ?
						_fnThrottle( searchFn, searchDelay ) :
						searchFn
				)
				.on( 'mouseup', function(e) {
					// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking
					// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`
					// checks the value to see if it has changed. In other browsers it won't have.
					setTimeout( function () {
						searchFn.call(jqFilter[0]);
					}, 10);
				} )
				.on( 'keypress.DT', function(e) {
					/* Prevent form submission */
					if ( e.keyCode == 13 ) {
						return false;
					}
				} )
				.attr('aria-controls', tableId);
		
			// Update the input elements whenever the table is filtered
			$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
				if ( settings === s ) {
					// IE9 throws an 'unknown error' if document.activeElement is used
					// inside an iframe or frame...
					try {
						if ( jqFilter[0] !== document.activeElement ) {
							jqFilter.val( previousSearch.sSearch );
						}
					}
					catch ( e ) {}
				}
			} );
		
			return filter[0];
		}
		
		
		/**
		 * Filter the table using both the global filter and column based filtering
		 *  @param {object} oSettings dataTables settings object
		 *  @param {object} oSearch search information
		 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
		 *  @memberof DataTable#oApi
		 */
		function _fnFilterComplete ( oSettings, oInput, iForce )
		{
			var oPrevSearch = oSettings.oPreviousSearch;
			var aoPrevSearch = oSettings.aoPreSearchCols;
			var fnSaveFilter = function ( oFilter ) {
				/* Save the filtering values */
				oPrevSearch.sSearch = oFilter.sSearch;
				oPrevSearch.bRegex = oFilter.bRegex;
				oPrevSearch.bSmart = oFilter.bSmart;
				oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
			};
			var fnRegex = function ( o ) {
				// Backwards compatibility with the bEscapeRegex option
				return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
			};
		
			// Resolve any column types that are unknown due to addition or invalidation
			// @todo As per sort - can this be moved into an event handler?
			_fnColumnTypes( oSettings );
		
			/* In server-side processing all filtering is done by the server, so no point hanging around here */
			if ( _fnDataSource( oSettings ) != 'ssp' )
			{
				/* Global filter */
				_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
				fnSaveFilter( oInput );
		
				/* Now do the individual column filter */
				for ( var i=0 ; i<aoPrevSearch.length ; i++ )
				{
					_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
						aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
				}
		
				/* Custom filtering */
				_fnFilterCustom( oSettings );
			}
			else
			{
				fnSaveFilter( oInput );
			}
		
			/* Tell the draw function we have been filtering */
			oSettings.bFiltered = true;
			_fnCallbackFire( oSettings, null, 'search', [oSettings] );
		}
		
		
		/**
		 * Apply custom filtering functions
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnFilterCustom( settings )
		{
			var filters = DataTable.ext.search;
			var displayRows = settings.aiDisplay;
			var row, rowIdx;
		
			for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
				var rows = [];
		
				// Loop over each row and see if it should be included
				for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
					rowIdx = displayRows[ j ];
					row = settings.aoData[ rowIdx ];
		
					if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
						rows.push( rowIdx );
					}
				}
		
				// So the array reference doesn't break set the results into the
				// existing array
				displayRows.length = 0;
				$.merge( displayRows, rows );
			}
		}
		
		
		/**
		 * Filter the table on a per-column basis
		 *  @param {object} oSettings dataTables settings object
		 *  @param {string} sInput string to filter on
		 *  @param {int} iColumn column to filter
		 *  @param {bool} bRegex treat search string as a regular expression or not
		 *  @param {bool} bSmart use smart filtering or not
		 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
		 *  @memberof DataTable#oApi
		 */
		function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
		{
			if ( searchStr === '' ) {
				return;
			}
		
			var data;
			var out = [];
			var display = settings.aiDisplay;
			var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
		
			for ( var i=0 ; i<display.length ; i++ ) {
				data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
		
				if ( rpSearch.test( data ) ) {
					out.push( display[i] );
				}
			}
		
			settings.aiDisplay = out;
		}
		
		
		/**
		 * Filter the data table based on user input and draw the table
		 *  @param {object} settings dataTables settings object
		 *  @param {string} input string to filter on
		 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
		 *  @param {bool} regex treat as a regular expression or not
		 *  @param {bool} smart perform smart filtering or not
		 *  @param {bool} caseInsensitive Do case insenstive matching or not
		 *  @memberof DataTable#oApi
		 */
		function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
		{
			var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
			var prevSearch = settings.oPreviousSearch.sSearch;
			var displayMaster = settings.aiDisplayMaster;
			var display, invalidated, i;
			var filtered = [];
		
			// Need to take account of custom filtering functions - always filter
			if ( DataTable.ext.search.length !== 0 ) {
				force = true;
			}
		
			// Check if any of the rows were invalidated
			invalidated = _fnFilterData( settings );
		
			// If the input is blank - we just want the full data set
			if ( input.length <= 0 ) {
				settings.aiDisplay = displayMaster.slice();
			}
			else {
				// New search - start from the master array
				if ( invalidated ||
					 force ||
					 regex ||
					 prevSearch.length > input.length ||
					 input.indexOf(prevSearch) !== 0 ||
					 settings.bSorted // On resort, the display master needs to be
									  // re-filtered since indexes will have changed
				) {
					settings.aiDisplay = displayMaster.slice();
				}
		
				// Search the display array
				display = settings.aiDisplay;
		
				for ( i=0 ; i<display.length ; i++ ) {
					if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
						filtered.push( display[i] );
					}
				}
		
				settings.aiDisplay = filtered;
			}
		}
		
		
		/**
		 * Build a regular expression object suitable for searching a table
		 *  @param {string} sSearch string to search for
		 *  @param {bool} bRegex treat as a regular expression or not
		 *  @param {bool} bSmart perform smart filtering or not
		 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
		 *  @returns {RegExp} constructed object
		 *  @memberof DataTable#oApi
		 */
		function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
		{
			search = regex ?
				search :
				_fnEscapeRegex( search );
			
			if ( smart ) {
				/* For smart filtering we want to allow the search to work regardless of
				 * word order. We also want double quoted text to be preserved, so word
				 * order is important - a la google. So this is what we want to
				 * generate:
				 * 
				 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
				 */
				var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
					if ( word.charAt(0) === '"' ) {
						var m = word.match( /^"(.*)"$/ );
						word = m ? m[1] : word;
					}
		
					return word.replace('"', '');
				} );
		
				search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
			}
		
			return new RegExp( search, caseInsensitive ? 'i' : '' );
		}
		
		
		/**
		 * Escape a string such that it can be used in a regular expression
		 *  @param {string} sVal string to escape
		 *  @returns {string} escaped string
		 *  @memberof DataTable#oApi
		 */
		var _fnEscapeRegex = DataTable.util.escapeRegex;
		
		var __filter_div = $('<div>')[0];
		var __filter_div_textContent = __filter_div.textContent !== undefined;
		
		// Update the filtering data for each row if needed (by invalidation or first run)
		function _fnFilterData ( settings )
		{
			var columns = settings.aoColumns;
			var column;
			var i, j, ien, jen, filterData, cellData, row;
			var fomatters = DataTable.ext.type.search;
			var wasInvalidated = false;
		
			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				row = settings.aoData[i];
		
				if ( ! row._aFilterData ) {
					filterData = [];
		
					for ( j=0, jen=columns.length ; j<jen ; j++ ) {
						column = columns[j];
		
						if ( column.bSearchable ) {
							cellData = _fnGetCellData( settings, i, j, 'filter' );
		
							if ( fomatters[ column.sType ] ) {
								cellData = fomatters[ column.sType ]( cellData );
							}
		
							// Search in DataTables 1.10 is string based. In 1.11 this
							// should be altered to also allow strict type checking.
							if ( cellData === null ) {
								cellData = '';
							}
		
							if ( typeof cellData !== 'string' && cellData.toString ) {
								cellData = cellData.toString();
							}
						}
						else {
							cellData = '';
						}
		
						// If it looks like there is an HTML entity in the string,
						// attempt to decode it so sorting works as expected. Note that
						// we could use a single line of jQuery to do this, but the DOM
						// method used here is much faster http://jsperf.com/html-decode
						if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
							__filter_div.innerHTML = cellData;
							cellData = __filter_div_textContent ?
								__filter_div.textContent :
								__filter_div.innerText;
						}
		
						if ( cellData.replace ) {
							cellData = cellData.replace(/[\r\n\u2028]/g, '');
						}
		
						filterData.push( cellData );
					}
		
					row._aFilterData = filterData;
					row._sFilterRow = filterData.join('  ');
					wasInvalidated = true;
				}
			}
		
			return wasInvalidated;
		}
		
		
		/**
		 * Convert from the internal Hungarian notation to camelCase for external
		 * interaction
		 *  @param {object} obj Object to convert
		 *  @returns {object} Inverted object
		 *  @memberof DataTable#oApi
		 */
		function _fnSearchToCamel ( obj )
		{
			return {
				search:          obj.sSearch,
				smart:           obj.bSmart,
				regex:           obj.bRegex,
				caseInsensitive: obj.bCaseInsensitive
			};
		}
		
		
		
		/**
		 * Convert from camelCase notation to the internal Hungarian. We could use the
		 * Hungarian convert function here, but this is cleaner
		 *  @param {object} obj Object to convert
		 *  @returns {object} Inverted object
		 *  @memberof DataTable#oApi
		 */
		function _fnSearchToHung ( obj )
		{
			return {
				sSearch:          obj.search,
				bSmart:           obj.smart,
				bRegex:           obj.regex,
				bCaseInsensitive: obj.caseInsensitive
			};
		}
		
		/**
		 * Generate the node required for the info display
		 *  @param {object} oSettings dataTables settings object
		 *  @returns {node} Information element
		 *  @memberof DataTable#oApi
		 */
		function _fnFeatureHtmlInfo ( settings )
		{
			var
				tid = settings.sTableId,
				nodes = settings.aanFeatures.i,
				n = $('<div/>', {
					'class': settings.oClasses.sInfo,
					'id': ! nodes ? tid+'_info' : null
				} );
		
			if ( ! nodes ) {
				// Update display on each draw
				settings.aoDrawCallback.push( {
					"fn": _fnUpdateInfo,
					"sName": "information"
				} );
		
				n
					.attr( 'role', 'status' )
					.attr( 'aria-live', 'polite' );
		
				// Table is described by our info div
				$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
			}
		
			return n[0];
		}
		
		
		/**
		 * Update the information elements in the display
		 *  @param {object} settings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnUpdateInfo ( settings )
		{
			/* Show information about the table */
			var nodes = settings.aanFeatures.i;
			if ( nodes.length === 0 ) {
				return;
			}
		
			var
				lang  = settings.oLanguage,
				start = settings._iDisplayStart+1,
				end   = settings.fnDisplayEnd(),
				max   = settings.fnRecordsTotal(),
				total = settings.fnRecordsDisplay(),
				out   = total ?
					lang.sInfo :
					lang.sInfoEmpty;
		
			if ( total !== max ) {
				/* Record set after filtering */
				out += ' ' + lang.sInfoFiltered;
			}
		
			// Convert the macros
			out += lang.sInfoPostFix;
			out = _fnInfoMacros( settings, out );
		
			var callback = lang.fnInfoCallback;
			if ( callback !== null ) {
				out = callback.call( settings.oInstance,
					settings, start, end, max, total, out
				);
			}
		
			$(nodes).html( out );
		}
		
		
		function _fnInfoMacros ( settings, str )
		{
			// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
			// internally
			var
				formatter  = settings.fnFormatNumber,
				start      = settings._iDisplayStart+1,
				len        = settings._iDisplayLength,
				vis        = settings.fnRecordsDisplay(),
				all        = len === -1;
		
			return str.
				replace(/_START_/g, formatter.call( settings, start ) ).
				replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
				replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
				replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
				replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
				replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
		}
		
		
		
		/**
		 * Draw the table for the first time, adding all required features
		 *  @param {object} settings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnInitialise ( settings )
		{
			var i, iLen, iAjaxStart=settings.iInitDisplayStart;
			var columns = settings.aoColumns, column;
			var features = settings.oFeatures;
			var deferLoading = settings.bDeferLoading; // value modified by the draw
		
			/* Ensure that the table data is fully initialised */
			if ( ! settings.bInitialised ) {
				setTimeout( function(){ _fnInitialise( settings ); }, 200 );
				return;
			}
		
			/* Show the display HTML options */
			_fnAddOptionsHtml( settings );
		
			/* Build and draw the header / footer for the table */
			_fnBuildHead( settings );
			_fnDrawHead( settings, settings.aoHeader );
			_fnDrawHead( settings, settings.aoFooter );
		
			/* Okay to show that something is going on now */
			_fnProcessingDisplay( settings, true );
		
			/* Calculate sizes for columns */
			if ( features.bAutoWidth ) {
				_fnCalculateColumnWidths( settings );
			}
		
			for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
				column = columns[i];
		
				if ( column.sWidth ) {
					column.nTh.style.width = _fnStringToCss( column.sWidth );
				}
			}
		
			_fnCallbackFire( settings, null, 'preInit', [settings] );
		
			// If there is default sorting required - let's do it. The sort function
			// will do the drawing for us. Otherwise we draw the table regardless of the
			// Ajax source - this allows the table to look initialised for Ajax sourcing
			// data (show 'loading' message possibly)
			_fnReDraw( settings );
		
			// Server-side processing init complete is done by _fnAjaxUpdateDraw
			var dataSrc = _fnDataSource( settings );
			if ( dataSrc != 'ssp' || deferLoading ) {
				// if there is an ajax source load the data
				if ( dataSrc == 'ajax' ) {
					_fnBuildAjax( settings, [], function(json) {
						var aData = _fnAjaxDataSrc( settings, json );
		
						// Got the data - add it to the table
						for ( i=0 ; i<aData.length ; i++ ) {
							_fnAddData( settings, aData[i] );
						}
		
						// Reset the init display for cookie saving. We've already done
						// a filter, and therefore cleared it before. So we need to make
						// it appear 'fresh'
						settings.iInitDisplayStart = iAjaxStart;
		
						_fnReDraw( settings );
		
						_fnProcessingDisplay( settings, false );
						_fnInitComplete( settings, json );
					}, settings );
				}
				else {
					_fnProcessingDisplay( settings, false );
					_fnInitComplete( settings );
				}
			}
		}
		
		
		/**
		 * Draw the table for the first time, adding all required features
		 *  @param {object} oSettings dataTables settings object
		 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
		 *    with client-side processing (optional)
		 *  @memberof DataTable#oApi
		 */
		function _fnInitComplete ( settings, json )
		{
			settings._bInitComplete = true;
		
			// When data was added after the initialisation (data or Ajax) we need to
			// calculate the column sizing
			if ( json || settings.oInit.aaData ) {
				_fnAdjustColumnSizing( settings );
			}
		
			_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
			_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
		}
		
		
		function _fnLengthChange ( settings, val )
		{
			var len = parseInt( val, 10 );
			settings._iDisplayLength = len;
		
			_fnLengthOverflow( settings );
		
			// Fire length change event
			_fnCallbackFire( settings, null, 'length', [settings, len] );
		}
		
		
		/**
		 * Generate the node required for user display length changing
		 *  @param {object} settings dataTables settings object
		 *  @returns {node} Display length feature node
		 *  @memberof DataTable#oApi
		 */
		function _fnFeatureHtmlLength ( settings )
		{
			var
				classes  = settings.oClasses,
				tableId  = settings.sTableId,
				menu     = settings.aLengthMenu,
				d2       = $.isArray( menu[0] ),
				lengths  = d2 ? menu[0] : menu,
				language = d2 ? menu[1] : menu;
		
			var select = $('<select/>', {
				'name':          tableId+'_length',
				'aria-controls': tableId,
				'class':         classes.sLengthSelect
			} );
		
			for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
				select[0][ i ] = new Option(
					typeof language[i] === 'number' ?
						settings.fnFormatNumber( language[i] ) :
						language[i],
					lengths[i]
				);
			}
		
			var div = $('<div><label/></div>').addClass( classes.sLength );
			if ( ! settings.aanFeatures.l ) {
				div[0].id = tableId+'_length';
			}
		
			div.children().append(
				settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
			);
		
			// Can't use `select` variable as user might provide their own and the
			// reference is broken by the use of outerHTML
			$('select', div)
				.val( settings._iDisplayLength )
				.on( 'change.DT', function(e) {
					_fnLengthChange( settings, $(this).val() );
					_fnDraw( settings );
				} );
		
			// Update node value whenever anything changes the table's length
			$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
				if ( settings === s ) {
					$('select', div).val( len );
				}
			} );
		
			return div[0];
		}
		
		
		
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Note that most of the paging logic is done in
		 * DataTable.ext.pager
		 */
		
		/**
		 * Generate the node required for default pagination
		 *  @param {object} oSettings dataTables settings object
		 *  @returns {node} Pagination feature node
		 *  @memberof DataTable#oApi
		 */
		function _fnFeatureHtmlPaginate ( settings )
		{
			var
				type   = settings.sPaginationType,
				plugin = DataTable.ext.pager[ type ],
				modern = typeof plugin === 'function',
				redraw = function( settings ) {
					_fnDraw( settings );
				},
				node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
				features = settings.aanFeatures;
		
			if ( ! modern ) {
				plugin.fnInit( settings, node, redraw );
			}
		
			/* Add a draw callback for the pagination on first instance, to update the paging display */
			if ( ! features.p )
			{
				node.id = settings.sTableId+'_paginate';
		
				settings.aoDrawCallback.push( {
					"fn": function( settings ) {
						if ( modern ) {
							var
								start      = settings._iDisplayStart,
								len        = settings._iDisplayLength,
								visRecords = settings.fnRecordsDisplay(),
								all        = len === -1,
								page = all ? 0 : Math.ceil( start / len ),
								pages = all ? 1 : Math.ceil( visRecords / len ),
								buttons = plugin(page, pages),
								i, ien;
		
							for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
								_fnRenderer( settings, 'pageButton' )(
									settings, features.p[i], i, buttons, page, pages
								);
							}
						}
						else {
							plugin.fnUpdate( settings, redraw );
						}
					},
					"sName": "pagination"
				} );
			}
		
			return node;
		}
		
		
		/**
		 * Alter the display settings to change the page
		 *  @param {object} settings DataTables settings object
		 *  @param {string|int} action Paging action to take: "first", "previous",
		 *    "next" or "last" or page number to jump to (integer)
		 *  @param [bool] redraw Automatically draw the update or not
		 *  @returns {bool} true page has changed, false - no change
		 *  @memberof DataTable#oApi
		 */
		function _fnPageChange ( settings, action, redraw )
		{
			var
				start     = settings._iDisplayStart,
				len       = settings._iDisplayLength,
				records   = settings.fnRecordsDisplay();
		
			if ( records === 0 || len === -1 )
			{
				start = 0;
			}
			else if ( typeof action === "number" )
			{
				start = action * len;
		
				if ( start > records )
				{
					start = 0;
				}
			}
			else if ( action == "first" )
			{
				start = 0;
			}
			else if ( action == "previous" )
			{
				start = len >= 0 ?
					start - len :
					0;
		
				if ( start < 0 )
				{
				  start = 0;
				}
			}
			else if ( action == "next" )
			{
				if ( start + len < records )
				{
					start += len;
				}
			}
			else if ( action == "last" )
			{
				start = Math.floor( (records-1) / len) * len;
			}
			else
			{
				_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
			}
		
			var changed = settings._iDisplayStart !== start;
			settings._iDisplayStart = start;
		
			if ( changed ) {
				_fnCallbackFire( settings, null, 'page', [settings] );
		
				if ( redraw ) {
					_fnDraw( settings );
				}
			}
		
			return changed;
		}
		
		
		
		/**
		 * Generate the node required for the processing node
		 *  @param {object} settings dataTables settings object
		 *  @returns {node} Processing element
		 *  @memberof DataTable#oApi
		 */
		function _fnFeatureHtmlProcessing ( settings )
		{
			return $('<div/>', {
					'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
					'class': settings.oClasses.sProcessing
				} )
				.html( settings.oLanguage.sProcessing )
				.insertBefore( settings.nTable )[0];
		}
		
		
		/**
		 * Display or hide the processing indicator
		 *  @param {object} settings dataTables settings object
		 *  @param {bool} show Show the processing indicator (true) or not (false)
		 *  @memberof DataTable#oApi
		 */
		function _fnProcessingDisplay ( settings, show )
		{
			if ( settings.oFeatures.bProcessing ) {
				$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
			}
		
			_fnCallbackFire( settings, null, 'processing', [settings, show] );
		}
		
		/**
		 * Add any control elements for the table - specifically scrolling
		 *  @param {object} settings dataTables settings object
		 *  @returns {node} Node to add to the DOM
		 *  @memberof DataTable#oApi
		 */
		function _fnFeatureHtmlTable ( settings )
		{
			var table = $(settings.nTable);
		
			// Add the ARIA grid role to the table
			table.attr( 'role', 'grid' );
		
			// Scrolling from here on in
			var scroll = settings.oScroll;
		
			if ( scroll.sX === '' && scroll.sY === '' ) {
				return settings.nTable;
			}
		
			var scrollX = scroll.sX;
			var scrollY = scroll.sY;
			var classes = settings.oClasses;
			var caption = table.children('caption');
			var captionSide = caption.length ? caption[0]._captionSide : null;
			var headerClone = $( table[0].cloneNode(false) );
			var footerClone = $( table[0].cloneNode(false) );
			var footer = table.children('tfoot');
			var _div = '<div/>';
			var size = function ( s ) {
				return !s ? null : _fnStringToCss( s );
			};
		
			if ( ! footer.length ) {
				footer = null;
			}
		
			/*
			 * The HTML structure that we want to generate in this function is:
			 *  div - scroller
			 *    div - scroll head
			 *      div - scroll head inner
			 *        table - scroll head table
			 *          thead - thead
			 *    div - scroll body
			 *      table - table (master table)
			 *        thead - thead clone for sizing
			 *        tbody - tbody
			 *    div - scroll foot
			 *      div - scroll foot inner
			 *        table - scroll foot table
			 *          tfoot - tfoot
			 */
			var scroller = $( _div, { 'class': classes.sScrollWrapper } )
				.append(
					$(_div, { 'class': classes.sScrollHead } )
						.css( {
							overflow: 'hidden',
							position: 'relative',
							border: 0,
							width: scrollX ? size(scrollX) : '100%'
						} )
						.append(
							$(_div, { 'class': classes.sScrollHeadInner } )
								.css( {
									'box-sizing': 'content-box',
									width: scroll.sXInner || '100%'
								} )
								.append(
									headerClone
										.removeAttr('id')
										.css( 'margin-left', 0 )
										.append( captionSide === 'top' ? caption : null )
										.append(
											table.children('thead')
										)
								)
						)
				)
				.append(
					$(_div, { 'class': classes.sScrollBody } )
						.css( {
							position: 'relative',
							overflow: 'auto',
							width: size( scrollX )
						} )
						.append( table )
				);
		
			if ( footer ) {
				scroller.append(
					$(_div, { 'class': classes.sScrollFoot } )
						.css( {
							overflow: 'hidden',
							border: 0,
							width: scrollX ? size(scrollX) : '100%'
						} )
						.append(
							$(_div, { 'class': classes.sScrollFootInner } )
								.append(
									footerClone
										.removeAttr('id')
										.css( 'margin-left', 0 )
										.append( captionSide === 'bottom' ? caption : null )
										.append(
											table.children('tfoot')
										)
								)
						)
				);
			}
		
			var children = scroller.children();
			var scrollHead = children[0];
			var scrollBody = children[1];
			var scrollFoot = footer ? children[2] : null;
		
			// When the body is scrolled, then we also want to scroll the headers
			if ( scrollX ) {
				$(scrollBody).on( 'scroll.DT', function (e) {
					var scrollLeft = this.scrollLeft;
		
					scrollHead.scrollLeft = scrollLeft;
		
					if ( footer ) {
						scrollFoot.scrollLeft = scrollLeft;
					}
				} );
			}
		
			$(scrollBody).css('max-height', scrollY);
			if (! scroll.bCollapse) {
				$(scrollBody).css('height', scrollY);
			}
		
			settings.nScrollHead = scrollHead;
			settings.nScrollBody = scrollBody;
			settings.nScrollFoot = scrollFoot;
		
			// On redraw - align columns
			settings.aoDrawCallback.push( {
				"fn": _fnScrollDraw,
				"sName": "scrolling"
			} );
		
			return scroller[0];
		}
		
		
		
		/**
		 * Update the header, footer and body tables for resizing - i.e. column
		 * alignment.
		 *
		 * Welcome to the most horrible function DataTables. The process that this
		 * function follows is basically:
		 *   1. Re-create the table inside the scrolling div
		 *   2. Take live measurements from the DOM
		 *   3. Apply the measurements to align the columns
		 *   4. Clean up
		 *
		 *  @param {object} settings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnScrollDraw ( settings )
		{
			// Given that this is such a monster function, a lot of variables are use
			// to try and keep the minimised size as small as possible
			var
				scroll         = settings.oScroll,
				scrollX        = scroll.sX,
				scrollXInner   = scroll.sXInner,
				scrollY        = scroll.sY,
				barWidth       = scroll.iBarWidth,
				divHeader      = $(settings.nScrollHead),
				divHeaderStyle = divHeader[0].style,
				divHeaderInner = divHeader.children('div'),
				divHeaderInnerStyle = divHeaderInner[0].style,
				divHeaderTable = divHeaderInner.children('table'),
				divBodyEl      = settings.nScrollBody,
				divBody        = $(divBodyEl),
				divBodyStyle   = divBodyEl.style,
				divFooter      = $(settings.nScrollFoot),
				divFooterInner = divFooter.children('div'),
				divFooterTable = divFooterInner.children('table'),
				header         = $(settings.nTHead),
				table          = $(settings.nTable),
				tableEl        = table[0],
				tableStyle     = tableEl.style,
				footer         = settings.nTFoot ? $(settings.nTFoot) : null,
				browser        = settings.oBrowser,
				ie67           = browser.bScrollOversize,
				dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
				headerTrgEls, footerTrgEls,
				headerSrcEls, footerSrcEls,
				headerCopy, footerCopy,
				headerWidths=[], footerWidths=[],
				headerContent=[], footerContent=[],
				idx, correction, sanityWidth,
				zeroOut = function(nSizer) {
					var style = nSizer.style;
					style.paddingTop = "0";
					style.paddingBottom = "0";
					style.borderTopWidth = "0";
					style.borderBottomWidth = "0";
					style.height = 0;
				};
		
			// If the scrollbar visibility has changed from the last draw, we need to
			// adjust the column sizes as the table width will have changed to account
			// for the scrollbar
			var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
			
			if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
				settings.scrollBarVis = scrollBarVis;
				_fnAdjustColumnSizing( settings );
				return; // adjust column sizing will call this function again
			}
			else {
				settings.scrollBarVis = scrollBarVis;
			}
		
			/*
			 * 1. Re-create the table inside the scrolling div
			 */
		
			// Remove the old minimised thead and tfoot elements in the inner table
			table.children('thead, tfoot').remove();
		
			if ( footer ) {
				footerCopy = footer.clone().prependTo( table );
				footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
				footerSrcEls = footerCopy.find('tr');
			}
		
			// Clone the current header and footer elements and then place it into the inner table
			headerCopy = header.clone().prependTo( table );
			headerTrgEls = header.find('tr'); // original header is in its own table
			headerSrcEls = headerCopy.find('tr');
			headerCopy.find('th, td').removeAttr('tabindex');
		
		
			/*
			 * 2. Take live measurements from the DOM - do not alter the DOM itself!
			 */
		
			// Remove old sizing and apply the calculated column widths
			// Get the unique column headers in the newly created (cloned) header. We want to apply the
			// calculated sizes to this header
			if ( ! scrollX )
			{
				divBodyStyle.width = '100%';
				divHeader[0].style.width = '100%';
			}
		
			$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
				idx = _fnVisibleToColumnIndex( settings, i );
				el.style.width = settings.aoColumns[idx].sWidth;
			} );
		
			if ( footer ) {
				_fnApplyToChildren( function(n) {
					n.style.width = "";
				}, footerSrcEls );
			}
		
			// Size the table as a whole
			sanityWidth = table.outerWidth();
			if ( scrollX === "" ) {
				// No x scrolling
				tableStyle.width = "100%";
		
				// IE7 will make the width of the table when 100% include the scrollbar
				// - which is shouldn't. When there is a scrollbar we need to take this
				// into account.
				if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
					divBody.css('overflow-y') == "scroll")
				) {
					tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
				}
		
				// Recalculate the sanity width
				sanityWidth = table.outerWidth();
			}
			else if ( scrollXInner !== "" ) {
				// legacy x scroll inner has been given - use it
				tableStyle.width = _fnStringToCss(scrollXInner);
		
				// Recalculate the sanity width
				sanityWidth = table.outerWidth();
			}
		
			// Hidden header should have zero height, so remove padding and borders. Then
			// set the width based on the real headers
		
			// Apply all styles in one pass
			_fnApplyToChildren( zeroOut, headerSrcEls );
		
			// Read all widths in next pass
			_fnApplyToChildren( function(nSizer) {
				headerContent.push( nSizer.innerHTML );
				headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
			}, headerSrcEls );
		
			// Apply all widths in final pass
			_fnApplyToChildren( function(nToSize, i) {
				// Only apply widths to the DataTables detected header cells - this
				// prevents complex headers from having contradictory sizes applied
				if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {
					nToSize.style.width = headerWidths[i];
				}
			}, headerTrgEls );
		
			$(headerSrcEls).height(0);
		
			/* Same again with the footer if we have one */
			if ( footer )
			{
				_fnApplyToChildren( zeroOut, footerSrcEls );
		
				_fnApplyToChildren( function(nSizer) {
					footerContent.push( nSizer.innerHTML );
					footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
				}, footerSrcEls );
		
				_fnApplyToChildren( function(nToSize, i) {
					nToSize.style.width = footerWidths[i];
				}, footerTrgEls );
		
				$(footerSrcEls).height(0);
			}
		
		
			/*
			 * 3. Apply the measurements
			 */
		
			// "Hide" the header and footer that we used for the sizing. We need to keep
			// the content of the cell so that the width applied to the header and body
			// both match, but we want to hide it completely. We want to also fix their
			// width to what they currently are
			_fnApplyToChildren( function(nSizer, i) {
				nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
				nSizer.childNodes[0].style.height = "0";
				nSizer.childNodes[0].style.overflow = "hidden";
				nSizer.style.width = headerWidths[i];
			}, headerSrcEls );
		
			if ( footer )
			{
				_fnApplyToChildren( function(nSizer, i) {
					nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
					nSizer.childNodes[0].style.height = "0";
					nSizer.childNodes[0].style.overflow = "hidden";
					nSizer.style.width = footerWidths[i];
				}, footerSrcEls );
			}
		
			// Sanity check that the table is of a sensible width. If not then we are going to get
			// misalignment - try to prevent this by not allowing the table to shrink below its min width
			if ( table.outerWidth() < sanityWidth )
			{
				// The min width depends upon if we have a vertical scrollbar visible or not */
				correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
					divBody.css('overflow-y') == "scroll")) ?
						sanityWidth+barWidth :
						sanityWidth;
		
				// IE6/7 are a law unto themselves...
				if ( ie67 && (divBodyEl.scrollHeight >
					divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
				) {
					tableStyle.width = _fnStringToCss( correction-barWidth );
				}
		
				// And give the user a warning that we've stopped the table getting too small
				if ( scrollX === "" || scrollXInner !== "" ) {
					_fnLog( settings, 1, 'Possible column misalignment', 6 );
				}
			}
			else
			{
				correction = '100%';
			}
		
			// Apply to the container elements
			divBodyStyle.width = _fnStringToCss( correction );
			divHeaderStyle.width = _fnStringToCss( correction );
		
			if ( footer ) {
				settings.nScrollFoot.style.width = _fnStringToCss( correction );
			}
		
		
			/*
			 * 4. Clean up
			 */
			if ( ! scrollY ) {
				/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
				 * the scrollbar height from the visible display, rather than adding it on. We need to
				 * set the height in order to sort this. Don't want to do it in any other browsers.
				 */
				if ( ie67 ) {
					divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
				}
			}
		
			/* Finally set the width's of the header and footer tables */
			var iOuterWidth = table.outerWidth();
			divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
			divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
		
			// Figure out if there are scrollbar present - if so then we need a the header and footer to
			// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
			var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
			var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
			divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
		
			if ( footer ) {
				divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
				divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
				divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
			}
		
			// Correct DOM ordering for colgroup - comes before the thead
			table.children('colgroup').insertBefore( table.children('thead') );
		
			/* Adjust the position of the header in case we loose the y-scrollbar */
			divBody.trigger('scroll');
		
			// If sorting or filtering has occurred, jump the scrolling back to the top
			// only if we aren't holding the position
			if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
				divBodyEl.scrollTop = 0;
			}
		}
		
		
		
		/**
		 * Apply a given function to the display child nodes of an element array (typically
		 * TD children of TR rows
		 *  @param {function} fn Method to apply to the objects
		 *  @param array {nodes} an1 List of elements to look through for display children
		 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
		 *  @memberof DataTable#oApi
		 */
		function _fnApplyToChildren( fn, an1, an2 )
		{
			var index=0, i=0, iLen=an1.length;
			var nNode1, nNode2;
		
			while ( i < iLen ) {
				nNode1 = an1[i].firstChild;
				nNode2 = an2 ? an2[i].firstChild : null;
		
				while ( nNode1 ) {
					if ( nNode1.nodeType === 1 ) {
						if ( an2 ) {
							fn( nNode1, nNode2, index );
						}
						else {
							fn( nNode1, index );
						}
		
						index++;
					}
		
					nNode1 = nNode1.nextSibling;
					nNode2 = an2 ? nNode2.nextSibling : null;
				}
		
				i++;
			}
		}
		
		
		
		var __re_html_remove = /<.*?>/g;
		
		
		/**
		 * Calculate the width of columns for the table
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnCalculateColumnWidths ( oSettings )
		{
			var
				table = oSettings.nTable,
				columns = oSettings.aoColumns,
				scroll = oSettings.oScroll,
				scrollY = scroll.sY,
				scrollX = scroll.sX,
				scrollXInner = scroll.sXInner,
				columnCount = columns.length,
				visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
				headerCells = $('th', oSettings.nTHead),
				tableWidthAttr = table.getAttribute('width'), // from DOM element
				tableContainer = table.parentNode,
				userInputs = false,
				i, column, columnIdx, width, outerWidth,
				browser = oSettings.oBrowser,
				ie67 = browser.bScrollOversize;
		
			var styleWidth = table.style.width;
			if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
				tableWidthAttr = styleWidth;
			}
		
			/* Convert any user input sizes into pixel sizes */
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				column = columns[ visibleColumns[i] ];
		
				if ( column.sWidth !== null ) {
					column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
		
					userInputs = true;
				}
			}
		
			/* If the number of columns in the DOM equals the number that we have to
			 * process in DataTables, then we can use the offsets that are created by
			 * the web- browser. No custom sizes can be set in order for this to happen,
			 * nor scrolling used
			 */
			if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
				 columnCount == _fnVisbleColumns( oSettings ) &&
				 columnCount == headerCells.length
			) {
				for ( i=0 ; i<columnCount ; i++ ) {
					var colIdx = _fnVisibleToColumnIndex( oSettings, i );
		
					if ( colIdx !== null ) {
						columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
					}
				}
			}
			else
			{
				// Otherwise construct a single row, worst case, table with the widest
				// node in the data, assign any user defined widths, then insert it into
				// the DOM and allow the browser to do all the hard work of calculating
				// table widths
				var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
					.css( 'visibility', 'hidden' )
					.removeAttr( 'id' );
		
				// Clean up the table body
				tmpTable.find('tbody tr').remove();
				var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
		
				// Clone the table header and footer - we can't use the header / footer
				// from the cloned table, since if scrolling is active, the table's
				// real header and footer are contained in different table tags
				tmpTable.find('thead, tfoot').remove();
				tmpTable
					.append( $(oSettings.nTHead).clone() )
					.append( $(oSettings.nTFoot).clone() );
		
				// Remove any assigned widths from the footer (from scrolling)
				tmpTable.find('tfoot th, tfoot td').css('width', '');
		
				// Apply custom sizing to the cloned header
				headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
		
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					column = columns[ visibleColumns[i] ];
		
					headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
						_fnStringToCss( column.sWidthOrig ) :
						'';
		
					// For scrollX we need to force the column width otherwise the
					// browser will collapse it. If this width is smaller than the
					// width the column requires, then it will have no effect
					if ( column.sWidthOrig && scrollX ) {
						$( headerCells[i] ).append( $('<div/>').css( {
							width: column.sWidthOrig,
							margin: 0,
							padding: 0,
							border: 0,
							height: 1
						} ) );
					}
				}
		
				// Find the widest cell for each column and put it into the table
				if ( oSettings.aoData.length ) {
					for ( i=0 ; i<visibleColumns.length ; i++ ) {
						columnIdx = visibleColumns[i];
						column = columns[ columnIdx ];
		
						$( _fnGetWidestNode( oSettings, columnIdx ) )
							.clone( false )
							.append( column.sContentPadding )
							.appendTo( tr );
					}
				}
		
				// Tidy the temporary table - remove name attributes so there aren't
				// duplicated in the dom (radio elements for example)
				$('[name]', tmpTable).removeAttr('name');
		
				// Table has been built, attach to the document so we can work with it.
				// A holding element is used, positioned at the top of the container
				// with minimal height, so it has no effect on if the container scrolls
				// or not. Otherwise it might trigger scrolling when it actually isn't
				// needed
				var holder = $('<div/>').css( scrollX || scrollY ?
						{
							position: 'absolute',
							top: 0,
							left: 0,
							height: 1,
							right: 0,
							overflow: 'hidden'
						} :
						{}
					)
					.append( tmpTable )
					.appendTo( tableContainer );
		
				// When scrolling (X or Y) we want to set the width of the table as 
				// appropriate. However, when not scrolling leave the table width as it
				// is. This results in slightly different, but I think correct behaviour
				if ( scrollX && scrollXInner ) {
					tmpTable.width( scrollXInner );
				}
				else if ( scrollX ) {
					tmpTable.css( 'width', 'auto' );
					tmpTable.removeAttr('width');
		
					// If there is no width attribute or style, then allow the table to
					// collapse
					if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
						tmpTable.width( tableContainer.clientWidth );
					}
				}
				else if ( scrollY ) {
					tmpTable.width( tableContainer.clientWidth );
				}
				else if ( tableWidthAttr ) {
					tmpTable.width( tableWidthAttr );
				}
		
				// Get the width of each column in the constructed table - we need to
				// know the inner width (so it can be assigned to the other table's
				// cells) and the outer width so we can calculate the full width of the
				// table. This is safe since DataTables requires a unique cell for each
				// column, but if ever a header can span multiple columns, this will
				// need to be modified.
				var total = 0;
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					var cell = $(headerCells[i]);
					var border = cell.outerWidth() - cell.width();
		
					// Use getBounding... where possible (not IE8-) because it can give
					// sub-pixel accuracy, which we then want to round up!
					var bounding = browser.bBounding ?
						Math.ceil( headerCells[i].getBoundingClientRect().width ) :
						cell.outerWidth();
		
					// Total is tracked to remove any sub-pixel errors as the outerWidth
					// of the table might not equal the total given here (IE!).
					total += bounding;
		
					// Width for each column to use
					columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
				}
		
				table.style.width = _fnStringToCss( total );
		
				// Finished with the table - ditch it
				holder.remove();
			}
		
			// If there is a width attr, we want to attach an event listener which
			// allows the table sizing to automatically adjust when the window is
			// resized. Use the width attr rather than CSS, since we can't know if the
			// CSS is a relative value or absolute - DOM read is always px.
			if ( tableWidthAttr ) {
				table.style.width = _fnStringToCss( tableWidthAttr );
			}
		
			if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
				var bindResize = function () {
					$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
						_fnAdjustColumnSizing( oSettings );
					} ) );
				};
		
				// IE6/7 will crash if we bind a resize event handler on page load.
				// To be removed in 1.11 which drops IE6/7 support
				if ( ie67 ) {
					setTimeout( bindResize, 1000 );
				}
				else {
					bindResize();
				}
		
				oSettings._reszEvt = true;
			}
		}
		
		
		/**
		 * Throttle the calls to a function. Arguments and context are maintained for
		 * the throttled function
		 *  @param {function} fn Function to be called
		 *  @param {int} [freq=200] call frequency in mS
		 *  @returns {function} wrapped function
		 *  @memberof DataTable#oApi
		 */
		var _fnThrottle = DataTable.util.throttle;
		
		
		/**
		 * Convert a CSS unit width to pixels (e.g. 2em)
		 *  @param {string} width width to be converted
		 *  @param {node} parent parent to get the with for (required for relative widths) - optional
		 *  @returns {int} width in pixels
		 *  @memberof DataTable#oApi
		 */
		function _fnConvertToWidth ( width, parent )
		{
			if ( ! width ) {
				return 0;
			}
		
			var n = $('<div/>')
				.css( 'width', _fnStringToCss( width ) )
				.appendTo( parent || document.body );
		
			var val = n[0].offsetWidth;
			n.remove();
		
			return val;
		}
		
		
		/**
		 * Get the widest node
		 *  @param {object} settings dataTables settings object
		 *  @param {int} colIdx column of interest
		 *  @returns {node} widest table node
		 *  @memberof DataTable#oApi
		 */
		function _fnGetWidestNode( settings, colIdx )
		{
			var idx = _fnGetMaxLenString( settings, colIdx );
			if ( idx < 0 ) {
				return null;
			}
		
			var data = settings.aoData[ idx ];
			return ! data.nTr ? // Might not have been created when deferred rendering
				$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
				data.anCells[ colIdx ];
		}
		
		
		/**
		 * Get the maximum strlen for each data column
		 *  @param {object} settings dataTables settings object
		 *  @param {int} colIdx column of interest
		 *  @returns {string} max string length for each column
		 *  @memberof DataTable#oApi
		 */
		function _fnGetMaxLenString( settings, colIdx )
		{
			var s, max=-1, maxIdx = -1;
		
			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
				s = s.replace( __re_html_remove, '' );
				s = s.replace( /&nbsp;/g, ' ' );
		
				if ( s.length > max ) {
					max = s.length;
					maxIdx = i;
				}
			}
		
			return maxIdx;
		}
		
		
		/**
		 * Append a CSS unit (only if required) to a string
		 *  @param {string} value to css-ify
		 *  @returns {string} value with css unit
		 *  @memberof DataTable#oApi
		 */
		function _fnStringToCss( s )
		{
			if ( s === null ) {
				return '0px';
			}
		
			if ( typeof s == 'number' ) {
				return s < 0 ?
					'0px' :
					s+'px';
			}
		
			// Check it has a unit character already
			return s.match(/\d$/) ?
				s+'px' :
				s;
		}
		
		
		
		function _fnSortFlatten ( settings )
		{
			var
				i, iLen, k, kLen,
				aSort = [],
				aiOrig = [],
				aoColumns = settings.aoColumns,
				aDataSort, iCol, sType, srcCol,
				fixed = settings.aaSortingFixed,
				fixedObj = $.isPlainObject( fixed ),
				nestedSort = [],
				add = function ( a ) {
					if ( a.length && ! $.isArray( a[0] ) ) {
						// 1D array
						nestedSort.push( a );
					}
					else {
						// 2D array
						$.merge( nestedSort, a );
					}
				};
		
			// Build the sort array, with pre-fix and post-fix options if they have been
			// specified
			if ( $.isArray( fixed ) ) {
				add( fixed );
			}
		
			if ( fixedObj && fixed.pre ) {
				add( fixed.pre );
			}
		
			add( settings.aaSorting );
		
			if (fixedObj && fixed.post ) {
				add( fixed.post );
			}
		
			for ( i=0 ; i<nestedSort.length ; i++ )
			{
				srcCol = nestedSort[i][0];
				aDataSort = aoColumns[ srcCol ].aDataSort;
		
				for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
				{
					iCol = aDataSort[k];
					sType = aoColumns[ iCol ].sType || 'string';
		
					if ( nestedSort[i]._idx === undefined ) {
						nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
					}
		
					aSort.push( {
						src:       srcCol,
						col:       iCol,
						dir:       nestedSort[i][1],
						index:     nestedSort[i]._idx,
						type:      sType,
						formatter: DataTable.ext.type.order[ sType+"-pre" ]
					} );
				}
			}
		
			return aSort;
		}
		
		/**
		 * Change the order of the table
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 *  @todo This really needs split up!
		 */
		function _fnSort ( oSettings )
		{
			var
				i, ien, iLen, j, jLen, k, kLen,
				sDataType, nTh,
				aiOrig = [],
				oExtSort = DataTable.ext.type.order,
				aoData = oSettings.aoData,
				aoColumns = oSettings.aoColumns,
				aDataSort, data, iCol, sType, oSort,
				formatters = 0,
				sortCol,
				displayMaster = oSettings.aiDisplayMaster,
				aSort;
		
			// Resolve any column types that are unknown due to addition or invalidation
			// @todo Can this be moved into a 'data-ready' handler which is called when
			//   data is going to be used in the table?
			_fnColumnTypes( oSettings );
		
			aSort = _fnSortFlatten( oSettings );
		
			for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
				sortCol = aSort[i];
		
				// Track if we can use the fast sort algorithm
				if ( sortCol.formatter ) {
					formatters++;
				}
		
				// Load the data needed for the sort, for each cell
				_fnSortData( oSettings, sortCol.col );
			}
		
			/* No sorting required if server-side or no sorting array */
			if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
			{
				// Create a value - key array of the current row positions such that we can use their
				// current position during the sort, if values match, in order to perform stable sorting
				for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
					aiOrig[ displayMaster[i] ] = i;
				}
		
				/* Do the sort - here we want multi-column sorting based on a given data source (column)
				 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
				 * follow on it's own, but this is what we want (example two column sorting):
				 *  fnLocalSorting = function(a,b){
				 *    var iTest;
				 *    iTest = oSort['string-asc']('data11', 'data12');
				 *      if (iTest !== 0)
				 *        return iTest;
				 *    iTest = oSort['numeric-desc']('data21', 'data22');
				 *    if (iTest !== 0)
				 *      return iTest;
				 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
				 *  }
				 * Basically we have a test for each sorting column, if the data in that column is equal,
				 * test the next column. If all columns match, then we use a numeric sort on the row
				 * positions in the original data array to provide a stable sort.
				 *
				 * Note - I know it seems excessive to have two sorting methods, but the first is around
				 * 15% faster, so the second is only maintained for backwards compatibility with sorting
				 * methods which do not have a pre-sort formatting function.
				 */
				if ( formatters === aSort.length ) {
					// All sort types have formatting functions
					displayMaster.sort( function ( a, b ) {
						var
							x, y, k, test, sort,
							len=aSort.length,
							dataA = aoData[a]._aSortData,
							dataB = aoData[b]._aSortData;
		
						for ( k=0 ; k<len ; k++ ) {
							sort = aSort[k];
		
							x = dataA[ sort.col ];
							y = dataB[ sort.col ];
		
							test = x<y ? -1 : x>y ? 1 : 0;
							if ( test !== 0 ) {
								return sort.dir === 'asc' ? test : -test;
							}
						}
		
						x = aiOrig[a];
						y = aiOrig[b];
						return x<y ? -1 : x>y ? 1 : 0;
					} );
				}
				else {
					// Depreciated - remove in 1.11 (providing a plug-in option)
					// Not all sort types have formatting methods, so we have to call their sorting
					// methods.
					displayMaster.sort( function ( a, b ) {
						var
							x, y, k, l, test, sort, fn,
							len=aSort.length,
							dataA = aoData[a]._aSortData,
							dataB = aoData[b]._aSortData;
		
						for ( k=0 ; k<len ; k++ ) {
							sort = aSort[k];
		
							x = dataA[ sort.col ];
							y = dataB[ sort.col ];
		
							fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
							test = fn( x, y );
							if ( test !== 0 ) {
								return test;
							}
						}
		
						x = aiOrig[a];
						y = aiOrig[b];
						return x<y ? -1 : x>y ? 1 : 0;
					} );
				}
			}
		
			/* Tell the draw function that we have sorted the data */
			oSettings.bSorted = true;
		}
		
		
		function _fnSortAria ( settings )
		{
			var label;
			var nextSort;
			var columns = settings.aoColumns;
			var aSort = _fnSortFlatten( settings );
			var oAria = settings.oLanguage.oAria;
		
			// ARIA attributes - need to loop all columns, to update all (removing old
			// attributes as needed)
			for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
			{
				var col = columns[i];
				var asSorting = col.asSorting;
				var sTitle = col.sTitle.replace( /<.*?>/g, "" );
				var th = col.nTh;
		
				// IE7 is throwing an error when setting these properties with jQuery's
				// attr() and removeAttr() methods...
				th.removeAttribute('aria-sort');
		
				/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
				if ( col.bSortable ) {
					if ( aSort.length > 0 && aSort[0].col == i ) {
						th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
						nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
					}
					else {
						nextSort = asSorting[0];
					}
		
					label = sTitle + ( nextSort === "asc" ?
						oAria.sSortAscending :
						oAria.sSortDescending
					);
				}
				else {
					label = sTitle;
				}
		
				th.setAttribute('aria-label', label);
			}
		}
		
		
		/**
		 * Function to run on user sort request
		 *  @param {object} settings dataTables settings object
		 *  @param {node} attachTo node to attach the handler to
		 *  @param {int} colIdx column sorting index
		 *  @param {boolean} [append=false] Append the requested sort to the existing
		 *    sort if true (i.e. multi-column sort)
		 *  @param {function} [callback] callback function
		 *  @memberof DataTable#oApi
		 */
		function _fnSortListener ( settings, colIdx, append, callback )
		{
			var col = settings.aoColumns[ colIdx ];
			var sorting = settings.aaSorting;
			var asSorting = col.asSorting;
			var nextSortIdx;
			var next = function ( a, overflow ) {
				var idx = a._idx;
				if ( idx === undefined ) {
					idx = $.inArray( a[1], asSorting );
				}
		
				return idx+1 < asSorting.length ?
					idx+1 :
					overflow ?
						null :
						0;
			};
		
			// Convert to 2D array if needed
			if ( typeof sorting[0] === 'number' ) {
				sorting = settings.aaSorting = [ sorting ];
			}
		
			// If appending the sort then we are multi-column sorting
			if ( append && settings.oFeatures.bSortMulti ) {
				// Are we already doing some kind of sort on this column?
				var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
		
				if ( sortIdx !== -1 ) {
					// Yes, modify the sort
					nextSortIdx = next( sorting[sortIdx], true );
		
					if ( nextSortIdx === null && sorting.length === 1 ) {
						nextSortIdx = 0; // can't remove sorting completely
					}
		
					if ( nextSortIdx === null ) {
						sorting.splice( sortIdx, 1 );
					}
					else {
						sorting[sortIdx][1] = asSorting[ nextSortIdx ];
						sorting[sortIdx]._idx = nextSortIdx;
					}
				}
				else {
					// No sort on this column yet
					sorting.push( [ colIdx, asSorting[0], 0 ] );
					sorting[sorting.length-1]._idx = 0;
				}
			}
			else if ( sorting.length && sorting[0][0] == colIdx ) {
				// Single column - already sorting on this column, modify the sort
				nextSortIdx = next( sorting[0] );
		
				sorting.length = 1;
				sorting[0][1] = asSorting[ nextSortIdx ];
				sorting[0]._idx = nextSortIdx;
			}
			else {
				// Single column - sort only on this column
				sorting.length = 0;
				sorting.push( [ colIdx, asSorting[0] ] );
				sorting[0]._idx = 0;
			}
		
			// Run the sort by calling a full redraw
			_fnReDraw( settings );
		
			// callback used for async user interaction
			if ( typeof callback == 'function' ) {
				callback( settings );
			}
		}
		
		
		/**
		 * Attach a sort handler (click) to a node
		 *  @param {object} settings dataTables settings object
		 *  @param {node} attachTo node to attach the handler to
		 *  @param {int} colIdx column sorting index
		 *  @param {function} [callback] callback function
		 *  @memberof DataTable#oApi
		 */
		function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
		{
			var col = settings.aoColumns[ colIdx ];
		
			_fnBindAction( attachTo, {}, function (e) {
				/* If the column is not sortable - don't to anything */
				if ( col.bSortable === false ) {
					return;
				}
		
				// If processing is enabled use a timeout to allow the processing
				// display to be shown - otherwise to it synchronously
				if ( settings.oFeatures.bProcessing ) {
					_fnProcessingDisplay( settings, true );
		
					setTimeout( function() {
						_fnSortListener( settings, colIdx, e.shiftKey, callback );
		
						// In server-side processing, the draw callback will remove the
						// processing display
						if ( _fnDataSource( settings ) !== 'ssp' ) {
							_fnProcessingDisplay( settings, false );
						}
					}, 0 );
				}
				else {
					_fnSortListener( settings, colIdx, e.shiftKey, callback );
				}
			} );
		}
		
		
		/**
		 * Set the sorting classes on table's body, Note: it is safe to call this function
		 * when bSort and bSortClasses are false
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnSortingClasses( settings )
		{
			var oldSort = settings.aLastSort;
			var sortClass = settings.oClasses.sSortColumn;
			var sort = _fnSortFlatten( settings );
			var features = settings.oFeatures;
			var i, ien, colIdx;
		
			if ( features.bSort && features.bSortClasses ) {
				// Remove old sorting classes
				for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
					colIdx = oldSort[i].src;
		
					// Remove column sorting
					$( _pluck( settings.aoData, 'anCells', colIdx ) )
						.removeClass( sortClass + (i<2 ? i+1 : 3) );
				}
		
				// Add new column sorting
				for ( i=0, ien=sort.length ; i<ien ; i++ ) {
					colIdx = sort[i].src;
		
					$( _pluck( settings.aoData, 'anCells', colIdx ) )
						.addClass( sortClass + (i<2 ? i+1 : 3) );
				}
			}
		
			settings.aLastSort = sort;
		}
		
		
		// Get the data to sort a column, be it from cache, fresh (populating the
		// cache), or from a sort formatter
		function _fnSortData( settings, idx )
		{
			// Custom sorting function - provided by the sort data type
			var column = settings.aoColumns[ idx ];
			var customSort = DataTable.ext.order[ column.sSortDataType ];
			var customData;
		
			if ( customSort ) {
				customData = customSort.call( settings.oInstance, settings, idx,
					_fnColumnIndexToVisible( settings, idx )
				);
			}
		
			// Use / populate cache
			var row, cellData;
			var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
		
			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				row = settings.aoData[i];
		
				if ( ! row._aSortData ) {
					row._aSortData = [];
				}
		
				if ( ! row._aSortData[idx] || customSort ) {
					cellData = customSort ?
						customData[i] : // If there was a custom sort function, use data from there
						_fnGetCellData( settings, i, idx, 'sort' );
		
					row._aSortData[ idx ] = formatter ?
						formatter( cellData ) :
						cellData;
				}
			}
		}
		
		
		
		/**
		 * Save the state of a table
		 *  @param {object} oSettings dataTables settings object
		 *  @memberof DataTable#oApi
		 */
		function _fnSaveState ( settings )
		{
			if ( !settings.oFeatures.bStateSave || settings.bDestroying )
			{
				return;
			}
		
			/* Store the interesting variables */
			var state = {
				time:    +new Date(),
				start:   settings._iDisplayStart,
				length:  settings._iDisplayLength,
				order:   $.extend( true, [], settings.aaSorting ),
				search:  _fnSearchToCamel( settings.oPreviousSearch ),
				columns: $.map( settings.aoColumns, function ( col, i ) {
					return {
						visible: col.bVisible,
						search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
					};
				} )
			};
		
			_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
		
			settings.oSavedState = state;
			settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
		}
		
		
		/**
		 * Attempt to load a saved table state
		 *  @param {object} oSettings dataTables settings object
		 *  @param {object} oInit DataTables init object so we can override settings
		 *  @param {function} callback Callback to execute when the state has been loaded
		 *  @memberof DataTable#oApi
		 */
		function _fnLoadState ( settings, oInit, callback )
		{
			var i, ien;
			var columns = settings.aoColumns;
			var loaded = function ( s ) {
				if ( ! s || ! s.time ) {
					callback();
					return;
				}
		
				// Allow custom and plug-in manipulation functions to alter the saved data set and
				// cancelling of loading by returning false
				var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
				if ( $.inArray( false, abStateLoad ) !== -1 ) {
					callback();
					return;
				}
		
				// Reject old data
				var duration = settings.iStateDuration;
				if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
					callback();
					return;
				}
		
				// Number of columns have changed - all bets are off, no restore of settings
				if ( s.columns && columns.length !== s.columns.length ) {
					callback();
					return;
				}
		
				// Store the saved state so it might be accessed at any time
				settings.oLoadedState = $.extend( true, {}, s );
		
				// Restore key features - todo - for 1.11 this needs to be done by
				// subscribed events
				if ( s.start !== undefined ) {
					settings._iDisplayStart    = s.start;
					settings.iInitDisplayStart = s.start;
				}
				if ( s.length !== undefined ) {
					settings._iDisplayLength   = s.length;
				}
		
				// Order
				if ( s.order !== undefined ) {
					settings.aaSorting = [];
					$.each( s.order, function ( i, col ) {
						settings.aaSorting.push( col[0] >= columns.length ?
							[ 0, col[1] ] :
							col
						);
					} );
				}
		
				// Search
				if ( s.search !== undefined ) {
					$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
				}
		
				// Columns
				//
				if ( s.columns ) {
					for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
						var col = s.columns[i];
		
						// Visibility
						if ( col.visible !== undefined ) {
							columns[i].bVisible = col.visible;
						}
		
						// Search
						if ( col.search !== undefined ) {
							$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
						}
					}
				}
		
				_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
				callback();
			};
		
			if ( ! settings.oFeatures.bStateSave ) {
				callback();
				return;
			}
		
			var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );
		
			if ( state !== undefined ) {
				loaded( state );
			}
			// otherwise, wait for the loaded callback to be executed
		}
		
		
		/**
		 * Return the settings object for a particular table
		 *  @param {node} table table we are using as a dataTable
		 *  @returns {object} Settings object - or null if not found
		 *  @memberof DataTable#oApi
		 */
		function _fnSettingsFromNode ( table )
		{
			var settings = DataTable.settings;
			var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
		
			return idx !== -1 ?
				settings[ idx ] :
				null;
		}
		
		
		/**
		 * Log an error message
		 *  @param {object} settings dataTables settings object
		 *  @param {int} level log error messages, or display them to the user
		 *  @param {string} msg error message
		 *  @param {int} tn Technical note id to get more information about the error.
		 *  @memberof DataTable#oApi
		 */
		function _fnLog( settings, level, msg, tn )
		{
			msg = 'DataTables warning: '+
				(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
		
			if ( tn ) {
				msg += '. For more information about this error, please see '+
				'http://datatables.net/tn/'+tn;
			}
		
			if ( ! level  ) {
				// Backwards compatibility pre 1.10
				var ext = DataTable.ext;
				var type = ext.sErrMode || ext.errMode;
		
				if ( settings ) {
					_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
				}
		
				if ( type == 'alert' ) {
					alert( msg );
				}
				else if ( type == 'throw' ) {
					throw new Error(msg);
				}
				else if ( typeof type == 'function' ) {
					type( settings, tn, msg );
				}
			}
			else if ( window.console && console.log ) {
				console.log( msg );
			}
		}
		
		
		/**
		 * See if a property is defined on one object, if so assign it to the other object
		 *  @param {object} ret target object
		 *  @param {object} src source object
		 *  @param {string} name property
		 *  @param {string} [mappedName] name to map too - optional, name used if not given
		 *  @memberof DataTable#oApi
		 */
		function _fnMap( ret, src, name, mappedName )
		{
			if ( $.isArray( name ) ) {
				$.each( name, function (i, val) {
					if ( $.isArray( val ) ) {
						_fnMap( ret, src, val[0], val[1] );
					}
					else {
						_fnMap( ret, src, val );
					}
				} );
		
				return;
			}
		
			if ( mappedName === undefined ) {
				mappedName = name;
			}
		
			if ( src[name] !== undefined ) {
				ret[mappedName] = src[name];
			}
		}
		
		
		/**
		 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
		 * shallow copy arrays. The reason we need to do this, is that we don't want to
		 * deep copy array init values (such as aaSorting) since the dev wouldn't be
		 * able to override them, but we do want to deep copy arrays.
		 *  @param {object} out Object to extend
		 *  @param {object} extender Object from which the properties will be applied to
		 *      out
		 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
		 *      independent copy with the exception of the `data` or `aaData` parameters
		 *      if they are present. This is so you can pass in a collection to
		 *      DataTables and have that used as your data source without breaking the
		 *      references
		 *  @returns {object} out Reference, just for convenience - out === the return.
		 *  @memberof DataTable#oApi
		 *  @todo This doesn't take account of arrays inside the deep copied objects.
		 */
		function _fnExtend( out, extender, breakRefs )
		{
			var val;
		
			for ( var prop in extender ) {
				if ( extender.hasOwnProperty(prop) ) {
					val = extender[prop];
		
					if ( $.isPlainObject( val ) ) {
						if ( ! $.isPlainObject( out[prop] ) ) {
							out[prop] = {};
						}
						$.extend( true, out[prop], val );
					}
					else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
						out[prop] = val.slice();
					}
					else {
						out[prop] = val;
					}
				}
			}
		
			return out;
		}
		
		
		/**
		 * Bind an event handers to allow a click or return key to activate the callback.
		 * This is good for accessibility since a return on the keyboard will have the
		 * same effect as a click, if the element has focus.
		 *  @param {element} n Element to bind the action to
		 *  @param {object} oData Data object to pass to the triggered function
		 *  @param {function} fn Callback function for when the event is triggered
		 *  @memberof DataTable#oApi
		 */
		function _fnBindAction( n, oData, fn )
		{
			$(n)
				.on( 'click.DT', oData, function (e) {
						$(n).trigger('blur'); // Remove focus outline for mouse users
						fn(e);
					} )
				.on( 'keypress.DT', oData, function (e){
						if ( e.which === 13 ) {
							e.preventDefault();
							fn(e);
						}
					} )
				.on( 'selectstart.DT', function () {
						/* Take the brutal approach to cancelling text selection */
						return false;
					} );
		}
		
		
		/**
		 * Register a callback function. Easily allows a callback function to be added to
		 * an array store of callback functions that can then all be called together.
		 *  @param {object} oSettings dataTables settings object
		 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
		 *  @param {function} fn Function to be called back
		 *  @param {string} sName Identifying name for the callback (i.e. a label)
		 *  @memberof DataTable#oApi
		 */
		function _fnCallbackReg( oSettings, sStore, fn, sName )
		{
			if ( fn )
			{
				oSettings[sStore].push( {
					"fn": fn,
					"sName": sName
				} );
			}
		}
		
		
		/**
		 * Fire callback functions and trigger events. Note that the loop over the
		 * callback array store is done backwards! Further note that you do not want to
		 * fire off triggers in time sensitive applications (for example cell creation)
		 * as its slow.
		 *  @param {object} settings dataTables settings object
		 *  @param {string} callbackArr Name of the array storage for the callbacks in
		 *      oSettings
		 *  @param {string} eventName Name of the jQuery custom event to trigger. If
		 *      null no trigger is fired
		 *  @param {array} args Array of arguments to pass to the callback function /
		 *      trigger
		 *  @memberof DataTable#oApi
		 */
		function _fnCallbackFire( settings, callbackArr, eventName, args )
		{
			var ret = [];
		
			if ( callbackArr ) {
				ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
					return val.fn.apply( settings.oInstance, args );
				} );
			}
		
			if ( eventName !== null ) {
				var e = $.Event( eventName+'.dt' );
		
				$(settings.nTable).trigger( e, args );
		
				ret.push( e.result );
			}
		
			return ret;
		}
		
		
		function _fnLengthOverflow ( settings )
		{
			var
				start = settings._iDisplayStart,
				end = settings.fnDisplayEnd(),
				len = settings._iDisplayLength;
		
			/* If we have space to show extra rows (backing up from the end point - then do so */
			if ( start >= end )
			{
				start = end - len;
			}
		
			// Keep the start record on the current page
			start -= (start % len);
		
			if ( len === -1 || start < 0 )
			{
				start = 0;
			}
		
			settings._iDisplayStart = start;
		}
		
		
		function _fnRenderer( settings, type )
		{
			var renderer = settings.renderer;
			var host = DataTable.ext.renderer[type];
		
			if ( $.isPlainObject( renderer ) && renderer[type] ) {
				// Specific renderer for this type. If available use it, otherwise use
				// the default.
				return host[renderer[type]] || host._;
			}
			else if ( typeof renderer === 'string' ) {
				// Common renderer - if there is one available for this type use it,
				// otherwise use the default
				return host[renderer] || host._;
			}
		
			// Use the default
			return host._;
		}
		
		
		/**
		 * Detect the data source being used for the table. Used to simplify the code
		 * a little (ajax) and to make it compress a little smaller.
		 *
		 *  @param {object} settings dataTables settings object
		 *  @returns {string} Data source
		 *  @memberof DataTable#oApi
		 */
		function _fnDataSource ( settings )
		{
			if ( settings.oFeatures.bServerSide ) {
				return 'ssp';
			}
			else if ( settings.ajax || settings.sAjaxSource ) {
				return 'ajax';
			}
			return 'dom';
		}
		
	
		
		
		/**
		 * Computed structure of the DataTables API, defined by the options passed to
		 * `DataTable.Api.register()` when building the API.
		 *
		 * The structure is built in order to speed creation and extension of the Api
		 * objects since the extensions are effectively pre-parsed.
		 *
		 * The array is an array of objects with the following structure, where this
		 * base array represents the Api prototype base:
		 *
		 *     [
		 *       {
		 *         name:      'data'                -- string   - Property name
		 *         val:       function () {},       -- function - Api method (or undefined if just an object
		 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
		 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
		 *       },
		 *       {
		 *         name:     'row'
		 *         val:       {},
		 *         methodExt: [ ... ],
		 *         propExt:   [
		 *           {
		 *             name:      'data'
		 *             val:       function () {},
		 *             methodExt: [ ... ],
		 *             propExt:   [ ... ]
		 *           },
		 *           ...
		 *         ]
		 *       }
		 *     ]
		 *
		 * @type {Array}
		 * @ignore
		 */
		var __apiStruct = [];
		
		
		/**
		 * `Array.prototype` reference.
		 *
		 * @type object
		 * @ignore
		 */
		var __arrayProto = Array.prototype;
		
		
		/**
		 * Abstraction for `context` parameter of the `Api` constructor to allow it to
		 * take several different forms for ease of use.
		 *
		 * Each of the input parameter types will be converted to a DataTables settings
		 * object where possible.
		 *
		 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
		 *   of:
		 *
		 *   * `string` - jQuery selector. Any DataTables' matching the given selector
		 *     with be found and used.
		 *   * `node` - `TABLE` node which has already been formed into a DataTable.
		 *   * `jQuery` - A jQuery object of `TABLE` nodes.
		 *   * `object` - DataTables settings object
		 *   * `DataTables.Api` - API instance
		 * @return {array|null} Matching DataTables settings objects. `null` or
		 *   `undefined` is returned if no matching DataTable is found.
		 * @ignore
		 */
		var _toSettings = function ( mixed )
		{
			var idx, jq;
			var settings = DataTable.settings;
			var tables = $.map( settings, function (el, i) {
				return el.nTable;
			} );
		
			if ( ! mixed ) {
				return [];
			}
			else if ( mixed.nTable && mixed.oApi ) {
				// DataTables settings object
				return [ mixed ];
			}
			else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
				// Table node
				idx = $.inArray( mixed, tables );
				return idx !== -1 ? [ settings[idx] ] : null;
			}
			else if ( mixed && typeof mixed.settings === 'function' ) {
				return mixed.settings().toArray();
			}
			else if ( typeof mixed === 'string' ) {
				// jQuery selector
				jq = $(mixed);
			}
			else if ( mixed instanceof $ ) {
				// jQuery object (also DataTables instance)
				jq = mixed;
			}
		
			if ( jq ) {
				return jq.map( function(i) {
					idx = $.inArray( this, tables );
					return idx !== -1 ? settings[idx] : null;
				} ).toArray();
			}
		};
		
		
		/**
		 * DataTables API class - used to control and interface with  one or more
		 * DataTables enhanced tables.
		 *
		 * The API class is heavily based on jQuery, presenting a chainable interface
		 * that you can use to interact with tables. Each instance of the API class has
		 * a "context" - i.e. the tables that it will operate on. This could be a single
		 * table, all tables on a page or a sub-set thereof.
		 *
		 * Additionally the API is designed to allow you to easily work with the data in
		 * the tables, retrieving and manipulating it as required. This is done by
		 * presenting the API class as an array like interface. The contents of the
		 * array depend upon the actions requested by each method (for example
		 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
		 * return an array of objects or arrays depending upon your table's
		 * configuration). The API object has a number of array like methods (`push`,
		 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
		 * `unique` etc) to assist your working with the data held in a table.
		 *
		 * Most methods (those which return an Api instance) are chainable, which means
		 * the return from a method call also has all of the methods available that the
		 * top level object had. For example, these two calls are equivalent:
		 *
		 *     // Not chained
		 *     api.row.add( {...} );
		 *     api.draw();
		 *
		 *     // Chained
		 *     api.row.add( {...} ).draw();
		 *
		 * @class DataTable.Api
		 * @param {array|object|string|jQuery} context DataTable identifier. This is
		 *   used to define which DataTables enhanced tables this API will operate on.
		 *   Can be one of:
		 *
		 *   * `string` - jQuery selector. Any DataTables' matching the given selector
		 *     with be found and used.
		 *   * `node` - `TABLE` node which has already been formed into a DataTable.
		 *   * `jQuery` - A jQuery object of `TABLE` nodes.
		 *   * `object` - DataTables settings object
		 * @param {array} [data] Data to initialise the Api instance with.
		 *
		 * @example
		 *   // Direct initialisation during DataTables construction
		 *   var api = $('#example').DataTable();
		 *
		 * @example
		 *   // Initialisation using a DataTables jQuery object
		 *   var api = $('#example').dataTable().api();
		 *
		 * @example
		 *   // Initialisation as a constructor
		 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
		 */
		_Api = function ( context, data )
		{
			if ( ! (this instanceof _Api) ) {
				return new _Api( context, data );
			}
		
			var settings = [];
			var ctxSettings = function ( o ) {
				var a = _toSettings( o );
				if ( a ) {
					settings.push.apply( settings, a );
				}
			};
		
			if ( $.isArray( context ) ) {
				for ( var i=0, ien=context.length ; i<ien ; i++ ) {
					ctxSettings( context[i] );
				}
			}
			else {
				ctxSettings( context );
			}
		
			// Remove duplicates
			this.context = _unique( settings );
		
			// Initial data
			if ( data ) {
				$.merge( this, data );
			}
		
			// selector
			this.selector = {
				rows: null,
				cols: null,
				opts: null
			};
		
			_Api.extend( this, this, __apiStruct );
		};
		
		DataTable.Api = _Api;
		
		// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
		// isPlainObject.
		$.extend( _Api.prototype, {
			any: function ()
			{
				return this.count() !== 0;
			},
		
		
			concat:  __arrayProto.concat,
		
		
			context: [], // array of table settings objects
		
		
			count: function ()
			{
				return this.flatten().length;
			},
		
		
			each: function ( fn )
			{
				for ( var i=0, ien=this.length ; i<ien; i++ ) {
					fn.call( this, this[i], i, this );
				}
		
				return this;
			},
		
		
			eq: function ( idx )
			{
				var ctx = this.context;
		
				return ctx.length > idx ?
					new _Api( ctx[idx], this[idx] ) :
					null;
			},
		
		
			filter: function ( fn )
			{
				var a = [];
		
				if ( __arrayProto.filter ) {
					a = __arrayProto.filter.call( this, fn, this );
				}
				else {
					// Compatibility for browsers without EMCA-252-5 (JS 1.6)
					for ( var i=0, ien=this.length ; i<ien ; i++ ) {
						if ( fn.call( this, this[i], i, this ) ) {
							a.push( this[i] );
						}
					}
				}
		
				return new _Api( this.context, a );
			},
		
		
			flatten: function ()
			{
				var a = [];
				return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
			},
		
		
			join:    __arrayProto.join,
		
		
			indexOf: __arrayProto.indexOf || function (obj, start)
			{
				for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
					if ( this[i] === obj ) {
						return i;
					}
				}
				return -1;
			},
		
			iterator: function ( flatten, type, fn, alwaysNew ) {
				var
					a = [], ret,
					i, ien, j, jen,
					context = this.context,
					rows, items, item,
					selector = this.selector;
		
				// Argument shifting
				if ( typeof flatten === 'string' ) {
					alwaysNew = fn;
					fn = type;
					type = flatten;
					flatten = false;
				}
		
				for ( i=0, ien=context.length ; i<ien ; i++ ) {
					var apiInst = new _Api( context[i] );
		
					if ( type === 'table' ) {
						ret = fn.call( apiInst, context[i], i );
		
						if ( ret !== undefined ) {
							a.push( ret );
						}
					}
					else if ( type === 'columns' || type === 'rows' ) {
						// this has same length as context - one entry for each table
						ret = fn.call( apiInst, context[i], this[i], i );
		
						if ( ret !== undefined ) {
							a.push( ret );
						}
					}
					else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
						// columns and rows share the same structure.
						// 'this' is an array of column indexes for each context
						items = this[i];
		
						if ( type === 'column-rows' ) {
							rows = _selector_row_indexes( context[i], selector.opts );
						}
		
						for ( j=0, jen=items.length ; j<jen ; j++ ) {
							item = items[j];
		
							if ( type === 'cell' ) {
								ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
							}
							else {
								ret = fn.call( apiInst, context[i], item, i, j, rows );
							}
		
							if ( ret !== undefined ) {
								a.push( ret );
							}
						}
					}
				}
		
				if ( a.length || alwaysNew ) {
					var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
					var apiSelector = api.selector;
					apiSelector.rows = selector.rows;
					apiSelector.cols = selector.cols;
					apiSelector.opts = selector.opts;
					return api;
				}
				return this;
			},
		
		
			lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
			{
				// Bit cheeky...
				return this.indexOf.apply( this.toArray.reverse(), arguments );
			},
		
		
			length:  0,
		
		
			map: function ( fn )
			{
				var a = [];
		
				if ( __arrayProto.map ) {
					a = __arrayProto.map.call( this, fn, this );
				}
				else {
					// Compatibility for browsers without EMCA-252-5 (JS 1.6)
					for ( var i=0, ien=this.length ; i<ien ; i++ ) {
						a.push( fn.call( this, this[i], i ) );
					}
				}
		
				return new _Api( this.context, a );
			},
		
		
			pluck: function ( prop )
			{
				return this.map( function ( el ) {
					return el[ prop ];
				} );
			},
		
			pop:     __arrayProto.pop,
		
		
			push:    __arrayProto.push,
		
		
			// Does not return an API instance
			reduce: __arrayProto.reduce || function ( fn, init )
			{
				return _fnReduce( this, fn, init, 0, this.length, 1 );
			},
		
		
			reduceRight: __arrayProto.reduceRight || function ( fn, init )
			{
				return _fnReduce( this, fn, init, this.length-1, -1, -1 );
			},
		
		
			reverse: __arrayProto.reverse,
		
		
			// Object with rows, columns and opts
			selector: null,
		
		
			shift:   __arrayProto.shift,
		
		
			slice: function () {
				return new _Api( this.context, this );
			},
		
		
			sort:    __arrayProto.sort, // ? name - order?
		
		
			splice:  __arrayProto.splice,
		
		
			toArray: function ()
			{
				return __arrayProto.slice.call( this );
			},
		
		
			to$: function ()
			{
				return $( this );
			},
		
		
			toJQuery: function ()
			{
				return $( this );
			},
		
		
			unique: function ()
			{
				return new _Api( this.context, _unique(this) );
			},
		
		
			unshift: __arrayProto.unshift
		} );
		
		
		_Api.extend = function ( scope, obj, ext )
		{
			// Only extend API instances and static properties of the API
			if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
				return;
			}
		
			var
				i, ien,
				struct,
				methodScoping = function ( scope, fn, struc ) {
					return function () {
						var ret = fn.apply( scope, arguments );
		
						// Method extension
						_Api.extend( ret, ret, struc.methodExt );
						return ret;
					};
				};
		
			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
				struct = ext[i];
		
				// Value
				obj[ struct.name ] = struct.type === 'function' ?
					methodScoping( scope, struct.val, struct ) :
					struct.type === 'object' ?
						{} :
						struct.val;
		
				obj[ struct.name ].__dt_wrapper = true;
		
				// Property extension
				_Api.extend( scope, obj[ struct.name ], struct.propExt );
			}
		};
		
		
		// @todo - Is there need for an augment function?
		// _Api.augment = function ( inst, name )
		// {
		// 	// Find src object in the structure from the name
		// 	var parts = name.split('.');
		
		// 	_Api.extend( inst, obj );
		// };
		
		
		//     [
		//       {
		//         name:      'data'                -- string   - Property name
		//         val:       function () {},       -- function - Api method (or undefined if just an object
		//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
		//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
		//       },
		//       {
		//         name:     'row'
		//         val:       {},
		//         methodExt: [ ... ],
		//         propExt:   [
		//           {
		//             name:      'data'
		//             val:       function () {},
		//             methodExt: [ ... ],
		//             propExt:   [ ... ]
		//           },
		//           ...
		//         ]
		//       }
		//     ]
		
		_Api.register = _api_register = function ( name, val )
		{
			if ( $.isArray( name ) ) {
				for ( var j=0, jen=name.length ; j<jen ; j++ ) {
					_Api.register( name[j], val );
				}
				return;
			}
		
			var
				i, ien,
				heir = name.split('.'),
				struct = __apiStruct,
				key, method;
		
			var find = function ( src, name ) {
				for ( var i=0, ien=src.length ; i<ien ; i++ ) {
					if ( src[i].name === name ) {
						return src[i];
					}
				}
				return null;
			};
		
			for ( i=0, ien=heir.length ; i<ien ; i++ ) {
				method = heir[i].indexOf('()') !== -1;
				key = method ?
					heir[i].replace('()', '') :
					heir[i];
		
				var src = find( struct, key );
				if ( ! src ) {
					src = {
						name:      key,
						val:       {},
						methodExt: [],
						propExt:   [],
						type:      'object'
					};
					struct.push( src );
				}
		
				if ( i === ien-1 ) {
					src.val = val;
					src.type = typeof val === 'function' ?
						'function' :
						$.isPlainObject( val ) ?
							'object' :
							'other';
				}
				else {
					struct = method ?
						src.methodExt :
						src.propExt;
				}
			}
		};
		
		_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
			_Api.register( pluralName, val );
		
			_Api.register( singularName, function () {
				var ret = val.apply( this, arguments );
		
				if ( ret === this ) {
					// Returned item is the API instance that was passed in, return it
					return this;
				}
				else if ( ret instanceof _Api ) {
					// New API instance returned, want the value from the first item
					// in the returned array for the singular result.
					return ret.length ?
						$.isArray( ret[0] ) ?
							new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
							ret[0] :
						undefined;
				}
		
				// Non-API return - just fire it back
				return ret;
			} );
		};
		
		
		/**
		 * Selector for HTML tables. Apply the given selector to the give array of
		 * DataTables settings objects.
		 *
		 * @param {string|integer} [selector] jQuery selector string or integer
		 * @param  {array} Array of DataTables settings objects to be filtered
		 * @return {array}
		 * @ignore
		 */
		var __table_selector = function ( selector, a )
		{
			if ( $.isArray(selector) ) {
				return $.map( selector, function (item) {
					return __table_selector(item, a);
				} );
			}
		
			// Integer is used to pick out a table by index
			if ( typeof selector === 'number' ) {
				return [ a[ selector ] ];
			}
		
			// Perform a jQuery selector on the table nodes
			var nodes = $.map( a, function (el, i) {
				return el.nTable;
			} );
		
			return $(nodes)
				.filter( selector )
				.map( function (i) {
					// Need to translate back from the table node to the settings
					var idx = $.inArray( this, nodes );
					return a[ idx ];
				} )
				.toArray();
		};
		
		
		
		/**
		 * Context selector for the API's context (i.e. the tables the API instance
		 * refers to.
		 *
		 * @name    DataTable.Api#tables
		 * @param {string|integer} [selector] Selector to pick which tables the iterator
		 *   should operate on. If not given, all tables in the current context are
		 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
		 *   select multiple tables or as an integer to select a single table.
		 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
		 */
		_api_register( 'tables()', function ( selector ) {
			// A new instance is created if there was a selector specified
			return selector !== undefined && selector !== null ?
				new _Api( __table_selector( selector, this.context ) ) :
				this;
		} );
		
		
		_api_register( 'table()', function ( selector ) {
			var tables = this.tables( selector );
			var ctx = tables.context;
		
			// Truncate to the first matched table
			return ctx.length ?
				new _Api( ctx[0] ) :
				tables;
		} );
		
		
		_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
			return this.iterator( 'table', function ( ctx ) {
				return ctx.nTable;
			}, 1 );
		} );
		
		
		_api_registerPlural( 'tables().body()', 'table().body()' , function () {
			return this.iterator( 'table', function ( ctx ) {
				return ctx.nTBody;
			}, 1 );
		} );
		
		
		_api_registerPlural( 'tables().header()', 'table().header()' , function () {
			return this.iterator( 'table', function ( ctx ) {
				return ctx.nTHead;
			}, 1 );
		} );
		
		
		_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
			return this.iterator( 'table', function ( ctx ) {
				return ctx.nTFoot;
			}, 1 );
		} );
		
		
		_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
			return this.iterator( 'table', function ( ctx ) {
				return ctx.nTableWrapper;
			}, 1 );
		} );
		
		
		
		/**
		 * Redraw the tables in the current context.
		 */
		_api_register( 'draw()', function ( paging ) {
			return this.iterator( 'table', function ( settings ) {
				if ( paging === 'page' ) {
					_fnDraw( settings );
				}
				else {
					if ( typeof paging === 'string' ) {
						paging = paging === 'full-hold' ?
							false :
							true;
					}
		
					_fnReDraw( settings, paging===false );
				}
			} );
		} );
		
		
		
		/**
		 * Get the current page index.
		 *
		 * @return {integer} Current page index (zero based)
		 *//**
		 * Set the current page.
		 *
		 * Note that if you attempt to show a page which does not exist, DataTables will
		 * not throw an error, but rather reset the paging.
		 *
		 * @param {integer|string} action The paging action to take. This can be one of:
		 *  * `integer` - The page index to jump to
		 *  * `string` - An action to take:
		 *    * `first` - Jump to first page.
		 *    * `next` - Jump to the next page
		 *    * `previous` - Jump to previous page
		 *    * `last` - Jump to the last page.
		 * @returns {DataTables.Api} this
		 */
		_api_register( 'page()', function ( action ) {
			if ( action === undefined ) {
				return this.page.info().page; // not an expensive call
			}
		
			// else, have an action to take on all tables
			return this.iterator( 'table', function ( settings ) {
				_fnPageChange( settings, action );
			} );
		} );
		
		
		/**
		 * Paging information for the first table in the current context.
		 *
		 * If you require paging information for another table, use the `table()` method
		 * with a suitable selector.
		 *
		 * @return {object} Object with the following properties set:
		 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
		 *  * `pages` - Total number of pages
		 *  * `start` - Display index for the first record shown on the current page
		 *  * `end` - Display index for the last record shown on the current page
		 *  * `length` - Display length (number of records). Note that generally `start
		 *    + length = end`, but this is not always true, for example if there are
		 *    only 2 records to show on the final page, with a length of 10.
		 *  * `recordsTotal` - Full data set length
		 *  * `recordsDisplay` - Data set length once the current filtering criterion
		 *    are applied.
		 */
		_api_register( 'page.info()', function ( action ) {
			if ( this.context.length === 0 ) {
				return undefined;
			}
		
			var
				settings   = this.context[0],
				start      = settings._iDisplayStart,
				len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
				visRecords = settings.fnRecordsDisplay(),
				all        = len === -1;
		
			return {
				"page":           all ? 0 : Math.floor( start / len ),
				"pages":          all ? 1 : Math.ceil( visRecords / len ),
				"start":          start,
				"end":            settings.fnDisplayEnd(),
				"length":         len,
				"recordsTotal":   settings.fnRecordsTotal(),
				"recordsDisplay": visRecords,
				"serverSide":     _fnDataSource( settings ) === 'ssp'
			};
		} );
		
		
		/**
		 * Get the current page length.
		 *
		 * @return {integer} Current page length. Note `-1` indicates that all records
		 *   are to be shown.
		 *//**
		 * Set the current page length.
		 *
		 * @param {integer} Page length to set. Use `-1` to show all records.
		 * @returns {DataTables.Api} this
		 */
		_api_register( 'page.len()', function ( len ) {
			// Note that we can't call this function 'length()' because `length`
			// is a Javascript property of functions which defines how many arguments
			// the function expects.
			if ( len === undefined ) {
				return this.context.length !== 0 ?
					this.context[0]._iDisplayLength :
					undefined;
			}
		
			// else, set the page length
			return this.iterator( 'table', function ( settings ) {
				_fnLengthChange( settings, len );
			} );
		} );
		
		
		
		var __reload = function ( settings, holdPosition, callback ) {
			// Use the draw event to trigger a callback
			if ( callback ) {
				var api = new _Api( settings );
		
				api.one( 'draw', function () {
					callback( api.ajax.json() );
				} );
			}
		
			if ( _fnDataSource( settings ) == 'ssp' ) {
				_fnReDraw( settings, holdPosition );
			}
			else {
				_fnProcessingDisplay( settings, true );
		
				// Cancel an existing request
				var xhr = settings.jqXHR;
				if ( xhr && xhr.readyState !== 4 ) {
					xhr.abort();
				}
		
				// Trigger xhr
				_fnBuildAjax( settings, [], function( json ) {
					_fnClearTable( settings );
		
					var data = _fnAjaxDataSrc( settings, json );
					for ( var i=0, ien=data.length ; i<ien ; i++ ) {
						_fnAddData( settings, data[i] );
					}
		
					_fnReDraw( settings, holdPosition );
					_fnProcessingDisplay( settings, false );
				} );
			}
		};
		
		
		/**
		 * Get the JSON response from the last Ajax request that DataTables made to the
		 * server. Note that this returns the JSON from the first table in the current
		 * context.
		 *
		 * @return {object} JSON received from the server.
		 */
		_api_register( 'ajax.json()', function () {
			var ctx = this.context;
		
			if ( ctx.length > 0 ) {
				return ctx[0].json;
			}
		
			// else return undefined;
		} );
		
		
		/**
		 * Get the data submitted in the last Ajax request
		 */
		_api_register( 'ajax.params()', function () {
			var ctx = this.context;
		
			if ( ctx.length > 0 ) {
				return ctx[0].oAjaxData;
			}
		
			// else return undefined;
		} );
		
		
		/**
		 * Reload tables from the Ajax data source. Note that this function will
		 * automatically re-draw the table when the remote data has been loaded.
		 *
		 * @param {boolean} [reset=true] Reset (default) or hold the current paging
		 *   position. A full re-sort and re-filter is performed when this method is
		 *   called, which is why the pagination reset is the default action.
		 * @returns {DataTables.Api} this
		 */
		_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
			return this.iterator( 'table', function (settings) {
				__reload( settings, resetPaging===false, callback );
			} );
		} );
		
		
		/**
		 * Get the current Ajax URL. Note that this returns the URL from the first
		 * table in the current context.
		 *
		 * @return {string} Current Ajax source URL
		 *//**
		 * Set the Ajax URL. Note that this will set the URL for all tables in the
		 * current context.
		 *
		 * @param {string} url URL to set.
		 * @returns {DataTables.Api} this
		 */
		_api_register( 'ajax.url()', function ( url ) {
			var ctx = this.context;
		
			if ( url === undefined ) {
				// get
				if ( ctx.length === 0 ) {
					return undefined;
				}
				ctx = ctx[0];
		
				return ctx.ajax ?
					$.isPlainObject( ctx.ajax ) ?
						ctx.ajax.url :
						ctx.ajax :
					ctx.sAjaxSource;
			}
		
			// set
			return this.iterator( 'table', function ( settings ) {
				if ( $.isPlainObject( settings.ajax ) ) {
					settings.ajax.url = url;
				}
				else {
					settings.ajax = url;
				}
				// No need to consider sAjaxSource here since DataTables gives priority
				// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
				// value of `sAjaxSource` redundant.
			} );
		} );
		
		
		/**
		 * Load data from the newly set Ajax URL. Note that this method is only
		 * available when `ajax.url()` is used to set a URL. Additionally, this method
		 * has the same effect as calling `ajax.reload()` but is provided for
		 * convenience when setting a new URL. Like `ajax.reload()` it will
		 * automatically redraw the table once the remote data has been loaded.
		 *
		 * @returns {DataTables.Api} this
		 */
		_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
			// Same as a reload, but makes sense to present it for easy access after a
			// url change
			return this.iterator( 'table', function ( ctx ) {
				__reload( ctx, resetPaging===false, callback );
			} );
		} );
		
		
		
		
		var _selector_run = function ( type, selector, selectFn, settings, opts )
		{
			var
				out = [], res,
				a, i, ien, j, jen,
				selectorType = typeof selector;
		
			// Can't just check for isArray here, as an API or jQuery instance might be
			// given with their array like look
			if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
				selector = [ selector ];
			}
		
			for ( i=0, ien=selector.length ; i<ien ; i++ ) {
				// Only split on simple strings - complex expressions will be jQuery selectors
				a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
					selector[i].split(',') :
					[ selector[i] ];
		
				for ( j=0, jen=a.length ; j<jen ; j++ ) {
					res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
		
					if ( res && res.length ) {
						out = out.concat( res );
					}
				}
			}
		
			// selector extensions
			var ext = _ext.selector[ type ];
			if ( ext.length ) {
				for ( i=0, ien=ext.length ; i<ien ; i++ ) {
					out = ext[i]( settings, opts, out );
				}
			}
		
			return _unique( out );
		};
		
		
		var _selector_opts = function ( opts )
		{
			if ( ! opts ) {
				opts = {};
			}
		
			// Backwards compatibility for 1.9- which used the terminology filter rather
			// than search
			if ( opts.filter && opts.search === undefined ) {
				opts.search = opts.filter;
			}
		
			return $.extend( {
				search: 'none',
				order: 'current',
				page: 'all'
			}, opts );
		};
		
		
		var _selector_first = function ( inst )
		{
			// Reduce the API instance to the first item found
			for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
				if ( inst[i].length > 0 ) {
					// Assign the first element to the first item in the instance
					// and truncate the instance and context
					inst[0] = inst[i];
					inst[0].length = 1;
					inst.length = 1;
					inst.context = [ inst.context[i] ];
		
					return inst;
				}
			}
		
			// Not found - return an empty instance
			inst.length = 0;
			return inst;
		};
		
		
		var _selector_row_indexes = function ( settings, opts )
		{
			var
				i, ien, tmp, a=[],
				displayFiltered = settings.aiDisplay,
				displayMaster = settings.aiDisplayMaster;
		
			var
				search = opts.search,  // none, applied, removed
				order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
				page   = opts.page;    // all, current
		
			if ( _fnDataSource( settings ) == 'ssp' ) {
				// In server-side processing mode, most options are irrelevant since
				// rows not shown don't exist and the index order is the applied order
				// Removed is a special case - for consistency just return an empty
				// array
				return search === 'removed' ?
					[] :
					_range( 0, displayMaster.length );
			}
			else if ( page == 'current' ) {
				// Current page implies that order=current and fitler=applied, since it is
				// fairly senseless otherwise, regardless of what order and search actually
				// are
				for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
					a.push( displayFiltered[i] );
				}
			}
			else if ( order == 'current' || order == 'applied' ) {
				if ( search == 'none') {
					a = displayMaster.slice();
				}
				else if ( search == 'applied' ) {
					a = displayFiltered.slice();
				}
				else if ( search == 'removed' ) {
					// O(n+m) solution by creating a hash map
					var displayFilteredMap = {};
		
					for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
						displayFilteredMap[displayFiltered[i]] = null;
					}
		
					a = $.map( displayMaster, function (el) {
						return ! displayFilteredMap.hasOwnProperty(el) ?
							el :
							null;
					} );
				}
			}
			else if ( order == 'index' || order == 'original' ) {
				for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
					if ( search == 'none' ) {
						a.push( i );
					}
					else { // applied | removed
						tmp = $.inArray( i, displayFiltered );
		
						if ((tmp === -1 && search == 'removed') ||
							(tmp >= 0   && search == 'applied') )
						{
							a.push( i );
						}
					}
				}
			}
		
			return a;
		};
		
		
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Rows
		 *
		 * {}          - no selector - use all available rows
		 * {integer}   - row aoData index
		 * {node}      - TR node
		 * {string}    - jQuery selector to apply to the TR elements
		 * {array}     - jQuery array of nodes, or simply an array of TR nodes
		 *
		 */
		var __row_selector = function ( settings, selector, opts )
		{
			var rows;
			var run = function ( sel ) {
				var selInt = _intVal( sel );
				var i, ien;
				var aoData = settings.aoData;
		
				// Short cut - selector is a number and no options provided (default is
				// all records, so no need to check if the index is in there, since it
				// must be - dev error if the index doesn't exist).
				if ( selInt !== null && ! opts ) {
					return [ selInt ];
				}
		
				if ( ! rows ) {
					rows = _selector_row_indexes( settings, opts );
				}
		
				if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
					// Selector - integer
					return [ selInt ];
				}
				else if ( sel === null || sel === undefined || sel === '' ) {
					// Selector - none
					return rows;
				}
		
				// Selector - function
				if ( typeof sel === 'function' ) {
					return $.map( rows, function (idx) {
						var row = aoData[ idx ];
						return sel( idx, row._aData, row.nTr ) ? idx : null;
					} );
				}
		
				// Selector - node
				if ( sel.nodeName ) {
					var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup
					var cellIdx = sel._DT_CellIndex;
		
					if ( rowIdx !== undefined ) {
						// Make sure that the row is actually still present in the table
						return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
							[ rowIdx ] :
							[];
					}
					else if ( cellIdx ) {
						return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?
							[ cellIdx.row ] :
							[];
					}
					else {
						var host = $(sel).closest('*[data-dt-row]');
						return host.length ?
							[ host.data('dt-row') ] :
							[];
					}
				}
		
				// ID selector. Want to always be able to select rows by id, regardless
				// of if the tr element has been created or not, so can't rely upon
				// jQuery here - hence a custom implementation. This does not match
				// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
				// but to select it using a CSS selector engine (like Sizzle or
				// querySelect) it would need to need to be escaped for some characters.
				// DataTables simplifies this for row selectors since you can select
				// only a row. A # indicates an id any anything that follows is the id -
				// unescaped.
				if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
					// get row index from id
					var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
					if ( rowObj !== undefined ) {
						return [ rowObj.idx ];
					}
		
					// need to fall through to jQuery in case there is DOM id that
					// matches
				}
				
				// Get nodes in the order from the `rows` array with null values removed
				var nodes = _removeEmpty(
					_pluck_order( settings.aoData, rows, 'nTr' )
				);
		
				// Selector - jQuery selector string, array of nodes or jQuery object/
				// As jQuery's .filter() allows jQuery objects to be passed in filter,
				// it also allows arrays, so this will cope with all three options
				return $(nodes)
					.filter( sel )
					.map( function () {
						return this._DT_RowIndex;
					} )
					.toArray();
			};
		
			return _selector_run( 'row', selector, run, settings, opts );
		};
		
		
		_api_register( 'rows()', function ( selector, opts ) {
			// argument shifting
			if ( selector === undefined ) {
				selector = '';
			}
			else if ( $.isPlainObject( selector ) ) {
				opts = selector;
				selector = '';
			}
		
			opts = _selector_opts( opts );
		
			var inst = this.iterator( 'table', function ( settings ) {
				return __row_selector( settings, selector, opts );
			}, 1 );
		
			// Want argument shifting here and in __row_selector?
			inst.selector.rows = selector;
			inst.selector.opts = opts;
		
			return inst;
		} );
		
		_api_register( 'rows().nodes()', function () {
			return this.iterator( 'row', function ( settings, row ) {
				return settings.aoData[ row ].nTr || undefined;
			}, 1 );
		} );
		
		_api_register( 'rows().data()', function () {
			return this.iterator( true, 'rows', function ( settings, rows ) {
				return _pluck_order( settings.aoData, rows, '_aData' );
			}, 1 );
		} );
		
		_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
			return this.iterator( 'row', function ( settings, row ) {
				var r = settings.aoData[ row ];
				return type === 'search' ? r._aFilterData : r._aSortData;
			}, 1 );
		} );
		
		_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
			return this.iterator( 'row', function ( settings, row ) {
				_fnInvalidate( settings, row, src );
			} );
		} );
		
		_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
			return this.iterator( 'row', function ( settings, row ) {
				return row;
			}, 1 );
		} );
		
		_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
			var a = [];
			var context = this.context;
		
			// `iterator` will drop undefined values, but in this case we want them
			for ( var i=0, ien=context.length ; i<ien ; i++ ) {
				for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
					var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
					a.push( (hash === true ? '#' : '' )+ id );
				}
			}
		
			return new _Api( context, a );
		} );
		
		_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
			var that = this;
		
			this.iterator( 'row', function ( settings, row, thatIdx ) {
				var data = settings.aoData;
				var rowData = data[ row ];
				var i, ien, j, jen;
				var loopRow, loopCells;
		
				data.splice( row, 1 );
		
				// Update the cached indexes
				for ( i=0, ien=data.length ; i<ien ; i++ ) {
					loopRow = data[i];
					loopCells = loopRow.anCells;
		
					// Rows
					if ( loopRow.nTr !== null ) {
						loopRow.nTr._DT_RowIndex = i;
					}
		
					// Cells
					if ( loopCells !== null ) {
						for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
							loopCells[j]._DT_CellIndex.row = i;
						}
					}
				}
		
				// Delete from the display arrays
				_fnDeleteIndex( settings.aiDisplayMaster, row );
				_fnDeleteIndex( settings.aiDisplay, row );
				_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
		
				// For server-side processing tables - subtract the deleted row from the count
				if ( settings._iRecordsDisplay > 0 ) {
					settings._iRecordsDisplay--;
				}
		
				// Check for an 'overflow' they case for displaying the table
				_fnLengthOverflow( settings );
		
				// Remove the row's ID reference if there is one
				var id = settings.rowIdFn( rowData._aData );
				if ( id !== undefined ) {
					delete settings.aIds[ id ];
				}
			} );
		
			this.iterator( 'table', function ( settings ) {
				for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
					settings.aoData[i].idx = i;
				}
			} );
		
			return this;
		} );
		
		
		_api_register( 'rows.add()', function ( rows ) {
			var newRows = this.iterator( 'table', function ( settings ) {
					var row, i, ien;
					var out = [];
		
					for ( i=0, ien=rows.length ; i<ien ; i++ ) {
						row = rows[i];
		
						if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
							out.push( _fnAddTr( settings, row )[0] );
						}
						else {
							out.push( _fnAddData( settings, row ) );
						}
					}
		
					return out;
				}, 1 );
		
			// Return an Api.rows() extended instance, so rows().nodes() etc can be used
			var modRows = this.rows( -1 );
			modRows.pop();
			$.merge( modRows, newRows );
		
			return modRows;
		} );
		
		
		
		
		
		/**
		 *
		 */
		_api_register( 'row()', function ( selector, opts ) {
			return _selector_first( this.rows( selector, opts ) );
		} );
		
		
		_api_register( 'row().data()', function ( data ) {
			var ctx = this.context;
		
			if ( data === undefined ) {
				// Get
				return ctx.length && this.length ?
					ctx[0].aoData[ this[0] ]._aData :
					undefined;
			}
		
			// Set
			var row = ctx[0].aoData[ this[0] ];
			row._aData = data;
		
			// If the DOM has an id, and the data source is an array
			if ( $.isArray( data ) && row.nTr && row.nTr.id ) {
				_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
			}
		
			// Automatically invalidate
			_fnInvalidate( ctx[0], this[0], 'data' );
		
			return this;
		} );
		
		
		_api_register( 'row().node()', function () {
			var ctx = this.context;
		
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ].nTr || null :
				null;
		} );
		
		
		_api_register( 'row.add()', function ( row ) {
			// Allow a jQuery object to be passed in - only a single row is added from
			// it though - the first element in the set
			if ( row instanceof $ && row.length ) {
				row = row[0];
			}
		
			var rows = this.iterator( 'table', function ( settings ) {
				if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
					return _fnAddTr( settings, row )[0];
				}
				return _fnAddData( settings, row );
			} );
		
			// Return an Api.rows() extended instance, with the newly added row selected
			return this.row( rows[0] );
		} );
		
		
		
		var __details_add = function ( ctx, row, data, klass )
		{
			// Convert to array of TR elements
			var rows = [];
			var addRow = function ( r, k ) {
				// Recursion to allow for arrays of jQuery objects
				if ( $.isArray( r ) || r instanceof $ ) {
					for ( var i=0, ien=r.length ; i<ien ; i++ ) {
						addRow( r[i], k );
					}
					return;
				}
		
				// If we get a TR element, then just add it directly - up to the dev
				// to add the correct number of columns etc
				if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
					rows.push( r );
				}
				else {
					// Otherwise create a row with a wrapper
					var created = $('<tr><td/></tr>').addClass( k );
					$('td', created)
						.addClass( k )
						.html( r )
						[0].colSpan = _fnVisbleColumns( ctx );
		
					rows.push( created[0] );
				}
			};
		
			addRow( data, klass );
		
			if ( row._details ) {
				row._details.detach();
			}
		
			row._details = $(rows);
		
			// If the children were already shown, that state should be retained
			if ( row._detailsShow ) {
				row._details.insertAfter( row.nTr );
			}
		};
		
		
		var __details_remove = function ( api, idx )
		{
			var ctx = api.context;
		
			if ( ctx.length ) {
				var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
		
				if ( row && row._details ) {
					row._details.remove();
		
					row._detailsShow = undefined;
					row._details = undefined;
				}
			}
		};
		
		
		var __details_display = function ( api, show ) {
			var ctx = api.context;
		
			if ( ctx.length && api.length ) {
				var row = ctx[0].aoData[ api[0] ];
		
				if ( row._details ) {
					row._detailsShow = show;
		
					if ( show ) {
						row._details.insertAfter( row.nTr );
					}
					else {
						row._details.detach();
					}
		
					__details_events( ctx[0] );
				}
			}
		};
		
		
		var __details_events = function ( settings )
		{
			var api = new _Api( settings );
			var namespace = '.dt.DT_details';
			var drawEvent = 'draw'+namespace;
			var colvisEvent = 'column-visibility'+namespace;
			var destroyEvent = 'destroy'+namespace;
			var data = settings.aoData;
		
			api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
		
			if ( _pluck( data, '_details' ).length > 0 ) {
				// On each draw, insert the required elements into the document
				api.on( drawEvent, function ( e, ctx ) {
					if ( settings !== ctx ) {
						return;
					}
		
					api.rows( {page:'current'} ).eq(0).each( function (idx) {
						// Internal data grab
						var row = data[ idx ];
		
						if ( row._detailsShow ) {
							row._details.insertAfter( row.nTr );
						}
					} );
				} );
		
				// Column visibility change - update the colspan
				api.on( colvisEvent, function ( e, ctx, idx, vis ) {
					if ( settings !== ctx ) {
						return;
					}
		
					// Update the colspan for the details rows (note, only if it already has
					// a colspan)
					var row, visible = _fnVisbleColumns( ctx );
		
					for ( var i=0, ien=data.length ; i<ien ; i++ ) {
						row = data[i];
		
						if ( row._details ) {
							row._details.children('td[colspan]').attr('colspan', visible );
						}
					}
				} );
		
				// Table destroyed - nuke any child rows
				api.on( destroyEvent, function ( e, ctx ) {
					if ( settings !== ctx ) {
						return;
					}
		
					for ( var i=0, ien=data.length ; i<ien ; i++ ) {
						if ( data[i]._details ) {
							__details_remove( api, i );
						}
					}
				} );
			}
		};
		
		// Strings for the method names to help minification
		var _emp = '';
		var _child_obj = _emp+'row().child';
		var _child_mth = _child_obj+'()';
		
		// data can be:
		//  tr
		//  string
		//  jQuery or array of any of the above
		_api_register( _child_mth, function ( data, klass ) {
			var ctx = this.context;
		
			if ( data === undefined ) {
				// get
				return ctx.length && this.length ?
					ctx[0].aoData[ this[0] ]._details :
					undefined;
			}
			else if ( data === true ) {
				// show
				this.child.show();
			}
			else if ( data === false ) {
				// remove
				__details_remove( this );
			}
			else if ( ctx.length && this.length ) {
				// set
				__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
			}
		
			return this;
		} );
		
		
		_api_register( [
			_child_obj+'.show()',
			_child_mth+'.show()' // only when `child()` was called with parameters (without
		], function ( show ) {   // it returns an object and this method is not executed)
			__details_display( this, true );
			return this;
		} );
		
		
		_api_register( [
			_child_obj+'.hide()',
			_child_mth+'.hide()' // only when `child()` was called with parameters (without
		], function () {         // it returns an object and this method is not executed)
			__details_display( this, false );
			return this;
		} );
		
		
		_api_register( [
			_child_obj+'.remove()',
			_child_mth+'.remove()' // only when `child()` was called with parameters (without
		], function () {           // it returns an object and this method is not executed)
			__details_remove( this );
			return this;
		} );
		
		
		_api_register( _child_obj+'.isShown()', function () {
			var ctx = this.context;
		
			if ( ctx.length && this.length ) {
				// _detailsShown as false or undefined will fall through to return false
				return ctx[0].aoData[ this[0] ]._detailsShow || false;
			}
			return false;
		} );
		
		
		
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		 * Columns
		 *
		 * {integer}           - column index (>=0 count from left, <0 count from right)
		 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
		 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
		 * "{string}:name"     - column name
		 * "{string}"          - jQuery selector on column header nodes
		 *
		 */
		
		// can be an array of these items, comma separated list, or an array of comma
		// separated lists
		
		var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
		
		
		// r1 and r2 are redundant - but it means that the parameters match for the
		// iterator callback in columns().data()
		var __columnData = function ( settings, column, r1, r2, rows ) {
			var a = [];
			for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
				a.push( _fnGetCellData( settings, rows[row], column ) );
			}
			return a;
		};
		
		
		var __column_selector = function ( settings, selector, opts )
		{
			var
				columns = settings.aoColumns,
				names = _pluck( columns, 'sName' ),
				nodes = _pluck( columns, 'nTh' );
		
			var run = function ( s ) {
				var selInt = _intVal( s );
		
				// Selector - all
				if ( s === '' ) {
					return _range( columns.length );
				}
		
				// Selector - index
				if ( selInt !== null ) {
					return [ selInt >= 0 ?
						selInt : // Count from left
						columns.length + selInt // Count from right (+ because its a negative value)
					];
				}
		
				// Selector = function
				if ( typeof s === 'function' ) {
					var rows = _selector_row_indexes( settings, opts );
		
					return $.map( columns, function (col, idx) {
						return s(
								idx,
								__columnData( settings, idx, 0, 0, rows ),
								nodes[ idx ]
							) ? idx : null;
					} );
				}
		
				// jQuery or string selector
				var match = typeof s === 'string' ?
					s.match( __re_column_selector ) :
					'';
		
				if ( match ) {
					switch( match[2] ) {
						case 'visIdx':
						case 'visible':
							var idx = parseInt( match[1], 10 );
							// Visible index given, convert to column index
							if ( idx < 0 ) {
								// Counting from the right
								var visColumns = $.map( columns, function (col,i) {
									return col.bVisible ? i : null;
								} );
								return [ visColumns[ visColumns.length + idx ] ];
							}
							// Counting from the left
							return [ _fnVisibleToColumnIndex( settings, idx ) ];
		
						case 'name':
							// match by name. `names` is column index complete and in order
							return $.map( names, function (name, i) {
								return name === match[1] ? i : null;
							} );
		
						default:
							return [];
					}
				}
		
				// Cell in the table body
				if ( s.nodeName && s._DT_CellIndex ) {
					return [ s._DT_CellIndex.column ];
				}
		
				// jQuery selector on the TH elements for the columns
				var jqResult = $( nodes )
					.filter( s )
					.map( function () {
						return $.inArray( this, nodes ); // `nodes` is column index complete and in order
					} )
					.toArray();
		
				if ( jqResult.length || ! s.nodeName ) {
					return jqResult;
				}
		
				// Otherwise a node which might have a `dt-column` data attribute, or be
				// a child or such an element
				var host = $(s).closest('*[data-dt-column]');
				return host.length ?
					[ host.data('dt-column') ] :
					[];
			};
		
			return _selector_run( 'column', selector, run, settings, opts );
		};
		
		
		var __setColumnVis = function ( settings, column, vis ) {
			var
				cols = settings.aoColumns,
				col  = cols[ column ],
				data = settings.aoData,
				row, cells, i, ien, tr;
		
			// Get
			if ( vis === undefined ) {
				return col.bVisible;
			}
		
			// Set
			// No change
			if ( col.bVisible === vis ) {
				return;
			}
		
			if ( vis ) {
				// Insert column
				// Need to decide if we should use appendChild or insertBefore
				var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
		
				for ( i=0, ien=data.length ; i<ien ; i++ ) {
					tr = data[i].nTr;
					cells = data[i].anCells;
		
					if ( tr ) {
						// insertBefore can act like appendChild if 2nd arg is null
						tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
					}
				}
			}
			else {
				// Remove column
				$( _pluck( settings.aoData, 'anCells', column ) ).detach();
			}
		
			// Common actions
			col.bVisible = vis;
		};
		
		
		_api_register( 'columns()', function ( selector, opts ) {
			// argument shifting
			if ( selector === undefined ) {
				selector = '';
			}
			else if ( $.isPlainObject( selector ) ) {
				opts = selector;
				selector = '';
			}
		
			opts = _selector_opts( opts );
		
			var inst = this.iterator( 'table', function ( settings ) {
				return __column_selector( settings, selector, opts );
			}, 1 );
		
			// Want argument shifting here and in _row_selector?
			inst.selector.cols = selector;
			inst.selector.opts = opts;
		
			return inst;
		} );
		
		_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
			return this.iterator( 'column', function ( settings, column ) {
				return settings.aoColumns[column].nTh;
			}, 1 );
		} );
		
		_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
			return this.iterator( 'column', function ( settings, column ) {
				return settings.aoColumns[column].nTf;
			}, 1 );
		} );
		
		_api_registerPlural( 'columns().data()', 'column().data()', function () {
			return this.iterator( 'column-rows', __columnData, 1 );
		} );
		
		_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
			return this.iterator( 'column', function ( settings, column ) {
				return settings.aoColumns[column].mData;
			}, 1 );
		} );
		
		_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
			return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
				return _pluck_order( settings.aoData, rows,
					type === 'search' ? '_aFilterData' : '_aSortData', column
				);
			}, 1 );
		} );
		
		_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
			return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
				return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
			}, 1 );
		} );
		
		_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
			var that = this;
			var ret = this.iterator( 'column', function ( settings, column ) {
				if ( vis === undefined ) {
					return settings.aoColumns[ column ].bVisible;
				} // else
				__setColumnVis( settings, column, vis );
			} );
		
			// Group the column visibility changes
			if ( vis !== undefined ) {
				this.iterator( 'table', function ( settings ) {
					// Redraw the header after changes
					_fnDrawHead( settings, settings.aoHeader );
					_fnDrawHead( settings, settings.aoFooter );
			
					// Update colspan for no records display. Child rows and extensions will use their own
					// listeners to do this - only need to update the empty table item here
					if ( ! settings.aiDisplay.length ) {
						$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
					}
			
					_fnSaveState( settings );
		
					// Second loop once the first is done for events
					that.iterator( 'column', function ( settings, column ) {
						_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
					} );
		
					if ( calc === undefined || calc ) {
						that.columns.adjust();
					}
				});
			}
		
			return ret;
		} );
		
		_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
			return this.iterator( 'column', function ( settings, column ) {
				return type === 'visible' ?
					_fnColumnIndexToVisible( settings, column ) :
					column;
			}, 1 );
		} );
		
		_api_register( 'columns.adjust()', function () {
			return this.iterator( 'table', function ( settings ) {
				_fnAdjustColumnSizing( settings );
			}, 1 );
		} );
		
		_api_register( 'column.index()', function ( type, idx ) {
			if ( this.context.length !== 0 ) {
				var ctx = this.context[0];
		
				if ( type === 'fromVisible' || type === 'toData' ) {
					return _fnVisibleToColumnIndex( ctx, idx );
				}
				else if ( type === 'fromData' || type === 'toVisible' ) {
					return _fnColumnIndexToVisible( ctx, idx );
				}
			}
		} );
		
		_api_register( 'column()', function ( selector, opts ) {
			return _selector_first( this.columns( selector, opts ) );
		} );
		
		
		
		var __cell_selector = function ( settings, selector, opts )
		{
			var data = settings.aoData;
			var rows = _selector_row_indexes( settings, opts );
			var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
			var allCells = $( [].concat.apply([], cells) );
			var row;
			var columns = settings.aoColumns.length;
			var a, i, ien, j, o, host;
		
			var run = function ( s ) {
				var fnSelector = typeof s === 'function';
		
				if ( s === null || s === undefined || fnSelector ) {
					// All cells and function selectors
					a = [];
		
					for ( i=0, ien=rows.length ; i<ien ; i++ ) {
						row = rows[i];
		
						for ( j=0 ; j<columns ; j++ ) {
							o = {
								row: row,
								column: j
							};
		
							if ( fnSelector ) {
								// Selector - function
								host = data[ row ];
		
								if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
									a.push( o );
								}
							}
							else {
								// Selector - all
								a.push( o );
							}
						}
					}
		
					return a;
				}
				
				// Selector - index
				if ( $.isPlainObject( s ) ) {
					// Valid cell index and its in the array of selectable rows
					return s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?
						[s] :
						[];
				}
		
				// Selector - jQuery filtered cells
				var jqResult = allCells
					.filter( s )
					.map( function (i, el) {
						return { // use a new object, in case someone changes the values
							row:    el._DT_CellIndex.row,
							column: el._DT_CellIndex.column
						 };
					} )
					.toArray();
		
				if ( jqResult.length || ! s.nodeName ) {
					return jqResult;
				}
		
				// Otherwise the selector is a node, and there is one last option - the
				// element might be a child of an element which has dt-row and dt-column
				// data attributes
				host = $(s).closest('*[data-dt-row]');
				return host.length ?
					[ {
						row: host.data('dt-row'),
						column: host.data('dt-column')
					} ] :
					[];
			};
		
			return _selector_run( 'cell', selector, run, settings, opts );
		};
		
		
		
		
		_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
			// Argument shifting
			if ( $.isPlainObject( rowSelector ) ) {
				// Indexes
				if ( rowSelector.row === undefined ) {
					// Selector options in first parameter
					opts = rowSelector;
					rowSelector = null;
				}
				else {
					// Cell index objects in first parameter
					opts = columnSelector;
					columnSelector = null;
				}
			}
			if ( $.isPlainObject( columnSelector ) ) {
				opts = columnSelector;
				columnSelector = null;
			}
		
			// Cell selector
			if ( columnSelector === null || columnSelector === undefined ) {
				return this.iterator( 'table', function ( settings ) {
					return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
				} );
			}
		
			// The default built in options need to apply to row and columns
			var internalOpts = opts ? {
				page: opts.page,
				order: opts.order,
				search: opts.search
			} : {};
		
			// Row + column selector
			var columns = this.columns( columnSelector, internalOpts );
			var rows = this.rows( rowSelector, internalOpts );
			var i, ien, j, jen;
		
			var cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {
				var a = [];
		
				for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
					for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
						a.push( {
							row:    rows[idx][i],
							column: columns[idx][j]
						} );
					}
				}
		
				return a;
			}, 1 );
		
			// There is currently only one extension which uses a cell selector extension
			// It is a _major_ performance drag to run this if it isn't needed, so this is
			// an extension specific check at the moment
			var cells = opts && opts.selected ?
				this.cells( cellsNoOpts, opts ) :
				cellsNoOpts;
		
			$.extend( cells.selector, {
				cols: columnSelector,
				rows: rowSelector,
				opts: opts
			} );
		
			return cells;
		} );
		
		
		_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
			return this.iterator( 'cell', function ( settings, row, column ) {
				var data = settings.aoData[ row ];
		
				return data && data.anCells ?
					data.anCells[ column ] :
					undefined;
			}, 1 );
		} );
		
		
		_api_register( 'cells().data()', function () {
			return this.iterator( 'cell', function ( settings, row, column ) {
				return _fnGetCellData( settings, row, column );
			}, 1 );
		} );
		
		
		_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
			type = type === 'search' ? '_aFilterData' : '_aSortData';
		
			return this.iterator( 'cell', function ( settings, row, column ) {
				return settings.aoData[ row ][ type ][ column ];
			}, 1 );
		} );
		
		
		_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
			return this.iterator( 'cell', function ( settings, row, column ) {
				return _fnGetCellData( settings, row, column, type );
			}, 1 );
		} );
		
		
		_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
			return this.iterator( 'cell', function ( settings, row, column ) {
				return {
					row: row,
					column: column,
					columnVisible: _fnColumnIndexToVisible( settings, column )
				};
			}, 1 );
		} );
		
		
		_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
			return this.iterator( 'cell', function ( settings, row, column ) {
				_fnInvalidate( settings, row, src, column );
			} );
		} );
		
		
		
		_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
			return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
		} );
		
		
		_api_register( 'cell().data()', function ( data ) {
			var ctx = this.context;
			var cell = this[0];
		
			if ( data === undefined ) {
				// Get
				return ctx.length && cell.length ?
					_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
					undefined;
			}
		
			// Set
			_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
			_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
		
			return this;
		} );
		
		
		
		/**
		 * Get current ordering (sorting) that has been applied to the table.
		 *
		 * @returns {array} 2D array containing the sorting information for the first
		 *   table in the current context. Each element in the parent array represents
		 *   a column being sorted upon (i.e. multi-sorting with two columns would have
		 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
		 *   the column index that the sorting condition applies to, the second is the
		 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
		 *   index of the sorting order from the `column.sorting` initialisation array.
		 *//**
		 * Set the ordering for the table.
		 *
		 * @param {integer} order Column index to sort upon.
		 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
		 * @returns {DataTables.Api} this
		 *//**
		 * Set the ordering for the table.
		 *
		 * @param {array} order 1D array of sorting information to be applied.
		 * @param {array} [...] Optional additional sorting conditions
		 * @returns {DataTables.Api} this
		 *//**
		 * Set the ordering for the table.
		 *
		 * @param {array} order 2D array of sorting information to be applied.
		 * @returns {DataTables.Api} this
		 */
		_api_register( 'order()', function ( order, dir ) {
			var ctx = this.context;
		
			if ( order === undefined ) {
				// get
				return ctx.length !== 0 ?
					ctx[0].aaSorting :
					undefined;
			}
		
			// set
			if ( typeof order === 'number' ) {
				// Simple column / direction passed in
				order = [ [ order, dir ] ];
			}
			else if ( order.length && ! $.isArray( order[0] ) ) {
				// Arguments passed in (list of 1D arrays)
				order = Array.prototype.slice.call( arguments );
			}
			// otherwise a 2D array was passed in
		
			return this.iterator( 'table', function ( settings ) {
				settings.aaSorting = order.slice();
			} );
		} );
		
		
		/**
		 * Attach a sort listener to an element for a given column
		 *
		 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
		 *   listener to. This can take the form of a single DOM node, a jQuery
		 *   collection of nodes or a jQuery selector which will identify the node(s).
		 * @param {integer} column the column that a click on this node will sort on
		 * @param {function} [callback] callback function when sort is run
		 * @returns {DataTables.Api} this
		 */
		_api_register( 'order.listener()', function ( node, column, callback ) {
			return this.iterator( 'table', function ( settings ) {
				_fnSortAttachListener( settings, node, column, callback );
			} );
		} );
		
		
		_api_register( 'order.fixed()', function ( set ) {
			if ( ! set ) {
				var ctx = this.context;
				var fixed = ctx.length ?
					ctx[0].aaSortingFixed :
					undefined;
		
				return $.isArray( fixed ) ?
					{ pre: fixed } :
					fixed;
			}
		
			return this.iterator( 'table', function ( settings ) {
				settings.aaSortingFixed = $.extend( true, {}, set );
			} );
		} );
		
		
		// Order by the selected column(s)
		_api_register( [
			'columns().order()',
			'column().order()'
		], function ( dir ) {
			var that = this;
		
			return this.iterator( 'table', function ( settings, i ) {
				var sort = [];
		
				$.each( that[i], function (j, col) {
					sort.push( [ col, dir ] );
				} );
		
				settings.aaSorting = sort;
			} );
		} );
		
		
		
		_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
			var ctx = this.context;
		
			if ( input === undefined ) {
				// get
				return ctx.length !== 0 ?
					ctx[0].oPreviousSearch.sSearch :
					undefined;
			}
		
			// set
			return this.iterator( 'table', function ( settings ) {
				if ( ! settings.oFeatures.bFilter ) {
					return;
				}
		
				_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
					"sSearch": input+"",
					"bRegex":  regex === null ? false : regex,
					"bSmart":  smart === null ? true  : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				} ), 1 );
			} );
		} );
		
		
		_api_registerPlural(
			'columns().search()',
			'column().search()',
			function ( input, regex, smart, caseInsen ) {
				return this.iterator( 'column', function ( settings, column ) {
					var preSearch = settings.aoPreSearchCols;
		
					if ( input === undefined ) {
						// get
						return preSearch[ column ].sSearch;
					}
		
					// set
					if ( ! settings.oFeatures.bFilter ) {
						return;
					}
		
					$.extend( preSearch[ column ], {
						"sSearch": input+"",
						"bRegex":  regex === null ? false : regex,
						"bSmart":  smart === null ? true  : smart,
						"bCaseInsensitive": caseInsen === null ? true : caseInsen
					} );
		
					_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
				} );
			}
		);
		
		/*
		 * State API methods
		 */
		
		_api_register( 'state()', function () {
			return this.context.length ?
				this.context[0].oSavedState :
				null;
		} );
		
		
		_api_register( 'state.clear()', function () {
			return this.iterator( 'table', function ( settings ) {
				// Save an empty object
				settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
			} );
		} );
		
		
		_api_register( 'state.loaded()', function () {
			return this.context.length ?
				this.context[0].oLoadedState :
				null;
		} );
		
		
		_api_register( 'state.save()', function () {
			return this.iterator( 'table', function ( settings ) {
				_fnSaveState( settings );
			} );
		} );
		
		
		
		/**
		 * Provide a common method for plug-ins to check the version of DataTables being
		 * used, in order to ensure compatibility.
		 *
		 *  @param {string} version Version string to check for, in the format "X.Y.Z".
		 *    Note that the formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to
		 *    the required version, or false if this version of DataTales is not
		 *    suitable
		 *  @static
		 *  @dtopt API-Static
		 *
		 *  @example
		 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
		 */
		DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
		{
			var aThis = DataTable.version.split('.');
			var aThat = version.split('.');
			var iThis, iThat;
		
			for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
				iThis = parseInt( aThis[i], 10 ) || 0;
				iThat = parseInt( aThat[i], 10 ) || 0;
		
				// Parts are the same, keep comparing
				if (iThis === iThat) {
					continue;
				}
		
				// Parts are different, return immediately
				return iThis > iThat;
			}
		
			return true;
		};
		
		
		/**
		 * Check if a `<table>` node is a DataTable table already or not.
		 *
		 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
		 *      selector for the table to test. Note that if more than more than one
		 *      table is passed on, only the first will be checked
		 *  @returns {boolean} true the table given is a DataTable, or false otherwise
		 *  @static
		 *  @dtopt API-Static
		 *
		 *  @example
		 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
		 *      $('#example').dataTable();
		 *    }
		 */
		DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
		{
			var t = $(table).get(0);
			var is = false;
		
			if ( table instanceof DataTable.Api ) {
				return true;
			}
		
			$.each( DataTable.settings, function (i, o) {
				var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
				var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
		
				if ( o.nTable === t || head === t || foot === t ) {
					is = true;
				}
			} );
		
			return is;
		};
		
		
		/**
		 * Get all DataTable tables that have been initialised - optionally you can
		 * select to get only currently visible tables.
		 *
		 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
		 *    or visible tables only.
		 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
		 *    DataTables
		 *  @static
		 *  @dtopt API-Static
		 *
		 *  @example
		 *    $.each( $.fn.dataTable.tables(true), function () {
		 *      $(table).DataTable().columns.adjust();
		 *    } );
		 */
		DataTable.tables = DataTable.fnTables = function ( visible )
		{
			var api = false;
		
			if ( $.isPlainObject( visible ) ) {
				api = visible.api;
				visible = visible.visible;
			}
		
			var a = $.map( DataTable.settings, function (o) {
				if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
					return o.nTable;
				}
			} );
		
			return api ?
				new _Api( a ) :
				a;
		};
		
		
		/**
		 * Convert from camel case parameters to Hungarian notation. This is made public
		 * for the extensions to provide the same ability as DataTables core to accept
		 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
		 * parameters.
		 *
		 *  @param {object} src The model object which holds all parameters that can be
		 *    mapped.
		 *  @param {object} user The object to convert from camel case to Hungarian.
		 *  @param {boolean} force When set to `true`, properties which already have a
		 *    Hungarian value in the `user` object will be overwritten. Otherwise they
		 *    won't be.
		 */
		DataTable.camelToHungarian = _fnCamelToHungarian;
		
		
		
		/**
		 *
		 */
		_api_register( '$()', function ( selector, opts ) {
			var
				rows   = this.rows( opts ).nodes(), // Get all rows
				jqRows = $(rows);
		
			return $( [].concat(
				jqRows.filter( selector ).toArray(),
				jqRows.find( selector ).toArray()
			) );
		} );
		
		
		// jQuery functions to operate on the tables
		$.each( [ 'on', 'one', 'off' ], function (i, key) {
			_api_register( key+'()', function ( /* event, handler */ ) {
				var args = Array.prototype.slice.call(arguments);
		
				// Add the `dt` namespace automatically if it isn't already present
				args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
					return ! e.match(/\.dt\b/) ?
						e+'.dt' :
						e;
					} ).join( ' ' );
		
				var inst = $( this.tables().nodes() );
				inst[key].apply( inst, args );
				return this;
			} );
		} );
		
		
		_api_register( 'clear()', function () {
			return this.iterator( 'table', function ( settings ) {
				_fnClearTable( settings );
			} );
		} );
		
		
		_api_register( 'settings()', function () {
			return new _Api( this.context, this.context );
		} );
		
		
		_api_register( 'init()', function () {
			var ctx = this.context;
			return ctx.length ? ctx[0].oInit : null;
		} );
		
		
		_api_register( 'data()', function () {
			return this.iterator( 'table', function ( settings ) {
				return _pluck( settings.aoData, '_aData' );
			} ).flatten();
		} );
		
		
		_api_register( 'destroy()', function ( remove ) {
			remove = remove || false;
		
			return this.iterator( 'table', function ( settings ) {
				var orig      = settings.nTableWrapper.parentNode;
				var classes   = settings.oClasses;
				var table     = settings.nTable;
				var tbody     = settings.nTBody;
				var thead     = settings.nTHead;
				var tfoot     = settings.nTFoot;
				var jqTable   = $(table);
				var jqTbody   = $(tbody);
				var jqWrapper = $(settings.nTableWrapper);
				var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
				var i, ien;
		
				// Flag to note that the table is currently being destroyed - no action
				// should be taken
				settings.bDestroying = true;
		
				// Fire off the destroy callbacks for plug-ins etc
				_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
		
				// If not being removed from the document, make all columns visible
				if ( ! remove ) {
					new _Api( settings ).columns().visible( true );
				}
		
				// Blitz all `DT` namespaced events (these are internal events, the
				// lowercase, `dt` events are user subscribed and they are responsible
				// for removing them
				jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
				$(window).off('.DT-'+settings.sInstance);
		
				// When scrolling we had to break the table up - restore it
				if ( table != thead.parentNode ) {
					jqTable.children('thead').detach();
					jqTable.append( thead );
				}
		
				if ( tfoot && table != tfoot.parentNode ) {
					jqTable.children('tfoot').detach();
					jqTable.append( tfoot );
				}
		
				settings.aaSorting = [];
				settings.aaSortingFixed = [];
				_fnSortingClasses( settings );
		
				$( rows ).removeClass( settings.asStripeClasses.join(' ') );
		
				$('th, td', thead).removeClass( classes.sSortable+' '+
					classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
				);
		
				// Add the TR elements back into the table in their original order
				jqTbody.children().detach();
				jqTbody.append( rows );
		
				// Remove the DataTables generated nodes, events and classes
				var removedMethod = remove ? 'remove' : 'detach';
				jqTable[ removedMethod ]();
				jqWrapper[ removedMethod ]();
		
				// If we need to reattach the table to the document
				if ( ! remove && orig ) {
					// insertBefore acts like appendChild if !arg[1]
					orig.insertBefore( table, settings.nTableReinsertBefore );
		
					// Restore the width of the original table - was read from the style property,
					// so we can restore directly to that
					jqTable
						.css( 'width', settings.sDestroyWidth )
						.removeClass( classes.sTable );
		
					// If the were originally stripe classes - then we add them back here.
					// Note this is not fool proof (for example if not all rows had stripe
					// classes - but it's a good effort without getting carried away
					ien = settings.asDestroyStripes.length;
		
					if ( ien ) {
						jqTbody.children().each( function (i) {
							$(this).addClass( settings.asDestroyStripes[i % ien] );
						} );
					}
				}
		
				/* Remove the settings object from the settings array */
				var idx = $.inArray( settings, DataTable.settings );
				if ( idx !== -1 ) {
					DataTable.settings.splice( idx, 1 );
				}
			} );
		} );
		
		
		// Add the `every()` method for rows, columns and cells in a compact form
		$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
			_api_register( type+'s().every()', function ( fn ) {
				var opts = this.selector.opts;
				var api = this;
		
				return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
					// Rows and columns:
					//  arg1 - index
					//  arg2 - table counter
					//  arg3 - loop counter
					//  arg4 - undefined
					// Cells:
					//  arg1 - row index
					//  arg2 - column index
					//  arg3 - table counter
					//  arg4 - loop counter
					fn.call(
						api[ type ](
							arg1,
							type==='cell' ? arg2 : opts,
							type==='cell' ? opts : undefined
						),
						arg1, arg2, arg3, arg4
					);
				} );
			} );
		} );
		
		
		// i18n method for extensions to be able to use the language object from the
		// DataTable
		_api_register( 'i18n()', function ( token, def, plural ) {
			var ctx = this.context[0];
			var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
		
			if ( resolved === undefined ) {
				resolved = def;
			}
		
			if ( plural !== undefined && $.isPlainObject( resolved ) ) {
				resolved = resolved[ plural ] !== undefined ?
					resolved[ plural ] :
					resolved._;
			}
		
			return resolved.replace( '%d', plural ); // nb: plural might be undefined,
		} );
		/**
		 * Version string for plug-ins to check compatibility. Allowed format is
		 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
		 * only for non-release builds. See http://semver.org/ for more information.
		 *  @member
		 *  @type string
		 *  @default Version number
		 */
		DataTable.version = "1.10.21";
	
		/**
		 * Private data store, containing all of the settings objects that are
		 * created for the tables on a given page.
		 *
		 * Note that the `DataTable.settings` object is aliased to
		 * `jQuery.fn.dataTableExt` through which it may be accessed and
		 * manipulated, or `jQuery.fn.dataTable.settings`.
		 *  @member
		 *  @type array
		 *  @default []
		 *  @private
		 */
		DataTable.settings = [];
	
		/**
		 * Object models container, for the various models that DataTables has
		 * available to it. These models define the objects that are used to hold
		 * the active state and configuration of the table.
		 *  @namespace
		 */
		DataTable.models = {};
		
		
		
		/**
		 * Template object for the way in which DataTables holds information about
		 * search information for the global filter and individual column filters.
		 *  @namespace
		 */
		DataTable.models.oSearch = {
			/**
			 * Flag to indicate if the filtering should be case insensitive or not
			 *  @type boolean
			 *  @default true
			 */
			"bCaseInsensitive": true,
		
			/**
			 * Applied search term
			 *  @type string
			 *  @default <i>Empty string</i>
			 */
			"sSearch": "",
		
			/**
			 * Flag to indicate if the search term should be interpreted as a
			 * regular expression (true) or not (false) and therefore and special
			 * regex characters escaped.
			 *  @type boolean
			 *  @default false
			 */
			"bRegex": false,
		
			/**
			 * Flag to indicate if DataTables is to use its smart filtering or not.
			 *  @type boolean
			 *  @default true
			 */
			"bSmart": true
		};
		
		
		
		
		/**
		 * Template object for the way in which DataTables holds information about
		 * each individual row. This is the object format used for the settings
		 * aoData array.
		 *  @namespace
		 */
		DataTable.models.oRow = {
			/**
			 * TR element for the row
			 *  @type node
			 *  @default null
			 */
			"nTr": null,
		
			/**
			 * Array of TD elements for each row. This is null until the row has been
			 * created.
			 *  @type array nodes
			 *  @default []
			 */
			"anCells": null,
		
			/**
			 * Data object from the original data source for the row. This is either
			 * an array if using the traditional form of DataTables, or an object if
			 * using mData options. The exact type will depend on the passed in
			 * data from the data source, or will be an array if using DOM a data
			 * source.
			 *  @type array|object
			 *  @default []
			 */
			"_aData": [],
		
			/**
			 * Sorting data cache - this array is ostensibly the same length as the
			 * number of columns (although each index is generated only as it is
			 * needed), and holds the data that is used for sorting each column in the
			 * row. We do this cache generation at the start of the sort in order that
			 * the formatting of the sort data need be done only once for each cell
			 * per sort. This array should not be read from or written to by anything
			 * other than the master sorting methods.
			 *  @type array
			 *  @default null
			 *  @private
			 */
			"_aSortData": null,
		
			/**
			 * Per cell filtering data cache. As per the sort data cache, used to
			 * increase the performance of the filtering in DataTables
			 *  @type array
			 *  @default null
			 *  @private
			 */
			"_aFilterData": null,
		
			/**
			 * Filtering data cache. This is the same as the cell filtering cache, but
			 * in this case a string rather than an array. This is easily computed with
			 * a join on `_aFilterData`, but is provided as a cache so the join isn't
			 * needed on every search (memory traded for performance)
			 *  @type array
			 *  @default null
			 *  @private
			 */
			"_sFilterRow": null,
		
			/**
			 * Cache of the class name that DataTables has applied to the row, so we
			 * can quickly look at this variable rather than needing to do a DOM check
			 * on className for the nTr property.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *  @private
			 */
			"_sRowStripe": "",
		
			/**
			 * Denote if the original data source was from the DOM, or the data source
			 * object. This is used for invalidating data, so DataTables can
			 * automatically read data from the original source, unless uninstructed
			 * otherwise.
			 *  @type string
			 *  @default null
			 *  @private
			 */
			"src": null,
		
			/**
			 * Index in the aoData array. This saves an indexOf lookup when we have the
			 * object, but want to know the index
			 *  @type integer
			 *  @default -1
			 *  @private
			 */
			"idx": -1
		};
		
		
		/**
		 * Template object for the column information object in DataTables. This object
		 * is held in the settings aoColumns array and contains all the information that
		 * DataTables needs about each individual column.
		 *
		 * Note that this object is related to {@link DataTable.defaults.column}
		 * but this one is the internal data store for DataTables's cache of columns.
		 * It should NOT be manipulated outside of DataTables. Any configuration should
		 * be done through the initialisation options.
		 *  @namespace
		 */
		DataTable.models.oColumn = {
			/**
			 * Column index. This could be worked out on-the-fly with $.inArray, but it
			 * is faster to just hold it as a variable
			 *  @type integer
			 *  @default null
			 */
			"idx": null,
		
			/**
			 * A list of the columns that sorting should occur on when this column
			 * is sorted. That this property is an array allows multi-column sorting
			 * to be defined for a column (for example first name / last name columns
			 * would benefit from this). The values are integers pointing to the
			 * columns to be sorted on (typically it will be a single integer pointing
			 * at itself, but that doesn't need to be the case).
			 *  @type array
			 */
			"aDataSort": null,
		
			/**
			 * Define the sorting directions that are applied to the column, in sequence
			 * as the column is repeatedly sorted upon - i.e. the first value is used
			 * as the sorting direction when the column if first sorted (clicked on).
			 * Sort it again (click again) and it will move on to the next index.
			 * Repeat until loop.
			 *  @type array
			 */
			"asSorting": null,
		
			/**
			 * Flag to indicate if the column is searchable, and thus should be included
			 * in the filtering or not.
			 *  @type boolean
			 */
			"bSearchable": null,
		
			/**
			 * Flag to indicate if the column is sortable or not.
			 *  @type boolean
			 */
			"bSortable": null,
		
			/**
			 * Flag to indicate if the column is currently visible in the table or not
			 *  @type boolean
			 */
			"bVisible": null,
		
			/**
			 * Store for manual type assignment using the `column.type` option. This
			 * is held in store so we can manipulate the column's `sType` property.
			 *  @type string
			 *  @default null
			 *  @private
			 */
			"_sManualType": null,
		
			/**
			 * Flag to indicate if HTML5 data attributes should be used as the data
			 * source for filtering or sorting. True is either are.
			 *  @type boolean
			 *  @default false
			 *  @private
			 */
			"_bAttrSrc": false,
		
			/**
			 * Developer definable function that is called whenever a cell is created (Ajax source,
			 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
			 * allowing you to modify the DOM element (add background colour for example) when the
			 * element is available.
			 *  @type function
			 *  @param {element} nTd The TD node that has been created
			 *  @param {*} sData The Data for the cell
			 *  @param {array|object} oData The data for the whole row
			 *  @param {int} iRow The row index for the aoData data store
			 *  @default null
			 */
			"fnCreatedCell": null,
		
			/**
			 * Function to get data from a cell in a column. You should <b>never</b>
			 * access data directly through _aData internally in DataTables - always use
			 * the method attached to this property. It allows mData to function as
			 * required. This function is automatically assigned by the column
			 * initialisation method
			 *  @type function
			 *  @param {array|object} oData The data array/object for the array
			 *    (i.e. aoData[]._aData)
			 *  @param {string} sSpecific The specific data type you want to get -
			 *    'display', 'type' 'filter' 'sort'
			 *  @returns {*} The data for the cell from the given row's data
			 *  @default null
			 */
			"fnGetData": null,
		
			/**
			 * Function to set data for a cell in the column. You should <b>never</b>
			 * set the data directly to _aData internally in DataTables - always use
			 * this method. It allows mData to function as required. This function
			 * is automatically assigned by the column initialisation method
			 *  @type function
			 *  @param {array|object} oData The data array/object for the array
			 *    (i.e. aoData[]._aData)
			 *  @param {*} sValue Value to set
			 *  @default null
			 */
			"fnSetData": null,
		
			/**
			 * Property to read the value for the cells in the column from the data
			 * source array / object. If null, then the default content is used, if a
			 * function is given then the return from the function is used.
			 *  @type function|int|string|null
			 *  @default null
			 */
			"mData": null,
		
			/**
			 * Partner property to mData which is used (only when defined) to get
			 * the data - i.e. it is basically the same as mData, but without the
			 * 'set' option, and also the data fed to it is the result from mData.
			 * This is the rendering method to match the data method of mData.
			 *  @type function|int|string|null
			 *  @default null
			 */
			"mRender": null,
		
			/**
			 * Unique header TH/TD element for this column - this is what the sorting
			 * listener is attached to (if sorting is enabled.)
			 *  @type node
			 *  @default null
			 */
			"nTh": null,
		
			/**
			 * Unique footer TH/TD element for this column (if there is one). Not used
			 * in DataTables as such, but can be used for plug-ins to reference the
			 * footer for each column.
			 *  @type node
			 *  @default null
			 */
			"nTf": null,
		
			/**
			 * The class to apply to all TD elements in the table's TBODY for the column
			 *  @type string
			 *  @default null
			 */
			"sClass": null,
		
			/**
			 * When DataTables calculates the column widths to assign to each column,
			 * it finds the longest string in each column and then constructs a
			 * temporary table and reads the widths from that. The problem with this
			 * is that "mmm" is much wider then "iiii", but the latter is a longer
			 * string - thus the calculation can go wrong (doing it properly and putting
			 * it into an DOM object and measuring that is horribly(!) slow). Thus as
			 * a "work around" we provide this option. It will append its value to the
			 * text that is found to be the longest string for the column - i.e. padding.
			 *  @type string
			 */
			"sContentPadding": null,
		
			/**
			 * Allows a default value to be given for a column's data, and will be used
			 * whenever a null data source is encountered (this can be because mData
			 * is set to null, or because the data source itself is null).
			 *  @type string
			 *  @default null
			 */
			"sDefaultContent": null,
		
			/**
			 * Name for the column, allowing reference to the column by name as well as
			 * by index (needs a lookup to work by name).
			 *  @type string
			 */
			"sName": null,
		
			/**
			 * Custom sorting data type - defines which of the available plug-ins in
			 * afnSortData the custom sorting will use - if any is defined.
			 *  @type string
			 *  @default std
			 */
			"sSortDataType": 'std',
		
			/**
			 * Class to be applied to the header element when sorting on this column
			 *  @type string
			 *  @default null
			 */
			"sSortingClass": null,
		
			/**
			 * Class to be applied to the header element when sorting on this column -
			 * when jQuery UI theming is used.
			 *  @type string
			 *  @default null
			 */
			"sSortingClassJUI": null,
		
			/**
			 * Title of the column - what is seen in the TH element (nTh).
			 *  @type string
			 */
			"sTitle": null,
		
			/**
			 * Column sorting and filtering type
			 *  @type string
			 *  @default null
			 */
			"sType": null,
		
			/**
			 * Width of the column
			 *  @type string
			 *  @default null
			 */
			"sWidth": null,
		
			/**
			 * Width of the column when it was first "encountered"
			 *  @type string
			 *  @default null
			 */
			"sWidthOrig": null
		};
		
		
		/*
		 * Developer note: The properties of the object below are given in Hungarian
		 * notation, that was used as the interface for DataTables prior to v1.10, however
		 * from v1.10 onwards the primary interface is camel case. In order to avoid
		 * breaking backwards compatibility utterly with this change, the Hungarian
		 * version is still, internally the primary interface, but is is not documented
		 * - hence the @name tags in each doc comment. This allows a Javascript function
		 * to create a map from Hungarian notation to camel case (going the other direction
		 * would require each property to be listed, which would at around 3K to the size
		 * of DataTables, while this method is about a 0.5K hit.
		 *
		 * Ultimately this does pave the way for Hungarian notation to be dropped
		 * completely, but that is a massive amount of work and will break current
		 * installs (therefore is on-hold until v2).
		 */
		
		/**
		 * Initialisation options that can be given to DataTables at initialisation
		 * time.
		 *  @namespace
		 */
		DataTable.defaults = {
			/**
			 * An array of data to use for the table, passed in at initialisation which
			 * will be used in preference to any data which is already in the DOM. This is
			 * particularly useful for constructing tables purely in Javascript, for
			 * example with a custom Ajax call.
			 *  @type array
			 *  @default null
			 *
			 *  @dtopt Option
			 *  @name DataTable.defaults.data
			 *
			 *  @example
			 *    // Using a 2D array data source
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "data": [
			 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
			 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
			 *        ],
			 *        "columns": [
			 *          { "title": "Engine" },
			 *          { "title": "Browser" },
			 *          { "title": "Platform" },
			 *          { "title": "Version" },
			 *          { "title": "Grade" }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using an array of objects as a data source (`data`)
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "data": [
			 *          {
			 *            "engine":   "Trident",
			 *            "browser":  "Internet Explorer 4.0",
			 *            "platform": "Win 95+",
			 *            "version":  4,
			 *            "grade":    "X"
			 *          },
			 *          {
			 *            "engine":   "Trident",
			 *            "browser":  "Internet Explorer 5.0",
			 *            "platform": "Win 95+",
			 *            "version":  5,
			 *            "grade":    "C"
			 *          }
			 *        ],
			 *        "columns": [
			 *          { "title": "Engine",   "data": "engine" },
			 *          { "title": "Browser",  "data": "browser" },
			 *          { "title": "Platform", "data": "platform" },
			 *          { "title": "Version",  "data": "version" },
			 *          { "title": "Grade",    "data": "grade" }
			 *        ]
			 *      } );
			 *    } );
			 */
			"aaData": null,
		
		
			/**
			 * If ordering is enabled, then DataTables will perform a first pass sort on
			 * initialisation. You can define which column(s) the sort is performed
			 * upon, and the sorting direction, with this variable. The `sorting` array
			 * should contain an array for each column to be sorted initially containing
			 * the column's index and a direction string ('asc' or 'desc').
			 *  @type array
			 *  @default [[0,'asc']]
			 *
			 *  @dtopt Option
			 *  @name DataTable.defaults.order
			 *
			 *  @example
			 *    // Sort by 3rd column first, and then 4th column
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "order": [[2,'asc'], [3,'desc']]
			 *      } );
			 *    } );
			 *
			 *    // No initial sorting
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "order": []
			 *      } );
			 *    } );
			 */
			"aaSorting": [[0,'asc']],
		
		
			/**
			 * This parameter is basically identical to the `sorting` parameter, but
			 * cannot be overridden by user interaction with the table. What this means
			 * is that you could have a column (visible or hidden) which the sorting
			 * will always be forced on first - any sorting after that (from the user)
			 * will then be performed as required. This can be useful for grouping rows
			 * together.
			 *  @type array
			 *  @default null
			 *
			 *  @dtopt Option
			 *  @name DataTable.defaults.orderFixed
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "orderFixed": [[0,'asc']]
			 *      } );
			 *    } )
			 */
			"aaSortingFixed": [],
		
		
			/**
			 * DataTables can be instructed to load data to display in the table from a
			 * Ajax source. This option defines how that Ajax call is made and where to.
			 *
			 * The `ajax` property has three different modes of operation, depending on
			 * how it is defined. These are:
			 *
			 * * `string` - Set the URL from where the data should be loaded from.
			 * * `object` - Define properties for `jQuery.ajax`.
			 * * `function` - Custom data get function
			 *
			 * `string`
			 * --------
			 *
			 * As a string, the `ajax` property simply defines the URL from which
			 * DataTables will load data.
			 *
			 * `object`
			 * --------
			 *
			 * As an object, the parameters in the object are passed to
			 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
			 * of the Ajax request. DataTables has a number of default parameters which
			 * you can override using this option. Please refer to the jQuery
			 * documentation for a full description of the options available, although
			 * the following parameters provide additional options in DataTables or
			 * require special consideration:
			 *
			 * * `data` - As with jQuery, `data` can be provided as an object, but it
			 *   can also be used as a function to manipulate the data DataTables sends
			 *   to the server. The function takes a single parameter, an object of
			 *   parameters with the values that DataTables has readied for sending. An
			 *   object may be returned which will be merged into the DataTables
			 *   defaults, or you can add the items to the object that was passed in and
			 *   not return anything from the function. This supersedes `fnServerParams`
			 *   from DataTables 1.9-.
			 *
			 * * `dataSrc` - By default DataTables will look for the property `data` (or
			 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
			 *   from an Ajax source or for server-side processing - this parameter
			 *   allows that property to be changed. You can use Javascript dotted
			 *   object notation to get a data source for multiple levels of nesting, or
			 *   it my be used as a function. As a function it takes a single parameter,
			 *   the JSON returned from the server, which can be manipulated as
			 *   required, with the returned value being that used by DataTables as the
			 *   data source for the table. This supersedes `sAjaxDataProp` from
			 *   DataTables 1.9-.
			 *
			 * * `success` - Should not be overridden it is used internally in
			 *   DataTables. To manipulate / transform the data returned by the server
			 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
			 *
			 * `function`
			 * ----------
			 *
			 * As a function, making the Ajax call is left up to yourself allowing
			 * complete control of the Ajax request. Indeed, if desired, a method other
			 * than Ajax could be used to obtain the required data, such as Web storage
			 * or an AIR database.
			 *
			 * The function is given four parameters and no return is required. The
			 * parameters are:
			 *
			 * 1. _object_ - Data to send to the server
			 * 2. _function_ - Callback function that must be executed when the required
			 *    data has been obtained. That data should be passed into the callback
			 *    as the only parameter
			 * 3. _object_ - DataTables settings object for the table
			 *
			 * Note that this supersedes `fnServerData` from DataTables 1.9-.
			 *
			 *  @type string|object|function
			 *  @default null
			 *
			 *  @dtopt Option
			 *  @name DataTable.defaults.ajax
			 *  @since 1.10.0
			 *
			 * @example
			 *   // Get JSON data from a file via Ajax.
			 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
			 *   $('#example').dataTable( {
			 *     "ajax": "data.json"
			 *   } );
			 *
			 * @example
			 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
			 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
			 *   $('#example').dataTable( {
			 *     "ajax": {
			 *       "url": "data.json",
			 *       "dataSrc": "tableData"
			 *     }
			 *   } );
			 *
			 * @example
			 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
			 *   // from a plain array rather than an array in an object
			 *   $('#example').dataTable( {
			 *     "ajax": {
			 *       "url": "data.json",
			 *       "dataSrc": ""
			 *     }
			 *   } );
			 *
			 * @example
			 *   // Manipulate the data returned from the server - add a link to data
			 *   // (note this can, should, be done using `render` for the column - this
			 *   // is just a simple example of how the data can be manipulated).
			 *   $('#example').dataTable( {
			 *     "ajax": {
			 *       "url": "data.json",
			 *       "dataSrc": function ( json ) {
			 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
			 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
			 *         }
			 *         return json;
			 *       }
			 *     }
			 *   } );
			 *
			 * @example
			 *   // Add data to the request
			 *   $('#example').dataTable( {
			 *     "ajax": {
			 *       "url": "data.json",
			 *       "data": function ( d ) {
			 *         return {
			 *           "extra_search": $('#extra').val()
			 *         };
			 *       }
			 *     }
			 *   } );
			 *
			 * @example
			 *   // Send request as POST
			 *   $('#example').dataTable( {
			 *     "ajax": {
			 *       "url": "data.json",
			 *       "type": "POST"
			 *     }
			 *   } );
			 *
			 * @example
			 *   // Get the data from localStorage (could interface with a form for
			 *   // adding, editing and removing rows).
			 *   $('#example').dataTable( {
			 *     "ajax": function (data, callback, settings) {
			 *       callback(
			 *         JSON.parse( localStorage.getItem('dataTablesData') )
			 *       );
			 *     }
			 *   } );
			 */
			"ajax": null,
		
		
			/**
			 * This parameter allows you to readily specify the entries in the length drop
			 * down menu that DataTables shows when pagination is enabled. It can be
			 * either a 1D array of options which will be used for both the displayed
			 * option and the value, or a 2D array which will use the array in the first
			 * position as the value, and the array in the second position as the
			 * displayed options (useful for language strings such as 'All').
			 *
			 * Note that the `pageLength` property will be automatically set to the
			 * first value given in this array, unless `pageLength` is also provided.
			 *  @type array
			 *  @default [ 10, 25, 50, 100 ]
			 *
			 *  @dtopt Option
			 *  @name DataTable.defaults.lengthMenu
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
			 *      } );
			 *    } );
			 */
			"aLengthMenu": [ 10, 25, 50, 100 ],
		
		
			/**
			 * The `columns` option in the initialisation parameter allows you to define
			 * details about the way individual columns behave. For a full list of
			 * column options that can be set, please see
			 * {@link DataTable.defaults.column}. Note that if you use `columns` to
			 * define your columns, you must have an entry in the array for every single
			 * column that you have in your table (these can be null if you don't which
			 * to specify any options).
			 *  @member
			 *
			 *  @name DataTable.defaults.column
			 */
			"aoColumns": null,
		
			/**
			 * Very similar to `columns`, `columnDefs` allows you to target a specific
			 * column, multiple columns, or all columns, using the `targets` property of
			 * each object in the array. This allows great flexibility when creating
			 * tables, as the `columnDefs` arrays can be of any length, targeting the
			 * columns you specifically want. `columnDefs` may use any of the column
			 * options available: {@link DataTable.defaults.column}, but it _must_
			 * have `targets` defined in each object in the array. Values in the `targets`
			 * array may be:
			 *   <ul>
			 *     <li>a string - class name will be matched on the TH for the column</li>
			 *     <li>0 or a positive integer - column index counting from the left</li>
			 *     <li>a negative integer - column index counting from the right</li>
			 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
			 *   </ul>
			 *  @member
			 *
			 *  @name DataTable.defaults.columnDefs
			 */
			"aoColumnDefs": null,
		
		
			/**
			 * Basically the same as `search`, this parameter defines the individual column
			 * filtering state at initialisation time. The array must be of the same size
			 * as the number of columns, and each element be an object with the parameters
			 * `search` and `escapeRegex` (the latter is optional). 'null' is also
			 * accepted and the default will be used.
			 *  @type array
			 *  @default []
			 *
			 *  @dtopt Option
			 *  @name DataTable.defaults.searchCols
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "searchCols": [
			 *          null,
			 *          { "search": "My filter" },
			 *          null,
			 *          { "search": "^[0-9]", "escapeRegex": false }
			 *        ]
			 *      } );
			 *    } )
			 */
			"aoSearchCols": [],
		
		
			/**
			 * An array of CSS classes that should be applied to displayed rows. This
			 * array may be of any length, and DataTables will apply each class
			 * sequentially, looping when required.
			 *  @type array
			 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
			 *    options</i>
			 *
			 *  @dtopt Option
			 *  @name DataTable.defaults.stripeClasses
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
			 *      } );
			 *    } )
			 */
			"asStripeClasses": null,
		
		
			/**
			 * Enable or disable automatic column width calculation. This can be disabled
			 * as an optimisation (it takes some time to calculate the widths) if the
			 * tables widths are passed in using `columns`.
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.autoWidth
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "autoWidth": false
			 *      } );
			 *    } );
			 */
			"bAutoWidth": true,
		
		
			/**
			 * Deferred rendering can provide DataTables with a huge speed boost when you
			 * are using an Ajax or JS data source for the table. This option, when set to
			 * true, will cause DataTables to defer the creation of the table elements for
			 * each row until they are needed for a draw - saving a significant amount of
			 * time.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.deferRender
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "ajax": "sources/arrays.txt",
			 *        "deferRender": true
			 *      } );
			 *    } );
			 */
			"bDeferRender": false,
		
		
			/**
			 * Replace a DataTable which matches the given selector and replace it with
			 * one which has the properties of the new initialisation object passed. If no
			 * table matches the selector, then the new DataTable will be constructed as
			 * per normal.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.destroy
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "srollY": "200px",
			 *        "paginate": false
			 *      } );
			 *
			 *      // Some time later....
			 *      $('#example').dataTable( {
			 *        "filter": false,
			 *        "destroy": true
			 *      } );
			 *    } );
			 */
			"bDestroy": false,
		
		
			/**
			 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
			 * that it allows the end user to input multiple words (space separated) and
			 * will match a row containing those words, even if not in the order that was
			 * specified (this allow matching across multiple columns). Note that if you
			 * wish to use filtering in DataTables this must remain 'true' - to remove the
			 * default filtering input box and retain filtering abilities, please use
			 * {@link DataTable.defaults.dom}.
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.searching
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "searching": false
			 *      } );
			 *    } );
			 */
			"bFilter": true,
		
		
			/**
			 * Enable or disable the table information display. This shows information
			 * about the data that is currently visible on the page, including information
			 * about filtered data if that action is being performed.
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.info
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "info": false
			 *      } );
			 *    } );
			 */
			"bInfo": true,
		
		
			/**
			 * Allows the end user to select the size of a formatted page from a select
			 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.lengthChange
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "lengthChange": false
			 *      } );
			 *    } );
			 */
			"bLengthChange": true,
		
		
			/**
			 * Enable or disable pagination.
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.paging
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "paging": false
			 *      } );
			 *    } );
			 */
			"bPaginate": true,
		
		
			/**
			 * Enable or disable the display of a 'processing' indicator when the table is
			 * being processed (e.g. a sort). This is particularly useful for tables with
			 * large amounts of data where it can take a noticeable amount of time to sort
			 * the entries.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.processing
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "processing": true
			 *      } );
			 *    } );
			 */
			"bProcessing": false,
		
		
			/**
			 * Retrieve the DataTables object for the given selector. Note that if the
			 * table has already been initialised, this parameter will cause DataTables
			 * to simply return the object that has already been set up - it will not take
			 * account of any changes you might have made to the initialisation object
			 * passed to DataTables (setting this parameter to true is an acknowledgement
			 * that you understand this). `destroy` can be used to reinitialise a table if
			 * you need.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.retrieve
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      initTable();
			 *      tableActions();
			 *    } );
			 *
			 *    function initTable ()
			 *    {
			 *      return $('#example').dataTable( {
			 *        "scrollY": "200px",
			 *        "paginate": false,
			 *        "retrieve": true
			 *      } );
			 *    }
			 *
			 *    function tableActions ()
			 *    {
			 *      var table = initTable();
			 *      // perform API operations with oTable
			 *    }
			 */
			"bRetrieve": false,
		
		
			/**
			 * When vertical (y) scrolling is enabled, DataTables will force the height of
			 * the table's viewport to the given height at all times (useful for layout).
			 * However, this can look odd when filtering data down to a small data set,
			 * and the footer is left "floating" further down. This parameter (when
			 * enabled) will cause DataTables to collapse the table's viewport down when
			 * the result set will fit within the given Y height.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.scrollCollapse
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "scrollY": "200",
			 *        "scrollCollapse": true
			 *      } );
			 *    } );
			 */
			"bScrollCollapse": false,
		
		
			/**
			 * Configure DataTables to use server-side processing. Note that the
			 * `ajax` parameter must also be given in order to give DataTables a
			 * source to obtain the required data for each draw.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Features
			 *  @dtopt Server-side
			 *  @name DataTable.defaults.serverSide
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "serverSide": true,
			 *        "ajax": "xhr.php"
			 *      } );
			 *    } );
			 */
			"bServerSide": false,
		
		
			/**
			 * Enable or disable sorting of columns. Sorting of individual columns can be
			 * disabled by the `sortable` option for each column.
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.ordering
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "ordering": false
			 *      } );
			 *    } );
			 */
			"bSort": true,
		
		
			/**
			 * Enable or display DataTables' ability to sort multiple columns at the
			 * same time (activated by shift-click by the user).
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.orderMulti
			 *
			 *  @example
			 *    // Disable multiple column sorting ability
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "orderMulti": false
			 *      } );
			 *    } );
			 */
			"bSortMulti": true,
		
		
			/**
			 * Allows control over whether DataTables should use the top (true) unique
			 * cell that is found for a single column, or the bottom (false - default).
			 * This is useful when using complex headers.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.orderCellsTop
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "orderCellsTop": true
			 *      } );
			 *    } );
			 */
			"bSortCellsTop": false,
		
		
			/**
			 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
			 * `sorting\_3` to the columns which are currently being sorted on. This is
			 * presented as a feature switch as it can increase processing time (while
			 * classes are removed and added) so for large data sets you might want to
			 * turn this off.
			 *  @type boolean
			 *  @default true
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.orderClasses
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "orderClasses": false
			 *      } );
			 *    } );
			 */
			"bSortClasses": true,
		
		
			/**
			 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
			 * used to save table display information such as pagination information,
			 * display length, filtering and sorting. As such when the end user reloads
			 * the page the display display will match what thy had previously set up.
			 *
			 * Due to the use of `localStorage` the default state saving is not supported
			 * in IE6 or 7. If state saving is required in those browsers, use
			 * `stateSaveCallback` to provide a storage solution such as cookies.
			 *  @type boolean
			 *  @default false
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.stateSave
			 *
			 *  @example
			 *    $(document).ready( function () {
			 *      $('#example').dataTable( {
			 *        "stateSave": true
			 *      } );
			 *    } );
			 */
			"bStateSave": false,
		
		
			/**
			 * This function is called when a TR element is created (and all TD child
			 * elements have been inserted), or registered if using a DOM source, allowing
			 * manipulation of the TR element (adding classes etc).
			 *  @type function
			 *  @param {node} row "TR" element for the current row
			 *  @param {array} data Raw data array for this row
			 *  @param {int} dataIndex The index of this row in the internal aoData array
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.createdRow
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "createdRow": function( row, data, dataIndex ) {
			 *          // Bold the grade for all 'A' grade browsers
			 *          if ( data[4] == "A" )
			 *          {
			 *            $('td:eq(4)', row).html( '<b>A</b>' );
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"fnCreatedRow": null,
		
		
			/**
			 * This function is called on every 'draw' event, and allows you to
			 * dynamically modify any aspect you want about the created DOM.
			 *  @type function
			 *  @param {object} settings DataTables settings object
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.drawCallback
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "drawCallback": function( settings ) {
			 *          alert( 'DataTables has redrawn the table' );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnDrawCallback": null,
		
		
			/**
			 * Identical to fnHeaderCallback() but for the table footer this function
			 * allows you to modify the table footer on every 'draw' event.
			 *  @type function
			 *  @param {node} foot "TR" element for the footer
			 *  @param {array} data Full table data (as derived from the original HTML)
			 *  @param {int} start Index for the current display starting point in the
			 *    display array
			 *  @param {int} end Index for the current display ending point in the
			 *    display array
			 *  @param {array int} display Index array to translate the visual position
			 *    to the full data array
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.footerCallback
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "footerCallback": function( tfoot, data, start, end, display ) {
			 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
			 *        }
			 *      } );
			 *    } )
			 */
			"fnFooterCallback": null,
		
		
			/**
			 * When rendering large numbers in the information element for the table
			 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
			 * to have a comma separator for the 'thousands' units (e.g. 1 million is
			 * rendered as "1,000,000") to help readability for the end user. This
			 * function will override the default method DataTables uses.
			 *  @type function
			 *  @member
			 *  @param {int} toFormat number to be formatted
			 *  @returns {string} formatted string for DataTables to show the number
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.formatNumber
			 *
			 *  @example
			 *    // Format a number using a single quote for the separator (note that
			 *    // this can also be done with the language.thousands option)
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "formatNumber": function ( toFormat ) {
			 *          return toFormat.toString().replace(
			 *            /\B(?=(\d{3})+(?!\d))/g, "'"
			 *          );
			 *        };
			 *      } );
			 *    } );
			 */
			"fnFormatNumber": function ( toFormat ) {
				return toFormat.toString().replace(
					/\B(?=(\d{3})+(?!\d))/g,
					this.oLanguage.sThousands
				);
			},
		
		
			/**
			 * This function is called on every 'draw' event, and allows you to
			 * dynamically modify the header row. This can be used to calculate and
			 * display useful information about the table.
			 *  @type function
			 *  @param {node} head "TR" element for the header
			 *  @param {array} data Full table data (as derived from the original HTML)
			 *  @param {int} start Index for the current display starting point in the
			 *    display array
			 *  @param {int} end Index for the current display ending point in the
			 *    display array
			 *  @param {array int} display Index array to translate the visual position
			 *    to the full data array
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.headerCallback
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "fheaderCallback": function( head, data, start, end, display ) {
			 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
			 *        }
			 *      } );
			 *    } )
			 */
			"fnHeaderCallback": null,
		
		
			/**
			 * The information element can be used to convey information about the current
			 * state of the table. Although the internationalisation options presented by
			 * DataTables are quite capable of dealing with most customisations, there may
			 * be times where you wish to customise the string further. This callback
			 * allows you to do exactly that.
			 *  @type function
			 *  @param {object} oSettings DataTables settings object
			 *  @param {int} start Starting position in data for the draw
			 *  @param {int} end End position in data for the draw
			 *  @param {int} max Total number of rows in the table (regardless of
			 *    filtering)
			 *  @param {int} total Total number of rows in the data set, after filtering
			 *  @param {string} pre The string that DataTables has formatted using it's
			 *    own rules
			 *  @returns {string} The string to be displayed in the information element.
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.infoCallback
			 *
			 *  @example
			 *    $('#example').dataTable( {
			 *      "infoCallback": function( settings, start, end, max, total, pre ) {
			 *        return start +" to "+ end;
			 *      }
			 *    } );
			 */
			"fnInfoCallback": null,
		
		
			/**
			 * Called when the table has been initialised. Normally DataTables will
			 * initialise sequentially and there will be no need for this function,
			 * however, this does not hold true when using external language information
			 * since that is obtained using an async XHR call.
			 *  @type function
			 *  @param {object} settings DataTables settings object
			 *  @param {object} json The JSON object request from the server - only
			 *    present if client-side Ajax sourced data is used
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.initComplete
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "initComplete": function(settings, json) {
			 *          alert( 'DataTables has finished its initialisation.' );
			 *        }
			 *      } );
			 *    } )
			 */
			"fnInitComplete": null,
		
		
			/**
			 * Called at the very start of each table draw and can be used to cancel the
			 * draw by returning false, any other return (including undefined) results in
			 * the full draw occurring).
			 *  @type function
			 *  @param {object} settings DataTables settings object
			 *  @returns {boolean} False will cancel the draw, anything else (including no
			 *    return) will allow it to complete.
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.preDrawCallback
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "preDrawCallback": function( settings ) {
			 *          if ( $('#test').val() == 1 ) {
			 *            return false;
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"fnPreDrawCallback": null,
		
		
			/**
			 * This function allows you to 'post process' each row after it have been
			 * generated for each table draw, but before it is rendered on screen. This
			 * function might be used for setting the row class name etc.
			 *  @type function
			 *  @param {node} row "TR" element for the current row
			 *  @param {array} data Raw data array for this row
			 *  @param {int} displayIndex The display index for the current table draw
			 *  @param {int} displayIndexFull The index of the data in the full list of
			 *    rows (after filtering)
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.rowCallback
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
			 *          // Bold the grade for all 'A' grade browsers
			 *          if ( data[4] == "A" ) {
			 *            $('td:eq(4)', row).html( '<b>A</b>' );
			 *          }
			 *        }
			 *      } );
			 *    } );
			 */
			"fnRowCallback": null,
		
		
			/**
			 * __Deprecated__ The functionality provided by this parameter has now been
			 * superseded by that provided through `ajax`, which should be used instead.
			 *
			 * This parameter allows you to override the default function which obtains
			 * the data from the server so something more suitable for your application.
			 * For example you could use POST data, or pull information from a Gears or
			 * AIR database.
			 *  @type function
			 *  @member
			 *  @param {string} source HTTP source to obtain the data from (`ajax`)
			 *  @param {array} data A key/value pair object containing the data to send
			 *    to the server
			 *  @param {function} callback to be called on completion of the data get
			 *    process that will draw the data on the page.
			 *  @param {object} settings DataTables settings object
			 *
			 *  @dtopt Callbacks
			 *  @dtopt Server-side
			 *  @name DataTable.defaults.serverData
			 *
			 *  @deprecated 1.10. Please use `ajax` for this functionality now.
			 */
			"fnServerData": null,
		
		
			/**
			 * __Deprecated__ The functionality provided by this parameter has now been
			 * superseded by that provided through `ajax`, which should be used instead.
			 *
			 *  It is often useful to send extra data to the server when making an Ajax
			 * request - for example custom filtering information, and this callback
			 * function makes it trivial to send extra information to the server. The
			 * passed in parameter is the data set that has been constructed by
			 * DataTables, and you can add to this or modify it as you require.
			 *  @type function
			 *  @param {array} data Data array (array of objects which are name/value
			 *    pairs) that has been constructed by DataTables and will be sent to the
			 *    server. In the case of Ajax sourced data with server-side processing
			 *    this will be an empty array, for server-side processing there will be a
			 *    significant number of parameters!
			 *  @returns {undefined} Ensure that you modify the data array passed in,
			 *    as this is passed by reference.
			 *
			 *  @dtopt Callbacks
			 *  @dtopt Server-side
			 *  @name DataTable.defaults.serverParams
			 *
			 *  @deprecated 1.10. Please use `ajax` for this functionality now.
			 */
			"fnServerParams": null,
		
		
			/**
			 * Load the table state. With this function you can define from where, and how, the
			 * state of a table is loaded. By default DataTables will load from `localStorage`
			 * but you might wish to use a server-side database or cookies.
			 *  @type function
			 *  @member
			 *  @param {object} settings DataTables settings object
			 *  @param {object} callback Callback that can be executed when done. It
			 *    should be passed the loaded state object.
			 *  @return {object} The DataTables state object to be loaded
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.stateLoadCallback
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stateSave": true,
			 *        "stateLoadCallback": function (settings, callback) {
			 *          $.ajax( {
			 *            "url": "/state_load",
			 *            "dataType": "json",
			 *            "success": function (json) {
			 *              callback( json );
			 *            }
			 *          } );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateLoadCallback": function ( settings ) {
				try {
					return JSON.parse(
						(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
							'DataTables_'+settings.sInstance+'_'+location.pathname
						)
					);
				} catch (e) {
					return {};
				}
			},
		
		
			/**
			 * Callback which allows modification of the saved state prior to loading that state.
			 * This callback is called when the table is loading state from the stored data, but
			 * prior to the settings object being modified by the saved state. Note that for
			 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
			 * a plug-in.
			 *  @type function
			 *  @param {object} settings DataTables settings object
			 *  @param {object} data The state object that is to be loaded
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.stateLoadParams
			 *
			 *  @example
			 *    // Remove a saved filter, so filtering is never loaded
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stateSave": true,
			 *        "stateLoadParams": function (settings, data) {
			 *          data.oSearch.sSearch = "";
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Disallow state loading by returning false
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stateSave": true,
			 *        "stateLoadParams": function (settings, data) {
			 *          return false;
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateLoadParams": null,
		
		
			/**
			 * Callback that is called when the state has been loaded from the state saving method
			 * and the DataTables settings object has been modified as a result of the loaded state.
			 *  @type function
			 *  @param {object} settings DataTables settings object
			 *  @param {object} data The state object that was loaded
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.stateLoaded
			 *
			 *  @example
			 *    // Show an alert with the filtering value that was saved
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stateSave": true,
			 *        "stateLoaded": function (settings, data) {
			 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateLoaded": null,
		
		
			/**
			 * Save the table state. This function allows you to define where and how the state
			 * information for the table is stored By default DataTables will use `localStorage`
			 * but you might wish to use a server-side database or cookies.
			 *  @type function
			 *  @member
			 *  @param {object} settings DataTables settings object
			 *  @param {object} data The state object to be saved
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.stateSaveCallback
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stateSave": true,
			 *        "stateSaveCallback": function (settings, data) {
			 *          // Send an Ajax request to the server with the state object
			 *          $.ajax( {
			 *            "url": "/state_save",
			 *            "data": data,
			 *            "dataType": "json",
			 *            "method": "POST"
			 *            "success": function () {}
			 *          } );
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateSaveCallback": function ( settings, data ) {
				try {
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
						'DataTables_'+settings.sInstance+'_'+location.pathname,
						JSON.stringify( data )
					);
				} catch (e) {}
			},
		
		
			/**
			 * Callback which allows modification of the state to be saved. Called when the table
			 * has changed state a new state save is required. This method allows modification of
			 * the state saving object prior to actually doing the save, including addition or
			 * other state properties or modification. Note that for plug-in authors, you should
			 * use the `stateSaveParams` event to save parameters for a plug-in.
			 *  @type function
			 *  @param {object} settings DataTables settings object
			 *  @param {object} data The state object to be saved
			 *
			 *  @dtopt Callbacks
			 *  @name DataTable.defaults.stateSaveParams
			 *
			 *  @example
			 *    // Remove a saved filter, so filtering is never saved
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stateSave": true,
			 *        "stateSaveParams": function (settings, data) {
			 *          data.oSearch.sSearch = "";
			 *        }
			 *      } );
			 *    } );
			 */
			"fnStateSaveParams": null,
		
		
			/**
			 * Duration for which the saved state information is considered valid. After this period
			 * has elapsed the state will be returned to the default.
			 * Value is given in seconds.
			 *  @type int
			 *  @default 7200 <i>(2 hours)</i>
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.stateDuration
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "stateDuration": 60*60*24; // 1 day
			 *      } );
			 *    } )
			 */
			"iStateDuration": 7200,
		
		
			/**
			 * When enabled DataTables will not make a request to the server for the first
			 * page draw - rather it will use the data already on the page (no sorting etc
			 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
			 * is used to indicate that deferred loading is required, but it is also used
			 * to tell DataTables how many records there are in the full table (allowing
			 * the information element and pagination to be displayed correctly). In the case
			 * where a filtering is applied to the table on initial load, this can be
			 * indicated by giving the parameter as an array, where the first element is
			 * the number of records available after filtering and the second element is the
			 * number of records without filtering (allowing the table information element
			 * to be shown correctly).
			 *  @type int | array
			 *  @default null
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.deferLoading
			 *
			 *  @example
			 *    // 57 records available in the table, no filtering applied
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "serverSide": true,
			 *        "ajax": "scripts/server_processing.php",
			 *        "deferLoading": 57
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "serverSide": true,
			 *        "ajax": "scripts/server_processing.php",
			 *        "deferLoading": [ 57, 100 ],
			 *        "search": {
			 *          "search": "my_filter"
			 *        }
			 *      } );
			 *    } );
			 */
			"iDeferLoading": null,
		
		
			/**
			 * Number of rows to display on a single page when using pagination. If
			 * feature enabled (`lengthChange`) then the end user will be able to override
			 * this to a custom setting using a pop-up menu.
			 *  @type int
			 *  @default 10
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.pageLength
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "pageLength": 50
			 *      } );
			 *    } )
			 */
			"iDisplayLength": 10,
		
		
			/**
			 * Define the starting point for data display when using DataTables with
			 * pagination. Note that this parameter is the number of records, rather than
			 * the page number, so if you have 10 records per page and want to start on
			 * the third page, it should be "20".
			 *  @type int
			 *  @default 0
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.displayStart
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "displayStart": 20
			 *      } );
			 *    } )
			 */
			"iDisplayStart": 0,
		
		
			/**
			 * By default DataTables allows keyboard navigation of the table (sorting, paging,
			 * and filtering) by adding a `tabindex` attribute to the required elements. This
			 * allows you to tab through the controls and press the enter key to activate them.
			 * The tabindex is default 0, meaning that the tab follows the flow of the document.
			 * You can overrule this using this parameter if you wish. Use a value of -1 to
			 * disable built-in keyboard navigation.
			 *  @type int
			 *  @default 0
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.tabIndex
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "tabIndex": 1
			 *      } );
			 *    } );
			 */
			"iTabIndex": 0,
		
		
			/**
			 * Classes that DataTables assigns to the various components and features
			 * that it adds to the HTML table. This allows classes to be configured
			 * during initialisation in addition to through the static
			 * {@link DataTable.ext.oStdClasses} object).
			 *  @namespace
			 *  @name DataTable.defaults.classes
			 */
			"oClasses": {},
		
		
			/**
			 * All strings that DataTables uses in the user interface that it creates
			 * are defined in this object, allowing you to modified them individually or
			 * completely replace them all as required.
			 *  @namespace
			 *  @name DataTable.defaults.language
			 */
			"oLanguage": {
				/**
				 * Strings that are used for WAI-ARIA labels and controls only (these are not
				 * actually visible on the page, but will be read by screenreaders, and thus
				 * must be internationalised as well).
				 *  @namespace
				 *  @name DataTable.defaults.language.aria
				 */
				"oAria": {
					/**
					 * ARIA label that is added to the table headers when the column may be
					 * sorted ascending by activing the column (click or return when focused).
					 * Note that the column header is prefixed to this string.
					 *  @type string
					 *  @default : activate to sort column ascending
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.aria.sortAscending
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "aria": {
					 *            "sortAscending": " - click/return to sort ascending"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sSortAscending": ": activate to sort column ascending",
		
					/**
					 * ARIA label that is added to the table headers when the column may be
					 * sorted descending by activing the column (click or return when focused).
					 * Note that the column header is prefixed to this string.
					 *  @type string
					 *  @default : activate to sort column ascending
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.aria.sortDescending
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "aria": {
					 *            "sortDescending": " - click/return to sort descending"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sSortDescending": ": activate to sort column descending"
				},
		
				/**
				 * Pagination string used by DataTables for the built-in pagination
				 * control types.
				 *  @namespace
				 *  @name DataTable.defaults.language.paginate
				 */
				"oPaginate": {
					/**
					 * Text to use when using the 'full_numbers' type of pagination for the
					 * button to take the user to the first page.
					 *  @type string
					 *  @default First
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.paginate.first
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "paginate": {
					 *            "first": "First page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sFirst": "First",
		
		
					/**
					 * Text to use when using the 'full_numbers' type of pagination for the
					 * button to take the user to the last page.
					 *  @type string
					 *  @default Last
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.paginate.last
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "paginate": {
					 *            "last": "Last page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sLast": "Last",
		
		
					/**
					 * Text to use for the 'next' pagination button (to take the user to the
					 * next page).
					 *  @type string
					 *  @default Next
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.paginate.next
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "paginate": {
					 *            "next": "Next page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sNext": "Next",
		
		
					/**
					 * Text to use for the 'previous' pagination button (to take the user to
					 * the previous page).
					 *  @type string
					 *  @default Previous
					 *
					 *  @dtopt Language
					 *  @name DataTable.defaults.language.paginate.previous
					 *
					 *  @example
					 *    $(document).ready( function() {
					 *      $('#example').dataTable( {
					 *        "language": {
					 *          "paginate": {
					 *            "previous": "Previous page"
					 *          }
					 *        }
					 *      } );
					 *    } );
					 */
					"sPrevious": "Previous"
				},
		
				/**
				 * This string is shown in preference to `zeroRecords` when the table is
				 * empty of data (regardless of filtering). Note that this is an optional
				 * parameter - if it is not given, the value of `zeroRecords` will be used
				 * instead (either the default or given value).
				 *  @type string
				 *  @default No data available in table
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.emptyTable
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "emptyTable": "No data available in table"
				 *        }
				 *      } );
				 *    } );
				 */
				"sEmptyTable": "No data available in table",
		
		
				/**
				 * This string gives information to the end user about the information
				 * that is current on display on the page. The following tokens can be
				 * used in the string and will be dynamically replaced as the table
				 * display updates. This tokens can be placed anywhere in the string, or
				 * removed as needed by the language requires:
				 *
				 * * `\_START\_` - Display index of the first record on the current page
				 * * `\_END\_` - Display index of the last record on the current page
				 * * `\_TOTAL\_` - Number of records in the table after filtering
				 * * `\_MAX\_` - Number of records in the table without filtering
				 * * `\_PAGE\_` - Current page number
				 * * `\_PAGES\_` - Total number of pages of data in the table
				 *
				 *  @type string
				 *  @default Showing _START_ to _END_ of _TOTAL_ entries
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.info
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "info": "Showing page _PAGE_ of _PAGES_"
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
		
		
				/**
				 * Display information string for when the table is empty. Typically the
				 * format of this string should match `info`.
				 *  @type string
				 *  @default Showing 0 to 0 of 0 entries
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.infoEmpty
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "infoEmpty": "No entries to show"
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfoEmpty": "Showing 0 to 0 of 0 entries",
		
		
				/**
				 * When a user filters the information in a table, this string is appended
				 * to the information (`info`) to give an idea of how strong the filtering
				 * is. The variable _MAX_ is dynamically updated.
				 *  @type string
				 *  @default (filtered from _MAX_ total entries)
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.infoFiltered
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "infoFiltered": " - filtering from _MAX_ records"
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfoFiltered": "(filtered from _MAX_ total entries)",
		
		
				/**
				 * If can be useful to append extra information to the info string at times,
				 * and this variable does exactly that. This information will be appended to
				 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
				 * being used) at all times.
				 *  @type string
				 *  @default <i>Empty string</i>
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.infoPostFix
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "infoPostFix": "All records shown are derived from real information."
				 *        }
				 *      } );
				 *    } );
				 */
				"sInfoPostFix": "",
		
		
				/**
				 * This decimal place operator is a little different from the other
				 * language options since DataTables doesn't output floating point
				 * numbers, so it won't ever use this for display of a number. Rather,
				 * what this parameter does is modify the sort methods of the table so
				 * that numbers which are in a format which has a character other than
				 * a period (`.`) as a decimal place will be sorted numerically.
				 *
				 * Note that numbers with different decimal places cannot be shown in
				 * the same table and still be sortable, the table must be consistent.
				 * However, multiple different tables on the page can use different
				 * decimal place characters.
				 *  @type string
				 *  @default 
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.decimal
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "decimal": ","
				 *          "thousands": "."
				 *        }
				 *      } );
				 *    } );
				 */
				"sDecimal": "",
		
		
				/**
				 * DataTables has a build in number formatter (`formatNumber`) which is
				 * used to format large numbers that are used in the table information.
				 * By default a comma is used, but this can be trivially changed to any
				 * character you wish with this parameter.
				 *  @type string
				 *  @default ,
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.thousands
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "thousands": "'"
				 *        }
				 *      } );
				 *    } );
				 */
				"sThousands": ",",
		
		
				/**
				 * Detail the action that will be taken when the drop down menu for the
				 * pagination length option is changed. The '_MENU_' variable is replaced
				 * with a default select list of 10, 25, 50 and 100, and can be replaced
				 * with a custom select box if required.
				 *  @type string
				 *  @default Show _MENU_ entries
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.lengthMenu
				 *
				 *  @example
				 *    // Language change only
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "lengthMenu": "Display _MENU_ records"
				 *        }
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Language and options change
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "lengthMenu": 'Display <select>'+
				 *            '<option value="10">10</option>'+
				 *            '<option value="20">20</option>'+
				 *            '<option value="30">30</option>'+
				 *            '<option value="40">40</option>'+
				 *            '<option value="50">50</option>'+
				 *            '<option value="-1">All</option>'+
				 *            '</select> records'
				 *        }
				 *      } );
				 *    } );
				 */
				"sLengthMenu": "Show _MENU_ entries",
		
		
				/**
				 * When using Ajax sourced data and during the first draw when DataTables is
				 * gathering the data, this message is shown in an empty row in the table to
				 * indicate to the end user the the data is being loaded. Note that this
				 * parameter is not used when loading data by server-side processing, just
				 * Ajax sourced data with client-side processing.
				 *  @type string
				 *  @default Loading...
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.loadingRecords
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "loadingRecords": "Please wait - loading..."
				 *        }
				 *      } );
				 *    } );
				 */
				"sLoadingRecords": "Loading...",
		
		
				/**
				 * Text which is displayed when the table is processing a user action
				 * (usually a sort command or similar).
				 *  @type string
				 *  @default Processing...
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.processing
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "processing": "DataTables is currently busy"
				 *        }
				 *      } );
				 *    } );
				 */
				"sProcessing": "Processing...",
		
		
				/**
				 * Details the actions that will be taken when the user types into the
				 * filtering input text box. The variable "_INPUT_", if used in the string,
				 * is replaced with the HTML text box for the filtering input allowing
				 * control over where it appears in the string. If "_INPUT_" is not given
				 * then the input box is appended to the string automatically.
				 *  @type string
				 *  @default Search:
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.search
				 *
				 *  @example
				 *    // Input text box will be appended at the end automatically
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "search": "Filter records:"
				 *        }
				 *      } );
				 *    } );
				 *
				 *  @example
				 *    // Specify where the filter should appear
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "search": "Apply filter _INPUT_ to table"
				 *        }
				 *      } );
				 *    } );
				 */
				"sSearch": "Search:",
		
		
				/**
				 * Assign a `placeholder` attribute to the search `input` element
				 *  @type string
				 *  @default 
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.searchPlaceholder
				 */
				"sSearchPlaceholder": "",
		
		
				/**
				 * All of the language information can be stored in a file on the
				 * server-side, which DataTables will look up if this parameter is passed.
				 * It must store the URL of the language file, which is in a JSON format,
				 * and the object has the same properties as the oLanguage object in the
				 * initialiser object (i.e. the above parameters). Please refer to one of
				 * the example language files to see how this works in action.
				 *  @type string
				 *  @default <i>Empty string - i.e. disabled</i>
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.url
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
				 *        }
				 *      } );
				 *    } );
				 */
				"sUrl": "",
		
		
				/**
				 * Text shown inside the table records when the is no information to be
				 * displayed after filtering. `emptyTable` is shown when there is simply no
				 * information in the table at all (regardless of filtering).
				 *  @type string
				 *  @default No matching records found
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.zeroRecords
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "zeroRecords": "No records to display"
				 *        }
				 *      } );
				 *    } );
				 */
				"sZeroRecords": "No matching records found"
			},
		
		
			/**
			 * This parameter allows you to have define the global filtering state at
			 * initialisation time. As an object the `search` parameter must be
			 * defined, but all other parameters are optional. When `regex` is true,
			 * the search string will be treated as a regular expression, when false
			 * (default) it will be treated as a straight string. When `smart`
			 * DataTables will use it's smart filtering methods (to word match at
			 * any point in the data), when false this will not be done.
			 *  @namespace
			 *  @extends DataTable.models.oSearch
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.search
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "search": {"search": "Initial search"}
			 *      } );
			 *    } )
			 */
			"oSearch": $.extend( {}, DataTable.models.oSearch ),
		
		
			/**
			 * __Deprecated__ The functionality provided by this parameter has now been
			 * superseded by that provided through `ajax`, which should be used instead.
			 *
			 * By default DataTables will look for the property `data` (or `aaData` for
			 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
			 * source or for server-side processing - this parameter allows that
			 * property to be changed. You can use Javascript dotted object notation to
			 * get a data source for multiple levels of nesting.
			 *  @type string
			 *  @default data
			 *
			 *  @dtopt Options
			 *  @dtopt Server-side
			 *  @name DataTable.defaults.ajaxDataProp
			 *
			 *  @deprecated 1.10. Please use `ajax` for this functionality now.
			 */
			"sAjaxDataProp": "data",
		
		
			/**
			 * __Deprecated__ The functionality provided by this parameter has now been
			 * superseded by that provided through `ajax`, which should be used instead.
			 *
			 * You can instruct DataTables to load data from an external
			 * source using this parameter (use aData if you want to pass data in you
			 * already have). Simply provide a url a JSON object can be obtained from.
			 *  @type string
			 *  @default null
			 *
			 *  @dtopt Options
			 *  @dtopt Server-side
			 *  @name DataTable.defaults.ajaxSource
			 *
			 *  @deprecated 1.10. Please use `ajax` for this functionality now.
			 */
			"sAjaxSource": null,
		
		
			/**
			 * This initialisation variable allows you to specify exactly where in the
			 * DOM you want DataTables to inject the various controls it adds to the page
			 * (for example you might want the pagination controls at the top of the
			 * table). DIV elements (with or without a custom class) can also be added to
			 * aid styling. The follow syntax is used:
			 *   <ul>
			 *     <li>The following options are allowed:
			 *       <ul>
			 *         <li>'l' - Length changing</li>
			 *         <li>'f' - Filtering input</li>
			 *         <li>'t' - The table!</li>
			 *         <li>'i' - Information</li>
			 *         <li>'p' - Pagination</li>
			 *         <li>'r' - pRocessing</li>
			 *       </ul>
			 *     </li>
			 *     <li>The following constants are allowed:
			 *       <ul>
			 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
			 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
			 *       </ul>
			 *     </li>
			 *     <li>The following syntax is expected:
			 *       <ul>
			 *         <li>'&lt;' and '&gt;' - div elements</li>
			 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
			 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
			 *       </ul>
			 *     </li>
			 *     <li>Examples:
			 *       <ul>
			 *         <li>'&lt;"wrapper"flipt&gt;'</li>
			 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
			 *       </ul>
			 *     </li>
			 *   </ul>
			 *  @type string
			 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
			 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.dom
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
			 *      } );
			 *    } );
			 */
			"sDom": "lfrtip",
		
		
			/**
			 * Search delay option. This will throttle full table searches that use the
			 * DataTables provided search input element (it does not effect calls to
			 * `dt-api search()`, providing a delay before the search is made.
			 *  @type integer
			 *  @default 0
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.searchDelay
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "searchDelay": 200
			 *      } );
			 *    } )
			 */
			"searchDelay": null,
		
		
			/**
			 * DataTables features six different built-in options for the buttons to
			 * display for pagination control:
			 *
			 * * `numbers` - Page number buttons only
			 * * `simple` - 'Previous' and 'Next' buttons only
			 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
			 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
			 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
			 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
			 *  
			 * Further methods can be added using {@link DataTable.ext.oPagination}.
			 *  @type string
			 *  @default simple_numbers
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.pagingType
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "pagingType": "full_numbers"
			 *      } );
			 *    } )
			 */
			"sPaginationType": "simple_numbers",
		
		
			/**
			 * Enable horizontal scrolling. When a table is too wide to fit into a
			 * certain layout, or you have a large number of columns in the table, you
			 * can enable x-scrolling to show the table in a viewport, which can be
			 * scrolled. This property can be `true` which will allow the table to
			 * scroll horizontally when needed, or any CSS unit, or a number (in which
			 * case it will be treated as a pixel measurement). Setting as simply `true`
			 * is recommended.
			 *  @type boolean|string
			 *  @default <i>blank string - i.e. disabled</i>
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.scrollX
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "scrollX": true,
			 *        "scrollCollapse": true
			 *      } );
			 *    } );
			 */
			"sScrollX": "",
		
		
			/**
			 * This property can be used to force a DataTable to use more width than it
			 * might otherwise do when x-scrolling is enabled. For example if you have a
			 * table which requires to be well spaced, this parameter is useful for
			 * "over-sizing" the table, and thus forcing scrolling. This property can by
			 * any CSS unit, or a number (in which case it will be treated as a pixel
			 * measurement).
			 *  @type string
			 *  @default <i>blank string - i.e. disabled</i>
			 *
			 *  @dtopt Options
			 *  @name DataTable.defaults.scrollXInner
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "scrollX": "100%",
			 *        "scrollXInner": "110%"
			 *      } );
			 *    } );
			 */
			"sScrollXInner": "",
		
		
			/**
			 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
			 * to the given height, and enable scrolling for any data which overflows the
			 * current viewport. This can be used as an alternative to paging to display
			 * a lot of data in a small area (although paging and scrolling can both be
			 * enabled at the same time). This property can be any CSS unit, or a number
			 * (in which case it will be treated as a pixel measurement).
			 *  @type string
			 *  @default <i>blank string - i.e. disabled</i>
			 *
			 *  @dtopt Features
			 *  @name DataTable.defaults.scrollY
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "scrollY": "200px",
			 *        "paginate": false
			 *      } );
			 *    } );
			 */
			"sScrollY": "",
		
		
			/**
			 * __Deprecated__ The functionality provided by this parameter has now been
			 * superseded by that provided through `ajax`, which should be used instead.
			 *
			 * Set the HTTP method that is used to make the Ajax call for server-side
			 * processing or Ajax sourced data.
			 *  @type string
			 *  @default GET
			 *
			 *  @dtopt Options
			 *  @dtopt Server-side
			 *  @name DataTable.defaults.serverMethod
			 *
			 *  @deprecated 1.10. Please use `ajax` for this functionality now.
			 */
			"sServerMethod": "GET",
		
		
			/**
			 * DataTables makes use of renderers when displaying HTML elements for
			 * a table. These renderers can be added or modified by plug-ins to
			 * generate suitable mark-up for a site. For example the Bootstrap
			 * integration plug-in for DataTables uses a paging button renderer to
			 * display pagination buttons in the mark-up required by Bootstrap.
			 *
			 * For further information about the renderers available see
			 * DataTable.ext.renderer
			 *  @type string|object
			 *  @default null
			 *
			 *  @name DataTable.defaults.renderer
			 *
			 */
			"renderer": null,
		
		
			/**
			 * Set the data property name that DataTables should use to get a row's id
			 * to set as the `id` property in the node.
			 *  @type string
			 *  @default DT_RowId
			 *
			 *  @name DataTable.defaults.rowId
			 */
			"rowId": "DT_RowId"
		};
		
		_fnHungarianMap( DataTable.defaults );
		
		
		
		/*
		 * Developer note - See note in model.defaults.js about the use of Hungarian
		 * notation and camel case.
		 */
		
		/**
		 * Column options that can be given to DataTables at initialisation time.
		 *  @namespace
		 */
		DataTable.defaults.column = {
			/**
			 * Define which column(s) an order will occur on for this column. This
			 * allows a column's ordering to take multiple columns into account when
			 * doing a sort or use the data from a different column. For example first
			 * name / last name columns make sense to do a multi-column sort over the
			 * two columns.
			 *  @type array|int
			 *  @default null <i>Takes the value of the column index automatically</i>
			 *
			 *  @name DataTable.defaults.column.orderData
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
			 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
			 *          { "orderData": 2, "targets": [ 2 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "orderData": [ 0, 1 ] },
			 *          { "orderData": [ 1, 0 ] },
			 *          { "orderData": 2 },
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"aDataSort": null,
			"iDataSort": -1,
		
		
			/**
			 * You can control the default ordering direction, and even alter the
			 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
			 * using this parameter.
			 *  @type array
			 *  @default [ 'asc', 'desc' ]
			 *
			 *  @name DataTable.defaults.column.orderSequence
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
			 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
			 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          null,
			 *          { "orderSequence": [ "asc" ] },
			 *          { "orderSequence": [ "desc", "asc", "asc" ] },
			 *          { "orderSequence": [ "desc" ] },
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"asSorting": [ 'asc', 'desc' ],
		
		
			/**
			 * Enable or disable filtering on the data in this column.
			 *  @type boolean
			 *  @default true
			 *
			 *  @name DataTable.defaults.column.searchable
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "searchable": false, "targets": [ 0 ] }
			 *        ] } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "searchable": false },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ] } );
			 *    } );
			 */
			"bSearchable": true,
		
		
			/**
			 * Enable or disable ordering on this column.
			 *  @type boolean
			 *  @default true
			 *
			 *  @name DataTable.defaults.column.orderable
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "orderable": false, "targets": [ 0 ] }
			 *        ] } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "orderable": false },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ] } );
			 *    } );
			 */
			"bSortable": true,
		
		
			/**
			 * Enable or disable the display of this column.
			 *  @type boolean
			 *  @default true
			 *
			 *  @name DataTable.defaults.column.visible
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "visible": false, "targets": [ 0 ] }
			 *        ] } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "visible": false },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ] } );
			 *    } );
			 */
			"bVisible": true,
		
		
			/**
			 * Developer definable function that is called whenever a cell is created (Ajax source,
			 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
			 * allowing you to modify the DOM element (add background colour for example) when the
			 * element is available.
			 *  @type function
			 *  @param {element} td The TD node that has been created
			 *  @param {*} cellData The Data for the cell
			 *  @param {array|object} rowData The data for the whole row
			 *  @param {int} row The row index for the aoData data store
			 *  @param {int} col The column index for aoColumns
			 *
			 *  @name DataTable.defaults.column.createdCell
			 *  @dtopt Columns
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [3],
			 *          "createdCell": function (td, cellData, rowData, row, col) {
			 *            if ( cellData == "1.7" ) {
			 *              $(td).css('color', 'blue')
			 *            }
			 *          }
			 *        } ]
			 *      });
			 *    } );
			 */
			"fnCreatedCell": null,
		
		
			/**
			 * This parameter has been replaced by `data` in DataTables to ensure naming
			 * consistency. `dataProp` can still be used, as there is backwards
			 * compatibility in DataTables for this option, but it is strongly
			 * recommended that you use `data` in preference to `dataProp`.
			 *  @name DataTable.defaults.column.dataProp
			 */
		
		
			/**
			 * This property can be used to read data from any data source property,
			 * including deeply nested objects / properties. `data` can be given in a
			 * number of different ways which effect its behaviour:
			 *
			 * * `integer` - treated as an array index for the data source. This is the
			 *   default that DataTables uses (incrementally increased for each column).
			 * * `string` - read an object property from the data source. There are
			 *   three 'special' options that can be used in the string to alter how
			 *   DataTables reads the data from the source object:
			 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
			 *      Javascript to read from nested objects, so to can the options
			 *      specified in `data`. For example: `browser.version` or
			 *      `browser.name`. If your object parameter name contains a period, use
			 *      `\\` to escape it - i.e. `first\\.name`.
			 *    * `[]` - Array notation. DataTables can automatically combine data
			 *      from and array source, joining the data with the characters provided
			 *      between the two brackets. For example: `name[, ]` would provide a
			 *      comma-space separated list from the source array. If no characters
			 *      are provided between the brackets, the original array source is
			 *      returned.
			 *    * `()` - Function notation. Adding `()` to the end of a parameter will
			 *      execute a function of the name given. For example: `browser()` for a
			 *      simple function on the data source, `browser.version()` for a
			 *      function in a nested property or even `browser().version` to get an
			 *      object property if the function called returns an object. Note that
			 *      function notation is recommended for use in `render` rather than
			 *      `data` as it is much simpler to use as a renderer.
			 * * `null` - use the original data source for the row rather than plucking
			 *   data directly from it. This action has effects on two other
			 *   initialisation options:
			 *    * `defaultContent` - When null is given as the `data` option and
			 *      `defaultContent` is specified for the column, the value defined by
			 *      `defaultContent` will be used for the cell.
			 *    * `render` - When null is used for the `data` option and the `render`
			 *      option is specified for the column, the whole data source for the
			 *      row is used for the renderer.
			 * * `function` - the function given will be executed whenever DataTables
			 *   needs to set or get the data for a cell in the column. The function
			 *   takes three parameters:
			 *    * Parameters:
			 *      * `{array|object}` The data source for the row
			 *      * `{string}` The type call data requested - this will be 'set' when
			 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
			 *        when gathering data. Note that when `undefined` is given for the
			 *        type DataTables expects to get the raw data for the object back<
			 *      * `{*}` Data to set when the second parameter is 'set'.
			 *    * Return:
			 *      * The return value from the function is not required when 'set' is
			 *        the type of call, but otherwise the return is what will be used
			 *        for the data requested.
			 *
			 * Note that `data` is a getter and setter option. If you just require
			 * formatting of data for output, you will likely want to use `render` which
			 * is simply a getter and thus simpler to use.
			 *
			 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
			 * name change reflects the flexibility of this property and is consistent
			 * with the naming of mRender. If 'mDataProp' is given, then it will still
			 * be used by DataTables, as it automatically maps the old name to the new
			 * if required.
			 *
			 *  @type string|int|function|null
			 *  @default null <i>Use automatically calculated column index</i>
			 *
			 *  @name DataTable.defaults.column.data
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Read table data from objects
			 *    // JSON structure for each row:
			 *    //   {
			 *    //      "engine": {value},
			 *    //      "browser": {value},
			 *    //      "platform": {value},
			 *    //      "version": {value},
			 *    //      "grade": {value}
			 *    //   }
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "ajaxSource": "sources/objects.txt",
			 *        "columns": [
			 *          { "data": "engine" },
			 *          { "data": "browser" },
			 *          { "data": "platform" },
			 *          { "data": "version" },
			 *          { "data": "grade" }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Read information from deeply nested objects
			 *    // JSON structure for each row:
			 *    //   {
			 *    //      "engine": {value},
			 *    //      "browser": {value},
			 *    //      "platform": {
			 *    //         "inner": {value}
			 *    //      },
			 *    //      "details": [
			 *    //         {value}, {value}
			 *    //      ]
			 *    //   }
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "ajaxSource": "sources/deep.txt",
			 *        "columns": [
			 *          { "data": "engine" },
			 *          { "data": "browser" },
			 *          { "data": "platform.inner" },
			 *          { "data": "details.0" },
			 *          { "data": "details.1" }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `data` as a function to provide different information for
			 *    // sorting, filtering and display. In this case, currency (price)
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [ 0 ],
			 *          "data": function ( source, type, val ) {
			 *            if (type === 'set') {
			 *              source.price = val;
			 *              // Store the computed dislay and filter values for efficiency
			 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
			 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
			 *              return;
			 *            }
			 *            else if (type === 'display') {
			 *              return source.price_display;
			 *            }
			 *            else if (type === 'filter') {
			 *              return source.price_filter;
			 *            }
			 *            // 'sort', 'type' and undefined all just use the integer
			 *            return source.price;
			 *          }
			 *        } ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using default content
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [ 0 ],
			 *          "data": null,
			 *          "defaultContent": "Click to edit"
			 *        } ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using array notation - outputting a list from an array
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [ 0 ],
			 *          "data": "name[, ]"
			 *        } ]
			 *      } );
			 *    } );
			 *
			 */
			"mData": null,
		
		
			/**
			 * This property is the rendering partner to `data` and it is suggested that
			 * when you want to manipulate data for display (including filtering,
			 * sorting etc) without altering the underlying data for the table, use this
			 * property. `render` can be considered to be the the read only companion to
			 * `data` which is read / write (then as such more complex). Like `data`
			 * this option can be given in a number of different ways to effect its
			 * behaviour:
			 *
			 * * `integer` - treated as an array index for the data source. This is the
			 *   default that DataTables uses (incrementally increased for each column).
			 * * `string` - read an object property from the data source. There are
			 *   three 'special' options that can be used in the string to alter how
			 *   DataTables reads the data from the source object:
			 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
			 *      Javascript to read from nested objects, so to can the options
			 *      specified in `data`. For example: `browser.version` or
			 *      `browser.name`. If your object parameter name contains a period, use
			 *      `\\` to escape it - i.e. `first\\.name`.
			 *    * `[]` - Array notation. DataTables can automatically combine data
			 *      from and array source, joining the data with the characters provided
			 *      between the two brackets. For example: `name[, ]` would provide a
			 *      comma-space separated list from the source array. If no characters
			 *      are provided between the brackets, the original array source is
			 *      returned.
			 *    * `()` - Function notation. Adding `()` to the end of a parameter will
			 *      execute a function of the name given. For example: `browser()` for a
			 *      simple function on the data source, `browser.version()` for a
			 *      function in a nested property or even `browser().version` to get an
			 *      object property if the function called returns an object.
			 * * `object` - use different data for the different data types requested by
			 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
			 *   of the object is the data type the property refers to and the value can
			 *   defined using an integer, string or function using the same rules as
			 *   `render` normally does. Note that an `_` option _must_ be specified.
			 *   This is the default value to use if you haven't specified a value for
			 *   the data type requested by DataTables.
			 * * `function` - the function given will be executed whenever DataTables
			 *   needs to set or get the data for a cell in the column. The function
			 *   takes three parameters:
			 *    * Parameters:
			 *      * {array|object} The data source for the row (based on `data`)
			 *      * {string} The type call data requested - this will be 'filter',
			 *        'display', 'type' or 'sort'.
			 *      * {array|object} The full data source for the row (not based on
			 *        `data`)
			 *    * Return:
			 *      * The return value from the function is what will be used for the
			 *        data requested.
			 *
			 *  @type string|int|function|object|null
			 *  @default null Use the data source value.
			 *
			 *  @name DataTable.defaults.column.render
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Create a comma separated list from an array of objects
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "ajaxSource": "sources/deep.txt",
			 *        "columns": [
			 *          { "data": "engine" },
			 *          { "data": "browser" },
			 *          {
			 *            "data": "platform",
			 *            "render": "[, ].name"
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Execute a function to obtain data
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [ 0 ],
			 *          "data": null, // Use the full data source object for the renderer's source
			 *          "render": "browserName()"
			 *        } ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // As an object, extracting different data for the different types
			 *    // This would be used with a data source such as:
			 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
			 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
			 *    // (which has both forms) is used for filtering for if a user inputs either format, while
			 *    // the formatted phone number is the one that is shown in the table.
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [ 0 ],
			 *          "data": null, // Use the full data source object for the renderer's source
			 *          "render": {
			 *            "_": "phone",
			 *            "filter": "phone_filter",
			 *            "display": "phone_display"
			 *          }
			 *        } ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Use as a function to create a link from the data source
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [ 0 ],
			 *          "data": "download_link",
			 *          "render": function ( data, type, full ) {
			 *            return '<a href="'+data+'">Download</a>';
			 *          }
			 *        } ]
			 *      } );
			 *    } );
			 */
			"mRender": null,
		
		
			/**
			 * Change the cell type created for the column - either TD cells or TH cells. This
			 * can be useful as TH cells have semantic meaning in the table body, allowing them
			 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
			 *  @type string
			 *  @default td
			 *
			 *  @name DataTable.defaults.column.cellType
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Make the first column use TH cells
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [ {
			 *          "targets": [ 0 ],
			 *          "cellType": "th"
			 *        } ]
			 *      } );
			 *    } );
			 */
			"sCellType": "td",
		
		
			/**
			 * Class to give to each cell in this column.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *
			 *  @name DataTable.defaults.column.class
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "class": "my_class", "targets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "class": "my_class" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sClass": "",
		
			/**
			 * When DataTables calculates the column widths to assign to each column,
			 * it finds the longest string in each column and then constructs a
			 * temporary table and reads the widths from that. The problem with this
			 * is that "mmm" is much wider then "iiii", but the latter is a longer
			 * string - thus the calculation can go wrong (doing it properly and putting
			 * it into an DOM object and measuring that is horribly(!) slow). Thus as
			 * a "work around" we provide this option. It will append its value to the
			 * text that is found to be the longest string for the column - i.e. padding.
			 * Generally you shouldn't need this!
			 *  @type string
			 *  @default <i>Empty string<i>
			 *
			 *  @name DataTable.defaults.column.contentPadding
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          null,
			 *          null,
			 *          null,
			 *          {
			 *            "contentPadding": "mmm"
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sContentPadding": "",
		
		
			/**
			 * Allows a default value to be given for a column's data, and will be used
			 * whenever a null data source is encountered (this can be because `data`
			 * is set to null, or because the data source itself is null).
			 *  @type string
			 *  @default null
			 *
			 *  @name DataTable.defaults.column.defaultContent
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          {
			 *            "data": null,
			 *            "defaultContent": "Edit",
			 *            "targets": [ -1 ]
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          null,
			 *          null,
			 *          null,
			 *          {
			 *            "data": null,
			 *            "defaultContent": "Edit"
			 *          }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sDefaultContent": null,
		
		
			/**
			 * This parameter is only used in DataTables' server-side processing. It can
			 * be exceptionally useful to know what columns are being displayed on the
			 * client side, and to map these to database fields. When defined, the names
			 * also allow DataTables to reorder information from the server if it comes
			 * back in an unexpected order (i.e. if you switch your columns around on the
			 * client-side, your server-side code does not also need updating).
			 *  @type string
			 *  @default <i>Empty string</i>
			 *
			 *  @name DataTable.defaults.column.name
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "name": "engine", "targets": [ 0 ] },
			 *          { "name": "browser", "targets": [ 1 ] },
			 *          { "name": "platform", "targets": [ 2 ] },
			 *          { "name": "version", "targets": [ 3 ] },
			 *          { "name": "grade", "targets": [ 4 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "name": "engine" },
			 *          { "name": "browser" },
			 *          { "name": "platform" },
			 *          { "name": "version" },
			 *          { "name": "grade" }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sName": "",
		
		
			/**
			 * Defines a data source type for the ordering which can be used to read
			 * real-time information from the table (updating the internally cached
			 * version) prior to ordering. This allows ordering to occur on user
			 * editable elements such as form inputs.
			 *  @type string
			 *  @default std
			 *
			 *  @name DataTable.defaults.column.orderDataType
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
			 *          { "type": "numeric", "targets": [ 3 ] },
			 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
			 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          null,
			 *          null,
			 *          { "orderDataType": "dom-text" },
			 *          { "orderDataType": "dom-text", "type": "numeric" },
			 *          { "orderDataType": "dom-select" },
			 *          { "orderDataType": "dom-checkbox" }
			 *        ]
			 *      } );
			 *    } );
			 */
			"sSortDataType": "std",
		
		
			/**
			 * The title of this column.
			 *  @type string
			 *  @default null <i>Derived from the 'TH' value for this column in the
			 *    original HTML table.</i>
			 *
			 *  @name DataTable.defaults.column.title
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "title": "My column title", "targets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "title": "My column title" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sTitle": null,
		
		
			/**
			 * The type allows you to specify how the data for this column will be
			 * ordered. Four types (string, numeric, date and html (which will strip
			 * HTML tags before ordering)) are currently available. Note that only date
			 * formats understood by Javascript's Date() object will be accepted as type
			 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
			 * 'numeric', 'date' or 'html' (by default). Further types can be adding
			 * through plug-ins.
			 *  @type string
			 *  @default null <i>Auto-detected from raw data</i>
			 *
			 *  @name DataTable.defaults.column.type
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "type": "html", "targets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "type": "html" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sType": null,
		
		
			/**
			 * Defining the width of the column, this parameter may take any CSS value
			 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
			 * been given a specific width through this interface ensuring that the table
			 * remains readable.
			 *  @type string
			 *  @default null <i>Automatic</i>
			 *
			 *  @name DataTable.defaults.column.width
			 *  @dtopt Columns
			 *
			 *  @example
			 *    // Using `columnDefs`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columnDefs": [
			 *          { "width": "20%", "targets": [ 0 ] }
			 *        ]
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Using `columns`
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "columns": [
			 *          { "width": "20%" },
			 *          null,
			 *          null,
			 *          null,
			 *          null
			 *        ]
			 *      } );
			 *    } );
			 */
			"sWidth": null
		};
		
		_fnHungarianMap( DataTable.defaults.column );
		
		
		
		/**
		 * DataTables settings object - this holds all the information needed for a
		 * given table, including configuration, data and current application of the
		 * table options. DataTables does not have a single instance for each DataTable
		 * with the settings attached to that instance, but rather instances of the
		 * DataTable "class" are created on-the-fly as needed (typically by a
		 * $().dataTable() call) and the settings object is then applied to that
		 * instance.
		 *
		 * Note that this object is related to {@link DataTable.defaults} but this
		 * one is the internal data store for DataTables's cache of columns. It should
		 * NOT be manipulated outside of DataTables. Any configuration should be done
		 * through the initialisation options.
		 *  @namespace
		 *  @todo Really should attach the settings object to individual instances so we
		 *    don't need to create new instances on each $().dataTable() call (if the
		 *    table already exists). It would also save passing oSettings around and
		 *    into every single function. However, this is a very significant
		 *    architecture change for DataTables and will almost certainly break
		 *    backwards compatibility with older installations. This is something that
		 *    will be done in 2.0.
		 */
		DataTable.models.oSettings = {
			/**
			 * Primary features of DataTables and their enablement state.
			 *  @namespace
			 */
			"oFeatures": {
		
				/**
				 * Flag to say if DataTables should automatically try to calculate the
				 * optimum table and columns widths (true) or not (false).
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bAutoWidth": null,
		
				/**
				 * Delay the creation of TR and TD elements until they are actually
				 * needed by a driven page draw. This can give a significant speed
				 * increase for Ajax source and Javascript source data, but makes no
				 * difference at all fro DOM and server-side processing tables.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bDeferRender": null,
		
				/**
				 * Enable filtering on the table or not. Note that if this is disabled
				 * then there is no filtering at all on the table, including fnFilter.
				 * To just remove the filtering input use sDom and remove the 'f' option.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bFilter": null,
		
				/**
				 * Table information element (the 'Showing x of y records' div) enable
				 * flag.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bInfo": null,
		
				/**
				 * Present a user control allowing the end user to change the page size
				 * when pagination is enabled.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bLengthChange": null,
		
				/**
				 * Pagination enabled or not. Note that if this is disabled then length
				 * changing must also be disabled.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bPaginate": null,
		
				/**
				 * Processing indicator enable flag whenever DataTables is enacting a
				 * user request - typically an Ajax request for server-side processing.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bProcessing": null,
		
				/**
				 * Server-side processing enabled flag - when enabled DataTables will
				 * get all data from the server for every draw - there is no filtering,
				 * sorting or paging done on the client-side.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bServerSide": null,
		
				/**
				 * Sorting enablement flag.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bSort": null,
		
				/**
				 * Multi-column sorting
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bSortMulti": null,
		
				/**
				 * Apply a class to the columns which are being sorted to provide a
				 * visual highlight or not. This can slow things down when enabled since
				 * there is a lot of DOM interaction.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bSortClasses": null,
		
				/**
				 * State saving enablement flag.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bStateSave": null
			},
		
		
			/**
			 * Scrolling settings for a table.
			 *  @namespace
			 */
			"oScroll": {
				/**
				 * When the table is shorter in height than sScrollY, collapse the
				 * table container down to the height of the table (when true).
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type boolean
				 */
				"bCollapse": null,
		
				/**
				 * Width of the scrollbar for the web-browser's platform. Calculated
				 * during table initialisation.
				 *  @type int
				 *  @default 0
				 */
				"iBarWidth": 0,
		
				/**
				 * Viewport width for horizontal scrolling. Horizontal scrolling is
				 * disabled if an empty string.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 */
				"sX": null,
		
				/**
				 * Width to expand the table to when using x-scrolling. Typically you
				 * should not need to use this.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 *  @deprecated
				 */
				"sXInner": null,
		
				/**
				 * Viewport height for vertical scrolling. Vertical scrolling is disabled
				 * if an empty string.
				 * Note that this parameter will be set by the initialisation routine. To
				 * set a default use {@link DataTable.defaults}.
				 *  @type string
				 */
				"sY": null
			},
		
			/**
			 * Language information for the table.
			 *  @namespace
			 *  @extends DataTable.defaults.oLanguage
			 */
			"oLanguage": {
				/**
				 * Information callback function. See
				 * {@link DataTable.defaults.fnInfoCallback}
				 *  @type function
				 *  @default null
				 */
				"fnInfoCallback": null
			},
		
			/**
			 * Browser support parameters
			 *  @namespace
			 */
			"oBrowser": {
				/**
				 * Indicate if the browser incorrectly calculates width:100% inside a
				 * scrolling element (IE6/7)
				 *  @type boolean
				 *  @default false
				 */
				"bScrollOversize": false,
		
				/**
				 * Determine if the vertical scrollbar is on the right or left of the
				 * scrolling container - needed for rtl language layout, although not
				 * all browsers move the scrollbar (Safari).
				 *  @type boolean
				 *  @default false
				 */
				"bScrollbarLeft": false,
		
				/**
				 * Flag for if `getBoundingClientRect` is fully supported or not
				 *  @type boolean
				 *  @default false
				 */
				"bBounding": false,
		
				/**
				 * Browser scrollbar width
				 *  @type integer
				 *  @default 0
				 */
				"barWidth": 0
			},
		
		
			"ajax": null,
		
		
			/**
			 * Array referencing the nodes which are used for the features. The
			 * parameters of this object match what is allowed by sDom - i.e.
			 *   <ul>
			 *     <li>'l' - Length changing</li>
			 *     <li>'f' - Filtering input</li>
			 *     <li>'t' - The table!</li>
			 *     <li>'i' - Information</li>
			 *     <li>'p' - Pagination</li>
			 *     <li>'r' - pRocessing</li>
			 *   </ul>
			 *  @type array
			 *  @default []
			 */
			"aanFeatures": [],
		
			/**
			 * Store data information - see {@link DataTable.models.oRow} for detailed
			 * information.
			 *  @type array
			 *  @default []
			 */
			"aoData": [],
		
			/**
			 * Array of indexes which are in the current display (after filtering etc)
			 *  @type array
			 *  @default []
			 */
			"aiDisplay": [],
		
			/**
			 * Array of indexes for display - no filtering
			 *  @type array
			 *  @default []
			 */
			"aiDisplayMaster": [],
		
			/**
			 * Map of row ids to data indexes
			 *  @type object
			 *  @default {}
			 */
			"aIds": {},
		
			/**
			 * Store information about each column that is in use
			 *  @type array
			 *  @default []
			 */
			"aoColumns": [],
		
			/**
			 * Store information about the table's header
			 *  @type array
			 *  @default []
			 */
			"aoHeader": [],
		
			/**
			 * Store information about the table's footer
			 *  @type array
			 *  @default []
			 */
			"aoFooter": [],
		
			/**
			 * Store the applied global search information in case we want to force a
			 * research or compare the old search to a new one.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @namespace
			 *  @extends DataTable.models.oSearch
			 */
			"oPreviousSearch": {},
		
			/**
			 * Store the applied search for each column - see
			 * {@link DataTable.models.oSearch} for the format that is used for the
			 * filtering information for each column.
			 *  @type array
			 *  @default []
			 */
			"aoPreSearchCols": [],
		
			/**
			 * Sorting that is applied to the table. Note that the inner arrays are
			 * used in the following manner:
			 * <ul>
			 *   <li>Index 0 - column number</li>
			 *   <li>Index 1 - current sorting direction</li>
			 * </ul>
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array
			 *  @todo These inner arrays should really be objects
			 */
			"aaSorting": null,
		
			/**
			 * Sorting that is always applied to the table (i.e. prefixed in front of
			 * aaSorting).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array
			 *  @default []
			 */
			"aaSortingFixed": [],
		
			/**
			 * Classes to use for the striping of a table.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array
			 *  @default []
			 */
			"asStripeClasses": null,
		
			/**
			 * If restoring a table - we should restore its striping classes as well
			 *  @type array
			 *  @default []
			 */
			"asDestroyStripes": [],
		
			/**
			 * If restoring a table - we should restore its width
			 *  @type int
			 *  @default 0
			 */
			"sDestroyWidth": 0,
		
			/**
			 * Callback functions array for every time a row is inserted (i.e. on a draw).
			 *  @type array
			 *  @default []
			 */
			"aoRowCallback": [],
		
			/**
			 * Callback functions for the header on each draw.
			 *  @type array
			 *  @default []
			 */
			"aoHeaderCallback": [],
		
			/**
			 * Callback function for the footer on each draw.
			 *  @type array
			 *  @default []
			 */
			"aoFooterCallback": [],
		
			/**
			 * Array of callback functions for draw callback functions
			 *  @type array
			 *  @default []
			 */
			"aoDrawCallback": [],
		
			/**
			 * Array of callback functions for row created function
			 *  @type array
			 *  @default []
			 */
			"aoRowCreatedCallback": [],
		
			/**
			 * Callback functions for just before the table is redrawn. A return of
			 * false will be used to cancel the draw.
			 *  @type array
			 *  @default []
			 */
			"aoPreDrawCallback": [],
		
			/**
			 * Callback functions for when the table has been initialised.
			 *  @type array
			 *  @default []
			 */
			"aoInitComplete": [],
		
		
			/**
			 * Callbacks for modifying the settings to be stored for state saving, prior to
			 * saving state.
			 *  @type array
			 *  @default []
			 */
			"aoStateSaveParams": [],
		
			/**
			 * Callbacks for modifying the settings that have been stored for state saving
			 * prior to using the stored values to restore the state.
			 *  @type array
			 *  @default []
			 */
			"aoStateLoadParams": [],
		
			/**
			 * Callbacks for operating on the settings object once the saved state has been
			 * loaded
			 *  @type array
			 *  @default []
			 */
			"aoStateLoaded": [],
		
			/**
			 * Cache the table ID for quick access
			 *  @type string
			 *  @default <i>Empty string</i>
			 */
			"sTableId": "",
		
			/**
			 * The TABLE node for the main table
			 *  @type node
			 *  @default null
			 */
			"nTable": null,
		
			/**
			 * Permanent ref to the thead element
			 *  @type node
			 *  @default null
			 */
			"nTHead": null,
		
			/**
			 * Permanent ref to the tfoot element - if it exists
			 *  @type node
			 *  @default null
			 */
			"nTFoot": null,
		
			/**
			 * Permanent ref to the tbody element
			 *  @type node
			 *  @default null
			 */
			"nTBody": null,
		
			/**
			 * Cache the wrapper node (contains all DataTables controlled elements)
			 *  @type node
			 *  @default null
			 */
			"nTableWrapper": null,
		
			/**
			 * Indicate if when using server-side processing the loading of data
			 * should be deferred until the second draw.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 *  @default false
			 */
			"bDeferLoading": false,
		
			/**
			 * Indicate if all required information has been read in
			 *  @type boolean
			 *  @default false
			 */
			"bInitialised": false,
		
			/**
			 * Information about open rows. Each object in the array has the parameters
			 * 'nTr' and 'nParent'
			 *  @type array
			 *  @default []
			 */
			"aoOpenRows": [],
		
			/**
			 * Dictate the positioning of DataTables' control elements - see
			 * {@link DataTable.model.oInit.sDom}.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @default null
			 */
			"sDom": null,
		
			/**
			 * Search delay (in mS)
			 *  @type integer
			 *  @default null
			 */
			"searchDelay": null,
		
			/**
			 * Which type of pagination should be used.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @default two_button
			 */
			"sPaginationType": "two_button",
		
			/**
			 * The state duration (for `stateSave`) in seconds.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type int
			 *  @default 0
			 */
			"iStateDuration": 0,
		
			/**
			 * Array of callback functions for state saving. Each array element is an
			 * object with the following parameters:
			 *   <ul>
			 *     <li>function:fn - function to call. Takes two parameters, oSettings
			 *       and the JSON string to save that has been thus far created. Returns
			 *       a JSON string to be inserted into a json object
			 *       (i.e. '"param": [ 0, 1, 2]')</li>
			 *     <li>string:sName - name of callback</li>
			 *   </ul>
			 *  @type array
			 *  @default []
			 */
			"aoStateSave": [],
		
			/**
			 * Array of callback functions for state loading. Each array element is an
			 * object with the following parameters:
			 *   <ul>
			 *     <li>function:fn - function to call. Takes two parameters, oSettings
			 *       and the object stored. May return false to cancel state loading</li>
			 *     <li>string:sName - name of callback</li>
			 *   </ul>
			 *  @type array
			 *  @default []
			 */
			"aoStateLoad": [],
		
			/**
			 * State that was saved. Useful for back reference
			 *  @type object
			 *  @default null
			 */
			"oSavedState": null,
		
			/**
			 * State that was loaded. Useful for back reference
			 *  @type object
			 *  @default null
			 */
			"oLoadedState": null,
		
			/**
			 * Source url for AJAX data for the table.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @default null
			 */
			"sAjaxSource": null,
		
			/**
			 * Property from a given object from which to read the table data from. This
			 * can be an empty string (when not server-side processing), in which case
			 * it is  assumed an an array is given directly.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sAjaxDataProp": null,
		
			/**
			 * Note if draw should be blocked while getting data
			 *  @type boolean
			 *  @default true
			 */
			"bAjaxDataGet": true,
		
			/**
			 * The last jQuery XHR object that was used for server-side data gathering.
			 * This can be used for working with the XHR information in one of the
			 * callbacks
			 *  @type object
			 *  @default null
			 */
			"jqXHR": null,
		
			/**
			 * JSON returned from the server in the last Ajax request
			 *  @type object
			 *  @default undefined
			 */
			"json": undefined,
		
			/**
			 * Data submitted as part of the last Ajax request
			 *  @type object
			 *  @default undefined
			 */
			"oAjaxData": undefined,
		
			/**
			 * Function to get the server-side data.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type function
			 */
			"fnServerData": null,
		
			/**
			 * Functions which are called prior to sending an Ajax request so extra
			 * parameters can easily be sent to the server
			 *  @type array
			 *  @default []
			 */
			"aoServerParams": [],
		
			/**
			 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
			 * required).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sServerMethod": null,
		
			/**
			 * Format numbers for display.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type function
			 */
			"fnFormatNumber": null,
		
			/**
			 * List of options that can be used for the user selectable length menu.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type array
			 *  @default []
			 */
			"aLengthMenu": null,
		
			/**
			 * Counter for the draws that the table does. Also used as a tracker for
			 * server-side processing
			 *  @type int
			 *  @default 0
			 */
			"iDraw": 0,
		
			/**
			 * Indicate if a redraw is being done - useful for Ajax
			 *  @type boolean
			 *  @default false
			 */
			"bDrawing": false,
		
			/**
			 * Draw index (iDraw) of the last error when parsing the returned data
			 *  @type int
			 *  @default -1
			 */
			"iDrawError": -1,
		
			/**
			 * Paging display length
			 *  @type int
			 *  @default 10
			 */
			"_iDisplayLength": 10,
		
			/**
			 * Paging start point - aiDisplay index
			 *  @type int
			 *  @default 0
			 */
			"_iDisplayStart": 0,
		
			/**
			 * Server-side processing - number of records in the result set
			 * (i.e. before filtering), Use fnRecordsTotal rather than
			 * this property to get the value of the number of records, regardless of
			 * the server-side processing setting.
			 *  @type int
			 *  @default 0
			 *  @private
			 */
			"_iRecordsTotal": 0,
		
			/**
			 * Server-side processing - number of records in the current display set
			 * (i.e. after filtering). Use fnRecordsDisplay rather than
			 * this property to get the value of the number of records, regardless of
			 * the server-side processing setting.
			 *  @type boolean
			 *  @default 0
			 *  @private
			 */
			"_iRecordsDisplay": 0,
		
			/**
			 * The classes to use for the table
			 *  @type object
			 *  @default {}
			 */
			"oClasses": {},
		
			/**
			 * Flag attached to the settings object so you can check in the draw
			 * callback if filtering has been done in the draw. Deprecated in favour of
			 * events.
			 *  @type boolean
			 *  @default false
			 *  @deprecated
			 */
			"bFiltered": false,
		
			/**
			 * Flag attached to the settings object so you can check in the draw
			 * callback if sorting has been done in the draw. Deprecated in favour of
			 * events.
			 *  @type boolean
			 *  @default false
			 *  @deprecated
			 */
			"bSorted": false,
		
			/**
			 * Indicate that if multiple rows are in the header and there is more than
			 * one unique cell per column, if the top one (true) or bottom one (false)
			 * should be used for sorting / title by DataTables.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortCellsTop": null,
		
			/**
			 * Initialisation object that is used for the table
			 *  @type object
			 *  @default null
			 */
			"oInit": null,
		
			/**
			 * Destroy callback functions - for plug-ins to attach themselves to the
			 * destroy so they can clean up markup and events.
			 *  @type array
			 *  @default []
			 */
			"aoDestroyCallback": [],
		
		
			/**
			 * Get the number of records in the current record set, before filtering
			 *  @type function
			 */
			"fnRecordsTotal": function ()
			{
				return _fnDataSource( this ) == 'ssp' ?
					this._iRecordsTotal * 1 :
					this.aiDisplayMaster.length;
			},
		
			/**
			 * Get the number of records in the current record set, after filtering
			 *  @type function
			 */
			"fnRecordsDisplay": function ()
			{
				return _fnDataSource( this ) == 'ssp' ?
					this._iRecordsDisplay * 1 :
					this.aiDisplay.length;
			},
		
			/**
			 * Get the display end point - aiDisplay index
			 *  @type function
			 */
			"fnDisplayEnd": function ()
			{
				var
					len      = this._iDisplayLength,
					start    = this._iDisplayStart,
					calc     = start + len,
					records  = this.aiDisplay.length,
					features = this.oFeatures,
					paginate = features.bPaginate;
		
				if ( features.bServerSide ) {
					return paginate === false || len === -1 ?
						start + records :
						Math.min( start+len, this._iRecordsDisplay );
				}
				else {
					return ! paginate || calc>records || len===-1 ?
						records :
						calc;
				}
			},
		
			/**
			 * The DataTables object for this table
			 *  @type object
			 *  @default null
			 */
			"oInstance": null,
		
			/**
			 * Unique identifier for each instance of the DataTables object. If there
			 * is an ID on the table node, then it takes that value, otherwise an
			 * incrementing internal counter is used.
			 *  @type string
			 *  @default null
			 */
			"sInstance": null,
		
			/**
			 * tabindex attribute value that is added to DataTables control elements, allowing
			 * keyboard navigation of the table and its controls.
			 */
			"iTabIndex": 0,
		
			/**
			 * DIV container for the footer scrolling table if scrolling
			 */
			"nScrollHead": null,
		
			/**
			 * DIV container for the footer scrolling table if scrolling
			 */
			"nScrollFoot": null,
		
			/**
			 * Last applied sort
			 *  @type array
			 *  @default []
			 */
			"aLastSort": [],
		
			/**
			 * Stored plug-in instances
			 *  @type object
			 *  @default {}
			 */
			"oPlugins": {},
		
			/**
			 * Function used to get a row's id from the row's data
			 *  @type function
			 *  @default null
			 */
			"rowIdFn": null,
		
			/**
			 * Data location where to store a row's id
			 *  @type string
			 *  @default null
			 */
			"rowId": null
		};
	
		/**
		 * Extension object for DataTables that is used to provide all extension
		 * options.
		 *
		 * Note that the `DataTable.ext` object is available through
		 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
		 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
		 *  @namespace
		 *  @extends DataTable.models.ext
		 */
		
		
		/**
		 * DataTables extensions
		 * 
		 * This namespace acts as a collection area for plug-ins that can be used to
		 * extend DataTables capabilities. Indeed many of the build in methods
		 * use this method to provide their own capabilities (sorting methods for
		 * example).
		 *
		 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
		 * reasons
		 *
		 *  @namespace
		 */
		DataTable.ext = _ext = {
			/**
			 * Buttons. For use with the Buttons extension for DataTables. This is
			 * defined here so other extensions can define buttons regardless of load
			 * order. It is _not_ used by DataTables core.
			 *
			 *  @type object
			 *  @default {}
			 */
			buttons: {},
		
		
			/**
			 * Element class names
			 *
			 *  @type object
			 *  @default {}
			 */
			classes: {},
		
		
			/**
			 * DataTables build type (expanded by the download builder)
			 *
			 *  @type string
			 */
			builder: "-source-",
		
		
			/**
			 * Error reporting.
			 * 
			 * How should DataTables report an error. Can take the value 'alert',
			 * 'throw', 'none' or a function.
			 *
			 *  @type string|function
			 *  @default alert
			 */
			errMode: "alert",
		
		
			/**
			 * Feature plug-ins.
			 * 
			 * This is an array of objects which describe the feature plug-ins that are
			 * available to DataTables. These feature plug-ins are then available for
			 * use through the `dom` initialisation option.
			 * 
			 * Each feature plug-in is described by an object which must have the
			 * following properties:
			 * 
			 * * `fnInit` - function that is used to initialise the plug-in,
			 * * `cFeature` - a character so the feature can be enabled by the `dom`
			 *   instillation option. This is case sensitive.
			 *
			 * The `fnInit` function has the following input parameters:
			 *
			 * 1. `{object}` DataTables settings object: see
			 *    {@link DataTable.models.oSettings}
			 *
			 * And the following return is expected:
			 * 
			 * * {node|null} The element which contains your feature. Note that the
			 *   return may also be void if your plug-in does not require to inject any
			 *   DOM elements into DataTables control (`dom`) - for example this might
			 *   be useful when developing a plug-in which allows table control via
			 *   keyboard entry
			 *
			 *  @type array
			 *
			 *  @example
			 *    $.fn.dataTable.ext.features.push( {
			 *      "fnInit": function( oSettings ) {
			 *        return new TableTools( { "oDTSettings": oSettings } );
			 *      },
			 *      "cFeature": "T"
			 *    } );
			 */
			feature: [],
		
		
			/**
			 * Row searching.
			 * 
			 * This method of searching is complimentary to the default type based
			 * searching, and a lot more comprehensive as it allows you complete control
			 * over the searching logic. Each element in this array is a function
			 * (parameters described below) that is called for every row in the table,
			 * and your logic decides if it should be included in the searching data set
			 * or not.
			 *
			 * Searching functions have the following input parameters:
			 *
			 * 1. `{object}` DataTables settings object: see
			 *    {@link DataTable.models.oSettings}
			 * 2. `{array|object}` Data for the row to be processed (same as the
			 *    original format that was passed in as the data source, or an array
			 *    from a DOM data source
			 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
			 *    can be useful to retrieve the `TR` element if you need DOM interaction.
			 *
			 * And the following return is expected:
			 *
			 * * {boolean} Include the row in the searched result set (true) or not
			 *   (false)
			 *
			 * Note that as with the main search ability in DataTables, technically this
			 * is "filtering", since it is subtractive. However, for consistency in
			 * naming we call it searching here.
			 *
			 *  @type array
			 *  @default []
			 *
			 *  @example
			 *    // The following example shows custom search being applied to the
			 *    // fourth column (i.e. the data[3] index) based on two input values
			 *    // from the end-user, matching the data in a certain range.
			 *    $.fn.dataTable.ext.search.push(
			 *      function( settings, data, dataIndex ) {
			 *        var min = document.getElementById('min').value * 1;
			 *        var max = document.getElementById('max').value * 1;
			 *        var version = data[3] == "-" ? 0 : data[3]*1;
			 *
			 *        if ( min == "" && max == "" ) {
			 *          return true;
			 *        }
			 *        else if ( min == "" && version < max ) {
			 *          return true;
			 *        }
			 *        else if ( min < version && "" == max ) {
			 *          return true;
			 *        }
			 *        else if ( min < version && version < max ) {
			 *          return true;
			 *        }
			 *        return false;
			 *      }
			 *    );
			 */
			search: [],
		
		
			/**
			 * Selector extensions
			 *
			 * The `selector` option can be used to extend the options available for the
			 * selector modifier options (`selector-modifier` object data type) that
			 * each of the three built in selector types offer (row, column and cell +
			 * their plural counterparts). For example the Select extension uses this
			 * mechanism to provide an option to select only rows, columns and cells
			 * that have been marked as selected by the end user (`{selected: true}`),
			 * which can be used in conjunction with the existing built in selector
			 * options.
			 *
			 * Each property is an array to which functions can be pushed. The functions
			 * take three attributes:
			 *
			 * * Settings object for the host table
			 * * Options object (`selector-modifier` object type)
			 * * Array of selected item indexes
			 *
			 * The return is an array of the resulting item indexes after the custom
			 * selector has been applied.
			 *
			 *  @type object
			 */
			selector: {
				cell: [],
				column: [],
				row: []
			},
		
		
			/**
			 * Internal functions, exposed for used in plug-ins.
			 * 
			 * Please note that you should not need to use the internal methods for
			 * anything other than a plug-in (and even then, try to avoid if possible).
			 * The internal function may change between releases.
			 *
			 *  @type object
			 *  @default {}
			 */
			internal: {},
		
		
			/**
			 * Legacy configuration options. Enable and disable legacy options that
			 * are available in DataTables.
			 *
			 *  @type object
			 */
			legacy: {
				/**
				 * Enable / disable DataTables 1.9 compatible server-side processing
				 * requests
				 *
				 *  @type boolean
				 *  @default null
				 */
				ajax: null
			},
		
		
			/**
			 * Pagination plug-in methods.
			 * 
			 * Each entry in this object is a function and defines which buttons should
			 * be shown by the pagination rendering method that is used for the table:
			 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
			 * buttons are displayed in the document, while the functions here tell it
			 * what buttons to display. This is done by returning an array of button
			 * descriptions (what each button will do).
			 *
			 * Pagination types (the four built in options and any additional plug-in
			 * options defined here) can be used through the `paginationType`
			 * initialisation parameter.
			 *
			 * The functions defined take two parameters:
			 *
			 * 1. `{int} page` The current page index
			 * 2. `{int} pages` The number of pages in the table
			 *
			 * Each function is expected to return an array where each element of the
			 * array can be one of:
			 *
			 * * `first` - Jump to first page when activated
			 * * `last` - Jump to last page when activated
			 * * `previous` - Show previous page when activated
			 * * `next` - Show next page when activated
			 * * `{int}` - Show page of the index given
			 * * `{array}` - A nested array containing the above elements to add a
			 *   containing 'DIV' element (might be useful for styling).
			 *
			 * Note that DataTables v1.9- used this object slightly differently whereby
			 * an object with two functions would be defined for each plug-in. That
			 * ability is still supported by DataTables 1.10+ to provide backwards
			 * compatibility, but this option of use is now decremented and no longer
			 * documented in DataTables 1.10+.
			 *
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    // Show previous, next and current page buttons only
			 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
			 *      return [ 'previous', page, 'next' ];
			 *    };
			 */
			pager: {},
		
		
			renderer: {
				pageButton: {},
				header: {}
			},
		
		
			/**
			 * Ordering plug-ins - custom data source
			 * 
			 * The extension options for ordering of data available here is complimentary
			 * to the default type based ordering that DataTables typically uses. It
			 * allows much greater control over the the data that is being used to
			 * order a column, but is necessarily therefore more complex.
			 * 
			 * This type of ordering is useful if you want to do ordering based on data
			 * live from the DOM (for example the contents of an 'input' element) rather
			 * than just the static string that DataTables knows of.
			 * 
			 * The way these plug-ins work is that you create an array of the values you
			 * wish to be ordering for the column in question and then return that
			 * array. The data in the array much be in the index order of the rows in
			 * the table (not the currently ordering order!). Which order data gathering
			 * function is run here depends on the `dt-init columns.orderDataType`
			 * parameter that is used for the column (if any).
			 *
			 * The functions defined take two parameters:
			 *
			 * 1. `{object}` DataTables settings object: see
			 *    {@link DataTable.models.oSettings}
			 * 2. `{int}` Target column index
			 *
			 * Each function is expected to return an array:
			 *
			 * * `{array}` Data for the column to be ordering upon
			 *
			 *  @type array
			 *
			 *  @example
			 *    // Ordering using `input` node values
			 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
			 *    {
			 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
			 *        return $('input', td).val();
			 *      } );
			 *    }
			 */
			order: {},
		
		
			/**
			 * Type based plug-ins.
			 *
			 * Each column in DataTables has a type assigned to it, either by automatic
			 * detection or by direct assignment using the `type` option for the column.
			 * The type of a column will effect how it is ordering and search (plug-ins
			 * can also make use of the column type if required).
			 *
			 * @namespace
			 */
			type: {
				/**
				 * Type detection functions.
				 *
				 * The functions defined in this object are used to automatically detect
				 * a column's type, making initialisation of DataTables super easy, even
				 * when complex data is in the table.
				 *
				 * The functions defined take two parameters:
				 *
				 *  1. `{*}` Data from the column cell to be analysed
				 *  2. `{settings}` DataTables settings object. This can be used to
				 *     perform context specific type detection - for example detection
				 *     based on language settings such as using a comma for a decimal
				 *     place. Generally speaking the options from the settings will not
				 *     be required
				 *
				 * Each function is expected to return:
				 *
				 * * `{string|null}` Data type detected, or null if unknown (and thus
				 *   pass it on to the other type detection functions.
				 *
				 *  @type array
				 *
				 *  @example
				 *    // Currency type detection plug-in:
				 *    $.fn.dataTable.ext.type.detect.push(
				 *      function ( data, settings ) {
				 *        // Check the numeric part
				 *        if ( ! data.substring(1).match(/[0-9]/) ) {
				 *          return null;
				 *        }
				 *
				 *        // Check prefixed by currency
				 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
				 *          return 'currency';
				 *        }
				 *        return null;
				 *      }
				 *    );
				 */
				detect: [],
		
		
				/**
				 * Type based search formatting.
				 *
				 * The type based searching functions can be used to pre-format the
				 * data to be search on. For example, it can be used to strip HTML
				 * tags or to de-format telephone numbers for numeric only searching.
				 *
				 * Note that is a search is not defined for a column of a given type,
				 * no search formatting will be performed.
				 * 
				 * Pre-processing of searching data plug-ins - When you assign the sType
				 * for a column (or have it automatically detected for you by DataTables
				 * or a type detection plug-in), you will typically be using this for
				 * custom sorting, but it can also be used to provide custom searching
				 * by allowing you to pre-processing the data and returning the data in
				 * the format that should be searched upon. This is done by adding
				 * functions this object with a parameter name which matches the sType
				 * for that target column. This is the corollary of <i>afnSortData</i>
				 * for searching data.
				 *
				 * The functions defined take a single parameter:
				 *
				 *  1. `{*}` Data from the column cell to be prepared for searching
				 *
				 * Each function is expected to return:
				 *
				 * * `{string|null}` Formatted string that will be used for the searching.
				 *
				 *  @type object
				 *  @default {}
				 *
				 *  @example
				 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
				 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
				 *    }
				 */
				search: {},
		
		
				/**
				 * Type based ordering.
				 *
				 * The column type tells DataTables what ordering to apply to the table
				 * when a column is sorted upon. The order for each type that is defined,
				 * is defined by the functions available in this object.
				 *
				 * Each ordering option can be described by three properties added to
				 * this object:
				 *
				 * * `{type}-pre` - Pre-formatting function
				 * * `{type}-asc` - Ascending order function
				 * * `{type}-desc` - Descending order function
				 *
				 * All three can be used together, only `{type}-pre` or only
				 * `{type}-asc` and `{type}-desc` together. It is generally recommended
				 * that only `{type}-pre` is used, as this provides the optimal
				 * implementation in terms of speed, although the others are provided
				 * for compatibility with existing Javascript sort functions.
				 *
				 * `{type}-pre`: Functions defined take a single parameter:
				 *
				 *  1. `{*}` Data from the column cell to be prepared for ordering
				 *
				 * And return:
				 *
				 * * `{*}` Data to be sorted upon
				 *
				 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
				 * functions, taking two parameters:
				 *
				 *  1. `{*}` Data to compare to the second parameter
				 *  2. `{*}` Data to compare to the first parameter
				 *
				 * And returning:
				 *
				 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
				 *   than the second parameter, ===0 if the two parameters are equal and
				 *   >0 if the first parameter should be sorted height than the second
				 *   parameter.
				 * 
				 *  @type object
				 *  @default {}
				 *
				 *  @example
				 *    // Numeric ordering of formatted numbers with a pre-formatter
				 *    $.extend( $.fn.dataTable.ext.type.order, {
				 *      "string-pre": function(x) {
				 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
				 *        return parseFloat( a );
				 *      }
				 *    } );
				 *
				 *  @example
				 *    // Case-sensitive string ordering, with no pre-formatting method
				 *    $.extend( $.fn.dataTable.ext.order, {
				 *      "string-case-asc": function(x,y) {
				 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
				 *      },
				 *      "string-case-desc": function(x,y) {
				 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
				 *      }
				 *    } );
				 */
				order: {}
			},
		
			/**
			 * Unique DataTables instance counter
			 *
			 * @type int
			 * @private
			 */
			_unique: 0,
		
		
			//
			// Depreciated
			// The following properties are retained for backwards compatiblity only.
			// The should not be used in new projects and will be removed in a future
			// version
			//
		
			/**
			 * Version check function.
			 *  @type function
			 *  @depreciated Since 1.10
			 */
			fnVersionCheck: DataTable.fnVersionCheck,
		
		
			/**
			 * Index for what 'this' index API functions should use
			 *  @type int
			 *  @deprecated Since v1.10
			 */
			iApiIndex: 0,
		
		
			/**
			 * jQuery UI class container
			 *  @type object
			 *  @deprecated Since v1.10
			 */
			oJUIClasses: {},
		
		
			/**
			 * Software version
			 *  @type string
			 *  @deprecated Since v1.10
			 */
			sVersion: DataTable.version
		};
		
		
		//
		// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
		//
		$.extend( _ext, {
			afnFiltering: _ext.search,
			aTypes:       _ext.type.detect,
			ofnSearch:    _ext.type.search,
			oSort:        _ext.type.order,
			afnSortData:  _ext.order,
			aoFeatures:   _ext.feature,
			oApi:         _ext.internal,
			oStdClasses:  _ext.classes,
			oPagination:  _ext.pager
		} );
		
		
		$.extend( DataTable.ext.classes, {
			"sTable": "dataTable",
			"sNoFooter": "no-footer",
		
			/* Paging buttons */
			"sPageButton": "paginate_button",
			"sPageButtonActive": "current",
			"sPageButtonDisabled": "disabled",
		
			/* Striping classes */
			"sStripeOdd": "odd",
			"sStripeEven": "even",
		
			/* Empty row */
			"sRowEmpty": "dataTables_empty",
		
			/* Features */
			"sWrapper": "dataTables_wrapper",
			"sFilter": "dataTables_filter",
			"sInfo": "dataTables_info",
			"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
			"sLength": "dataTables_length",
			"sProcessing": "dataTables_processing",
		
			/* Sorting */
			"sSortAsc": "sorting_asc",
			"sSortDesc": "sorting_desc",
			"sSortable": "sorting", /* Sortable in both directions */
			"sSortableAsc": "sorting_asc_disabled",
			"sSortableDesc": "sorting_desc_disabled",
			"sSortableNone": "sorting_disabled",
			"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
		
			/* Filtering */
			"sFilterInput": "",
		
			/* Page length */
			"sLengthSelect": "",
		
			/* Scrolling */
			"sScrollWrapper": "dataTables_scroll",
			"sScrollHead": "dataTables_scrollHead",
			"sScrollHeadInner": "dataTables_scrollHeadInner",
			"sScrollBody": "dataTables_scrollBody",
			"sScrollFoot": "dataTables_scrollFoot",
			"sScrollFootInner": "dataTables_scrollFootInner",
		
			/* Misc */
			"sHeaderTH": "",
			"sFooterTH": "",
		
			// Deprecated
			"sSortJUIAsc": "",
			"sSortJUIDesc": "",
			"sSortJUI": "",
			"sSortJUIAscAllowed": "",
			"sSortJUIDescAllowed": "",
			"sSortJUIWrapper": "",
			"sSortIcon": "",
			"sJUIHeader": "",
			"sJUIFooter": ""
		} );
		
		
		var extPagination = DataTable.ext.pager;
		
		function _numbers ( page, pages ) {
			var
				numbers = [],
				buttons = extPagination.numbers_length,
				half = Math.floor( buttons / 2 ),
				i = 1;
		
			if ( pages <= buttons ) {
				numbers = _range( 0, pages );
			}
			else if ( page <= half ) {
				numbers = _range( 0, buttons-2 );
				numbers.push( 'ellipsis' );
				numbers.push( pages-1 );
			}
			else if ( page >= pages - 1 - half ) {
				numbers = _range( pages-(buttons-2), pages );
				numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
				numbers.splice( 0, 0, 0 );
			}
			else {
				numbers = _range( page-half+2, page+half-1 );
				numbers.push( 'ellipsis' );
				numbers.push( pages-1 );
				numbers.splice( 0, 0, 'ellipsis' );
				numbers.splice( 0, 0, 0 );
			}
		
			numbers.DT_el = 'span';
			return numbers;
		}
		
		
		$.extend( extPagination, {
			simple: function ( page, pages ) {
				return [ 'previous', 'next' ];
			},
		
			full: function ( page, pages ) {
				return [  'first', 'previous', 'next', 'last' ];
			},
		
			numbers: function ( page, pages ) {
				return [ _numbers(page, pages) ];
			},
		
			simple_numbers: function ( page, pages ) {
				return [ 'previous', _numbers(page, pages), 'next' ];
			},
		
			full_numbers: function ( page, pages ) {
				return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
			},
			
			first_last_numbers: function (page, pages) {
				 return ['first', _numbers(page, pages), 'last'];
			 },
		
			// For testing and plug-ins to use
			_numbers: _numbers,
		
			// Number of number buttons (including ellipsis) to show. _Must be odd!_
			numbers_length: 7
		} );
		
		
		$.extend( true, DataTable.ext.renderer, {
			pageButton: {
				_: function ( settings, host, idx, buttons, page, pages ) {
					var classes = settings.oClasses;
					var lang = settings.oLanguage.oPaginate;
					var aria = settings.oLanguage.oAria.paginate || {};
					var btnDisplay, btnClass, counter=0;
		
					var attach = function( container, buttons ) {
						var i, ien, node, button, tabIndex;
						var disabledClass = classes.sPageButtonDisabled;
						var clickHandler = function ( e ) {
							_fnPageChange( settings, e.data.action, true );
						};
		
						for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
							button = buttons[i];
		
							if ( $.isArray( button ) ) {
								var inner = $( '<'+(button.DT_el || 'div')+'/>' )
									.appendTo( container );
								attach( inner, button );
							}
							else {
								btnDisplay = null;
								btnClass = button;
								tabIndex = settings.iTabIndex;
		
								switch ( button ) {
									case 'ellipsis':
										container.append('<span class="ellipsis">&#x2026;</span>');
										break;
		
									case 'first':
										btnDisplay = lang.sFirst;
		
										if ( page === 0 ) {
											tabIndex = -1;
											btnClass += ' ' + disabledClass;
										}
										break;
		
									case 'previous':
										btnDisplay = lang.sPrevious;
		
										if ( page === 0 ) {
											tabIndex = -1;
											btnClass += ' ' + disabledClass;
										}
										break;
		
									case 'next':
										btnDisplay = lang.sNext;
		
										if ( pages === 0 || page === pages-1 ) {
											tabIndex = -1;
											btnClass += ' ' + disabledClass;
										}
										break;
		
									case 'last':
										btnDisplay = lang.sLast;
		
										if ( page === pages-1 ) {
											tabIndex = -1;
											btnClass += ' ' + disabledClass;
										}
										break;
		
									default:
										btnDisplay = button + 1;
										btnClass = page === button ?
											classes.sPageButtonActive : '';
										break;
								}
		
								if ( btnDisplay !== null ) {
									node = $('<a>', {
											'class': classes.sPageButton+' '+btnClass,
											'aria-controls': settings.sTableId,
											'aria-label': aria[ button ],
											'data-dt-idx': counter,
											'tabindex': tabIndex,
											'id': idx === 0 && typeof button === 'string' ?
												settings.sTableId +'_'+ button :
												null
										} )
										.html( btnDisplay )
										.appendTo( container );
		
									_fnBindAction(
										node, {action: button}, clickHandler
									);
		
									counter++;
								}
							}
						}
					};
		
					// IE9 throws an 'unknown error' if document.activeElement is used
					// inside an iframe or frame. Try / catch the error. Not good for
					// accessibility, but neither are frames.
					var activeEl;
		
					try {
						// Because this approach is destroying and recreating the paging
						// elements, focus is lost on the select button which is bad for
						// accessibility. So we want to restore focus once the draw has
						// completed
						activeEl = $(host).find(document.activeElement).data('dt-idx');
					}
					catch (e) {}
		
					attach( $(host).empty(), buttons );
		
					if ( activeEl !== undefined ) {
						$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');
					}
				}
			}
		} );
		
		
		
		// Built in type detection. See model.ext.aTypes for information about
		// what is required from this methods.
		$.extend( DataTable.ext.type.detect, [
			// Plain numbers - first since V8 detects some plain numbers as dates
			// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
			function ( d, settings )
			{
				var decimal = settings.oLanguage.sDecimal;
				return _isNumber( d, decimal ) ? 'num'+decimal : null;
			},
		
			// Dates (only those recognised by the browser's Date.parse)
			function ( d, settings )
			{
				// V8 tries _very_ hard to make a string passed into `Date.parse()`
				// valid, so we need to use a regex to restrict date formats. Use a
				// plug-in for anything other than ISO8601 style strings
				if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
					return null;
				}
				var parsed = Date.parse(d);
				return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
			},
		
			// Formatted numbers
			function ( d, settings )
			{
				var decimal = settings.oLanguage.sDecimal;
				return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
			},
		
			// HTML numeric
			function ( d, settings )
			{
				var decimal = settings.oLanguage.sDecimal;
				return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
			},
		
			// HTML numeric, formatted
			function ( d, settings )
			{
				var decimal = settings.oLanguage.sDecimal;
				return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
			},
		
			// HTML (this is strict checking - there must be html)
			function ( d, settings )
			{
				return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
					'html' : null;
			}
		] );
		
		
		
		// Filter formatting functions. See model.ext.ofnSearch for information about
		// what is required from these methods.
		// 
		// Note that additional search methods are added for the html numbers and
		// html formatted numbers by `_addNumericSort()` when we know what the decimal
		// place is
		
		
		$.extend( DataTable.ext.type.search, {
			html: function ( data ) {
				return _empty(data) ?
					data :
					typeof data === 'string' ?
						data
							.replace( _re_new_lines, " " )
							.replace( _re_html, "" ) :
						'';
			},
		
			string: function ( data ) {
				return _empty(data) ?
					data :
					typeof data === 'string' ?
						data.replace( _re_new_lines, " " ) :
						data;
			}
		} );
		
		
		
		var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
			if ( d !== 0 && (!d || d === '-') ) {
				return -Infinity;
			}
		
			// If a decimal place other than `.` is used, it needs to be given to the
			// function so we can detect it and replace with a `.` which is the only
			// decimal place Javascript recognises - it is not locale aware.
			if ( decimalPlace ) {
				d = _numToDecimal( d, decimalPlace );
			}
		
			if ( d.replace ) {
				if ( re1 ) {
					d = d.replace( re1, '' );
				}
		
				if ( re2 ) {
					d = d.replace( re2, '' );
				}
			}
		
			return d * 1;
		};
		
		
		// Add the numeric 'deformatting' functions for sorting and search. This is done
		// in a function to provide an easy ability for the language options to add
		// additional methods if a non-period decimal place is used.
		function _addNumericSort ( decimalPlace ) {
			$.each(
				{
					// Plain numbers
					"num": function ( d ) {
						return __numericReplace( d, decimalPlace );
					},
		
					// Formatted numbers
					"num-fmt": function ( d ) {
						return __numericReplace( d, decimalPlace, _re_formatted_numeric );
					},
		
					// HTML numeric
					"html-num": function ( d ) {
						return __numericReplace( d, decimalPlace, _re_html );
					},
		
					// HTML numeric, formatted
					"html-num-fmt": function ( d ) {
						return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
					}
				},
				function ( key, fn ) {
					// Add the ordering method
					_ext.type.order[ key+decimalPlace+'-pre' ] = fn;
		
					// For HTML types add a search formatter that will strip the HTML
					if ( key.match(/^html\-/) ) {
						_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
					}
				}
			);
		}
		
		
		// Default sort methods
		$.extend( _ext.type.order, {
			// Dates
			"date-pre": function ( d ) {
				var ts = Date.parse( d );
				return isNaN(ts) ? -Infinity : ts;
			},
		
			// html
			"html-pre": function ( a ) {
				return _empty(a) ?
					'' :
					a.replace ?
						a.replace( /<.*?>/g, "" ).toLowerCase() :
						a+'';
			},
		
			// string
			"string-pre": function ( a ) {
				// This is a little complex, but faster than always calling toString,
				// http://jsperf.com/tostring-v-check
				return _empty(a) ?
					'' :
					typeof a === 'string' ?
						a.toLowerCase() :
						! a.toString ?
							'' :
							a.toString();
			},
		
			// string-asc and -desc are retained only for compatibility with the old
			// sort methods
			"string-asc": function ( x, y ) {
				return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			},
		
			"string-desc": function ( x, y ) {
				return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			}
		} );
		
		
		// Numeric sorting types - order doesn't matter here
		_addNumericSort( '' );
		
		
		$.extend( true, DataTable.ext.renderer, {
			header: {
				_: function ( settings, cell, column, classes ) {
					// No additional mark-up required
					// Attach a sort listener to update on sort - note that using the
					// `DT` namespace will allow the event to be removed automatically
					// on destroy, while the `dt` namespaced event is the one we are
					// listening for
					$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
						if ( settings !== ctx ) { // need to check this this is the host
							return;               // table, not a nested one
						}
		
						var colIdx = column.idx;
		
						cell
							.removeClass(
								column.sSortingClass +' '+
								classes.sSortAsc +' '+
								classes.sSortDesc
							)
							.addClass( columns[ colIdx ] == 'asc' ?
								classes.sSortAsc : columns[ colIdx ] == 'desc' ?
									classes.sSortDesc :
									column.sSortingClass
							);
					} );
				},
		
				jqueryui: function ( settings, cell, column, classes ) {
					$('<div/>')
						.addClass( classes.sSortJUIWrapper )
						.append( cell.contents() )
						.append( $('<span/>')
							.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
						)
						.appendTo( cell );
		
					// Attach a sort listener to update on sort
					$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
						if ( settings !== ctx ) {
							return;
						}
		
						var colIdx = column.idx;
		
						cell
							.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
							.addClass( columns[ colIdx ] == 'asc' ?
								classes.sSortAsc : columns[ colIdx ] == 'desc' ?
									classes.sSortDesc :
									column.sSortingClass
							);
		
						cell
							.find( 'span.'+classes.sSortIcon )
							.removeClass(
								classes.sSortJUIAsc +" "+
								classes.sSortJUIDesc +" "+
								classes.sSortJUI +" "+
								classes.sSortJUIAscAllowed +" "+
								classes.sSortJUIDescAllowed
							)
							.addClass( columns[ colIdx ] == 'asc' ?
								classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
									classes.sSortJUIDesc :
									column.sSortingClassJUI
							);
					} );
				}
			}
		} );
		
		/*
		 * Public helper functions. These aren't used internally by DataTables, or
		 * called by any of the options passed into DataTables, but they can be used
		 * externally by developers working with DataTables. They are helper functions
		 * to make working with DataTables a little bit easier.
		 */
		
		var __htmlEscapeEntities = function ( d ) {
			return typeof d === 'string' ?
				d
					.replace(/&/g, '&amp;')
					.replace(/</g, '&lt;')
					.replace(/>/g, '&gt;')
					.replace(/"/g, '&quot;') :
				d;
		};
		
		/**
		 * Helpers for `columns.render`.
		 *
		 * The options defined here can be used with the `columns.render` initialisation
		 * option to provide a display renderer. The following functions are defined:
		 *
		 * * `number` - Will format numeric data (defined by `columns.data`) for
		 *   display, retaining the original unformatted data for sorting and filtering.
		 *   It takes 5 parameters:
		 *   * `string` - Thousands grouping separator
		 *   * `string` - Decimal point indicator
		 *   * `integer` - Number of decimal points to show
		 *   * `string` (optional) - Prefix.
		 *   * `string` (optional) - Postfix (/suffix).
		 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
		 *   parameters.
		 *
		 * @example
		 *   // Column definition using the number renderer
		 *   {
		 *     data: "salary",
		 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
		 *   }
		 *
		 * @namespace
		 */
		DataTable.render = {
			number: function ( thousands, decimal, precision, prefix, postfix ) {
				return {
					display: function ( d ) {
						if ( typeof d !== 'number' && typeof d !== 'string' ) {
							return d;
						}
		
						var negative = d < 0 ? '-' : '';
						var flo = parseFloat( d );
		
						// If NaN then there isn't much formatting that we can do - just
						// return immediately, escaping any HTML (this was supposed to
						// be a number after all)
						if ( isNaN( flo ) ) {
							return __htmlEscapeEntities( d );
						}
		
						flo = flo.toFixed( precision );
						d = Math.abs( flo );
		
						var intPart = parseInt( d, 10 );
						var floatPart = precision ?
							decimal+(d - intPart).toFixed( precision ).substring( 2 ):
							'';
		
						return negative + (prefix||'') +
							intPart.toString().replace(
								/\B(?=(\d{3})+(?!\d))/g, thousands
							) +
							floatPart +
							(postfix||'');
					}
				};
			},
		
			text: function () {
				return {
					display: __htmlEscapeEntities,
					filter: __htmlEscapeEntities
				};
			}
		};
		
		
		/*
		 * This is really a good bit rubbish this method of exposing the internal methods
		 * publicly... - To be fixed in 2.0 using methods on the prototype
		 */
		
		
		/**
		 * Create a wrapper function for exporting an internal functions to an external API.
		 *  @param {string} fn API function name
		 *  @returns {function} wrapped function
		 *  @memberof DataTable#internal
		 */
		function _fnExternApiFunc (fn)
		{
			return function() {
				var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
					Array.prototype.slice.call(arguments)
				);
				return DataTable.ext.internal[fn].apply( this, args );
			};
		}
		
		
		/**
		 * Reference to internal functions for use by plug-in developers. Note that
		 * these methods are references to internal functions and are considered to be
		 * private. If you use these methods, be aware that they are liable to change
		 * between versions.
		 *  @namespace
		 */
		$.extend( DataTable.ext.internal, {
			_fnExternApiFunc: _fnExternApiFunc,
			_fnBuildAjax: _fnBuildAjax,
			_fnAjaxUpdate: _fnAjaxUpdate,
			_fnAjaxParameters: _fnAjaxParameters,
			_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
			_fnAjaxDataSrc: _fnAjaxDataSrc,
			_fnAddColumn: _fnAddColumn,
			_fnColumnOptions: _fnColumnOptions,
			_fnAdjustColumnSizing: _fnAdjustColumnSizing,
			_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
			_fnColumnIndexToVisible: _fnColumnIndexToVisible,
			_fnVisbleColumns: _fnVisbleColumns,
			_fnGetColumns: _fnGetColumns,
			_fnColumnTypes: _fnColumnTypes,
			_fnApplyColumnDefs: _fnApplyColumnDefs,
			_fnHungarianMap: _fnHungarianMap,
			_fnCamelToHungarian: _fnCamelToHungarian,
			_fnLanguageCompat: _fnLanguageCompat,
			_fnBrowserDetect: _fnBrowserDetect,
			_fnAddData: _fnAddData,
			_fnAddTr: _fnAddTr,
			_fnNodeToDataIndex: _fnNodeToDataIndex,
			_fnNodeToColumnIndex: _fnNodeToColumnIndex,
			_fnGetCellData: _fnGetCellData,
			_fnSetCellData: _fnSetCellData,
			_fnSplitObjNotation: _fnSplitObjNotation,
			_fnGetObjectDataFn: _fnGetObjectDataFn,
			_fnSetObjectDataFn: _fnSetObjectDataFn,
			_fnGetDataMaster: _fnGetDataMaster,
			_fnClearTable: _fnClearTable,
			_fnDeleteIndex: _fnDeleteIndex,
			_fnInvalidate: _fnInvalidate,
			_fnGetRowElements: _fnGetRowElements,
			_fnCreateTr: _fnCreateTr,
			_fnBuildHead: _fnBuildHead,
			_fnDrawHead: _fnDrawHead,
			_fnDraw: _fnDraw,
			_fnReDraw: _fnReDraw,
			_fnAddOptionsHtml: _fnAddOptionsHtml,
			_fnDetectHeader: _fnDetectHeader,
			_fnGetUniqueThs: _fnGetUniqueThs,
			_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
			_fnFilterComplete: _fnFilterComplete,
			_fnFilterCustom: _fnFilterCustom,
			_fnFilterColumn: _fnFilterColumn,
			_fnFilter: _fnFilter,
			_fnFilterCreateSearch: _fnFilterCreateSearch,
			_fnEscapeRegex: _fnEscapeRegex,
			_fnFilterData: _fnFilterData,
			_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
			_fnUpdateInfo: _fnUpdateInfo,
			_fnInfoMacros: _fnInfoMacros,
			_fnInitialise: _fnInitialise,
			_fnInitComplete: _fnInitComplete,
			_fnLengthChange: _fnLengthChange,
			_fnFeatureHtmlLength: _fnFeatureHtmlLength,
			_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
			_fnPageChange: _fnPageChange,
			_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
			_fnProcessingDisplay: _fnProcessingDisplay,
			_fnFeatureHtmlTable: _fnFeatureHtmlTable,
			_fnScrollDraw: _fnScrollDraw,
			_fnApplyToChildren: _fnApplyToChildren,
			_fnCalculateColumnWidths: _fnCalculateColumnWidths,
			_fnThrottle: _fnThrottle,
			_fnConvertToWidth: _fnConvertToWidth,
			_fnGetWidestNode: _fnGetWidestNode,
			_fnGetMaxLenString: _fnGetMaxLenString,
			_fnStringToCss: _fnStringToCss,
			_fnSortFlatten: _fnSortFlatten,
			_fnSort: _fnSort,
			_fnSortAria: _fnSortAria,
			_fnSortListener: _fnSortListener,
			_fnSortAttachListener: _fnSortAttachListener,
			_fnSortingClasses: _fnSortingClasses,
			_fnSortData: _fnSortData,
			_fnSaveState: _fnSaveState,
			_fnLoadState: _fnLoadState,
			_fnSettingsFromNode: _fnSettingsFromNode,
			_fnLog: _fnLog,
			_fnMap: _fnMap,
			_fnBindAction: _fnBindAction,
			_fnCallbackReg: _fnCallbackReg,
			_fnCallbackFire: _fnCallbackFire,
			_fnLengthOverflow: _fnLengthOverflow,
			_fnRenderer: _fnRenderer,
			_fnDataSource: _fnDataSource,
			_fnRowAttributes: _fnRowAttributes,
			_fnExtend: _fnExtend,
			_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
											// in 1.10, so this dead-end function is
											// added to prevent errors
		} );
		
	
		// jQuery access
		$.fn.dataTable = DataTable;
	
		// Provide access to the host jQuery object (circular reference)
		DataTable.$ = $;
	
		// Legacy aliases
		$.fn.dataTableSettings = DataTable.settings;
		$.fn.dataTableExt = DataTable.ext;
	
		// With a capital `D` we return a DataTables API instance rather than a
		// jQuery object
		$.fn.DataTable = function ( opts ) {
			return $(this).dataTable( opts ).api();
		};
	
		// All properties that are available to $.fn.dataTable should also be
		// available on $.fn.DataTable
		$.each( DataTable, function ( prop, val ) {
			$.fn.DataTable[ prop ] = val;
		} );
	
	
		// Information about events fired by DataTables - for documentation.
		/**
		 * Draw event, fired whenever the table is redrawn on the page, at the same
		 * point as fnDrawCallback. This may be useful for binding events or
		 * performing calculations when the table is altered at all.
		 *  @name DataTable#draw.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */
	
		/**
		 * Search event, fired when the searching applied to the table (using the
		 * built-in global search, or column filters) is altered.
		 *  @name DataTable#search.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */
	
		/**
		 * Page change event, fired when the paging of the table is altered.
		 *  @name DataTable#page.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */
	
		/**
		 * Order event, fired when the ordering applied to the table is altered.
		 *  @name DataTable#order.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */
	
		/**
		 * DataTables initialisation complete event, fired when the table is fully
		 * drawn, including Ajax data loaded, if Ajax data is required.
		 *  @name DataTable#init.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The JSON object request from the server - only
		 *    present if client-side Ajax sourced data is used</li></ol>
		 */
	
		/**
		 * State save event, fired when the table has changed state a new state save
		 * is required. This event allows modification of the state saving object
		 * prior to actually doing the save, including addition or other state
		 * properties (for plug-ins) or modification of a DataTables core property.
		 *  @name DataTable#stateSaveParams.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The state information to be saved
		 */
	
		/**
		 * State load event, fired when the table is loading state from the stored
		 * data, but prior to the settings object being modified by the saved state
		 * - allowing modification of the saved state is required or loading of
		 * state for a plug-in.
		 *  @name DataTable#stateLoadParams.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The saved state information
		 */
	
		/**
		 * State loaded event, fired when state has been loaded from stored data and
		 * the settings object has been modified by the loaded data.
		 *  @name DataTable#stateLoaded.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {object} json The saved state information
		 */
	
		/**
		 * Processing event, fired when DataTables is doing some kind of processing
		 * (be it, order, search or anything else). It can be used to indicate to
		 * the end user that there is something happening, or that something has
		 * finished.
		 *  @name DataTable#processing.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} oSettings DataTables settings object
		 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
		 */
	
		/**
		 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
		 * request to made to the server for new data. This event is called before
		 * DataTables processed the returned data, so it can also be used to pre-
		 * process the data returned from the server, if needed.
		 *
		 * Note that this trigger is called in `fnServerData`, if you override
		 * `fnServerData` and which to use this event, you need to trigger it in you
		 * success function.
		 *  @name DataTable#xhr.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 *  @param {object} json JSON returned from the server
		 *
		 *  @example
		 *     // Use a custom property returned from the server in another DOM element
		 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
		 *       $('#status').html( json.status );
		 *     } );
		 *
		 *  @example
		 *     // Pre-process the data returned from the server
		 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
		 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
		 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
		 *       }
		 *       // Note no return - manipulate the data directly in the JSON object.
		 *     } );
		 */
	
		/**
		 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
		 * or passing the bDestroy:true parameter in the initialisation object. This
		 * can be used to remove bound events, added DOM nodes, etc.
		 *  @name DataTable#destroy.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */
	
		/**
		 * Page length change event, fired when number of records to show on each
		 * page (the length) is changed.
		 *  @name DataTable#length.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 *  @param {integer} len New length
		 */
	
		/**
		 * Column sizing has changed.
		 *  @name DataTable#column-sizing.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 */
	
		/**
		 * Column visibility has changed.
		 *  @name DataTable#column-visibility.dt
		 *  @event
		 *  @param {event} e jQuery event object
		 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
		 *  @param {int} column Column index
		 *  @param {bool} vis `false` if column now hidden, or `true` if visible
		 */
	
		return $.fn.dataTable;
	}));
	
	},{"jquery":24}],24:[function(require,module,exports){
	/*!
	 * jQuery JavaScript Library v3.5.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2020-05-04T22:49Z
	 */
	( function( global, factory ) {
	
		"use strict";
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
	
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";
	
	var arr = [];
	
	var getProto = Object.getPrototypeOf;
	
	var slice = arr.slice;
	
	var flat = arr.flat ? function( array ) {
		return arr.flat.call( array );
	} : function( array ) {
		return arr.concat.apply( [], array );
	};
	
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var fnToString = hasOwn.toString;
	
	var ObjectFunctionString = fnToString.call( Object );
	
	var support = {};
	
	var isFunction = function isFunction( obj ) {
	
		  // Support: Chrome <=57, Firefox <=52
		  // In some browsers, typeof returns "function" for HTML <object> elements
		  // (i.e., `typeof document.createElement( "object" ) === "function"`).
		  // We don't want to classify *any* DOM node as a function.
		  return typeof obj === "function" && typeof obj.nodeType !== "number";
	  };
	
	
	var isWindow = function isWindow( obj ) {
			return obj != null && obj === obj.window;
		};
	
	
	var document = window.document;
	
	
	
		var preservedScriptAttributes = {
			type: true,
			src: true,
			nonce: true,
			noModule: true
		};
	
		function DOMEval( code, node, doc ) {
			doc = doc || document;
	
			var i, val,
				script = doc.createElement( "script" );
	
			script.text = code;
			if ( node ) {
				for ( i in preservedScriptAttributes ) {
	
					// Support: Firefox 64+, Edge 18+
					// Some browsers don't support the "nonce" property on scripts.
					// On the other hand, just using `getAttribute` is not enough as
					// the `nonce` attribute is reset to an empty string whenever it
					// becomes browsing-context connected.
					// See https://github.com/whatwg/html/issues/2369
					// See https://html.spec.whatwg.org/#nonce-attributes
					// The `node.getAttribute` check was added for the sake of
					// `jQuery.globalEval` so that it can fake a nonce-containing node
					// via an object.
					val = node[ i ] || node.getAttribute && node.getAttribute( i );
					if ( val ) {
						script.setAttribute( i, val );
					}
				}
			}
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	
	
	function toType( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
	
		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module
	
	
	
	var
		version = "3.5.1",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
	
			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}
	
			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		even: function() {
			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
				return ( i + 1 ) % 2;
			} ) );
		},
	
		odd: function() {
			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
				return i % 2;
			} ) );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					copy = options[ name ];
	
					// Prevent Object.prototype pollution
					// Prevent never-ending loop
					if ( name === "__proto__" || target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {
						src = target[ name ];
	
						// Ensure proper type for the source value
						if ( copyIsArray && !Array.isArray( src ) ) {
							clone = [];
						} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
							clone = {};
						} else {
							clone = src;
						}
						copyIsArray = false;
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isPlainObject: function( obj ) {
			var proto, Ctor;
	
			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}
	
			proto = getProto( obj );
	
			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}
	
			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},
	
		isEmptyObject: function( obj ) {
			var name;
	
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		// Evaluates a script in a provided context; falls back to the global one
		// if not specified.
		globalEval: function( code, options, doc ) {
			DOMEval( code, { nonce: options && options.nonce }, doc );
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return flat( ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = toType( obj );
	
		if ( isFunction( obj ) || isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.5
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://js.foundation/
	 *
	 * Date: 2020-03-14
	 */
	( function( window ) {
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		nonnativeSelectorCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// Instance methods
		hasOwn = ( {} ).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		pushNative = arr.push,
		push = arr.push,
		slice = arr.slice,
	
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[ i ] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
			"ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
		identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
			"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
	
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
	
			// "Attribute values must be CSS identifiers [capture 5]
			// or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
			whitespace + "*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
	
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
	
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
	
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
			whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
			"*" ),
		rdescend = new RegExp( whitespace + "|>" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
				whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
				whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
	
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace +
				"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
				"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rhtml = /HTML$/i,
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
	
		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
		funescape = function( escape, nonHex ) {
			var high = "0x" + escape.slice( 1 ) - 0x10000;
	
			return nonHex ?
	
				// Strip the backslash prefix from a non-hex escape sequence
				nonHex :
	
				// Replace a hexadecimal escape sequence with the encoded Unicode code point
				// Support: IE <=11+
				// For values outside the Basic Multilingual Plane (BMP), manually construct a
				// surrogate pair
				high < 0 ?
					String.fromCharCode( high + 0x10000 ) :
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {
	
				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}
	
				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" +
					ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}
	
			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},
	
		inDisabledFieldset = addCombinator(
			function( elem ) {
				return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
			},
			{ dir: "parentNode", next: "legend" }
		);
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			( arr = slice.call( preferredDoc.childNodes ) ),
			preferredDoc.childNodes
		);
	
		// Support: Android<4.0
		// Detect silently failing push.apply
		// eslint-disable-next-line no-unused-expressions
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				pushNative.apply( target, slice.call( els ) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
	
				// Can't trust NodeList.length
				while ( ( target[ j++ ] = els[ i++ ] ) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
			setDocument( context );
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {
	
					// ID selector
					if ( ( m = match[ 1 ] ) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( ( elem = context.getElementById( m ) ) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && ( elem = newContext.getElementById( m ) ) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[ 2 ] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!nonnativeSelectorCache[ selector + " " ] &&
					( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&
	
					// Support: IE 8 only
					// Exclude object elements
					( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {
	
					newSelector = selector;
					newContext = context;
	
					// qSA considers elements outside a scoping root when evaluating child or
					// descendant combinators, which is not what we want.
					// In such cases, we work around the behavior by prefixing every selector in the
					// list with an ID selector referencing the scope context.
					// The technique has to be used as well when a leading combinator is used
					// as such selectors are not recognized by querySelectorAll.
					// Thanks to Andrew Dupont for this technique.
					if ( nodeType === 1 &&
						( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
	
						// We can use :scope instead of the ID hack if the browser
						// supports it & if we're not changing the context.
						if ( newContext !== context || !support.scope ) {
	
							// Capture the context ID, setting it first if necessary
							if ( ( nid = context.getAttribute( "id" ) ) ) {
								nid = nid.replace( rcssescape, fcssescape );
							} else {
								context.setAttribute( "id", ( nid = expando ) );
							}
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
								toSelector( groups[ i ] );
						}
						newSelector = groups.join( "," );
					}
	
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
						nonnativeSelectorCache( selector, true );
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
	
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
	
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return ( cache[ key + " " ] = value );
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement( "fieldset" );
	
		try {
			return !!fn( el );
		} catch ( e ) {
			return false;
		} finally {
	
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
	
			// release memory in IE
			el = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split( "|" ),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[ i ] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( ( cur = cur.nextSibling ) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return ( name === "input" || name === "button" ) && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {
	
		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {
	
			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {
	
				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {
	
					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}
	
					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||
	
						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
				}
	
				return elem.disabled === disabled;
	
			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}
	
			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction( function( argument ) {
			argument = +argument;
			return markFunction( function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
						seed[ j ] = !( matches[ j ] = seed[ j ] );
					}
				}
			} );
		} );
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		var namespace = elem.namespaceURI,
			docElem = ( elem.ownerDocument || elem ).documentElement;
	
		// Support: IE <=8
		// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
		// https://bugs.jquery.com/ticket/4833
		return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9 - 11+, Edge 12 - 18+
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( preferredDoc != document &&
			( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {
	
			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}
	
		// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
		// Safari 4 - 5 only, Opera <=11.6 - 12.x only
		// IE/Edge & older browsers don't support the :scope pseudo-class.
		// Support: Safari 6.0 only
		// Safari 6.0 supports :scope but it's an alias of :root there.
		support.scope = assert( function( el ) {
			docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
			return typeof el.querySelectorAll !== "undefined" &&
				!el.querySelectorAll( ":scope fieldset div" ).length;
		} );
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert( function( el ) {
			el.className = "i";
			return !el.getAttribute( "className" );
		} );
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert( function( el ) {
			el.appendChild( document.createComment( "" ) );
			return !el.getElementsByTagName( "*" ).length;
		} );
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert( function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		} );
	
		// ID filter and find
		if ( support.getById ) {
			Expr.filter[ "ID" ] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute( "id" ) === attrId;
				};
			};
			Expr.find[ "ID" ] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter[ "ID" ] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode( "id" );
					return node && node.value === attrId;
				};
			};
	
			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find[ "ID" ] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );
	
					if ( elem ) {
	
						// Verify the id attribute
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
	
						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( ( elem = elems[ i++ ] ) ) {
							node = elem.getAttributeNode( "id" );
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}
	
					return [];
				}
			};
		}
	
		// Tag
		Expr.find[ "TAG" ] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
	
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( ( elem = results[ i++ ] ) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {
	
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert( function( el ) {
	
				var input;
	
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll( "[selected]" ).length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push( "~=" );
				}
	
				// Support: IE 11+, Edge 15 - 18+
				// IE 11/Edge don't find elements on a `[name='']` query in some cases.
				// Adding a temporary attribute to the document before the selection works
				// around the issue.
				// Interestingly, IE 10 & older don't seem to have the issue.
				input = document.createElement( "input" );
				input.setAttribute( "name", "" );
				el.appendChild( input );
				if ( !el.querySelectorAll( "[name='']" ).length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
						whitespace + "*(?:''|\"\")" );
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll( ":checked" ).length ) {
					rbuggyQSA.push( ":checked" );
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push( ".#.+[+~]" );
				}
	
				// Support: Firefox <=3.6 - 5 only
				// Old Firefox doesn't throw on a badly-escaped identifier.
				el.querySelectorAll( "\\\f" );
				rbuggyQSA.push( "[\\r\\n\\f]" );
			} );
	
			assert( function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";
	
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement( "input" );
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll( "[name=d]" ).length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Support: Opera 10 - 11 only
				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll( "*,:x" );
				rbuggyQSA.push( ",.*:" );
			} );
		}
	
		if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector ) ) ) ) {
	
			assert( function( el ) {
	
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			} );
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				) );
			} :
			function( a, b ) {
				if ( b ) {
					while ( ( b = b.parentNode ) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {
	
				// Choose the first element that is related to our preferred document
				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				if ( a == document || a.ownerDocument == preferredDoc &&
					contains( preferredDoc, a ) ) {
					return -1;
				}
	
				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				if ( b == document || b.ownerDocument == preferredDoc &&
					contains( preferredDoc, b ) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
	
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
	
				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				/* eslint-disable eqeqeq */
				return a == document ? -1 :
					b == document ? 1 :
					/* eslint-enable eqeqeq */
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( ( cur = cur.parentNode ) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( ( cur = cur.parentNode ) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[ i ] === bp[ i ] ) {
				i++;
			}
	
			return i ?
	
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[ i ], bp[ i ] ) :
	
				// Otherwise nodes in our document sort first
				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				/* eslint-disable eqeqeq */
				ap[ i ] == preferredDoc ? -1 :
				bp[ i ] == preferredDoc ? 1 :
				/* eslint-enable eqeqeq */
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		setDocument( elem );
	
		if ( support.matchesSelector && documentIsHTML &&
			!nonnativeSelectorCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
	
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch ( e ) {
				nonnativeSelectorCache( expr, true );
			}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
	
		// Set document vars if needed
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( ( context.ownerDocument || context ) != document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
	
		// Set document vars if needed
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( ( elem.ownerDocument || elem ) != document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
	
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.escape = function( sel ) {
		return ( sel + "" ).replace( rcssescape, fcssescape );
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( ( elem = results[ i++ ] ) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
	
			// If no nodeType, this is expected to be an array
			while ( ( node = elem[ i++ ] ) ) {
	
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
	
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
	
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[ 1 ] = match[ 1 ].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
					match[ 5 ] || "" ).replace( runescape, funescape );
	
				if ( match[ 2 ] === "~=" ) {
					match[ 3 ] = " " + match[ 3 ] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
	
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[ 1 ] = match[ 1 ].toLowerCase();
	
				if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {
	
					// nth-* requires argument
					if ( !match[ 3 ] ) {
						Sizzle.error( match[ 0 ] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[ 4 ] = +( match[ 4 ] ?
						match[ 5 ] + ( match[ 6 ] || 1 ) :
						2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
					match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );
	
					// other types prohibit arguments
				} else if ( match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[ 6 ] && match[ 2 ];
	
				if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[ 3 ] ) {
					match[ 2 ] = match[ 4 ] || match[ 5 ] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
	
					// Get excess from tokenize (recursively)
					( excess = tokenize( unquoted, true ) ) &&
	
					// advance to the next closing parenthesis
					( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {
	
					// excess is a negative index
					match[ 0 ] = match[ 0 ].slice( 0, excess );
					match[ 2 ] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() {
						return true;
					} :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					( pattern = new RegExp( "(^|" + whitespace +
						")" + className + "(" + whitespace + "|$)" ) ) && classCache(
							className, function( elem ) {
								return pattern.test(
									typeof elem.className === "string" && elem.className ||
									typeof elem.getAttribute !== "undefined" &&
										elem.getAttribute( "class" ) ||
									""
								);
					} );
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					/* eslint-disable max-len */
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
					/* eslint-enable max-len */
	
				};
			},
	
			"CHILD": function( type, what, _argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, _context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( ( node = node[ dir ] ) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
	
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || ( node[ expando ] = {} );
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									( diff = nodeIndex = 0 ) || start.pop() ) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
	
								// Use previously-cached element index if available
								if ( useCache ) {
	
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || ( node[ expando ] = {} );
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										( outerCache[ node.uniqueID ] = {} );
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
	
									// Use the same loop as above to seek `elem` from the start
									while ( ( node = ++nodeIndex && node && node[ dir ] ||
										( diff = nodeIndex = 0 ) || start.pop() ) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] ||
													( node[ expando ] = {} );
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													( outerCache[ node.uniqueID ] = {} );
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
	
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction( function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[ i ] );
								seed[ idx ] = !( matches[ idx ] = matched[ i ] );
							}
						} ) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
	
			// Potentially complex pseudos
			"not": markFunction( function( selector ) {
	
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction( function( seed, matches, _context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( ( elem = unmatched[ i ] ) ) {
								seed[ i ] = !( matches[ i ] = elem );
							}
						}
					} ) :
					function( elem, _context, xml ) {
						input[ 0 ] = elem;
						matcher( input, null, xml, results );
	
						// Don't keep the element (issue #299)
						input[ 0 ] = null;
						return !results.pop();
					};
			} ),
	
			"has": markFunction( function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			} ),
	
			"contains": markFunction( function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
				};
			} ),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
	
				// lang value must be a valid identifier
				if ( !ridentifier.test( lang || "" ) ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( ( elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
					return false;
				};
			} ),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement &&
					( !document.hasFocus || document.hasFocus() ) &&
					!!( elem.type || elem.href || ~elem.tabIndex );
			},
	
			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),
	
			"checked": function( elem ) {
	
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return ( nodeName === "input" && !!elem.checked ) ||
					( nodeName === "option" && !!elem.selected );
			},
	
			"selected": function( elem ) {
	
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					// eslint-disable-next-line no-unused-expressions
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
	
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos[ "empty" ]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( ( attr = elem.getAttribute( "type" ) ) == null ||
						attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo( function() {
				return [ 0 ];
			} ),
	
			"last": createPositionalPseudo( function( _matchIndexes, length ) {
				return [ length - 1 ];
			} ),
	
			"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			} ),
	
			"even": createPositionalPseudo( function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} ),
	
			"odd": createPositionalPseudo( function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} ),
	
			"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
				var i = argument < 0 ?
					argument + length :
					argument > length ?
						length :
						argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} ),
	
			"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} )
		}
	};
	
	Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
				if ( match ) {
	
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[ 0 ].length ) || soFar;
				}
				groups.push( ( tokens = [] ) );
			}
	
			matched = false;
	
			// Combinators
			if ( ( match = rcombinators.exec( soFar ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
	
					// Cast descendant combinators to space
					type: match[ 0 ].replace( rtrim, " " )
				} );
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
					( match = preFilters[ type ]( match ) ) ) ) {
					matched = match.shift();
					tokens.push( {
						value: matched,
						type: type,
						matches: match
					} );
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
	
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[ i ].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;
	
		return combinator.first ?
	
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( ( elem = elem[ dir ] ) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( ( elem = elem[ dir ] ) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || ( elem[ expando ] = {} );
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] ||
								( outerCache[ elem.uniqueID ] = {} );
	
							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( ( oldCache = uniqueCache[ key ] ) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return ( newCache[ 2 ] = oldCache[ 2 ] );
							} else {
	
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[ i ]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[ 0 ];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[ i ], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( ( elem = unmatched[ i ] ) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction( function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts(
					selector || "*",
					context.nodeType ? [ context ] : context,
					[]
				),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
	
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( ( elem = temp[ i ] ) ) {
						matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
	
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( ( elem = matcherOut[ i ] ) ) {
	
								// Restore matcherIn since elem is not yet a final match
								temp.push( ( matcherIn[ i ] = elem ) );
							}
						}
						postFinder( null, ( matcherOut = [] ), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) &&
							( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {
	
							seed[ temp ] = !( results[ temp ] = elem );
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		} );
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[ 0 ].type ],
			implicitRelative = leadingRelative || Expr.relative[ " " ],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					( checkContext = context ).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
	
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
				matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
			} else {
				matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
	
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[ j ].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
	
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens
							.slice( 0, i - 1 )
							.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
	
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),
	
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
					len = elems.length;
	
				if ( outermost ) {
	
					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					outermostContext = context == document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
	
						// Support: IE 11+, Edge 17 - 18+
						// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
						// two documents; shallow comparisons work.
						// eslint-disable-next-line eqeqeq
						if ( !context && elem.ownerDocument != document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( ( matcher = elementMatchers[ j++ ] ) ) {
							if ( matcher( elem, context || document, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
	
						// They will have gone through all possible matchers
						if ( ( elem = !matcher && elem ) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( ( matcher = setMatchers[ j++ ] ) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
	
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
									setMatched[ i ] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
	
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[ i ] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache(
				selector,
				matcherFromGroupMatchers( elementMatchers, setMatchers )
			);
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( ( selector = compiled.selector || selector ) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[ 0 ] = match[ 0 ].slice( 0 );
			if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {
	
				context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
					.replace( runescape, funescape ), context ) || [] )[ 0 ];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[ i ];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ ( type = token.type ) ] ) {
					break;
				}
				if ( ( find = Expr.find[ type ] ) ) {
	
					// Search, expanding context for leading sibling combinators
					if ( ( seed = find(
						token.matches[ 0 ].replace( runescape, funescape ),
						rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
							context
					) ) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert( function( el ) {
	
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
	} );
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert( function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute( "href" ) === "#";
	} ) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		} );
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert( function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	} ) ) {
		addHandle( "value", function( elem, _name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		} );
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert( function( el ) {
		return el.getAttribute( "disabled" ) == null;
	} ) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
					( val = elem.getAttributeNode( name ) ) && val.specified ?
						val.value :
						null;
			}
		} );
	}
	
	return Sizzle;
	
	} )( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	
	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;
	
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	
	
	function nodeName( elem, name ) {
	
	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	
	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
	
	
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}
	
		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}
	
		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}
	
		// Filtered directly for both simple and complex selectors
		return jQuery.filter( qualifier, elements, not );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}
	
		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			ret = this.pushStack( [] );
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						if ( elem ) {
	
							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );
	
			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :
	
							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
							matched.push( cur );
							break;
						}
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, _i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, _i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, _i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			if ( elem.contentDocument != null &&
	
				// Support: IE 11+
				// <object> elements with no `data` attribute has an object
				// `contentDocument` with a `null` prototype.
				getProto( elem.contentDocument ) ) {
	
				return elem.contentDocument;
			}
	
			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if ( nodeName( elem, "template" ) ) {
				elem = elem.content || elem;
			}
	
			return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = locked || options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && toType( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}
	
	function adoptValue( value, resolve, reject, noValue ) {
		var method;
	
		try {
	
			// Check for promise aspect first to privilege synchronous behavior
			if ( value && isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );
	
			// Other thenables
			} else if ( value && isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );
	
			// Other non-thenables
			} else {
	
				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}
	
		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {
	
			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},
	
					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
	
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( _i, tuple ) {
	
								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
	
								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;
	
										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}
	
										returned = handler.apply( that, args );
	
										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}
	
										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&
	
											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;
	
										// Handle a returned thenable
										if ( isFunction( then ) ) {
	
											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);
	
											// Normal processors (resolve) also hook into progress
											} else {
	
												// ...and disregard older resolution values
												maxDepth++;
	
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}
	
										// Handle all other returned values
										} else {
	
											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}
	
											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},
	
									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {
	
												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}
	
												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {
	
													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}
	
													deferred.rejectWith( that, args );
												}
											}
										};
	
								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {
	
									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}
	
						return jQuery.Deferred( function( newDefer ) {
	
							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);
	
							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);
	
							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];
	
				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add(
						function() {
	
							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},
	
						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,
	
						// rejected_handlers.disable
						// fulfilled_handlers.disable
						tuples[ 3 - i ][ 3 ].disable,
	
						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock,
	
						// progress_handlers.lock
						tuples[ 0 ][ 3 ].lock
					);
				}
	
				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );
	
				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};
	
				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( singleValue ) {
			var
	
				// count of uncompleted subordinates
				remaining = arguments.length,
	
				// count of unprocessed arguments
				i = remaining,
	
				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),
	
				// the master Deferred
				master = jQuery.Deferred(),
	
				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};
	
			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );
	
				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
	
					return master.then();
				}
			}
	
			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}
	
			return master.promise();
		}
	} );
	
	
	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
	
	jQuery.Deferred.exceptionHook = function( error, stack ) {
	
		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};
	
	
	
	
	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};
	
	
	
	
	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();
	
	jQuery.fn.ready = function( fn ) {
	
		readyList
			.then( fn )
	
			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );
	
	jQuery.ready.then = readyList.then;
	
	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );
	
	} else {
	
		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );
	
		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( toType( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, _key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		if ( chainable ) {
			return elems;
		}
	
		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}
	
		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	
	
	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g;
	
	// Used by camelCase as callback to replace()
	function fcamelCase( _all, letter ) {
		return letter.toUpperCase();
	}
	
	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	}
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		cache: function( owner ) {
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ camelCase( data ) ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
	
				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
		},
		access: function( owner, key, value ) {
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				return this.get( owner, key );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key !== undefined ) {
	
				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {
	
					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( camelCase );
				} else {
					key = camelCase( key );
	
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}
	
				i = key.length;
	
				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}
	
		if ( data === "false" ) {
			return false;
		}
	
		if ( data === "null" ) {
			return null;
		}
	
		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}
	
		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}
	
		return data;
	}
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				this.each( function() {
	
					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var documentElement = document.documentElement;
	
	
	
		var isAttached = function( elem ) {
				return jQuery.contains( elem.ownerDocument, elem );
			},
			composed = { composed: true };
	
		// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
		// Check attachment across shadow DOM boundaries when possible (gh-3504)
		// Support: iOS 10.0-10.2 only
		// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
		// leading to errors. We need to check for `getRootNode`.
		if ( documentElement.getRootNode ) {
			isAttached = function( elem ) {
				return jQuery.contains( elem.ownerDocument, elem ) ||
					elem.getRootNode( composed ) === elem.ownerDocument;
			};
		}
	var isHiddenWithinTree = function( elem, el ) {
	
			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
	
			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&
	
				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				isAttached( elem ) &&
	
				jQuery.css( elem, "display" ) === "none";
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted, scale,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = elem.nodeType &&
				( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			while ( maxIterations-- ) {
	
				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style( elem, prop, initialInUnit + unit );
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;
	
			}
	
			initialInUnit = initialInUnit * 2;
			jQuery.style( elem, prop, initialInUnit + unit );
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	var defaultDisplayMap = {};
	
	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];
	
		if ( display ) {
			return display;
		}
	
		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );
	
		temp.parentNode.removeChild( temp );
	
		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;
	
		return display;
	}
	
	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;
	
		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			display = elem.style.display;
			if ( show ) {
	
				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";
	
					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}
	
		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}
	
		return elements;
	}
	
	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );
	
	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );
	
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	
		// Support: IE <=9 only
		// IE <=9 replaces <option> tags with their contents when inserted outside of
		// the select element.
		div.innerHTML = "<option></option>";
		support.option = !!div.lastChild;
	} )();
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	// Support: IE <=9 only
	if ( !support.option ) {
		wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
	}
	
	
	function getAll( context, tag ) {
	
		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;
	
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );
	
		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );
	
		} else {
			ret = [];
		}
	
		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}
	
		return ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, attached, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( toType( elem ) === "object" ) {
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			attached = isAttached( elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( attached ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE <=9 - 11+
	// focus() and blur() are asynchronous, except when they are no-op.
	// So expect focus to be synchronous when the element is already active,
	// and blur to be synchronous when the element is not already active.
	// (focus and blur are always synchronous in other supported browsers,
	// this just defines when we can count on it).
	function expectSync( elem, type ) {
		return ( elem === safeActiveElement() ) === ( type === "focus" );
	}
	
	// Support: IE <=9 only
	// Accessing document.activeElement can throw unexpectedly
	// https://bugs.jquery.com/ticket/13393
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Only attach events to objects that accept data
			if ( !acceptData( elem ) ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = Object.create( null );
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( nativeEvent ) {
	
			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
	
				// Make a writable jQuery.Event from the native event object
				event = jQuery.event.fix( nativeEvent ),
	
				handlers = (
						dataPriv.get( this, "events" ) || Object.create( null )
					)[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
	
			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}
	
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// If the event is namespaced, then each handler is only invoked if it is
					// specially universal or its namespaces are a superset of the event's.
					if ( !event.rnamespace || handleObj.namespace === false ||
						event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Find delegate handlers
			if ( delegateCount &&
	
				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&
	
				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,
	
				get: isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},
	
				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},
	
		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			click: {
	
				// Utilize native event to ensure correct state for checkable inputs
				setup: function( data ) {
	
					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;
	
					// Claim the first handler
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {
	
						// dataPriv.set( el, "click", ... )
						leverageNative( el, "click", returnTrue );
					}
	
					// Return false to allow normal processing in the caller
					return false;
				},
				trigger: function( data ) {
	
					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;
	
					// Force setup before triggering a click
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {
	
						leverageNative( el, "click" );
					}
	
					// Return non-false to allow normal event-path propagation
					return true;
				},
	
				// For cross-browser consistency, suppress native .click() on links
				// Also prevent it if we're currently inside a leveraged native-event stack
				_default: function( event ) {
					var target = event.target;
					return rcheckableType.test( target.type ) &&
						target.click && nodeName( target, "input" ) &&
						dataPriv.get( target, "click" ) ||
						nodeName( target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	// Ensure the presence of an event listener that handles manually-triggered
	// synthetic events by interrupting progress until reinvoked in response to
	// *native* events that it fires directly, ensuring that state changes have
	// already occurred before other listeners are invoked.
	function leverageNative( el, type, expectSync ) {
	
		// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
		if ( !expectSync ) {
			if ( dataPriv.get( el, type ) === undefined ) {
				jQuery.event.add( el, type, returnTrue );
			}
			return;
		}
	
		// Register the controller as a special universal handler for all event namespaces
		dataPriv.set( el, type, false );
		jQuery.event.add( el, type, {
			namespace: false,
			handler: function( event ) {
				var notAsync, result,
					saved = dataPriv.get( this, type );
	
				if ( ( event.isTrigger & 1 ) && this[ type ] ) {
	
					// Interrupt processing of the outer synthetic .trigger()ed event
					// Saved data should be false in such cases, but might be a leftover capture object
					// from an async native handler (gh-4350)
					if ( !saved.length ) {
	
						// Store arguments for use when handling the inner native event
						// There will always be at least one argument (an event object), so this array
						// will not be confused with a leftover capture object.
						saved = slice.call( arguments );
						dataPriv.set( this, type, saved );
	
						// Trigger the native event and capture its result
						// Support: IE <=9 - 11+
						// focus() and blur() are asynchronous
						notAsync = expectSync( this, type );
						this[ type ]();
						result = dataPriv.get( this, type );
						if ( saved !== result || notAsync ) {
							dataPriv.set( this, type, false );
						} else {
							result = {};
						}
						if ( saved !== result ) {
	
							// Cancel the outer synthetic event
							event.stopImmediatePropagation();
							event.preventDefault();
							return result.value;
						}
	
					// If this is an inner synthetic event for an event with a bubbling surrogate
					// (focus or blur), assume that the surrogate already propagated from triggering the
					// native event and prevent that from happening again here.
					// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
					// bubbling surrogate propagates *after* the non-bubbling base), but that seems
					// less bad than duplication.
					} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
						event.stopPropagation();
					}
	
				// If this is a native event triggered above, everything is now in order
				// Fire an inner synthetic event with the original arguments
				} else if ( saved.length ) {
	
					// ...and capture the result
					dataPriv.set( this, type, {
						value: jQuery.event.trigger(
	
							// Support: IE <=9 - 11+
							// Extend with the prototype to reset the above stopImmediatePropagation()
							jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
							saved.slice( 1 ),
							this
						)
					} );
	
					// Abort handling of the native event
					event.stopImmediatePropagation();
				}
			}
		} );
	}
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;
	
			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		code: true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,
	
		which: function( event ) {
			var button = event.button;
	
			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}
	
			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}
	
				if ( button & 2 ) {
					return 3;
				}
	
				if ( button & 4 ) {
					return 2;
				}
	
				return 0;
			}
	
			return event.which;
		}
	}, jQuery.event.addProp );
	
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
		jQuery.event.special[ type ] = {
	
			// Utilize native event if possible so blur/focus sequence is correct
			setup: function() {
	
				// Claim the first handler
				// dataPriv.set( this, "focus", ... )
				// dataPriv.set( this, "blur", ... )
				leverageNative( this, type, expectSync );
	
				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function() {
	
				// Force setup before trigger
				leverageNative( this, type );
	
				// Return non-false to allow normal event-path propagation
				return true;
			},
	
			delegateType: delegateType
		};
	} );
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
	
		// Support: IE <=10 - 11, Edge 12 - 13 only
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
	
			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
		}
	
		return elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
			elem.type = elem.type.slice( 5 );
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.get( src );
			events = pdataOld.events;
	
			if ( events ) {
				dataPriv.remove( dest, "handle events" );
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = flat( args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			valueIsFunction = isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( valueIsFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( valueIsFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl && !node.noModule ) {
									jQuery._evalUrl( node.src, {
										nonce: node.nonce || node.getAttribute( "nonce" )
									}, doc );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && isAttached( node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html;
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = isAttached( elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.call( elem );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );
	
	
	
	( function() {
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
	
			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}
	
			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
				"margin-top:1px;padding:0;border:0";
			div.style.cssText =
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
				"margin:auto;border:1px;padding:1px;" +
				"width:60%;top:1%";
			documentElement.appendChild( container ).appendChild( div );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
	
			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;
	
			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;
	
			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;
	
			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			// Support: Chrome <=64
			// Don't get tricked when zoom affects offsetWidth (gh-4029)
			div.style.position = "absolute";
			scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;
	
			documentElement.removeChild( container );
	
			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}
	
		function roundPixelMeasures( measure ) {
			return Math.round( parseFloat( measure ) );
		}
	
		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
			reliableTrDimensionsVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		jQuery.extend( support, {
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function() {
				computeStyleTests();
				return scrollboxSizeVal;
			},
	
			// Support: IE 9 - 11+, Edge 15 - 18+
			// IE/Edge misreport `getComputedStyle` of table rows with width/height
			// set in CSS while `offset*` properties report correct values.
			// Behavior in IE 9 is more subtle than in newer versions & it passes
			// some versions of this test; make sure not to make it pass there!
			reliableTrDimensions: function() {
				var table, tr, trChild, trStyle;
				if ( reliableTrDimensionsVal == null ) {
					table = document.createElement( "table" );
					tr = document.createElement( "tr" );
					trChild = document.createElement( "div" );
	
					table.style.cssText = "position:absolute;left:-11111px";
					tr.style.height = "1px";
					trChild.style.height = "9px";
	
					documentElement
						.appendChild( table )
						.appendChild( tr )
						.appendChild( trChild );
	
					trStyle = window.getComputedStyle( tr );
					reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;
	
					documentElement.removeChild( table );
				}
				return reliableTrDimensionsVal;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
	
			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;
	
		computed = computed || getStyles( elem );
	
		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
	
			if ( ret === "" && !isAttached( elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style,
		vendorProps = {};
	
	// Return a vendor-prefixed property or undefined
	function vendorPropName( name ) {
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
	function finalPropName( name ) {
		var final = jQuery.cssProps[ name ] || vendorProps[ name ];
	
		if ( final ) {
			return final;
		}
		if ( name in emptyStyle ) {
			return name;
		}
		return vendorProps[ name ] = vendorPropName( name ) || name;
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		};
	
	function setPositiveNumber( _elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
		var i = dimension === "width" ? 1 : 0,
			extra = 0,
			delta = 0;
	
		// Adjustment may not be necessary
		if ( box === ( isBorderBox ? "border" : "content" ) ) {
			return 0;
		}
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin
			if ( box === "margin" ) {
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
			}
	
			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if ( !isBorderBox ) {
	
				// Add padding
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// For "border" or "margin", add border
				if ( box !== "padding" ) {
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
	
				// But still keep track of it otherwise
				} else {
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
	
			// If we get here with a border-box (content + padding + border), we're seeking "content" or
			// "padding" or "margin"
			} else {
	
				// For "content", subtract padding
				if ( box === "content" ) {
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// For "content" or "padding", subtract border
				if ( box !== "margin" ) {
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		// Account for positive content-box scroll gutter when requested by providing computedVal
		if ( !isBorderBox && computedVal >= 0 ) {
	
			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max( 0, Math.ceil(
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
				computedVal -
				delta -
				extra -
				0.5
	
			// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
			// Use an explicit zero to avoid NaN (gh-3964)
			) ) || 0;
		}
	
		return delta;
	}
	
	function getWidthOrHeight( elem, dimension, extra ) {
	
		// Start with computed style
		var styles = getStyles( elem ),
	
			// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
			// Fake content-box until we know it's needed to know the true value.
			boxSizingNeeded = !support.boxSizingReliable() || extra,
			isBorderBox = boxSizingNeeded &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
			valueIsBorderBox = isBorderBox,
	
			val = curCSS( elem, dimension, styles ),
			offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );
	
		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if ( rnumnonpx.test( val ) ) {
			if ( !extra ) {
				return val;
			}
			val = "auto";
		}
	
	
		// Support: IE 9 - 11 only
		// Use offsetWidth/offsetHeight for when box sizing is unreliable.
		// In those cases, the computed value can be trusted to be border-box.
		if ( ( !support.boxSizingReliable() && isBorderBox ||
	
			// Support: IE 10 - 11+, Edge 15 - 18+
			// IE/Edge misreport `getComputedStyle` of table rows with width/height
			// set in CSS while `offset*` properties report correct values.
			// Interestingly, in some cases IE 9 doesn't suffer from this issue.
			!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||
	
			// Fall back to offsetWidth/offsetHeight when value is "auto"
			// This happens for inline elements with no explicit setting (gh-3571)
			val === "auto" ||
	
			// Support: Android <=4.1 - 4.3 only
			// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
	
			// Make sure the element is visible & connected
			elem.getClientRects().length ) {
	
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
			// retrieved value as a content box dimension.
			valueIsBorderBox = offsetProp in elem;
			if ( valueIsBorderBox ) {
				val = elem[ offsetProp ];
			}
		}
	
		// Normalize "" and auto
		val = parseFloat( val ) || 0;
	
		// Adjust for the element's box model
		return ( val +
			boxModelAdjustment(
				elem,
				dimension,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles,
	
				// Provide the current computed size to request scroll gutter calculation (gh-3589)
				val
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"gridArea": true,
			"gridColumn": true,
			"gridColumnEnd": true,
			"gridColumnStart": true,
			"gridRow": true,
			"gridRowEnd": true,
			"gridRowStart": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;
	
			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
				// "px" to a few hardcoded values.
				if ( type === "number" && !isCustomProp ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name );
	
			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
	
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( _i, dimension ) {
		jQuery.cssHooks[ dimension ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
	
						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, dimension, extra );
							} ) :
							getWidthOrHeight( elem, dimension, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = getStyles( elem ),
	
					// Only read styles.position if the test has a chance to fail
					// to avoid forcing a reflow.
					scrollboxSizeBuggy = !support.scrollboxSize() &&
						styles.position === "absolute",
	
					// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
					boxSizingNeeded = scrollboxSizeBuggy || extra,
					isBorderBox = boxSizingNeeded &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					subtract = extra ?
						boxModelAdjustment(
							elem,
							dimension,
							extra,
							isBorderBox,
							styles
						) :
						0;
	
				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if ( isBorderBox && scrollboxSizeBuggy ) {
					subtract -= Math.ceil(
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
						parseFloat( styles[ dimension ] ) -
						boxModelAdjustment( elem, dimension, "border", false, styles ) -
						0.5
					);
				}
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ dimension ] = value;
					value = jQuery.css( elem, dimension );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( prefix !== "margin" ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 && (
						jQuery.cssHooks[ tween.prop ] ||
						tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}
	
			jQuery.fx.tick();
		}
	}
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = Date.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
	
					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}
	
		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}
	
		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {
	
			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {
	
					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}
	
			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {
	
					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {
	
			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}
	
				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}
	
				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}
	
				/* eslint-disable no-loop-func */
	
				anim.done( function() {
	
				/* eslint-enable no-loop-func */
	
					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}
	
			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}
	
				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}
	
				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						result.stop.bind( result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		return animation;
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction( easing ) && easing
		};
	
		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;
	
		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];
	
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = Date.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}
	
		inProgress = true;
		schedule();
	};
	
	jQuery.fx.stop = function() {
		inProgress = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name,
				i = 0,
	
				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();
	
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}
	
					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}
	
					return -1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
		// Strip and collapse whitespace according to HTML spec
		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}
	
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	function classesToArray( value ) {
		if ( Array.isArray( value ) ) {
			return value;
		}
		if ( typeof value === "string" ) {
			return value.match( rnothtmlwhite ) || [];
		}
		return [];
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			classes = classesToArray( value );
	
			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			classes = classesToArray( value );
	
			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isValidValue = type === "string" || Array.isArray( value );
	
			if ( typeof stateVal === "boolean" && isValidValue ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( isValidValue ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = classesToArray( value );
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, valueIsFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}
	
					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}
	
				return;
			}
	
			valueIsFunction = isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( valueIsFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;
	
					if ( index < 0 ) {
						i = max;
	
					} else {
						i = one ? index : 0;
					}
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						/* eslint-disable no-cond-assign */
	
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
	
						/* eslint-enable no-cond-assign */
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	support.focusin = "onfocusin" in window;
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		stopPropagationCallback = function( e ) {
			e.stopPropagation();
		};
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = lastElement = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
				lastElement = cur;
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = (
						dataPriv.get( cur, "events" ) || Object.create( null )
					)[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
	
						if ( event.isPropagationStopped() ) {
							lastElement.addEventListener( type, stopPropagationCallback );
						}
	
						elem[ type ]();
	
						if ( event.isPropagationStopped() ) {
							lastElement.removeEventListener( type, stopPropagationCallback );
						}
	
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
	
					// Handle: regular nodes (via `this.ownerDocument`), window
					// (via `this.document`) & document (via `this`).
					var doc = this.ownerDocument || this.document || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this.document || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = { guid: Date.now() };
	
	var rquery = ( /\?/ );
	
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( Array.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && toType( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {
	
				// If value is a function, invoke it and use its return value
				var value = isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;
	
				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};
	
		if ( a == null ) {
			return "";
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( _i, elem ) {
				var val = jQuery( this ).val();
	
				if ( val == null ) {
					return null;
				}
	
				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}
	
				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];
	
			if ( isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": JSON.parse,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// Request state (becomes false upon send and true upon completion)
				completed,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// uncached part of the url
				uncached,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
										( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
											.concat( match[ 2 ] );
								}
							}
							match = responseHeaders[ key.toLowerCase() + " " ];
						}
						return match == null ? null : match.join( ", " );
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {
	
								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR );
	
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );
	
				// If data is available and should be processed, append data to url
				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
						uncached;
				}
	
				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;
	
			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}
	
					// Propagate others as results
					done( -1, e );
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Ignore repeat invocations
				if ( completed ) {
					return;
				}
	
				completed = true;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Use a noop converter for missing script
				if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
					s.converters[ "text script" ] = function() {};
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( _i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	jQuery.ajaxPrefilter( function( s ) {
		var i;
		for ( i in s.headers ) {
			if ( i.toLowerCase() === "content-type" ) {
				s.contentType = s.headers[ i ] || "";
			}
		}
	} );
	
	
	jQuery._evalUrl = function( url, options, doc ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
	
			// Only evaluate the response if it is successful (gh-4126)
			// dataFilter is not invoked for failure responses, so using it instead
			// of the default converter is kludgy but it works.
			converters: {
				"text script": function() {}
			},
			dataFilter: function( response ) {
				jQuery.globalEval( response, options, doc );
			}
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( this[ 0 ] ) {
				if ( isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var htmlIsFunction = isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );
	
	
	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};
	
	
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.ontimeout =
										xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );
	
					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain or forced-by-attrs requests
		if ( s.crossDomain || s.scriptAttrs ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" )
						.attr( s.scriptAttrs || {} )
						.prop( { charset: s.scriptCharset, src: s.url } )
						.on( "load error", callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						} );
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		var base, parsed, scripts;
	
		if ( !context ) {
	
			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );
	
				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}
	
		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				if ( typeof props.top === "number" ) {
					props.top += "px";
				}
				if ( typeof props.left === "number" ) {
					props.left += "px";
				}
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
	
		// offset() relates an element's border box to the document origin
		offset: function( options ) {
	
			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var rect, win,
				elem = this[ 0 ];
	
			if ( !elem ) {
				return;
			}
	
			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}
	
			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},
	
		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset, doc,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();
	
			} else {
				offset = this.offset();
	
				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while ( offsetParent &&
					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) {
	
					offsetParent = offsetParent.parentNode;
				}
				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {
	
					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery( offsetParent ).offset();
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
				}
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
	
				// Coalesce documents and windows
				var win;
				if ( isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( _i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( isWindow( elem ) ) {
	
						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );
	
	
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( _i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
	
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( _i, name ) {
	
			// Handle event binding
			jQuery.fn[ name ] = function( data, fn ) {
				return arguments.length > 0 ?
					this.on( name, null, data, fn ) :
					this.trigger( name );
			};
		} );
	
	
	
	
	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
	
	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function( fn, context ) {
		var tmp, args, proxy;
	
		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}
	
		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !isFunction( fn ) ) {
			return undefined;
		}
	
		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};
	
		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
		return proxy;
	};
	
	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;
	
	jQuery.now = Date.now;
	
	jQuery.isNumeric = function( obj ) {
	
		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&
	
			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	};
	
	jQuery.trim = function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	};
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function() {
			return jQuery;
		} );
	}
	
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === "undefined" ) {
		window.jQuery = window.$ = jQuery;
	}
	
	
	
	
	return jQuery;
	} );
	
	},{}],25:[function(require,module,exports){
	//! moment.js
	
	;(function (global, factory) {
		typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		global.moment = factory()
	}(this, (function () { 'use strict';
	
		var hookCallback;
	
		function hooks () {
			return hookCallback.apply(null, arguments);
		}
	
		// This is done to register the method called with moment()
		// without creating circular dependencies.
		function setHookCallback (callback) {
			hookCallback = callback;
		}
	
		function isArray(input) {
			return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
		}
	
		function isObject(input) {
			// IE8 will treat undefined and null as object if it wasn't for
			// input != null
			return input != null && Object.prototype.toString.call(input) === '[object Object]';
		}
	
		function isObjectEmpty(obj) {
			if (Object.getOwnPropertyNames) {
				return (Object.getOwnPropertyNames(obj).length === 0);
			} else {
				var k;
				for (k in obj) {
					if (obj.hasOwnProperty(k)) {
						return false;
					}
				}
				return true;
			}
		}
	
		function isUndefined(input) {
			return input === void 0;
		}
	
		function isNumber(input) {
			return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
		}
	
		function isDate(input) {
			return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
		}
	
		function map(arr, fn) {
			var res = [], i;
			for (i = 0; i < arr.length; ++i) {
				res.push(fn(arr[i], i));
			}
			return res;
		}
	
		function hasOwnProp(a, b) {
			return Object.prototype.hasOwnProperty.call(a, b);
		}
	
		function extend(a, b) {
			for (var i in b) {
				if (hasOwnProp(b, i)) {
					a[i] = b[i];
				}
			}
	
			if (hasOwnProp(b, 'toString')) {
				a.toString = b.toString;
			}
	
			if (hasOwnProp(b, 'valueOf')) {
				a.valueOf = b.valueOf;
			}
	
			return a;
		}
	
		function createUTC (input, format, locale, strict) {
			return createLocalOrUTC(input, format, locale, strict, true).utc();
		}
	
		function defaultParsingFlags() {
			// We need to deep clone this object.
			return {
				empty           : false,
				unusedTokens    : [],
				unusedInput     : [],
				overflow        : -2,
				charsLeftOver   : 0,
				nullInput       : false,
				invalidMonth    : null,
				invalidFormat   : false,
				userInvalidated : false,
				iso             : false,
				parsedDateParts : [],
				meridiem        : null,
				rfc2822         : false,
				weekdayMismatch : false
			};
		}
	
		function getParsingFlags(m) {
			if (m._pf == null) {
				m._pf = defaultParsingFlags();
			}
			return m._pf;
		}
	
		var some;
		if (Array.prototype.some) {
			some = Array.prototype.some;
		} else {
			some = function (fun) {
				var t = Object(this);
				var len = t.length >>> 0;
	
				for (var i = 0; i < len; i++) {
					if (i in t && fun.call(this, t[i], i, t)) {
						return true;
					}
				}
	
				return false;
			};
		}
	
		function isValid(m) {
			if (m._isValid == null) {
				var flags = getParsingFlags(m);
				var parsedParts = some.call(flags.parsedDateParts, function (i) {
					return i != null;
				});
				var isNowValid = !isNaN(m._d.getTime()) &&
					flags.overflow < 0 &&
					!flags.empty &&
					!flags.invalidMonth &&
					!flags.invalidWeekday &&
					!flags.weekdayMismatch &&
					!flags.nullInput &&
					!flags.invalidFormat &&
					!flags.userInvalidated &&
					(!flags.meridiem || (flags.meridiem && parsedParts));
	
				if (m._strict) {
					isNowValid = isNowValid &&
						flags.charsLeftOver === 0 &&
						flags.unusedTokens.length === 0 &&
						flags.bigHour === undefined;
				}
	
				if (Object.isFrozen == null || !Object.isFrozen(m)) {
					m._isValid = isNowValid;
				}
				else {
					return isNowValid;
				}
			}
			return m._isValid;
		}
	
		function createInvalid (flags) {
			var m = createUTC(NaN);
			if (flags != null) {
				extend(getParsingFlags(m), flags);
			}
			else {
				getParsingFlags(m).userInvalidated = true;
			}
	
			return m;
		}
	
		// Plugins that add properties should also add the key here (null value),
		// so we can properly clone ourselves.
		var momentProperties = hooks.momentProperties = [];
	
		function copyConfig(to, from) {
			var i, prop, val;
	
			if (!isUndefined(from._isAMomentObject)) {
				to._isAMomentObject = from._isAMomentObject;
			}
			if (!isUndefined(from._i)) {
				to._i = from._i;
			}
			if (!isUndefined(from._f)) {
				to._f = from._f;
			}
			if (!isUndefined(from._l)) {
				to._l = from._l;
			}
			if (!isUndefined(from._strict)) {
				to._strict = from._strict;
			}
			if (!isUndefined(from._tzm)) {
				to._tzm = from._tzm;
			}
			if (!isUndefined(from._isUTC)) {
				to._isUTC = from._isUTC;
			}
			if (!isUndefined(from._offset)) {
				to._offset = from._offset;
			}
			if (!isUndefined(from._pf)) {
				to._pf = getParsingFlags(from);
			}
			if (!isUndefined(from._locale)) {
				to._locale = from._locale;
			}
	
			if (momentProperties.length > 0) {
				for (i = 0; i < momentProperties.length; i++) {
					prop = momentProperties[i];
					val = from[prop];
					if (!isUndefined(val)) {
						to[prop] = val;
					}
				}
			}
	
			return to;
		}
	
		var updateInProgress = false;
	
		// Moment prototype object
		function Moment(config) {
			copyConfig(this, config);
			this._d = new Date(config._d != null ? config._d.getTime() : NaN);
			if (!this.isValid()) {
				this._d = new Date(NaN);
			}
			// Prevent infinite loop in case updateOffset creates new moment
			// objects.
			if (updateInProgress === false) {
				updateInProgress = true;
				hooks.updateOffset(this);
				updateInProgress = false;
			}
		}
	
		function isMoment (obj) {
			return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
		}
	
		function absFloor (number) {
			if (number < 0) {
				// -0 -> 0
				return Math.ceil(number) || 0;
			} else {
				return Math.floor(number);
			}
		}
	
		function toInt(argumentForCoercion) {
			var coercedNumber = +argumentForCoercion,
				value = 0;
	
			if (coercedNumber !== 0 && isFinite(coercedNumber)) {
				value = absFloor(coercedNumber);
			}
	
			return value;
		}
	
		// compare two arrays, return the number of differences
		function compareArrays(array1, array2, dontConvert) {
			var len = Math.min(array1.length, array2.length),
				lengthDiff = Math.abs(array1.length - array2.length),
				diffs = 0,
				i;
			for (i = 0; i < len; i++) {
				if ((dontConvert && array1[i] !== array2[i]) ||
					(!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
					diffs++;
				}
			}
			return diffs + lengthDiff;
		}
	
		function warn(msg) {
			if (hooks.suppressDeprecationWarnings === false &&
					(typeof console !==  'undefined') && console.warn) {
				console.warn('Deprecation warning: ' + msg);
			}
		}
	
		function deprecate(msg, fn) {
			var firstTime = true;
	
			return extend(function () {
				if (hooks.deprecationHandler != null) {
					hooks.deprecationHandler(null, msg);
				}
				if (firstTime) {
					var args = [];
					var arg;
					for (var i = 0; i < arguments.length; i++) {
						arg = '';
						if (typeof arguments[i] === 'object') {
							arg += '\n[' + i + '] ';
							for (var key in arguments[0]) {
								arg += key + ': ' + arguments[0][key] + ', ';
							}
							arg = arg.slice(0, -2); // Remove trailing comma and space
						} else {
							arg = arguments[i];
						}
						args.push(arg);
					}
					warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
					firstTime = false;
				}
				return fn.apply(this, arguments);
			}, fn);
		}
	
		var deprecations = {};
	
		function deprecateSimple(name, msg) {
			if (hooks.deprecationHandler != null) {
				hooks.deprecationHandler(name, msg);
			}
			if (!deprecations[name]) {
				warn(msg);
				deprecations[name] = true;
			}
		}
	
		hooks.suppressDeprecationWarnings = false;
		hooks.deprecationHandler = null;
	
		function isFunction(input) {
			return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
		}
	
		function set (config) {
			var prop, i;
			for (i in config) {
				prop = config[i];
				if (isFunction(prop)) {
					this[i] = prop;
				} else {
					this['_' + i] = prop;
				}
			}
			this._config = config;
			// Lenient ordinal parsing accepts just a number in addition to
			// number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
			// TODO: Remove "ordinalParse" fallback in next major release.
			this._dayOfMonthOrdinalParseLenient = new RegExp(
				(this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
					'|' + (/\d{1,2}/).source);
		}
	
		function mergeConfigs(parentConfig, childConfig) {
			var res = extend({}, parentConfig), prop;
			for (prop in childConfig) {
				if (hasOwnProp(childConfig, prop)) {
					if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
						res[prop] = {};
						extend(res[prop], parentConfig[prop]);
						extend(res[prop], childConfig[prop]);
					} else if (childConfig[prop] != null) {
						res[prop] = childConfig[prop];
					} else {
						delete res[prop];
					}
				}
			}
			for (prop in parentConfig) {
				if (hasOwnProp(parentConfig, prop) &&
						!hasOwnProp(childConfig, prop) &&
						isObject(parentConfig[prop])) {
					// make sure changes to properties don't modify parent config
					res[prop] = extend({}, res[prop]);
				}
			}
			return res;
		}
	
		function Locale(config) {
			if (config != null) {
				this.set(config);
			}
		}
	
		var keys;
	
		if (Object.keys) {
			keys = Object.keys;
		} else {
			keys = function (obj) {
				var i, res = [];
				for (i in obj) {
					if (hasOwnProp(obj, i)) {
						res.push(i);
					}
				}
				return res;
			};
		}
	
		var defaultCalendar = {
			sameDay : '[Today at] LT',
			nextDay : '[Tomorrow at] LT',
			nextWeek : 'dddd [at] LT',
			lastDay : '[Yesterday at] LT',
			lastWeek : '[Last] dddd [at] LT',
			sameElse : 'L'
		};
	
		function calendar (key, mom, now) {
			var output = this._calendar[key] || this._calendar['sameElse'];
			return isFunction(output) ? output.call(mom, now) : output;
		}
	
		var defaultLongDateFormat = {
			LTS  : 'h:mm:ss A',
			LT   : 'h:mm A',
			L    : 'MM/DD/YYYY',
			LL   : 'MMMM D, YYYY',
			LLL  : 'MMMM D, YYYY h:mm A',
			LLLL : 'dddd, MMMM D, YYYY h:mm A'
		};
	
		function longDateFormat (key) {
			var format = this._longDateFormat[key],
				formatUpper = this._longDateFormat[key.toUpperCase()];
	
			if (format || !formatUpper) {
				return format;
			}
	
			this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
				return val.slice(1);
			});
	
			return this._longDateFormat[key];
		}
	
		var defaultInvalidDate = 'Invalid date';
	
		function invalidDate () {
			return this._invalidDate;
		}
	
		var defaultOrdinal = '%d';
		var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	
		function ordinal (number) {
			return this._ordinal.replace('%d', number);
		}
	
		var defaultRelativeTime = {
			future : 'in %s',
			past   : '%s ago',
			s  : 'a few seconds',
			ss : '%d seconds',
			m  : 'a minute',
			mm : '%d minutes',
			h  : 'an hour',
			hh : '%d hours',
			d  : 'a day',
			dd : '%d days',
			M  : 'a month',
			MM : '%d months',
			y  : 'a year',
			yy : '%d years'
		};
	
		function relativeTime (number, withoutSuffix, string, isFuture) {
			var output = this._relativeTime[string];
			return (isFunction(output)) ?
				output(number, withoutSuffix, string, isFuture) :
				output.replace(/%d/i, number);
		}
	
		function pastFuture (diff, output) {
			var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
			return isFunction(format) ? format(output) : format.replace(/%s/i, output);
		}
	
		var aliases = {};
	
		function addUnitAlias (unit, shorthand) {
			var lowerCase = unit.toLowerCase();
			aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
		}
	
		function normalizeUnits(units) {
			return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
		}
	
		function normalizeObjectUnits(inputObject) {
			var normalizedInput = {},
				normalizedProp,
				prop;
	
			for (prop in inputObject) {
				if (hasOwnProp(inputObject, prop)) {
					normalizedProp = normalizeUnits(prop);
					if (normalizedProp) {
						normalizedInput[normalizedProp] = inputObject[prop];
					}
				}
			}
	
			return normalizedInput;
		}
	
		var priorities = {};
	
		function addUnitPriority(unit, priority) {
			priorities[unit] = priority;
		}
	
		function getPrioritizedUnits(unitsObj) {
			var units = [];
			for (var u in unitsObj) {
				units.push({unit: u, priority: priorities[u]});
			}
			units.sort(function (a, b) {
				return a.priority - b.priority;
			});
			return units;
		}
	
		function zeroFill(number, targetLength, forceSign) {
			var absNumber = '' + Math.abs(number),
				zerosToFill = targetLength - absNumber.length,
				sign = number >= 0;
			return (sign ? (forceSign ? '+' : '') : '-') +
				Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
		}
	
		var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
		var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
		var formatFunctions = {};
	
		var formatTokenFunctions = {};
	
		// token:    'M'
		// padded:   ['MM', 2]
		// ordinal:  'Mo'
		// callback: function () { this.month() + 1 }
		function addFormatToken (token, padded, ordinal, callback) {
			var func = callback;
			if (typeof callback === 'string') {
				func = function () {
					return this[callback]();
				};
			}
			if (token) {
				formatTokenFunctions[token] = func;
			}
			if (padded) {
				formatTokenFunctions[padded[0]] = function () {
					return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
				};
			}
			if (ordinal) {
				formatTokenFunctions[ordinal] = function () {
					return this.localeData().ordinal(func.apply(this, arguments), token);
				};
			}
		}
	
		function removeFormattingTokens(input) {
			if (input.match(/\[[\s\S]/)) {
				return input.replace(/^\[|\]$/g, '');
			}
			return input.replace(/\\/g, '');
		}
	
		function makeFormatFunction(format) {
			var array = format.match(formattingTokens), i, length;
	
			for (i = 0, length = array.length; i < length; i++) {
				if (formatTokenFunctions[array[i]]) {
					array[i] = formatTokenFunctions[array[i]];
				} else {
					array[i] = removeFormattingTokens(array[i]);
				}
			}
	
			return function (mom) {
				var output = '', i;
				for (i = 0; i < length; i++) {
					output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
				}
				return output;
			};
		}
	
		// format date using native date object
		function formatMoment(m, format) {
			if (!m.isValid()) {
				return m.localeData().invalidDate();
			}
	
			format = expandFormat(format, m.localeData());
			formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
			return formatFunctions[format](m);
		}
	
		function expandFormat(format, locale) {
			var i = 5;
	
			function replaceLongDateFormatTokens(input) {
				return locale.longDateFormat(input) || input;
			}
	
			localFormattingTokens.lastIndex = 0;
			while (i >= 0 && localFormattingTokens.test(format)) {
				format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
				localFormattingTokens.lastIndex = 0;
				i -= 1;
			}
	
			return format;
		}
	
		var match1         = /\d/;            //       0 - 9
		var match2         = /\d\d/;          //      00 - 99
		var match3         = /\d{3}/;         //     000 - 999
		var match4         = /\d{4}/;         //    0000 - 9999
		var match6         = /[+-]?\d{6}/;    // -999999 - 999999
		var match1to2      = /\d\d?/;         //       0 - 99
		var match3to4      = /\d\d\d\d?/;     //     999 - 9999
		var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
		var match1to3      = /\d{1,3}/;       //       0 - 999
		var match1to4      = /\d{1,4}/;       //       0 - 9999
		var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
		var matchUnsigned  = /\d+/;           //       0 - inf
		var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
		var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
		var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
		var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
		// any word (or two) characters or numbers including two/three word month in arabic.
		// includes scottish gaelic two word and hyphenated months
		var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
	
		var regexes = {};
	
		function addRegexToken (token, regex, strictRegex) {
			regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
				return (isStrict && strictRegex) ? strictRegex : regex;
			};
		}
	
		function getParseRegexForToken (token, config) {
			if (!hasOwnProp(regexes, token)) {
				return new RegExp(unescapeFormat(token));
			}
	
			return regexes[token](config._strict, config._locale);
		}
	
		// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
		function unescapeFormat(s) {
			return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
				return p1 || p2 || p3 || p4;
			}));
		}
	
		function regexEscape(s) {
			return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
		}
	
		var tokens = {};
	
		function addParseToken (token, callback) {
			var i, func = callback;
			if (typeof token === 'string') {
				token = [token];
			}
			if (isNumber(callback)) {
				func = function (input, array) {
					array[callback] = toInt(input);
				};
			}
			for (i = 0; i < token.length; i++) {
				tokens[token[i]] = func;
			}
		}
	
		function addWeekParseToken (token, callback) {
			addParseToken(token, function (input, array, config, token) {
				config._w = config._w || {};
				callback(input, config._w, config, token);
			});
		}
	
		function addTimeToArrayFromToken(token, input, config) {
			if (input != null && hasOwnProp(tokens, token)) {
				tokens[token](input, config._a, config, token);
			}
		}
	
		var YEAR = 0;
		var MONTH = 1;
		var DATE = 2;
		var HOUR = 3;
		var MINUTE = 4;
		var SECOND = 5;
		var MILLISECOND = 6;
		var WEEK = 7;
		var WEEKDAY = 8;
	
		// FORMATTING
	
		addFormatToken('Y', 0, 0, function () {
			var y = this.year();
			return y <= 9999 ? '' + y : '+' + y;
		});
	
		addFormatToken(0, ['YY', 2], 0, function () {
			return this.year() % 100;
		});
	
		addFormatToken(0, ['YYYY',   4],       0, 'year');
		addFormatToken(0, ['YYYYY',  5],       0, 'year');
		addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
		// ALIASES
	
		addUnitAlias('year', 'y');
	
		// PRIORITIES
	
		addUnitPriority('year', 1);
	
		// PARSING
	
		addRegexToken('Y',      matchSigned);
		addRegexToken('YY',     match1to2, match2);
		addRegexToken('YYYY',   match1to4, match4);
		addRegexToken('YYYYY',  match1to6, match6);
		addRegexToken('YYYYYY', match1to6, match6);
	
		addParseToken(['YYYYY', 'YYYYYY'], YEAR);
		addParseToken('YYYY', function (input, array) {
			array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
		});
		addParseToken('YY', function (input, array) {
			array[YEAR] = hooks.parseTwoDigitYear(input);
		});
		addParseToken('Y', function (input, array) {
			array[YEAR] = parseInt(input, 10);
		});
	
		// HELPERS
	
		function daysInYear(year) {
			return isLeapYear(year) ? 366 : 365;
		}
	
		function isLeapYear(year) {
			return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
		}
	
		// HOOKS
	
		hooks.parseTwoDigitYear = function (input) {
			return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
		};
	
		// MOMENTS
	
		var getSetYear = makeGetSet('FullYear', true);
	
		function getIsLeapYear () {
			return isLeapYear(this.year());
		}
	
		function makeGetSet (unit, keepTime) {
			return function (value) {
				if (value != null) {
					set$1(this, unit, value);
					hooks.updateOffset(this, keepTime);
					return this;
				} else {
					return get(this, unit);
				}
			};
		}
	
		function get (mom, unit) {
			return mom.isValid() ?
				mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
		}
	
		function set$1 (mom, unit, value) {
			if (mom.isValid() && !isNaN(value)) {
				if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
					mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
				}
				else {
					mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
				}
			}
		}
	
		// MOMENTS
	
		function stringGet (units) {
			units = normalizeUnits(units);
			if (isFunction(this[units])) {
				return this[units]();
			}
			return this;
		}
	
	
		function stringSet (units, value) {
			if (typeof units === 'object') {
				units = normalizeObjectUnits(units);
				var prioritized = getPrioritizedUnits(units);
				for (var i = 0; i < prioritized.length; i++) {
					this[prioritized[i].unit](units[prioritized[i].unit]);
				}
			} else {
				units = normalizeUnits(units);
				if (isFunction(this[units])) {
					return this[units](value);
				}
			}
			return this;
		}
	
		function mod(n, x) {
			return ((n % x) + x) % x;
		}
	
		var indexOf;
	
		if (Array.prototype.indexOf) {
			indexOf = Array.prototype.indexOf;
		} else {
			indexOf = function (o) {
				// I know
				var i;
				for (i = 0; i < this.length; ++i) {
					if (this[i] === o) {
						return i;
					}
				}
				return -1;
			};
		}
	
		function daysInMonth(year, month) {
			if (isNaN(year) || isNaN(month)) {
				return NaN;
			}
			var modMonth = mod(month, 12);
			year += (month - modMonth) / 12;
			return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
		}
	
		// FORMATTING
	
		addFormatToken('M', ['MM', 2], 'Mo', function () {
			return this.month() + 1;
		});
	
		addFormatToken('MMM', 0, 0, function (format) {
			return this.localeData().monthsShort(this, format);
		});
	
		addFormatToken('MMMM', 0, 0, function (format) {
			return this.localeData().months(this, format);
		});
	
		// ALIASES
	
		addUnitAlias('month', 'M');
	
		// PRIORITY
	
		addUnitPriority('month', 8);
	
		// PARSING
	
		addRegexToken('M',    match1to2);
		addRegexToken('MM',   match1to2, match2);
		addRegexToken('MMM',  function (isStrict, locale) {
			return locale.monthsShortRegex(isStrict);
		});
		addRegexToken('MMMM', function (isStrict, locale) {
			return locale.monthsRegex(isStrict);
		});
	
		addParseToken(['M', 'MM'], function (input, array) {
			array[MONTH] = toInt(input) - 1;
		});
	
		addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
			var month = config._locale.monthsParse(input, token, config._strict);
			// if we didn't find a month name, mark the date as invalid.
			if (month != null) {
				array[MONTH] = month;
			} else {
				getParsingFlags(config).invalidMonth = input;
			}
		});
	
		// LOCALES
	
		var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
		var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
		function localeMonths (m, format) {
			if (!m) {
				return isArray(this._months) ? this._months :
					this._months['standalone'];
			}
			return isArray(this._months) ? this._months[m.month()] :
				this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
		}
	
		var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
		function localeMonthsShort (m, format) {
			if (!m) {
				return isArray(this._monthsShort) ? this._monthsShort :
					this._monthsShort['standalone'];
			}
			return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
				this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
		}
	
		function handleStrictParse(monthName, format, strict) {
			var i, ii, mom, llc = monthName.toLocaleLowerCase();
			if (!this._monthsParse) {
				// this is not used
				this._monthsParse = [];
				this._longMonthsParse = [];
				this._shortMonthsParse = [];
				for (i = 0; i < 12; ++i) {
					mom = createUTC([2000, i]);
					this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
					this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
				}
			}
	
			if (strict) {
				if (format === 'MMM') {
					ii = indexOf.call(this._shortMonthsParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf.call(this._longMonthsParse, llc);
					return ii !== -1 ? ii : null;
				}
			} else {
				if (format === 'MMM') {
					ii = indexOf.call(this._shortMonthsParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._longMonthsParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf.call(this._longMonthsParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._shortMonthsParse, llc);
					return ii !== -1 ? ii : null;
				}
			}
		}
	
		function localeMonthsParse (monthName, format, strict) {
			var i, mom, regex;
	
			if (this._monthsParseExact) {
				return handleStrictParse.call(this, monthName, format, strict);
			}
	
			if (!this._monthsParse) {
				this._monthsParse = [];
				this._longMonthsParse = [];
				this._shortMonthsParse = [];
			}
	
			// TODO: add sorting
			// Sorting makes sure if one month (or abbr) is a prefix of another
			// see sorting in computeMonthsParse
			for (i = 0; i < 12; i++) {
				// make the regex if we don't have it already
				mom = createUTC([2000, i]);
				if (strict && !this._longMonthsParse[i]) {
					this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
					this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
				}
				if (!strict && !this._monthsParse[i]) {
					regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
					this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
				}
				// test the regex
				if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
					return i;
				} else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
					return i;
				} else if (!strict && this._monthsParse[i].test(monthName)) {
					return i;
				}
			}
		}
	
		// MOMENTS
	
		function setMonth (mom, value) {
			var dayOfMonth;
	
			if (!mom.isValid()) {
				// No op
				return mom;
			}
	
			if (typeof value === 'string') {
				if (/^\d+$/.test(value)) {
					value = toInt(value);
				} else {
					value = mom.localeData().monthsParse(value);
					// TODO: Another silent failure?
					if (!isNumber(value)) {
						return mom;
					}
				}
			}
	
			dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
			mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
			return mom;
		}
	
		function getSetMonth (value) {
			if (value != null) {
				setMonth(this, value);
				hooks.updateOffset(this, true);
				return this;
			} else {
				return get(this, 'Month');
			}
		}
	
		function getDaysInMonth () {
			return daysInMonth(this.year(), this.month());
		}
	
		var defaultMonthsShortRegex = matchWord;
		function monthsShortRegex (isStrict) {
			if (this._monthsParseExact) {
				if (!hasOwnProp(this, '_monthsRegex')) {
					computeMonthsParse.call(this);
				}
				if (isStrict) {
					return this._monthsShortStrictRegex;
				} else {
					return this._monthsShortRegex;
				}
			} else {
				if (!hasOwnProp(this, '_monthsShortRegex')) {
					this._monthsShortRegex = defaultMonthsShortRegex;
				}
				return this._monthsShortStrictRegex && isStrict ?
					this._monthsShortStrictRegex : this._monthsShortRegex;
			}
		}
	
		var defaultMonthsRegex = matchWord;
		function monthsRegex (isStrict) {
			if (this._monthsParseExact) {
				if (!hasOwnProp(this, '_monthsRegex')) {
					computeMonthsParse.call(this);
				}
				if (isStrict) {
					return this._monthsStrictRegex;
				} else {
					return this._monthsRegex;
				}
			} else {
				if (!hasOwnProp(this, '_monthsRegex')) {
					this._monthsRegex = defaultMonthsRegex;
				}
				return this._monthsStrictRegex && isStrict ?
					this._monthsStrictRegex : this._monthsRegex;
			}
		}
	
		function computeMonthsParse () {
			function cmpLenRev(a, b) {
				return b.length - a.length;
			}
	
			var shortPieces = [], longPieces = [], mixedPieces = [],
				i, mom;
			for (i = 0; i < 12; i++) {
				// make the regex if we don't have it already
				mom = createUTC([2000, i]);
				shortPieces.push(this.monthsShort(mom, ''));
				longPieces.push(this.months(mom, ''));
				mixedPieces.push(this.months(mom, ''));
				mixedPieces.push(this.monthsShort(mom, ''));
			}
			// Sorting makes sure if one month (or abbr) is a prefix of another it
			// will match the longer piece.
			shortPieces.sort(cmpLenRev);
			longPieces.sort(cmpLenRev);
			mixedPieces.sort(cmpLenRev);
			for (i = 0; i < 12; i++) {
				shortPieces[i] = regexEscape(shortPieces[i]);
				longPieces[i] = regexEscape(longPieces[i]);
			}
			for (i = 0; i < 24; i++) {
				mixedPieces[i] = regexEscape(mixedPieces[i]);
			}
	
			this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
			this._monthsShortRegex = this._monthsRegex;
			this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
			this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
		}
	
		function createDate (y, m, d, h, M, s, ms) {
			// can't just apply() to create a date:
			// https://stackoverflow.com/q/181348
			var date;
			// the date constructor remaps years 0-99 to 1900-1999
			if (y < 100 && y >= 0) {
				// preserve leap years using a full 400 year cycle, then reset
				date = new Date(y + 400, m, d, h, M, s, ms);
				if (isFinite(date.getFullYear())) {
					date.setFullYear(y);
				}
			} else {
				date = new Date(y, m, d, h, M, s, ms);
			}
	
			return date;
		}
	
		function createUTCDate (y) {
			var date;
			// the Date.UTC function remaps years 0-99 to 1900-1999
			if (y < 100 && y >= 0) {
				var args = Array.prototype.slice.call(arguments);
				// preserve leap years using a full 400 year cycle, then reset
				args[0] = y + 400;
				date = new Date(Date.UTC.apply(null, args));
				if (isFinite(date.getUTCFullYear())) {
					date.setUTCFullYear(y);
				}
			} else {
				date = new Date(Date.UTC.apply(null, arguments));
			}
	
			return date;
		}
	
		// start-of-first-week - start-of-year
		function firstWeekOffset(year, dow, doy) {
			var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
				fwd = 7 + dow - doy,
				// first-week day local weekday -- which local weekday is fwd
				fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
			return -fwdlw + fwd - 1;
		}
	
		// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
		function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
			var localWeekday = (7 + weekday - dow) % 7,
				weekOffset = firstWeekOffset(year, dow, doy),
				dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
				resYear, resDayOfYear;
	
			if (dayOfYear <= 0) {
				resYear = year - 1;
				resDayOfYear = daysInYear(resYear) + dayOfYear;
			} else if (dayOfYear > daysInYear(year)) {
				resYear = year + 1;
				resDayOfYear = dayOfYear - daysInYear(year);
			} else {
				resYear = year;
				resDayOfYear = dayOfYear;
			}
	
			return {
				year: resYear,
				dayOfYear: resDayOfYear
			};
		}
	
		function weekOfYear(mom, dow, doy) {
			var weekOffset = firstWeekOffset(mom.year(), dow, doy),
				week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
				resWeek, resYear;
	
			if (week < 1) {
				resYear = mom.year() - 1;
				resWeek = week + weeksInYear(resYear, dow, doy);
			} else if (week > weeksInYear(mom.year(), dow, doy)) {
				resWeek = week - weeksInYear(mom.year(), dow, doy);
				resYear = mom.year() + 1;
			} else {
				resYear = mom.year();
				resWeek = week;
			}
	
			return {
				week: resWeek,
				year: resYear
			};
		}
	
		function weeksInYear(year, dow, doy) {
			var weekOffset = firstWeekOffset(year, dow, doy),
				weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
			return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
		}
	
		// FORMATTING
	
		addFormatToken('w', ['ww', 2], 'wo', 'week');
		addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
		// ALIASES
	
		addUnitAlias('week', 'w');
		addUnitAlias('isoWeek', 'W');
	
		// PRIORITIES
	
		addUnitPriority('week', 5);
		addUnitPriority('isoWeek', 5);
	
		// PARSING
	
		addRegexToken('w',  match1to2);
		addRegexToken('ww', match1to2, match2);
		addRegexToken('W',  match1to2);
		addRegexToken('WW', match1to2, match2);
	
		addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
			week[token.substr(0, 1)] = toInt(input);
		});
	
		// HELPERS
	
		// LOCALES
	
		function localeWeek (mom) {
			return weekOfYear(mom, this._week.dow, this._week.doy).week;
		}
	
		var defaultLocaleWeek = {
			dow : 0, // Sunday is the first day of the week.
			doy : 6  // The week that contains Jan 6th is the first week of the year.
		};
	
		function localeFirstDayOfWeek () {
			return this._week.dow;
		}
	
		function localeFirstDayOfYear () {
			return this._week.doy;
		}
	
		// MOMENTS
	
		function getSetWeek (input) {
			var week = this.localeData().week(this);
			return input == null ? week : this.add((input - week) * 7, 'd');
		}
	
		function getSetISOWeek (input) {
			var week = weekOfYear(this, 1, 4).week;
			return input == null ? week : this.add((input - week) * 7, 'd');
		}
	
		// FORMATTING
	
		addFormatToken('d', 0, 'do', 'day');
	
		addFormatToken('dd', 0, 0, function (format) {
			return this.localeData().weekdaysMin(this, format);
		});
	
		addFormatToken('ddd', 0, 0, function (format) {
			return this.localeData().weekdaysShort(this, format);
		});
	
		addFormatToken('dddd', 0, 0, function (format) {
			return this.localeData().weekdays(this, format);
		});
	
		addFormatToken('e', 0, 0, 'weekday');
		addFormatToken('E', 0, 0, 'isoWeekday');
	
		// ALIASES
	
		addUnitAlias('day', 'd');
		addUnitAlias('weekday', 'e');
		addUnitAlias('isoWeekday', 'E');
	
		// PRIORITY
		addUnitPriority('day', 11);
		addUnitPriority('weekday', 11);
		addUnitPriority('isoWeekday', 11);
	
		// PARSING
	
		addRegexToken('d',    match1to2);
		addRegexToken('e',    match1to2);
		addRegexToken('E',    match1to2);
		addRegexToken('dd',   function (isStrict, locale) {
			return locale.weekdaysMinRegex(isStrict);
		});
		addRegexToken('ddd',   function (isStrict, locale) {
			return locale.weekdaysShortRegex(isStrict);
		});
		addRegexToken('dddd',   function (isStrict, locale) {
			return locale.weekdaysRegex(isStrict);
		});
	
		addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
			var weekday = config._locale.weekdaysParse(input, token, config._strict);
			// if we didn't get a weekday name, mark the date as invalid
			if (weekday != null) {
				week.d = weekday;
			} else {
				getParsingFlags(config).invalidWeekday = input;
			}
		});
	
		addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
			week[token] = toInt(input);
		});
	
		// HELPERS
	
		function parseWeekday(input, locale) {
			if (typeof input !== 'string') {
				return input;
			}
	
			if (!isNaN(input)) {
				return parseInt(input, 10);
			}
	
			input = locale.weekdaysParse(input);
			if (typeof input === 'number') {
				return input;
			}
	
			return null;
		}
	
		function parseIsoWeekday(input, locale) {
			if (typeof input === 'string') {
				return locale.weekdaysParse(input) % 7 || 7;
			}
			return isNaN(input) ? null : input;
		}
	
		// LOCALES
		function shiftWeekdays (ws, n) {
			return ws.slice(n, 7).concat(ws.slice(0, n));
		}
	
		var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
		function localeWeekdays (m, format) {
			var weekdays = isArray(this._weekdays) ? this._weekdays :
				this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
			return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
				: (m) ? weekdays[m.day()] : weekdays;
		}
	
		var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
		function localeWeekdaysShort (m) {
			return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
				: (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
		}
	
		var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
		function localeWeekdaysMin (m) {
			return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
				: (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
		}
	
		function handleStrictParse$1(weekdayName, format, strict) {
			var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
			if (!this._weekdaysParse) {
				this._weekdaysParse = [];
				this._shortWeekdaysParse = [];
				this._minWeekdaysParse = [];
	
				for (i = 0; i < 7; ++i) {
					mom = createUTC([2000, 1]).day(i);
					this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
					this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
					this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
				}
			}
	
			if (strict) {
				if (format === 'dddd') {
					ii = indexOf.call(this._weekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else if (format === 'ddd') {
					ii = indexOf.call(this._shortWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf.call(this._minWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				}
			} else {
				if (format === 'dddd') {
					ii = indexOf.call(this._weekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._shortWeekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._minWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else if (format === 'ddd') {
					ii = indexOf.call(this._shortWeekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._weekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._minWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				} else {
					ii = indexOf.call(this._minWeekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._weekdaysParse, llc);
					if (ii !== -1) {
						return ii;
					}
					ii = indexOf.call(this._shortWeekdaysParse, llc);
					return ii !== -1 ? ii : null;
				}
			}
		}
	
		function localeWeekdaysParse (weekdayName, format, strict) {
			var i, mom, regex;
	
			if (this._weekdaysParseExact) {
				return handleStrictParse$1.call(this, weekdayName, format, strict);
			}
	
			if (!this._weekdaysParse) {
				this._weekdaysParse = [];
				this._minWeekdaysParse = [];
				this._shortWeekdaysParse = [];
				this._fullWeekdaysParse = [];
			}
	
			for (i = 0; i < 7; i++) {
				// make the regex if we don't have it already
	
				mom = createUTC([2000, 1]).day(i);
				if (strict && !this._fullWeekdaysParse[i]) {
					this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
					this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
					this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
				}
				if (!this._weekdaysParse[i]) {
					regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
					this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
				}
				// test the regex
				if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
					return i;
				} else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
					return i;
				} else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
					return i;
				} else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
					return i;
				}
			}
		}
	
		// MOMENTS
	
		function getSetDayOfWeek (input) {
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}
			var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
			if (input != null) {
				input = parseWeekday(input, this.localeData());
				return this.add(input - day, 'd');
			} else {
				return day;
			}
		}
	
		function getSetLocaleDayOfWeek (input) {
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}
			var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
			return input == null ? weekday : this.add(input - weekday, 'd');
		}
	
		function getSetISODayOfWeek (input) {
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}
	
			// behaves the same as moment#day except
			// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
			// as a setter, sunday should belong to the previous week.
	
			if (input != null) {
				var weekday = parseIsoWeekday(input, this.localeData());
				return this.day(this.day() % 7 ? weekday : weekday - 7);
			} else {
				return this.day() || 7;
			}
		}
	
		var defaultWeekdaysRegex = matchWord;
		function weekdaysRegex (isStrict) {
			if (this._weekdaysParseExact) {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					computeWeekdaysParse.call(this);
				}
				if (isStrict) {
					return this._weekdaysStrictRegex;
				} else {
					return this._weekdaysRegex;
				}
			} else {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					this._weekdaysRegex = defaultWeekdaysRegex;
				}
				return this._weekdaysStrictRegex && isStrict ?
					this._weekdaysStrictRegex : this._weekdaysRegex;
			}
		}
	
		var defaultWeekdaysShortRegex = matchWord;
		function weekdaysShortRegex (isStrict) {
			if (this._weekdaysParseExact) {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					computeWeekdaysParse.call(this);
				}
				if (isStrict) {
					return this._weekdaysShortStrictRegex;
				} else {
					return this._weekdaysShortRegex;
				}
			} else {
				if (!hasOwnProp(this, '_weekdaysShortRegex')) {
					this._weekdaysShortRegex = defaultWeekdaysShortRegex;
				}
				return this._weekdaysShortStrictRegex && isStrict ?
					this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
			}
		}
	
		var defaultWeekdaysMinRegex = matchWord;
		function weekdaysMinRegex (isStrict) {
			if (this._weekdaysParseExact) {
				if (!hasOwnProp(this, '_weekdaysRegex')) {
					computeWeekdaysParse.call(this);
				}
				if (isStrict) {
					return this._weekdaysMinStrictRegex;
				} else {
					return this._weekdaysMinRegex;
				}
			} else {
				if (!hasOwnProp(this, '_weekdaysMinRegex')) {
					this._weekdaysMinRegex = defaultWeekdaysMinRegex;
				}
				return this._weekdaysMinStrictRegex && isStrict ?
					this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
			}
		}
	
	
		function computeWeekdaysParse () {
			function cmpLenRev(a, b) {
				return b.length - a.length;
			}
	
			var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
				i, mom, minp, shortp, longp;
			for (i = 0; i < 7; i++) {
				// make the regex if we don't have it already
				mom = createUTC([2000, 1]).day(i);
				minp = this.weekdaysMin(mom, '');
				shortp = this.weekdaysShort(mom, '');
				longp = this.weekdays(mom, '');
				minPieces.push(minp);
				shortPieces.push(shortp);
				longPieces.push(longp);
				mixedPieces.push(minp);
				mixedPieces.push(shortp);
				mixedPieces.push(longp);
			}
			// Sorting makes sure if one weekday (or abbr) is a prefix of another it
			// will match the longer piece.
			minPieces.sort(cmpLenRev);
			shortPieces.sort(cmpLenRev);
			longPieces.sort(cmpLenRev);
			mixedPieces.sort(cmpLenRev);
			for (i = 0; i < 7; i++) {
				shortPieces[i] = regexEscape(shortPieces[i]);
				longPieces[i] = regexEscape(longPieces[i]);
				mixedPieces[i] = regexEscape(mixedPieces[i]);
			}
	
			this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
			this._weekdaysShortRegex = this._weekdaysRegex;
			this._weekdaysMinRegex = this._weekdaysRegex;
	
			this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
			this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
			this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
		}
	
		// FORMATTING
	
		function hFormat() {
			return this.hours() % 12 || 12;
		}
	
		function kFormat() {
			return this.hours() || 24;
		}
	
		addFormatToken('H', ['HH', 2], 0, 'hour');
		addFormatToken('h', ['hh', 2], 0, hFormat);
		addFormatToken('k', ['kk', 2], 0, kFormat);
	
		addFormatToken('hmm', 0, 0, function () {
			return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
		});
	
		addFormatToken('hmmss', 0, 0, function () {
			return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
				zeroFill(this.seconds(), 2);
		});
	
		addFormatToken('Hmm', 0, 0, function () {
			return '' + this.hours() + zeroFill(this.minutes(), 2);
		});
	
		addFormatToken('Hmmss', 0, 0, function () {
			return '' + this.hours() + zeroFill(this.minutes(), 2) +
				zeroFill(this.seconds(), 2);
		});
	
		function meridiem (token, lowercase) {
			addFormatToken(token, 0, 0, function () {
				return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
			});
		}
	
		meridiem('a', true);
		meridiem('A', false);
	
		// ALIASES
	
		addUnitAlias('hour', 'h');
	
		// PRIORITY
		addUnitPriority('hour', 13);
	
		// PARSING
	
		function matchMeridiem (isStrict, locale) {
			return locale._meridiemParse;
		}
	
		addRegexToken('a',  matchMeridiem);
		addRegexToken('A',  matchMeridiem);
		addRegexToken('H',  match1to2);
		addRegexToken('h',  match1to2);
		addRegexToken('k',  match1to2);
		addRegexToken('HH', match1to2, match2);
		addRegexToken('hh', match1to2, match2);
		addRegexToken('kk', match1to2, match2);
	
		addRegexToken('hmm', match3to4);
		addRegexToken('hmmss', match5to6);
		addRegexToken('Hmm', match3to4);
		addRegexToken('Hmmss', match5to6);
	
		addParseToken(['H', 'HH'], HOUR);
		addParseToken(['k', 'kk'], function (input, array, config) {
			var kInput = toInt(input);
			array[HOUR] = kInput === 24 ? 0 : kInput;
		});
		addParseToken(['a', 'A'], function (input, array, config) {
			config._isPm = config._locale.isPM(input);
			config._meridiem = input;
		});
		addParseToken(['h', 'hh'], function (input, array, config) {
			array[HOUR] = toInt(input);
			getParsingFlags(config).bigHour = true;
		});
		addParseToken('hmm', function (input, array, config) {
			var pos = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos));
			array[MINUTE] = toInt(input.substr(pos));
			getParsingFlags(config).bigHour = true;
		});
		addParseToken('hmmss', function (input, array, config) {
			var pos1 = input.length - 4;
			var pos2 = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos1));
			array[MINUTE] = toInt(input.substr(pos1, 2));
			array[SECOND] = toInt(input.substr(pos2));
			getParsingFlags(config).bigHour = true;
		});
		addParseToken('Hmm', function (input, array, config) {
			var pos = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos));
			array[MINUTE] = toInt(input.substr(pos));
		});
		addParseToken('Hmmss', function (input, array, config) {
			var pos1 = input.length - 4;
			var pos2 = input.length - 2;
			array[HOUR] = toInt(input.substr(0, pos1));
			array[MINUTE] = toInt(input.substr(pos1, 2));
			array[SECOND] = toInt(input.substr(pos2));
		});
	
		// LOCALES
	
		function localeIsPM (input) {
			// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
			// Using charAt should be more compatible.
			return ((input + '').toLowerCase().charAt(0) === 'p');
		}
	
		var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
		function localeMeridiem (hours, minutes, isLower) {
			if (hours > 11) {
				return isLower ? 'pm' : 'PM';
			} else {
				return isLower ? 'am' : 'AM';
			}
		}
	
	
		// MOMENTS
	
		// Setting the hour should keep the time, because the user explicitly
		// specified which hour they want. So trying to maintain the same hour (in
		// a new timezone) makes sense. Adding/subtracting hours does not follow
		// this rule.
		var getSetHour = makeGetSet('Hours', true);
	
		var baseConfig = {
			calendar: defaultCalendar,
			longDateFormat: defaultLongDateFormat,
			invalidDate: defaultInvalidDate,
			ordinal: defaultOrdinal,
			dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
			relativeTime: defaultRelativeTime,
	
			months: defaultLocaleMonths,
			monthsShort: defaultLocaleMonthsShort,
	
			week: defaultLocaleWeek,
	
			weekdays: defaultLocaleWeekdays,
			weekdaysMin: defaultLocaleWeekdaysMin,
			weekdaysShort: defaultLocaleWeekdaysShort,
	
			meridiemParse: defaultLocaleMeridiemParse
		};
	
		// internal storage for locale config files
		var locales = {};
		var localeFamilies = {};
		var globalLocale;
	
		function normalizeLocale(key) {
			return key ? key.toLowerCase().replace('_', '-') : key;
		}
	
		// pick the locale from the array
		// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
		// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
		function chooseLocale(names) {
			var i = 0, j, next, locale, split;
	
			while (i < names.length) {
				split = normalizeLocale(names[i]).split('-');
				j = split.length;
				next = normalizeLocale(names[i + 1]);
				next = next ? next.split('-') : null;
				while (j > 0) {
					locale = loadLocale(split.slice(0, j).join('-'));
					if (locale) {
						return locale;
					}
					if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
						//the next array item is better than a shallower substring of this one
						break;
					}
					j--;
				}
				i++;
			}
			return globalLocale;
		}
	
		function loadLocale(name) {
			var oldLocale = null;
			// TODO: Find a better way to register and load all the locales in Node
			if (!locales[name] && (typeof module !== 'undefined') &&
					module && module.exports) {
				try {
					oldLocale = globalLocale._abbr;
					var aliasedRequire = require;
					aliasedRequire('./locale/' + name);
					getSetGlobalLocale(oldLocale);
				} catch (e) {}
			}
			return locales[name];
		}
	
		// This function will load locale and then set the global locale.  If
		// no arguments are passed in, it will simply return the current global
		// locale key.
		function getSetGlobalLocale (key, values) {
			var data;
			if (key) {
				if (isUndefined(values)) {
					data = getLocale(key);
				}
				else {
					data = defineLocale(key, values);
				}
	
				if (data) {
					// moment.duration._locale = moment._locale = data;
					globalLocale = data;
				}
				else {
					if ((typeof console !==  'undefined') && console.warn) {
						//warn user if arguments are passed but the locale could not be set
						console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
					}
				}
			}
	
			return globalLocale._abbr;
		}
	
		function defineLocale (name, config) {
			if (config !== null) {
				var locale, parentConfig = baseConfig;
				config.abbr = name;
				if (locales[name] != null) {
					deprecateSimple('defineLocaleOverride',
							'use moment.updateLocale(localeName, config) to change ' +
							'an existing locale. moment.defineLocale(localeName, ' +
							'config) should only be used for creating a new locale ' +
							'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
					parentConfig = locales[name]._config;
				} else if (config.parentLocale != null) {
					if (locales[config.parentLocale] != null) {
						parentConfig = locales[config.parentLocale]._config;
					} else {
						locale = loadLocale(config.parentLocale);
						if (locale != null) {
							parentConfig = locale._config;
						} else {
							if (!localeFamilies[config.parentLocale]) {
								localeFamilies[config.parentLocale] = [];
							}
							localeFamilies[config.parentLocale].push({
								name: name,
								config: config
							});
							return null;
						}
					}
				}
				locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
				if (localeFamilies[name]) {
					localeFamilies[name].forEach(function (x) {
						defineLocale(x.name, x.config);
					});
				}
	
				// backwards compat for now: also set the locale
				// make sure we set the locale AFTER all child locales have been
				// created, so we won't end up with the child locale set.
				getSetGlobalLocale(name);
	
	
				return locales[name];
			} else {
				// useful for testing
				delete locales[name];
				return null;
			}
		}
	
		function updateLocale(name, config) {
			if (config != null) {
				var locale, tmpLocale, parentConfig = baseConfig;
				// MERGE
				tmpLocale = loadLocale(name);
				if (tmpLocale != null) {
					parentConfig = tmpLocale._config;
				}
				config = mergeConfigs(parentConfig, config);
				locale = new Locale(config);
				locale.parentLocale = locales[name];
				locales[name] = locale;
	
				// backwards compat for now: also set the locale
				getSetGlobalLocale(name);
			} else {
				// pass null for config to unupdate, useful for tests
				if (locales[name] != null) {
					if (locales[name].parentLocale != null) {
						locales[name] = locales[name].parentLocale;
					} else if (locales[name] != null) {
						delete locales[name];
					}
				}
			}
			return locales[name];
		}
	
		// returns locale data
		function getLocale (key) {
			var locale;
	
			if (key && key._locale && key._locale._abbr) {
				key = key._locale._abbr;
			}
	
			if (!key) {
				return globalLocale;
			}
	
			if (!isArray(key)) {
				//short-circuit everything else
				locale = loadLocale(key);
				if (locale) {
					return locale;
				}
				key = [key];
			}
	
			return chooseLocale(key);
		}
	
		function listLocales() {
			return keys(locales);
		}
	
		function checkOverflow (m) {
			var overflow;
			var a = m._a;
	
			if (a && getParsingFlags(m).overflow === -2) {
				overflow =
					a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
					a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
					a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
					a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
					a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
					a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
					-1;
	
				if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
					overflow = DATE;
				}
				if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
					overflow = WEEK;
				}
				if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
					overflow = WEEKDAY;
				}
	
				getParsingFlags(m).overflow = overflow;
			}
	
			return m;
		}
	
		// Pick the first defined of two or three arguments.
		function defaults(a, b, c) {
			if (a != null) {
				return a;
			}
			if (b != null) {
				return b;
			}
			return c;
		}
	
		function currentDateArray(config) {
			// hooks is actually the exported moment object
			var nowValue = new Date(hooks.now());
			if (config._useUTC) {
				return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
			}
			return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
		}
	
		// convert an array to a date.
		// the array should mirror the parameters below
		// note: all values past the year are optional and will default to the lowest possible value.
		// [year, month, day , hour, minute, second, millisecond]
		function configFromArray (config) {
			var i, date, input = [], currentDate, expectedWeekday, yearToUse;
	
			if (config._d) {
				return;
			}
	
			currentDate = currentDateArray(config);
	
			//compute day of the year from weeks and weekdays
			if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
				dayOfYearFromWeekInfo(config);
			}
	
			//if the day of the year is set, figure out what it is
			if (config._dayOfYear != null) {
				yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
				if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
					getParsingFlags(config)._overflowDayOfYear = true;
				}
	
				date = createUTCDate(yearToUse, 0, config._dayOfYear);
				config._a[MONTH] = date.getUTCMonth();
				config._a[DATE] = date.getUTCDate();
			}
	
			// Default to current date.
			// * if no year, month, day of month are given, default to today
			// * if day of month is given, default month and year
			// * if month is given, default only year
			// * if year is given, don't default anything
			for (i = 0; i < 3 && config._a[i] == null; ++i) {
				config._a[i] = input[i] = currentDate[i];
			}
	
			// Zero out whatever was not defaulted, including time
			for (; i < 7; i++) {
				config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
			}
	
			// Check for 24:00:00.000
			if (config._a[HOUR] === 24 &&
					config._a[MINUTE] === 0 &&
					config._a[SECOND] === 0 &&
					config._a[MILLISECOND] === 0) {
				config._nextDay = true;
				config._a[HOUR] = 0;
			}
	
			config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
			expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
	
			// Apply timezone offset from input. The actual utcOffset can be changed
			// with parseZone.
			if (config._tzm != null) {
				config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
			}
	
			if (config._nextDay) {
				config._a[HOUR] = 24;
			}
	
			// check for mismatching day of week
			if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
				getParsingFlags(config).weekdayMismatch = true;
			}
		}
	
		function dayOfYearFromWeekInfo(config) {
			var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
			w = config._w;
			if (w.GG != null || w.W != null || w.E != null) {
				dow = 1;
				doy = 4;
	
				// TODO: We need to take the current isoWeekYear, but that depends on
				// how we interpret now (local, utc, fixed offset). So create
				// a now version of current config (take local/utc/offset flags, and
				// create now).
				weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
				week = defaults(w.W, 1);
				weekday = defaults(w.E, 1);
				if (weekday < 1 || weekday > 7) {
					weekdayOverflow = true;
				}
			} else {
				dow = config._locale._week.dow;
				doy = config._locale._week.doy;
	
				var curWeek = weekOfYear(createLocal(), dow, doy);
	
				weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
				// Default to current week.
				week = defaults(w.w, curWeek.week);
	
				if (w.d != null) {
					// weekday -- low day numbers are considered next week
					weekday = w.d;
					if (weekday < 0 || weekday > 6) {
						weekdayOverflow = true;
					}
				} else if (w.e != null) {
					// local weekday -- counting starts from beginning of week
					weekday = w.e + dow;
					if (w.e < 0 || w.e > 6) {
						weekdayOverflow = true;
					}
				} else {
					// default to beginning of week
					weekday = dow;
				}
			}
			if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
				getParsingFlags(config)._overflowWeeks = true;
			} else if (weekdayOverflow != null) {
				getParsingFlags(config)._overflowWeekday = true;
			} else {
				temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
				config._a[YEAR] = temp.year;
				config._dayOfYear = temp.dayOfYear;
			}
		}
	
		// iso 8601 regex
		// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
		var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
		var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	
		var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
		var isoDates = [
			['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
			['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
			['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
			['GGGG-[W]WW', /\d{4}-W\d\d/, false],
			['YYYY-DDD', /\d{4}-\d{3}/],
			['YYYY-MM', /\d{4}-\d\d/, false],
			['YYYYYYMMDD', /[+-]\d{10}/],
			['YYYYMMDD', /\d{8}/],
			// YYYYMM is NOT allowed by the standard
			['GGGG[W]WWE', /\d{4}W\d{3}/],
			['GGGG[W]WW', /\d{4}W\d{2}/, false],
			['YYYYDDD', /\d{7}/]
		];
	
		// iso time formats and regexes
		var isoTimes = [
			['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
			['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
			['HH:mm:ss', /\d\d:\d\d:\d\d/],
			['HH:mm', /\d\d:\d\d/],
			['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
			['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
			['HHmmss', /\d\d\d\d\d\d/],
			['HHmm', /\d\d\d\d/],
			['HH', /\d\d/]
		];
	
		var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
		// date from iso format
		function configFromISO(config) {
			var i, l,
				string = config._i,
				match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
				allowTime, dateFormat, timeFormat, tzFormat;
	
			if (match) {
				getParsingFlags(config).iso = true;
	
				for (i = 0, l = isoDates.length; i < l; i++) {
					if (isoDates[i][1].exec(match[1])) {
						dateFormat = isoDates[i][0];
						allowTime = isoDates[i][2] !== false;
						break;
					}
				}
				if (dateFormat == null) {
					config._isValid = false;
					return;
				}
				if (match[3]) {
					for (i = 0, l = isoTimes.length; i < l; i++) {
						if (isoTimes[i][1].exec(match[3])) {
							// match[2] should be 'T' or space
							timeFormat = (match[2] || ' ') + isoTimes[i][0];
							break;
						}
					}
					if (timeFormat == null) {
						config._isValid = false;
						return;
					}
				}
				if (!allowTime && timeFormat != null) {
					config._isValid = false;
					return;
				}
				if (match[4]) {
					if (tzRegex.exec(match[4])) {
						tzFormat = 'Z';
					} else {
						config._isValid = false;
						return;
					}
				}
				config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
				configFromStringAndFormat(config);
			} else {
				config._isValid = false;
			}
		}
	
		// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
		var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
	
		function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
			var result = [
				untruncateYear(yearStr),
				defaultLocaleMonthsShort.indexOf(monthStr),
				parseInt(dayStr, 10),
				parseInt(hourStr, 10),
				parseInt(minuteStr, 10)
			];
	
			if (secondStr) {
				result.push(parseInt(secondStr, 10));
			}
	
			return result;
		}
	
		function untruncateYear(yearStr) {
			var year = parseInt(yearStr, 10);
			if (year <= 49) {
				return 2000 + year;
			} else if (year <= 999) {
				return 1900 + year;
			}
			return year;
		}
	
		function preprocessRFC2822(s) {
			// Remove comments and folding whitespace and replace multiple-spaces with a single space
			return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
		}
	
		function checkWeekday(weekdayStr, parsedInput, config) {
			if (weekdayStr) {
				// TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
				var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
					weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
				if (weekdayProvided !== weekdayActual) {
					getParsingFlags(config).weekdayMismatch = true;
					config._isValid = false;
					return false;
				}
			}
			return true;
		}
	
		var obsOffsets = {
			UT: 0,
			GMT: 0,
			EDT: -4 * 60,
			EST: -5 * 60,
			CDT: -5 * 60,
			CST: -6 * 60,
			MDT: -6 * 60,
			MST: -7 * 60,
			PDT: -7 * 60,
			PST: -8 * 60
		};
	
		function calculateOffset(obsOffset, militaryOffset, numOffset) {
			if (obsOffset) {
				return obsOffsets[obsOffset];
			} else if (militaryOffset) {
				// the only allowed military tz is Z
				return 0;
			} else {
				var hm = parseInt(numOffset, 10);
				var m = hm % 100, h = (hm - m) / 100;
				return h * 60 + m;
			}
		}
	
		// date and time from ref 2822 format
		function configFromRFC2822(config) {
			var match = rfc2822.exec(preprocessRFC2822(config._i));
			if (match) {
				var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
				if (!checkWeekday(match[1], parsedArray, config)) {
					return;
				}
	
				config._a = parsedArray;
				config._tzm = calculateOffset(match[8], match[9], match[10]);
	
				config._d = createUTCDate.apply(null, config._a);
				config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	
				getParsingFlags(config).rfc2822 = true;
			} else {
				config._isValid = false;
			}
		}
	
		// date from iso format or fallback
		function configFromString(config) {
			var matched = aspNetJsonRegex.exec(config._i);
	
			if (matched !== null) {
				config._d = new Date(+matched[1]);
				return;
			}
	
			configFromISO(config);
			if (config._isValid === false) {
				delete config._isValid;
			} else {
				return;
			}
	
			configFromRFC2822(config);
			if (config._isValid === false) {
				delete config._isValid;
			} else {
				return;
			}
	
			// Final attempt, use Input Fallback
			hooks.createFromInputFallback(config);
		}
	
		hooks.createFromInputFallback = deprecate(
			'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
			'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
			'discouraged and will be removed in an upcoming major release. Please refer to ' +
			'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
			function (config) {
				config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
			}
		);
	
		// constant that refers to the ISO standard
		hooks.ISO_8601 = function () {};
	
		// constant that refers to the RFC 2822 form
		hooks.RFC_2822 = function () {};
	
		// date from string and format string
		function configFromStringAndFormat(config) {
			// TODO: Move this to another part of the creation flow to prevent circular deps
			if (config._f === hooks.ISO_8601) {
				configFromISO(config);
				return;
			}
			if (config._f === hooks.RFC_2822) {
				configFromRFC2822(config);
				return;
			}
			config._a = [];
			getParsingFlags(config).empty = true;
	
			// This array is used to make a Date, either with `new Date` or `Date.UTC`
			var string = '' + config._i,
				i, parsedInput, tokens, token, skipped,
				stringLength = string.length,
				totalParsedInputLength = 0;
	
			tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
			for (i = 0; i < tokens.length; i++) {
				token = tokens[i];
				parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
				// console.log('token', token, 'parsedInput', parsedInput,
				//         'regex', getParseRegexForToken(token, config));
				if (parsedInput) {
					skipped = string.substr(0, string.indexOf(parsedInput));
					if (skipped.length > 0) {
						getParsingFlags(config).unusedInput.push(skipped);
					}
					string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
					totalParsedInputLength += parsedInput.length;
				}
				// don't parse if it's not a known token
				if (formatTokenFunctions[token]) {
					if (parsedInput) {
						getParsingFlags(config).empty = false;
					}
					else {
						getParsingFlags(config).unusedTokens.push(token);
					}
					addTimeToArrayFromToken(token, parsedInput, config);
				}
				else if (config._strict && !parsedInput) {
					getParsingFlags(config).unusedTokens.push(token);
				}
			}
	
			// add remaining unparsed input length to the string
			getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
			if (string.length > 0) {
				getParsingFlags(config).unusedInput.push(string);
			}
	
			// clear _12h flag if hour is <= 12
			if (config._a[HOUR] <= 12 &&
				getParsingFlags(config).bigHour === true &&
				config._a[HOUR] > 0) {
				getParsingFlags(config).bigHour = undefined;
			}
	
			getParsingFlags(config).parsedDateParts = config._a.slice(0);
			getParsingFlags(config).meridiem = config._meridiem;
			// handle meridiem
			config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
			configFromArray(config);
			checkOverflow(config);
		}
	
	
		function meridiemFixWrap (locale, hour, meridiem) {
			var isPm;
	
			if (meridiem == null) {
				// nothing to do
				return hour;
			}
			if (locale.meridiemHour != null) {
				return locale.meridiemHour(hour, meridiem);
			} else if (locale.isPM != null) {
				// Fallback
				isPm = locale.isPM(meridiem);
				if (isPm && hour < 12) {
					hour += 12;
				}
				if (!isPm && hour === 12) {
					hour = 0;
				}
				return hour;
			} else {
				// this is not supposed to happen
				return hour;
			}
		}
	
		// date from string and array of format strings
		function configFromStringAndArray(config) {
			var tempConfig,
				bestMoment,
	
				scoreToBeat,
				i,
				currentScore;
	
			if (config._f.length === 0) {
				getParsingFlags(config).invalidFormat = true;
				config._d = new Date(NaN);
				return;
			}
	
			for (i = 0; i < config._f.length; i++) {
				currentScore = 0;
				tempConfig = copyConfig({}, config);
				if (config._useUTC != null) {
					tempConfig._useUTC = config._useUTC;
				}
				tempConfig._f = config._f[i];
				configFromStringAndFormat(tempConfig);
	
				if (!isValid(tempConfig)) {
					continue;
				}
	
				// if there is any input that was not parsed add a penalty for that format
				currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
				//or tokens
				currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
				getParsingFlags(tempConfig).score = currentScore;
	
				if (scoreToBeat == null || currentScore < scoreToBeat) {
					scoreToBeat = currentScore;
					bestMoment = tempConfig;
				}
			}
	
			extend(config, bestMoment || tempConfig);
		}
	
		function configFromObject(config) {
			if (config._d) {
				return;
			}
	
			var i = normalizeObjectUnits(config._i);
			config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
				return obj && parseInt(obj, 10);
			});
	
			configFromArray(config);
		}
	
		function createFromConfig (config) {
			var res = new Moment(checkOverflow(prepareConfig(config)));
			if (res._nextDay) {
				// Adding is smart enough around DST
				res.add(1, 'd');
				res._nextDay = undefined;
			}
	
			return res;
		}
	
		function prepareConfig (config) {
			var input = config._i,
				format = config._f;
	
			config._locale = config._locale || getLocale(config._l);
	
			if (input === null || (format === undefined && input === '')) {
				return createInvalid({nullInput: true});
			}
	
			if (typeof input === 'string') {
				config._i = input = config._locale.preparse(input);
			}
	
			if (isMoment(input)) {
				return new Moment(checkOverflow(input));
			} else if (isDate(input)) {
				config._d = input;
			} else if (isArray(format)) {
				configFromStringAndArray(config);
			} else if (format) {
				configFromStringAndFormat(config);
			}  else {
				configFromInput(config);
			}
	
			if (!isValid(config)) {
				config._d = null;
			}
	
			return config;
		}
	
		function configFromInput(config) {
			var input = config._i;
			if (isUndefined(input)) {
				config._d = new Date(hooks.now());
			} else if (isDate(input)) {
				config._d = new Date(input.valueOf());
			} else if (typeof input === 'string') {
				configFromString(config);
			} else if (isArray(input)) {
				config._a = map(input.slice(0), function (obj) {
					return parseInt(obj, 10);
				});
				configFromArray(config);
			} else if (isObject(input)) {
				configFromObject(config);
			} else if (isNumber(input)) {
				// from milliseconds
				config._d = new Date(input);
			} else {
				hooks.createFromInputFallback(config);
			}
		}
	
		function createLocalOrUTC (input, format, locale, strict, isUTC) {
			var c = {};
	
			if (locale === true || locale === false) {
				strict = locale;
				locale = undefined;
			}
	
			if ((isObject(input) && isObjectEmpty(input)) ||
					(isArray(input) && input.length === 0)) {
				input = undefined;
			}
			// object construction must be done this way.
			// https://github.com/moment/moment/issues/1423
			c._isAMomentObject = true;
			c._useUTC = c._isUTC = isUTC;
			c._l = locale;
			c._i = input;
			c._f = format;
			c._strict = strict;
	
			return createFromConfig(c);
		}
	
		function createLocal (input, format, locale, strict) {
			return createLocalOrUTC(input, format, locale, strict, false);
		}
	
		var prototypeMin = deprecate(
			'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
			function () {
				var other = createLocal.apply(null, arguments);
				if (this.isValid() && other.isValid()) {
					return other < this ? this : other;
				} else {
					return createInvalid();
				}
			}
		);
	
		var prototypeMax = deprecate(
			'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
			function () {
				var other = createLocal.apply(null, arguments);
				if (this.isValid() && other.isValid()) {
					return other > this ? this : other;
				} else {
					return createInvalid();
				}
			}
		);
	
		// Pick a moment m from moments so that m[fn](other) is true for all
		// other. This relies on the function fn to be transitive.
		//
		// moments should either be an array of moment objects or an array, whose
		// first element is an array of moment objects.
		function pickBy(fn, moments) {
			var res, i;
			if (moments.length === 1 && isArray(moments[0])) {
				moments = moments[0];
			}
			if (!moments.length) {
				return createLocal();
			}
			res = moments[0];
			for (i = 1; i < moments.length; ++i) {
				if (!moments[i].isValid() || moments[i][fn](res)) {
					res = moments[i];
				}
			}
			return res;
		}
	
		// TODO: Use [].sort instead?
		function min () {
			var args = [].slice.call(arguments, 0);
	
			return pickBy('isBefore', args);
		}
	
		function max () {
			var args = [].slice.call(arguments, 0);
	
			return pickBy('isAfter', args);
		}
	
		var now = function () {
			return Date.now ? Date.now() : +(new Date());
		};
	
		var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];
	
		function isDurationValid(m) {
			for (var key in m) {
				if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
					return false;
				}
			}
	
			var unitHasDecimal = false;
			for (var i = 0; i < ordering.length; ++i) {
				if (m[ordering[i]]) {
					if (unitHasDecimal) {
						return false; // only allow non-integers for smallest unit
					}
					if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
						unitHasDecimal = true;
					}
				}
			}
	
			return true;
		}
	
		function isValid$1() {
			return this._isValid;
		}
	
		function createInvalid$1() {
			return createDuration(NaN);
		}
	
		function Duration (duration) {
			var normalizedInput = normalizeObjectUnits(duration),
				years = normalizedInput.year || 0,
				quarters = normalizedInput.quarter || 0,
				months = normalizedInput.month || 0,
				weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
				days = normalizedInput.day || 0,
				hours = normalizedInput.hour || 0,
				minutes = normalizedInput.minute || 0,
				seconds = normalizedInput.second || 0,
				milliseconds = normalizedInput.millisecond || 0;
	
			this._isValid = isDurationValid(normalizedInput);
	
			// representation for dateAddRemove
			this._milliseconds = +milliseconds +
				seconds * 1e3 + // 1000
				minutes * 6e4 + // 1000 * 60
				hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
			// Because of dateAddRemove treats 24 hours as different from a
			// day when working around DST, we need to store them separately
			this._days = +days +
				weeks * 7;
			// It is impossible to translate months into days without knowing
			// which months you are are talking about, so we have to store
			// it separately.
			this._months = +months +
				quarters * 3 +
				years * 12;
	
			this._data = {};
	
			this._locale = getLocale();
	
			this._bubble();
		}
	
		function isDuration (obj) {
			return obj instanceof Duration;
		}
	
		function absRound (number) {
			if (number < 0) {
				return Math.round(-1 * number) * -1;
			} else {
				return Math.round(number);
			}
		}
	
		// FORMATTING
	
		function offset (token, separator) {
			addFormatToken(token, 0, 0, function () {
				var offset = this.utcOffset();
				var sign = '+';
				if (offset < 0) {
					offset = -offset;
					sign = '-';
				}
				return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
			});
		}
	
		offset('Z', ':');
		offset('ZZ', '');
	
		// PARSING
	
		addRegexToken('Z',  matchShortOffset);
		addRegexToken('ZZ', matchShortOffset);
		addParseToken(['Z', 'ZZ'], function (input, array, config) {
			config._useUTC = true;
			config._tzm = offsetFromString(matchShortOffset, input);
		});
	
		// HELPERS
	
		// timezone chunker
		// '+10:00' > ['10',  '00']
		// '-1530'  > ['-15', '30']
		var chunkOffset = /([\+\-]|\d\d)/gi;
	
		function offsetFromString(matcher, string) {
			var matches = (string || '').match(matcher);
	
			if (matches === null) {
				return null;
			}
	
			var chunk   = matches[matches.length - 1] || [];
			var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
			var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
			return minutes === 0 ?
			  0 :
			  parts[0] === '+' ? minutes : -minutes;
		}
	
		// Return a moment from input, that is local/utc/zone equivalent to model.
		function cloneWithOffset(input, model) {
			var res, diff;
			if (model._isUTC) {
				res = model.clone();
				diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
				// Use low-level api, because this fn is low-level api.
				res._d.setTime(res._d.valueOf() + diff);
				hooks.updateOffset(res, false);
				return res;
			} else {
				return createLocal(input).local();
			}
		}
	
		function getDateOffset (m) {
			// On Firefox.24 Date#getTimezoneOffset returns a floating point.
			// https://github.com/moment/moment/pull/1871
			return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
		}
	
		// HOOKS
	
		// This function will be called whenever a moment is mutated.
		// It is intended to keep the offset in sync with the timezone.
		hooks.updateOffset = function () {};
	
		// MOMENTS
	
		// keepLocalTime = true means only change the timezone, without
		// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
		// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
		// +0200, so we adjust the time as needed, to be valid.
		//
		// Keeping the time actually adds/subtracts (one hour)
		// from the actual represented time. That is why we call updateOffset
		// a second time. In case it wants us to change the offset again
		// _changeInProgress == true case, then we have to adjust, because
		// there is no such time in the given timezone.
		function getSetOffset (input, keepLocalTime, keepMinutes) {
			var offset = this._offset || 0,
				localAdjust;
			if (!this.isValid()) {
				return input != null ? this : NaN;
			}
			if (input != null) {
				if (typeof input === 'string') {
					input = offsetFromString(matchShortOffset, input);
					if (input === null) {
						return this;
					}
				} else if (Math.abs(input) < 16 && !keepMinutes) {
					input = input * 60;
				}
				if (!this._isUTC && keepLocalTime) {
					localAdjust = getDateOffset(this);
				}
				this._offset = input;
				this._isUTC = true;
				if (localAdjust != null) {
					this.add(localAdjust, 'm');
				}
				if (offset !== input) {
					if (!keepLocalTime || this._changeInProgress) {
						addSubtract(this, createDuration(input - offset, 'm'), 1, false);
					} else if (!this._changeInProgress) {
						this._changeInProgress = true;
						hooks.updateOffset(this, true);
						this._changeInProgress = null;
					}
				}
				return this;
			} else {
				return this._isUTC ? offset : getDateOffset(this);
			}
		}
	
		function getSetZone (input, keepLocalTime) {
			if (input != null) {
				if (typeof input !== 'string') {
					input = -input;
				}
	
				this.utcOffset(input, keepLocalTime);
	
				return this;
			} else {
				return -this.utcOffset();
			}
		}
	
		function setOffsetToUTC (keepLocalTime) {
			return this.utcOffset(0, keepLocalTime);
		}
	
		function setOffsetToLocal (keepLocalTime) {
			if (this._isUTC) {
				this.utcOffset(0, keepLocalTime);
				this._isUTC = false;
	
				if (keepLocalTime) {
					this.subtract(getDateOffset(this), 'm');
				}
			}
			return this;
		}
	
		function setOffsetToParsedOffset () {
			if (this._tzm != null) {
				this.utcOffset(this._tzm, false, true);
			} else if (typeof this._i === 'string') {
				var tZone = offsetFromString(matchOffset, this._i);
				if (tZone != null) {
					this.utcOffset(tZone);
				}
				else {
					this.utcOffset(0, true);
				}
			}
			return this;
		}
	
		function hasAlignedHourOffset (input) {
			if (!this.isValid()) {
				return false;
			}
			input = input ? createLocal(input).utcOffset() : 0;
	
			return (this.utcOffset() - input) % 60 === 0;
		}
	
		function isDaylightSavingTime () {
			return (
				this.utcOffset() > this.clone().month(0).utcOffset() ||
				this.utcOffset() > this.clone().month(5).utcOffset()
			);
		}
	
		function isDaylightSavingTimeShifted () {
			if (!isUndefined(this._isDSTShifted)) {
				return this._isDSTShifted;
			}
	
			var c = {};
	
			copyConfig(c, this);
			c = prepareConfig(c);
	
			if (c._a) {
				var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
				this._isDSTShifted = this.isValid() &&
					compareArrays(c._a, other.toArray()) > 0;
			} else {
				this._isDSTShifted = false;
			}
	
			return this._isDSTShifted;
		}
	
		function isLocal () {
			return this.isValid() ? !this._isUTC : false;
		}
	
		function isUtcOffset () {
			return this.isValid() ? this._isUTC : false;
		}
	
		function isUtc () {
			return this.isValid() ? this._isUTC && this._offset === 0 : false;
		}
	
		// ASP.NET json date format regex
		var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
	
		// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
		// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
		// and further modified to allow for strings containing both week and day
		var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
	
		function createDuration (input, key) {
			var duration = input,
				// matching against regexp is expensive, do it on demand
				match = null,
				sign,
				ret,
				diffRes;
	
			if (isDuration(input)) {
				duration = {
					ms : input._milliseconds,
					d  : input._days,
					M  : input._months
				};
			} else if (isNumber(input)) {
				duration = {};
				if (key) {
					duration[key] = input;
				} else {
					duration.milliseconds = input;
				}
			} else if (!!(match = aspNetRegex.exec(input))) {
				sign = (match[1] === '-') ? -1 : 1;
				duration = {
					y  : 0,
					d  : toInt(match[DATE])                         * sign,
					h  : toInt(match[HOUR])                         * sign,
					m  : toInt(match[MINUTE])                       * sign,
					s  : toInt(match[SECOND])                       * sign,
					ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
				};
			} else if (!!(match = isoRegex.exec(input))) {
				sign = (match[1] === '-') ? -1 : 1;
				duration = {
					y : parseIso(match[2], sign),
					M : parseIso(match[3], sign),
					w : parseIso(match[4], sign),
					d : parseIso(match[5], sign),
					h : parseIso(match[6], sign),
					m : parseIso(match[7], sign),
					s : parseIso(match[8], sign)
				};
			} else if (duration == null) {// checks for null or undefined
				duration = {};
			} else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
				diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
	
				duration = {};
				duration.ms = diffRes.milliseconds;
				duration.M = diffRes.months;
			}
	
			ret = new Duration(duration);
	
			if (isDuration(input) && hasOwnProp(input, '_locale')) {
				ret._locale = input._locale;
			}
	
			return ret;
		}
	
		createDuration.fn = Duration.prototype;
		createDuration.invalid = createInvalid$1;
	
		function parseIso (inp, sign) {
			// We'd normally use ~~inp for this, but unfortunately it also
			// converts floats to ints.
			// inp may be undefined, so careful calling replace on it.
			var res = inp && parseFloat(inp.replace(',', '.'));
			// apply sign while we're at it
			return (isNaN(res) ? 0 : res) * sign;
		}
	
		function positiveMomentsDifference(base, other) {
			var res = {};
	
			res.months = other.month() - base.month() +
				(other.year() - base.year()) * 12;
			if (base.clone().add(res.months, 'M').isAfter(other)) {
				--res.months;
			}
	
			res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
			return res;
		}
	
		function momentsDifference(base, other) {
			var res;
			if (!(base.isValid() && other.isValid())) {
				return {milliseconds: 0, months: 0};
			}
	
			other = cloneWithOffset(other, base);
			if (base.isBefore(other)) {
				res = positiveMomentsDifference(base, other);
			} else {
				res = positiveMomentsDifference(other, base);
				res.milliseconds = -res.milliseconds;
				res.months = -res.months;
			}
	
			return res;
		}
	
		// TODO: remove 'name' arg after deprecation is removed
		function createAdder(direction, name) {
			return function (val, period) {
				var dur, tmp;
				//invert the arguments, but complain about it
				if (period !== null && !isNaN(+period)) {
					deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
					'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
					tmp = val; val = period; period = tmp;
				}
	
				val = typeof val === 'string' ? +val : val;
				dur = createDuration(val, period);
				addSubtract(this, dur, direction);
				return this;
			};
		}
	
		function addSubtract (mom, duration, isAdding, updateOffset) {
			var milliseconds = duration._milliseconds,
				days = absRound(duration._days),
				months = absRound(duration._months);
	
			if (!mom.isValid()) {
				// No op
				return;
			}
	
			updateOffset = updateOffset == null ? true : updateOffset;
	
			if (months) {
				setMonth(mom, get(mom, 'Month') + months * isAdding);
			}
			if (days) {
				set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
			}
			if (milliseconds) {
				mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
			}
			if (updateOffset) {
				hooks.updateOffset(mom, days || months);
			}
		}
	
		var add      = createAdder(1, 'add');
		var subtract = createAdder(-1, 'subtract');
	
		function getCalendarFormat(myMoment, now) {
			var diff = myMoment.diff(now, 'days', true);
			return diff < -6 ? 'sameElse' :
					diff < -1 ? 'lastWeek' :
					diff < 0 ? 'lastDay' :
					diff < 1 ? 'sameDay' :
					diff < 2 ? 'nextDay' :
					diff < 7 ? 'nextWeek' : 'sameElse';
		}
	
		function calendar$1 (time, formats) {
			// We want to compare the start of today, vs this.
			// Getting start-of-today depends on whether we're local/utc/offset or not.
			var now = time || createLocal(),
				sod = cloneWithOffset(now, this).startOf('day'),
				format = hooks.calendarFormat(this, sod) || 'sameElse';
	
			var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	
			return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
		}
	
		function clone () {
			return new Moment(this);
		}
	
		function isAfter (input, units) {
			var localInput = isMoment(input) ? input : createLocal(input);
			if (!(this.isValid() && localInput.isValid())) {
				return false;
			}
			units = normalizeUnits(units) || 'millisecond';
			if (units === 'millisecond') {
				return this.valueOf() > localInput.valueOf();
			} else {
				return localInput.valueOf() < this.clone().startOf(units).valueOf();
			}
		}
	
		function isBefore (input, units) {
			var localInput = isMoment(input) ? input : createLocal(input);
			if (!(this.isValid() && localInput.isValid())) {
				return false;
			}
			units = normalizeUnits(units) || 'millisecond';
			if (units === 'millisecond') {
				return this.valueOf() < localInput.valueOf();
			} else {
				return this.clone().endOf(units).valueOf() < localInput.valueOf();
			}
		}
	
		function isBetween (from, to, units, inclusivity) {
			var localFrom = isMoment(from) ? from : createLocal(from),
				localTo = isMoment(to) ? to : createLocal(to);
			if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
				return false;
			}
			inclusivity = inclusivity || '()';
			return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
				(inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
		}
	
		function isSame (input, units) {
			var localInput = isMoment(input) ? input : createLocal(input),
				inputMs;
			if (!(this.isValid() && localInput.isValid())) {
				return false;
			}
			units = normalizeUnits(units) || 'millisecond';
			if (units === 'millisecond') {
				return this.valueOf() === localInput.valueOf();
			} else {
				inputMs = localInput.valueOf();
				return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
			}
		}
	
		function isSameOrAfter (input, units) {
			return this.isSame(input, units) || this.isAfter(input, units);
		}
	
		function isSameOrBefore (input, units) {
			return this.isSame(input, units) || this.isBefore(input, units);
		}
	
		function diff (input, units, asFloat) {
			var that,
				zoneDelta,
				output;
	
			if (!this.isValid()) {
				return NaN;
			}
	
			that = cloneWithOffset(input, this);
	
			if (!that.isValid()) {
				return NaN;
			}
	
			zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
			units = normalizeUnits(units);
	
			switch (units) {
				case 'year': output = monthDiff(this, that) / 12; break;
				case 'month': output = monthDiff(this, that); break;
				case 'quarter': output = monthDiff(this, that) / 3; break;
				case 'second': output = (this - that) / 1e3; break; // 1000
				case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
				case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
				case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
				case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
				default: output = this - that;
			}
	
			return asFloat ? output : absFloor(output);
		}
	
		function monthDiff (a, b) {
			// difference in months
			var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
				// b is in (anchor - 1 month, anchor + 1 month)
				anchor = a.clone().add(wholeMonthDiff, 'months'),
				anchor2, adjust;
	
			if (b - anchor < 0) {
				anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
				// linear across the month
				adjust = (b - anchor) / (anchor - anchor2);
			} else {
				anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
				// linear across the month
				adjust = (b - anchor) / (anchor2 - anchor);
			}
	
			//check for negative zero, return zero if negative zero
			return -(wholeMonthDiff + adjust) || 0;
		}
	
		hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
		hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
		function toString () {
			return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
		}
	
		function toISOString(keepOffset) {
			if (!this.isValid()) {
				return null;
			}
			var utc = keepOffset !== true;
			var m = utc ? this.clone().utc() : this;
			if (m.year() < 0 || m.year() > 9999) {
				return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
			}
			if (isFunction(Date.prototype.toISOString)) {
				// native implementation is ~50x faster, use it when we can
				if (utc) {
					return this.toDate().toISOString();
				} else {
					return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
				}
			}
			return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
		}
	
		/**
		 * Return a human readable representation of a moment that can
		 * also be evaluated to get a new moment which is the same
		 *
		 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
		 */
		function inspect () {
			if (!this.isValid()) {
				return 'moment.invalid(/* ' + this._i + ' */)';
			}
			var func = 'moment';
			var zone = '';
			if (!this.isLocal()) {
				func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
				zone = 'Z';
			}
			var prefix = '[' + func + '("]';
			var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
			var datetime = '-MM-DD[T]HH:mm:ss.SSS';
			var suffix = zone + '[")]';
	
			return this.format(prefix + year + datetime + suffix);
		}
	
		function format (inputString) {
			if (!inputString) {
				inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
			}
			var output = formatMoment(this, inputString);
			return this.localeData().postformat(output);
		}
	
		function from (time, withoutSuffix) {
			if (this.isValid() &&
					((isMoment(time) && time.isValid()) ||
					 createLocal(time).isValid())) {
				return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
			} else {
				return this.localeData().invalidDate();
			}
		}
	
		function fromNow (withoutSuffix) {
			return this.from(createLocal(), withoutSuffix);
		}
	
		function to (time, withoutSuffix) {
			if (this.isValid() &&
					((isMoment(time) && time.isValid()) ||
					 createLocal(time).isValid())) {
				return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
			} else {
				return this.localeData().invalidDate();
			}
		}
	
		function toNow (withoutSuffix) {
			return this.to(createLocal(), withoutSuffix);
		}
	
		// If passed a locale key, it will set the locale for this
		// instance.  Otherwise, it will return the locale configuration
		// variables for this instance.
		function locale (key) {
			var newLocaleData;
	
			if (key === undefined) {
				return this._locale._abbr;
			} else {
				newLocaleData = getLocale(key);
				if (newLocaleData != null) {
					this._locale = newLocaleData;
				}
				return this;
			}
		}
	
		var lang = deprecate(
			'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
			function (key) {
				if (key === undefined) {
					return this.localeData();
				} else {
					return this.locale(key);
				}
			}
		);
	
		function localeData () {
			return this._locale;
		}
	
		var MS_PER_SECOND = 1000;
		var MS_PER_MINUTE = 60 * MS_PER_SECOND;
		var MS_PER_HOUR = 60 * MS_PER_MINUTE;
		var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
	
		// actual modulo - handles negative numbers (for dates before 1970):
		function mod$1(dividend, divisor) {
			return (dividend % divisor + divisor) % divisor;
		}
	
		function localStartOfDate(y, m, d) {
			// the date constructor remaps years 0-99 to 1900-1999
			if (y < 100 && y >= 0) {
				// preserve leap years using a full 400 year cycle, then reset
				return new Date(y + 400, m, d) - MS_PER_400_YEARS;
			} else {
				return new Date(y, m, d).valueOf();
			}
		}
	
		function utcStartOfDate(y, m, d) {
			// Date.UTC remaps years 0-99 to 1900-1999
			if (y < 100 && y >= 0) {
				// preserve leap years using a full 400 year cycle, then reset
				return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
			} else {
				return Date.UTC(y, m, d);
			}
		}
	
		function startOf (units) {
			var time;
			units = normalizeUnits(units);
			if (units === undefined || units === 'millisecond' || !this.isValid()) {
				return this;
			}
	
			var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
			switch (units) {
				case 'year':
					time = startOfDate(this.year(), 0, 1);
					break;
				case 'quarter':
					time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
					break;
				case 'month':
					time = startOfDate(this.year(), this.month(), 1);
					break;
				case 'week':
					time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
					break;
				case 'isoWeek':
					time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
					break;
				case 'day':
				case 'date':
					time = startOfDate(this.year(), this.month(), this.date());
					break;
				case 'hour':
					time = this._d.valueOf();
					time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
					break;
				case 'minute':
					time = this._d.valueOf();
					time -= mod$1(time, MS_PER_MINUTE);
					break;
				case 'second':
					time = this._d.valueOf();
					time -= mod$1(time, MS_PER_SECOND);
					break;
			}
	
			this._d.setTime(time);
			hooks.updateOffset(this, true);
			return this;
		}
	
		function endOf (units) {
			var time;
			units = normalizeUnits(units);
			if (units === undefined || units === 'millisecond' || !this.isValid()) {
				return this;
			}
	
			var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
			switch (units) {
				case 'year':
					time = startOfDate(this.year() + 1, 0, 1) - 1;
					break;
				case 'quarter':
					time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
					break;
				case 'month':
					time = startOfDate(this.year(), this.month() + 1, 1) - 1;
					break;
				case 'week':
					time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
					break;
				case 'isoWeek':
					time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
					break;
				case 'day':
				case 'date':
					time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
					break;
				case 'hour':
					time = this._d.valueOf();
					time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
					break;
				case 'minute':
					time = this._d.valueOf();
					time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
					break;
				case 'second':
					time = this._d.valueOf();
					time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
					break;
			}
	
			this._d.setTime(time);
			hooks.updateOffset(this, true);
			return this;
		}
	
		function valueOf () {
			return this._d.valueOf() - ((this._offset || 0) * 60000);
		}
	
		function unix () {
			return Math.floor(this.valueOf() / 1000);
		}
	
		function toDate () {
			return new Date(this.valueOf());
		}
	
		function toArray () {
			var m = this;
			return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
		}
	
		function toObject () {
			var m = this;
			return {
				years: m.year(),
				months: m.month(),
				date: m.date(),
				hours: m.hours(),
				minutes: m.minutes(),
				seconds: m.seconds(),
				milliseconds: m.milliseconds()
			};
		}
	
		function toJSON () {
			// new Date(NaN).toJSON() === null
			return this.isValid() ? this.toISOString() : null;
		}
	
		function isValid$2 () {
			return isValid(this);
		}
	
		function parsingFlags () {
			return extend({}, getParsingFlags(this));
		}
	
		function invalidAt () {
			return getParsingFlags(this).overflow;
		}
	
		function creationData() {
			return {
				input: this._i,
				format: this._f,
				locale: this._locale,
				isUTC: this._isUTC,
				strict: this._strict
			};
		}
	
		// FORMATTING
	
		addFormatToken(0, ['gg', 2], 0, function () {
			return this.weekYear() % 100;
		});
	
		addFormatToken(0, ['GG', 2], 0, function () {
			return this.isoWeekYear() % 100;
		});
	
		function addWeekYearFormatToken (token, getter) {
			addFormatToken(0, [token, token.length], 0, getter);
		}
	
		addWeekYearFormatToken('gggg',     'weekYear');
		addWeekYearFormatToken('ggggg',    'weekYear');
		addWeekYearFormatToken('GGGG',  'isoWeekYear');
		addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
		// ALIASES
	
		addUnitAlias('weekYear', 'gg');
		addUnitAlias('isoWeekYear', 'GG');
	
		// PRIORITY
	
		addUnitPriority('weekYear', 1);
		addUnitPriority('isoWeekYear', 1);
	
	
		// PARSING
	
		addRegexToken('G',      matchSigned);
		addRegexToken('g',      matchSigned);
		addRegexToken('GG',     match1to2, match2);
		addRegexToken('gg',     match1to2, match2);
		addRegexToken('GGGG',   match1to4, match4);
		addRegexToken('gggg',   match1to4, match4);
		addRegexToken('GGGGG',  match1to6, match6);
		addRegexToken('ggggg',  match1to6, match6);
	
		addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
			week[token.substr(0, 2)] = toInt(input);
		});
	
		addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
			week[token] = hooks.parseTwoDigitYear(input);
		});
	
		// MOMENTS
	
		function getSetWeekYear (input) {
			return getSetWeekYearHelper.call(this,
					input,
					this.week(),
					this.weekday(),
					this.localeData()._week.dow,
					this.localeData()._week.doy);
		}
	
		function getSetISOWeekYear (input) {
			return getSetWeekYearHelper.call(this,
					input, this.isoWeek(), this.isoWeekday(), 1, 4);
		}
	
		function getISOWeeksInYear () {
			return weeksInYear(this.year(), 1, 4);
		}
	
		function getWeeksInYear () {
			var weekInfo = this.localeData()._week;
			return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
		}
	
		function getSetWeekYearHelper(input, week, weekday, dow, doy) {
			var weeksTarget;
			if (input == null) {
				return weekOfYear(this, dow, doy).year;
			} else {
				weeksTarget = weeksInYear(input, dow, doy);
				if (week > weeksTarget) {
					week = weeksTarget;
				}
				return setWeekAll.call(this, input, week, weekday, dow, doy);
			}
		}
	
		function setWeekAll(weekYear, week, weekday, dow, doy) {
			var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
				date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
			this.year(date.getUTCFullYear());
			this.month(date.getUTCMonth());
			this.date(date.getUTCDate());
			return this;
		}
	
		// FORMATTING
	
		addFormatToken('Q', 0, 'Qo', 'quarter');
	
		// ALIASES
	
		addUnitAlias('quarter', 'Q');
	
		// PRIORITY
	
		addUnitPriority('quarter', 7);
	
		// PARSING
	
		addRegexToken('Q', match1);
		addParseToken('Q', function (input, array) {
			array[MONTH] = (toInt(input) - 1) * 3;
		});
	
		// MOMENTS
	
		function getSetQuarter (input) {
			return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
		}
	
		// FORMATTING
	
		addFormatToken('D', ['DD', 2], 'Do', 'date');
	
		// ALIASES
	
		addUnitAlias('date', 'D');
	
		// PRIORITY
		addUnitPriority('date', 9);
	
		// PARSING
	
		addRegexToken('D',  match1to2);
		addRegexToken('DD', match1to2, match2);
		addRegexToken('Do', function (isStrict, locale) {
			// TODO: Remove "ordinalParse" fallback in next major release.
			return isStrict ?
			  (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
			  locale._dayOfMonthOrdinalParseLenient;
		});
	
		addParseToken(['D', 'DD'], DATE);
		addParseToken('Do', function (input, array) {
			array[DATE] = toInt(input.match(match1to2)[0]);
		});
	
		// MOMENTS
	
		var getSetDayOfMonth = makeGetSet('Date', true);
	
		// FORMATTING
	
		addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
		// ALIASES
	
		addUnitAlias('dayOfYear', 'DDD');
	
		// PRIORITY
		addUnitPriority('dayOfYear', 4);
	
		// PARSING
	
		addRegexToken('DDD',  match1to3);
		addRegexToken('DDDD', match3);
		addParseToken(['DDD', 'DDDD'], function (input, array, config) {
			config._dayOfYear = toInt(input);
		});
	
		// HELPERS
	
		// MOMENTS
	
		function getSetDayOfYear (input) {
			var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
			return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
		}
	
		// FORMATTING
	
		addFormatToken('m', ['mm', 2], 0, 'minute');
	
		// ALIASES
	
		addUnitAlias('minute', 'm');
	
		// PRIORITY
	
		addUnitPriority('minute', 14);
	
		// PARSING
	
		addRegexToken('m',  match1to2);
		addRegexToken('mm', match1to2, match2);
		addParseToken(['m', 'mm'], MINUTE);
	
		// MOMENTS
	
		var getSetMinute = makeGetSet('Minutes', false);
	
		// FORMATTING
	
		addFormatToken('s', ['ss', 2], 0, 'second');
	
		// ALIASES
	
		addUnitAlias('second', 's');
	
		// PRIORITY
	
		addUnitPriority('second', 15);
	
		// PARSING
	
		addRegexToken('s',  match1to2);
		addRegexToken('ss', match1to2, match2);
		addParseToken(['s', 'ss'], SECOND);
	
		// MOMENTS
	
		var getSetSecond = makeGetSet('Seconds', false);
	
		// FORMATTING
	
		addFormatToken('S', 0, 0, function () {
			return ~~(this.millisecond() / 100);
		});
	
		addFormatToken(0, ['SS', 2], 0, function () {
			return ~~(this.millisecond() / 10);
		});
	
		addFormatToken(0, ['SSS', 3], 0, 'millisecond');
		addFormatToken(0, ['SSSS', 4], 0, function () {
			return this.millisecond() * 10;
		});
		addFormatToken(0, ['SSSSS', 5], 0, function () {
			return this.millisecond() * 100;
		});
		addFormatToken(0, ['SSSSSS', 6], 0, function () {
			return this.millisecond() * 1000;
		});
		addFormatToken(0, ['SSSSSSS', 7], 0, function () {
			return this.millisecond() * 10000;
		});
		addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
			return this.millisecond() * 100000;
		});
		addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
			return this.millisecond() * 1000000;
		});
	
	
		// ALIASES
	
		addUnitAlias('millisecond', 'ms');
	
		// PRIORITY
	
		addUnitPriority('millisecond', 16);
	
		// PARSING
	
		addRegexToken('S',    match1to3, match1);
		addRegexToken('SS',   match1to3, match2);
		addRegexToken('SSS',  match1to3, match3);
	
		var token;
		for (token = 'SSSS'; token.length <= 9; token += 'S') {
			addRegexToken(token, matchUnsigned);
		}
	
		function parseMs(input, array) {
			array[MILLISECOND] = toInt(('0.' + input) * 1000);
		}
	
		for (token = 'S'; token.length <= 9; token += 'S') {
			addParseToken(token, parseMs);
		}
		// MOMENTS
	
		var getSetMillisecond = makeGetSet('Milliseconds', false);
	
		// FORMATTING
	
		addFormatToken('z',  0, 0, 'zoneAbbr');
		addFormatToken('zz', 0, 0, 'zoneName');
	
		// MOMENTS
	
		function getZoneAbbr () {
			return this._isUTC ? 'UTC' : '';
		}
	
		function getZoneName () {
			return this._isUTC ? 'Coordinated Universal Time' : '';
		}
	
		var proto = Moment.prototype;
	
		proto.add               = add;
		proto.calendar          = calendar$1;
		proto.clone             = clone;
		proto.diff              = diff;
		proto.endOf             = endOf;
		proto.format            = format;
		proto.from              = from;
		proto.fromNow           = fromNow;
		proto.to                = to;
		proto.toNow             = toNow;
		proto.get               = stringGet;
		proto.invalidAt         = invalidAt;
		proto.isAfter           = isAfter;
		proto.isBefore          = isBefore;
		proto.isBetween         = isBetween;
		proto.isSame            = isSame;
		proto.isSameOrAfter     = isSameOrAfter;
		proto.isSameOrBefore    = isSameOrBefore;
		proto.isValid           = isValid$2;
		proto.lang              = lang;
		proto.locale            = locale;
		proto.localeData        = localeData;
		proto.max               = prototypeMax;
		proto.min               = prototypeMin;
		proto.parsingFlags      = parsingFlags;
		proto.set               = stringSet;
		proto.startOf           = startOf;
		proto.subtract          = subtract;
		proto.toArray           = toArray;
		proto.toObject          = toObject;
		proto.toDate            = toDate;
		proto.toISOString       = toISOString;
		proto.inspect           = inspect;
		proto.toJSON            = toJSON;
		proto.toString          = toString;
		proto.unix              = unix;
		proto.valueOf           = valueOf;
		proto.creationData      = creationData;
		proto.year       = getSetYear;
		proto.isLeapYear = getIsLeapYear;
		proto.weekYear    = getSetWeekYear;
		proto.isoWeekYear = getSetISOWeekYear;
		proto.quarter = proto.quarters = getSetQuarter;
		proto.month       = getSetMonth;
		proto.daysInMonth = getDaysInMonth;
		proto.week           = proto.weeks        = getSetWeek;
		proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
		proto.weeksInYear    = getWeeksInYear;
		proto.isoWeeksInYear = getISOWeeksInYear;
		proto.date       = getSetDayOfMonth;
		proto.day        = proto.days             = getSetDayOfWeek;
		proto.weekday    = getSetLocaleDayOfWeek;
		proto.isoWeekday = getSetISODayOfWeek;
		proto.dayOfYear  = getSetDayOfYear;
		proto.hour = proto.hours = getSetHour;
		proto.minute = proto.minutes = getSetMinute;
		proto.second = proto.seconds = getSetSecond;
		proto.millisecond = proto.milliseconds = getSetMillisecond;
		proto.utcOffset            = getSetOffset;
		proto.utc                  = setOffsetToUTC;
		proto.local                = setOffsetToLocal;
		proto.parseZone            = setOffsetToParsedOffset;
		proto.hasAlignedHourOffset = hasAlignedHourOffset;
		proto.isDST                = isDaylightSavingTime;
		proto.isLocal              = isLocal;
		proto.isUtcOffset          = isUtcOffset;
		proto.isUtc                = isUtc;
		proto.isUTC                = isUtc;
		proto.zoneAbbr = getZoneAbbr;
		proto.zoneName = getZoneName;
		proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
		proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
		proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
		proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
		proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	
		function createUnix (input) {
			return createLocal(input * 1000);
		}
	
		function createInZone () {
			return createLocal.apply(null, arguments).parseZone();
		}
	
		function preParsePostFormat (string) {
			return string;
		}
	
		var proto$1 = Locale.prototype;
	
		proto$1.calendar        = calendar;
		proto$1.longDateFormat  = longDateFormat;
		proto$1.invalidDate     = invalidDate;
		proto$1.ordinal         = ordinal;
		proto$1.preparse        = preParsePostFormat;
		proto$1.postformat      = preParsePostFormat;
		proto$1.relativeTime    = relativeTime;
		proto$1.pastFuture      = pastFuture;
		proto$1.set             = set;
	
		proto$1.months            =        localeMonths;
		proto$1.monthsShort       =        localeMonthsShort;
		proto$1.monthsParse       =        localeMonthsParse;
		proto$1.monthsRegex       = monthsRegex;
		proto$1.monthsShortRegex  = monthsShortRegex;
		proto$1.week = localeWeek;
		proto$1.firstDayOfYear = localeFirstDayOfYear;
		proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
		proto$1.weekdays       =        localeWeekdays;
		proto$1.weekdaysMin    =        localeWeekdaysMin;
		proto$1.weekdaysShort  =        localeWeekdaysShort;
		proto$1.weekdaysParse  =        localeWeekdaysParse;
	
		proto$1.weekdaysRegex       =        weekdaysRegex;
		proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
		proto$1.weekdaysMinRegex    =        weekdaysMinRegex;
	
		proto$1.isPM = localeIsPM;
		proto$1.meridiem = localeMeridiem;
	
		function get$1 (format, index, field, setter) {
			var locale = getLocale();
			var utc = createUTC().set(setter, index);
			return locale[field](utc, format);
		}
	
		function listMonthsImpl (format, index, field) {
			if (isNumber(format)) {
				index = format;
				format = undefined;
			}
	
			format = format || '';
	
			if (index != null) {
				return get$1(format, index, field, 'month');
			}
	
			var i;
			var out = [];
			for (i = 0; i < 12; i++) {
				out[i] = get$1(format, i, field, 'month');
			}
			return out;
		}
	
		// ()
		// (5)
		// (fmt, 5)
		// (fmt)
		// (true)
		// (true, 5)
		// (true, fmt, 5)
		// (true, fmt)
		function listWeekdaysImpl (localeSorted, format, index, field) {
			if (typeof localeSorted === 'boolean') {
				if (isNumber(format)) {
					index = format;
					format = undefined;
				}
	
				format = format || '';
			} else {
				format = localeSorted;
				index = format;
				localeSorted = false;
	
				if (isNumber(format)) {
					index = format;
					format = undefined;
				}
	
				format = format || '';
			}
	
			var locale = getLocale(),
				shift = localeSorted ? locale._week.dow : 0;
	
			if (index != null) {
				return get$1(format, (index + shift) % 7, field, 'day');
			}
	
			var i;
			var out = [];
			for (i = 0; i < 7; i++) {
				out[i] = get$1(format, (i + shift) % 7, field, 'day');
			}
			return out;
		}
	
		function listMonths (format, index) {
			return listMonthsImpl(format, index, 'months');
		}
	
		function listMonthsShort (format, index) {
			return listMonthsImpl(format, index, 'monthsShort');
		}
	
		function listWeekdays (localeSorted, format, index) {
			return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
		}
	
		function listWeekdaysShort (localeSorted, format, index) {
			return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
		}
	
		function listWeekdaysMin (localeSorted, format, index) {
			return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
		}
	
		getSetGlobalLocale('en', {
			dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
			ordinal : function (number) {
				var b = number % 10,
					output = (toInt(number % 100 / 10) === 1) ? 'th' :
					(b === 1) ? 'st' :
					(b === 2) ? 'nd' :
					(b === 3) ? 'rd' : 'th';
				return number + output;
			}
		});
	
		// Side effect imports
	
		hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
		hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
	
		var mathAbs = Math.abs;
	
		function abs () {
			var data           = this._data;
	
			this._milliseconds = mathAbs(this._milliseconds);
			this._days         = mathAbs(this._days);
			this._months       = mathAbs(this._months);
	
			data.milliseconds  = mathAbs(data.milliseconds);
			data.seconds       = mathAbs(data.seconds);
			data.minutes       = mathAbs(data.minutes);
			data.hours         = mathAbs(data.hours);
			data.months        = mathAbs(data.months);
			data.years         = mathAbs(data.years);
	
			return this;
		}
	
		function addSubtract$1 (duration, input, value, direction) {
			var other = createDuration(input, value);
	
			duration._milliseconds += direction * other._milliseconds;
			duration._days         += direction * other._days;
			duration._months       += direction * other._months;
	
			return duration._bubble();
		}
	
		// supports only 2.0-style add(1, 's') or add(duration)
		function add$1 (input, value) {
			return addSubtract$1(this, input, value, 1);
		}
	
		// supports only 2.0-style subtract(1, 's') or subtract(duration)
		function subtract$1 (input, value) {
			return addSubtract$1(this, input, value, -1);
		}
	
		function absCeil (number) {
			if (number < 0) {
				return Math.floor(number);
			} else {
				return Math.ceil(number);
			}
		}
	
		function bubble () {
			var milliseconds = this._milliseconds;
			var days         = this._days;
			var months       = this._months;
			var data         = this._data;
			var seconds, minutes, hours, years, monthsFromDays;
	
			// if we have a mix of positive and negative values, bubble down first
			// check: https://github.com/moment/moment/issues/2166
			if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
					(milliseconds <= 0 && days <= 0 && months <= 0))) {
				milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
				days = 0;
				months = 0;
			}
	
			// The following code bubbles up values, see the tests for
			// examples of what that means.
			data.milliseconds = milliseconds % 1000;
	
			seconds           = absFloor(milliseconds / 1000);
			data.seconds      = seconds % 60;
	
			minutes           = absFloor(seconds / 60);
			data.minutes      = minutes % 60;
	
			hours             = absFloor(minutes / 60);
			data.hours        = hours % 24;
	
			days += absFloor(hours / 24);
	
			// convert days to months
			monthsFromDays = absFloor(daysToMonths(days));
			months += monthsFromDays;
			days -= absCeil(monthsToDays(monthsFromDays));
	
			// 12 months -> 1 year
			years = absFloor(months / 12);
			months %= 12;
	
			data.days   = days;
			data.months = months;
			data.years  = years;
	
			return this;
		}
	
		function daysToMonths (days) {
			// 400 years have 146097 days (taking into account leap year rules)
			// 400 years have 12 months === 4800
			return days * 4800 / 146097;
		}
	
		function monthsToDays (months) {
			// the reverse of daysToMonths
			return months * 146097 / 4800;
		}
	
		function as (units) {
			if (!this.isValid()) {
				return NaN;
			}
			var days;
			var months;
			var milliseconds = this._milliseconds;
	
			units = normalizeUnits(units);
	
			if (units === 'month' || units === 'quarter' || units === 'year') {
				days = this._days + milliseconds / 864e5;
				months = this._months + daysToMonths(days);
				switch (units) {
					case 'month':   return months;
					case 'quarter': return months / 3;
					case 'year':    return months / 12;
				}
			} else {
				// handle milliseconds separately because of floating point math errors (issue #1867)
				days = this._days + Math.round(monthsToDays(this._months));
				switch (units) {
					case 'week'   : return days / 7     + milliseconds / 6048e5;
					case 'day'    : return days         + milliseconds / 864e5;
					case 'hour'   : return days * 24    + milliseconds / 36e5;
					case 'minute' : return days * 1440  + milliseconds / 6e4;
					case 'second' : return days * 86400 + milliseconds / 1000;
					// Math.floor prevents floating point math errors here
					case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
					default: throw new Error('Unknown unit ' + units);
				}
			}
		}
	
		// TODO: Use this.as('ms')?
		function valueOf$1 () {
			if (!this.isValid()) {
				return NaN;
			}
			return (
				this._milliseconds +
				this._days * 864e5 +
				(this._months % 12) * 2592e6 +
				toInt(this._months / 12) * 31536e6
			);
		}
	
		function makeAs (alias) {
			return function () {
				return this.as(alias);
			};
		}
	
		var asMilliseconds = makeAs('ms');
		var asSeconds      = makeAs('s');
		var asMinutes      = makeAs('m');
		var asHours        = makeAs('h');
		var asDays         = makeAs('d');
		var asWeeks        = makeAs('w');
		var asMonths       = makeAs('M');
		var asQuarters     = makeAs('Q');
		var asYears        = makeAs('y');
	
		function clone$1 () {
			return createDuration(this);
		}
	
		function get$2 (units) {
			units = normalizeUnits(units);
			return this.isValid() ? this[units + 's']() : NaN;
		}
	
		function makeGetter(name) {
			return function () {
				return this.isValid() ? this._data[name] : NaN;
			};
		}
	
		var milliseconds = makeGetter('milliseconds');
		var seconds      = makeGetter('seconds');
		var minutes      = makeGetter('minutes');
		var hours        = makeGetter('hours');
		var days         = makeGetter('days');
		var months       = makeGetter('months');
		var years        = makeGetter('years');
	
		function weeks () {
			return absFloor(this.days() / 7);
		}
	
		var round = Math.round;
		var thresholds = {
			ss: 44,         // a few seconds to seconds
			s : 45,         // seconds to minute
			m : 45,         // minutes to hour
			h : 22,         // hours to day
			d : 26,         // days to month
			M : 11          // months to year
		};
	
		// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
		function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
			return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
		}
	
		function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
			var duration = createDuration(posNegDuration).abs();
			var seconds  = round(duration.as('s'));
			var minutes  = round(duration.as('m'));
			var hours    = round(duration.as('h'));
			var days     = round(duration.as('d'));
			var months   = round(duration.as('M'));
			var years    = round(duration.as('y'));
	
			var a = seconds <= thresholds.ss && ['s', seconds]  ||
					seconds < thresholds.s   && ['ss', seconds] ||
					minutes <= 1             && ['m']           ||
					minutes < thresholds.m   && ['mm', minutes] ||
					hours   <= 1             && ['h']           ||
					hours   < thresholds.h   && ['hh', hours]   ||
					days    <= 1             && ['d']           ||
					days    < thresholds.d   && ['dd', days]    ||
					months  <= 1             && ['M']           ||
					months  < thresholds.M   && ['MM', months]  ||
					years   <= 1             && ['y']           || ['yy', years];
	
			a[2] = withoutSuffix;
			a[3] = +posNegDuration > 0;
			a[4] = locale;
			return substituteTimeAgo.apply(null, a);
		}
	
		// This function allows you to set the rounding function for relative time strings
		function getSetRelativeTimeRounding (roundingFunction) {
			if (roundingFunction === undefined) {
				return round;
			}
			if (typeof(roundingFunction) === 'function') {
				round = roundingFunction;
				return true;
			}
			return false;
		}
	
		// This function allows you to set a threshold for relative time strings
		function getSetRelativeTimeThreshold (threshold, limit) {
			if (thresholds[threshold] === undefined) {
				return false;
			}
			if (limit === undefined) {
				return thresholds[threshold];
			}
			thresholds[threshold] = limit;
			if (threshold === 's') {
				thresholds.ss = limit - 1;
			}
			return true;
		}
	
		function humanize (withSuffix) {
			if (!this.isValid()) {
				return this.localeData().invalidDate();
			}
	
			var locale = this.localeData();
			var output = relativeTime$1(this, !withSuffix, locale);
	
			if (withSuffix) {
				output = locale.pastFuture(+this, output);
			}
	
			return locale.postformat(output);
		}
	
		var abs$1 = Math.abs;
	
		function sign(x) {
			return ((x > 0) - (x < 0)) || +x;
		}
	
		function toISOString$1() {
			// for ISO strings we do not use the normal bubbling rules:
			//  * milliseconds bubble up until they become hours
			//  * days do not bubble at all
			//  * months bubble up until they become years
			// This is because there is no context-free conversion between hours and days
			// (think of clock changes)
			// and also not between days and months (28-31 days per month)
			if (!this.isValid()) {
				return this.localeData().invalidDate();
			}
	
			var seconds = abs$1(this._milliseconds) / 1000;
			var days         = abs$1(this._days);
			var months       = abs$1(this._months);
			var minutes, hours, years;
	
			// 3600 seconds -> 60 minutes -> 1 hour
			minutes           = absFloor(seconds / 60);
			hours             = absFloor(minutes / 60);
			seconds %= 60;
			minutes %= 60;
	
			// 12 months -> 1 year
			years  = absFloor(months / 12);
			months %= 12;
	
	
			// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
			var Y = years;
			var M = months;
			var D = days;
			var h = hours;
			var m = minutes;
			var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
			var total = this.asSeconds();
	
			if (!total) {
				// this is the same as C#'s (Noda) and python (isodate)...
				// but not other JS (goog.date)
				return 'P0D';
			}
	
			var totalSign = total < 0 ? '-' : '';
			var ymSign = sign(this._months) !== sign(total) ? '-' : '';
			var daysSign = sign(this._days) !== sign(total) ? '-' : '';
			var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
	
			return totalSign + 'P' +
				(Y ? ymSign + Y + 'Y' : '') +
				(M ? ymSign + M + 'M' : '') +
				(D ? daysSign + D + 'D' : '') +
				((h || m || s) ? 'T' : '') +
				(h ? hmsSign + h + 'H' : '') +
				(m ? hmsSign + m + 'M' : '') +
				(s ? hmsSign + s + 'S' : '');
		}
	
		var proto$2 = Duration.prototype;
	
		proto$2.isValid        = isValid$1;
		proto$2.abs            = abs;
		proto$2.add            = add$1;
		proto$2.subtract       = subtract$1;
		proto$2.as             = as;
		proto$2.asMilliseconds = asMilliseconds;
		proto$2.asSeconds      = asSeconds;
		proto$2.asMinutes      = asMinutes;
		proto$2.asHours        = asHours;
		proto$2.asDays         = asDays;
		proto$2.asWeeks        = asWeeks;
		proto$2.asMonths       = asMonths;
		proto$2.asQuarters     = asQuarters;
		proto$2.asYears        = asYears;
		proto$2.valueOf        = valueOf$1;
		proto$2._bubble        = bubble;
		proto$2.clone          = clone$1;
		proto$2.get            = get$2;
		proto$2.milliseconds   = milliseconds;
		proto$2.seconds        = seconds;
		proto$2.minutes        = minutes;
		proto$2.hours          = hours;
		proto$2.days           = days;
		proto$2.weeks          = weeks;
		proto$2.months         = months;
		proto$2.years          = years;
		proto$2.humanize       = humanize;
		proto$2.toISOString    = toISOString$1;
		proto$2.toString       = toISOString$1;
		proto$2.toJSON         = toISOString$1;
		proto$2.locale         = locale;
		proto$2.localeData     = localeData;
	
		proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
		proto$2.lang = lang;
	
		// Side effect imports
	
		// FORMATTING
	
		addFormatToken('X', 0, 0, 'unix');
		addFormatToken('x', 0, 0, 'valueOf');
	
		// PARSING
	
		addRegexToken('x', matchSigned);
		addRegexToken('X', matchTimestamp);
		addParseToken('X', function (input, array, config) {
			config._d = new Date(parseFloat(input, 10) * 1000);
		});
		addParseToken('x', function (input, array, config) {
			config._d = new Date(toInt(input));
		});
	
		// Side effect imports
	
	
		hooks.version = '2.24.0';
	
		setHookCallback(createLocal);
	
		hooks.fn                    = proto;
		hooks.min                   = min;
		hooks.max                   = max;
		hooks.now                   = now;
		hooks.utc                   = createUTC;
		hooks.unix                  = createUnix;
		hooks.months                = listMonths;
		hooks.isDate                = isDate;
		hooks.locale                = getSetGlobalLocale;
		hooks.invalid               = createInvalid;
		hooks.duration              = createDuration;
		hooks.isMoment              = isMoment;
		hooks.weekdays              = listWeekdays;
		hooks.parseZone             = createInZone;
		hooks.localeData            = getLocale;
		hooks.isDuration            = isDuration;
		hooks.monthsShort           = listMonthsShort;
		hooks.weekdaysMin           = listWeekdaysMin;
		hooks.defineLocale          = defineLocale;
		hooks.updateLocale          = updateLocale;
		hooks.locales               = listLocales;
		hooks.weekdaysShort         = listWeekdaysShort;
		hooks.normalizeUnits        = normalizeUnits;
		hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
		hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
		hooks.calendarFormat        = getCalendarFormat;
		hooks.prototype             = proto;
	
		// currently HTML5 input type only supports 24-hour formats
		hooks.HTML5_FMT = {
			DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
			DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
			DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
			DATE: 'YYYY-MM-DD',                             // <input type="date" />
			TIME: 'HH:mm',                                  // <input type="time" />
			TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
			TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
			WEEK: 'GGGG-[W]WW',                             // <input type="week" />
			MONTH: 'YYYY-MM'                                // <input type="month" />
		};
	
		return hooks;
	
	})));
	
	},{}],26:[function(require,module,exports){
	/*! @preserve
	 * numeral.js
	 * version : 2.0.6
	 * author : Adam Draper
	 * license : MIT
	 * http://adamwdraper.github.com/Numeral-js/
	 */
	
	(function (global, factory) {
		if (typeof define === 'function' && define.amd) {
			define(factory);
		} else if (typeof module === 'object' && module.exports) {
			module.exports = factory();
		} else {
			global.numeral = factory();
		}
	}(this, function () {
		/************************************
			Variables
		************************************/
	
		var numeral,
			_,
			VERSION = '2.0.6',
			formats = {},
			locales = {},
			defaults = {
				currentLocale: 'en',
				zeroFormat: null,
				nullFormat: null,
				defaultFormat: '0,0',
				scalePercentBy100: true
			},
			options = {
				currentLocale: defaults.currentLocale,
				zeroFormat: defaults.zeroFormat,
				nullFormat: defaults.nullFormat,
				defaultFormat: defaults.defaultFormat,
				scalePercentBy100: defaults.scalePercentBy100
			};
	
	
		/************************************
			Constructors
		************************************/
	
		// Numeral prototype object
		function Numeral(input, number) {
			this._input = input;
	
			this._value = number;
		}
	
		numeral = function(input) {
			var value,
				kind,
				unformatFunction,
				regexp;
	
			if (numeral.isNumeral(input)) {
				value = input.value();
			} else if (input === 0 || typeof input === 'undefined') {
				value = 0;
			} else if (input === null || _.isNaN(input)) {
				value = null;
			} else if (typeof input === 'string') {
				if (options.zeroFormat && input === options.zeroFormat) {
					value = 0;
				} else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {
					value = null;
				} else {
					for (kind in formats) {
						regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;
	
						if (regexp && input.match(regexp)) {
							unformatFunction = formats[kind].unformat;
	
							break;
						}
					}
	
					unformatFunction = unformatFunction || numeral._.stringToNumber;
	
					value = unformatFunction(input);
				}
			} else {
				value = Number(input)|| null;
			}
	
			return new Numeral(input, value);
		};
	
		// version number
		numeral.version = VERSION;
	
		// compare numeral object
		numeral.isNumeral = function(obj) {
			return obj instanceof Numeral;
		};
	
		// helper functions
		numeral._ = _ = {
			// formats numbers separators, decimals places, signs, abbreviations
			numberToFormat: function(value, format, roundingFunction) {
				var locale = locales[numeral.options.currentLocale],
					negP = false,
					optDec = false,
					leadingCount = 0,
					abbr = '',
					trillion = 1000000000000,
					billion = 1000000000,
					million = 1000000,
					thousand = 1000,
					decimal = '',
					neg = false,
					abbrForce, // force abbreviation
					abs,
					min,
					max,
					power,
					int,
					precision,
					signed,
					thousands,
					output;
	
				// make sure we never format a null value
				value = value || 0;
	
				abs = Math.abs(value);
	
				// see if we should use parentheses for negative number or if we should prefix with a sign
				// if both are present we default to parentheses
				if (numeral._.includes(format, '(')) {
					negP = true;
					format = format.replace(/[\(|\)]/g, '');
				} else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {
					signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;
					format = format.replace(/[\+|\-]/g, '');
				}
	
				// see if abbreviation is wanted
				if (numeral._.includes(format, 'a')) {
					abbrForce = format.match(/a(k|m|b|t)?/);
	
					abbrForce = abbrForce ? abbrForce[1] : false;
	
					// check for space before abbreviation
					if (numeral._.includes(format, ' a')) {
						abbr = ' ';
					}
	
					format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');
	
					if (abs >= trillion && !abbrForce || abbrForce === 't') {
						// trillion
						abbr += locale.abbreviations.trillion;
						value = value / trillion;
					} else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {
						// billion
						abbr += locale.abbreviations.billion;
						value = value / billion;
					} else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {
						// million
						abbr += locale.abbreviations.million;
						value = value / million;
					} else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {
						// thousand
						abbr += locale.abbreviations.thousand;
						value = value / thousand;
					}
				}
	
				// check for optional decimals
				if (numeral._.includes(format, '[.]')) {
					optDec = true;
					format = format.replace('[.]', '.');
				}
	
				// break number and format
				int = value.toString().split('.')[0];
				precision = format.split('.')[1];
				thousands = format.indexOf(',');
				leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;
	
				if (precision) {
					if (numeral._.includes(precision, '[')) {
						precision = precision.replace(']', '');
						precision = precision.split('[');
						decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
					} else {
						decimal = numeral._.toFixed(value, precision.length, roundingFunction);
					}
	
					int = decimal.split('.')[0];
	
					if (numeral._.includes(decimal, '.')) {
						decimal = locale.delimiters.decimal + decimal.split('.')[1];
					} else {
						decimal = '';
					}
	
					if (optDec && Number(decimal.slice(1)) === 0) {
						decimal = '';
					}
				} else {
					int = numeral._.toFixed(value, 0, roundingFunction);
				}
	
				// check abbreviation again after rounding
				if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {
					int = String(Number(int) / 1000);
	
					switch (abbr) {
						case locale.abbreviations.thousand:
							abbr = locale.abbreviations.million;
							break;
						case locale.abbreviations.million:
							abbr = locale.abbreviations.billion;
							break;
						case locale.abbreviations.billion:
							abbr = locale.abbreviations.trillion;
							break;
					}
				}
	
	
				// format number
				if (numeral._.includes(int, '-')) {
					int = int.slice(1);
					neg = true;
				}
	
				if (int.length < leadingCount) {
					for (var i = leadingCount - int.length; i > 0; i--) {
						int = '0' + int;
					}
				}
	
				if (thousands > -1) {
					int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + locale.delimiters.thousands);
				}
	
				if (format.indexOf('.') === 0) {
					int = '';
				}
	
				output = int + decimal + (abbr ? abbr : '');
	
				if (negP) {
					output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');
				} else {
					if (signed >= 0) {
						output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');
					} else if (neg) {
						output = '-' + output;
					}
				}
	
				return output;
			},
			// unformats numbers separators, decimals places, signs, abbreviations
			stringToNumber: function(string) {
				var locale = locales[options.currentLocale],
					stringOriginal = string,
					abbreviations = {
						thousand: 3,
						million: 6,
						billion: 9,
						trillion: 12
					},
					abbreviation,
					value,
					i,
					regexp;
	
				if (options.zeroFormat && string === options.zeroFormat) {
					value = 0;
				} else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {
					value = null;
				} else {
					value = 1;
	
					if (locale.delimiters.decimal !== '.') {
						string = string.replace(/\./g, '').replace(locale.delimiters.decimal, '.');
					}
	
					for (abbreviation in abbreviations) {
						regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\)|(\\' + locale.currency.symbol + ')?(?:\\))?)?$');
	
						if (stringOriginal.match(regexp)) {
							value *= Math.pow(10, abbreviations[abbreviation]);
							break;
						}
					}
	
					// check for negative number
					value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;
	
					// remove non numbers
					string = string.replace(/[^0-9\.]+/g, '');
	
					value *= Number(string);
				}
	
				return value;
			},
			isNaN: function(value) {
				return typeof value === 'number' && isNaN(value);
			},
			includes: function(string, search) {
				return string.indexOf(search) !== -1;
			},
			insert: function(string, subString, start) {
				return string.slice(0, start) + subString + string.slice(start);
			},
			reduce: function(array, callback /*, initialValue*/) {
				if (this === null) {
					throw new TypeError('Array.prototype.reduce called on null or undefined');
				}
	
				if (typeof callback !== 'function') {
					throw new TypeError(callback + ' is not a function');
				}
	
				var t = Object(array),
					len = t.length >>> 0,
					k = 0,
					value;
	
				if (arguments.length === 3) {
					value = arguments[2];
				} else {
					while (k < len && !(k in t)) {
						k++;
					}
	
					if (k >= len) {
						throw new TypeError('Reduce of empty array with no initial value');
					}
	
					value = t[k++];
				}
				for (; k < len; k++) {
					if (k in t) {
						value = callback(value, t[k], k, t);
					}
				}
				return value;
			},
			/**
			 * Computes the multiplier necessary to make x >= 1,
			 * effectively eliminating miscalculations caused by
			 * finite precision.
			 */
			multiplier: function (x) {
				var parts = x.toString().split('.');
	
				return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);
			},
			/**
			 * Given a variable number of arguments, returns the maximum
			 * multiplier that must be used to normalize an operation involving
			 * all of them.
			 */
			correctionFactor: function () {
				var args = Array.prototype.slice.call(arguments);
	
				return args.reduce(function(accum, next) {
					var mn = _.multiplier(next);
					return accum > mn ? accum : mn;
				}, 1);
			},
			/**
			 * Implementation of toFixed() that treats floats more like decimals
			 *
			 * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
			 * problems for accounting- and finance-related software.
			 */
			toFixed: function(value, maxDecimals, roundingFunction, optionals) {
				var splitValue = value.toString().split('.'),
					minDecimals = maxDecimals - (optionals || 0),
					boundedPrecision,
					optionalsRegExp,
					power,
					output;
	
				// Use the smallest precision value possible to avoid errors from floating point representation
				if (splitValue.length === 2) {
				  boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
				} else {
				  boundedPrecision = minDecimals;
				}
	
				power = Math.pow(10, boundedPrecision);
	
				// Multiply up by precision, round accurately, then divide and use native toFixed():
				output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);
	
				if (optionals > maxDecimals - boundedPrecision) {
					optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
					output = output.replace(optionalsRegExp, '');
				}
	
				return output;
			}
		};
	
		// avaliable options
		numeral.options = options;
	
		// avaliable formats
		numeral.formats = formats;
	
		// avaliable formats
		numeral.locales = locales;
	
		// This function sets the current locale.  If
		// no arguments are passed in, it will simply return the current global
		// locale key.
		numeral.locale = function(key) {
			if (key) {
				options.currentLocale = key.toLowerCase();
			}
	
			return options.currentLocale;
		};
	
		// This function provides access to the loaded locale data.  If
		// no arguments are passed in, it will simply return the current
		// global locale object.
		numeral.localeData = function(key) {
			if (!key) {
				return locales[options.currentLocale];
			}
	
			key = key.toLowerCase();
	
			if (!locales[key]) {
				throw new Error('Unknown locale : ' + key);
			}
	
			return locales[key];
		};
	
		numeral.reset = function() {
			for (var property in defaults) {
				options[property] = defaults[property];
			}
		};
	
		numeral.zeroFormat = function(format) {
			options.zeroFormat = typeof(format) === 'string' ? format : null;
		};
	
		numeral.nullFormat = function (format) {
			options.nullFormat = typeof(format) === 'string' ? format : null;
		};
	
		numeral.defaultFormat = function(format) {
			options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
		};
	
		numeral.register = function(type, name, format) {
			name = name.toLowerCase();
	
			if (this[type + 's'][name]) {
				throw new TypeError(name + ' ' + type + ' already registered.');
			}
	
			this[type + 's'][name] = format;
	
			return format;
		};
	
	
		numeral.validate = function(val, culture) {
			var _decimalSep,
				_thousandSep,
				_currSymbol,
				_valArray,
				_abbrObj,
				_thousandRegEx,
				localeData,
				temp;
	
			//coerce val to string
			if (typeof val !== 'string') {
				val += '';
	
				if (console.warn) {
					console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
				}
			}
	
			//trim whitespaces from either sides
			val = val.trim();
	
			//if val is just digits return true
			if (!!val.match(/^\d+$/)) {
				return true;
			}
	
			//if val is empty return false
			if (val === '') {
				return false;
			}
	
			//get the decimal and thousands separator from numeral.localeData
			try {
				//check if the culture is understood by numeral. if not, default it to current locale
				localeData = numeral.localeData(culture);
			} catch (e) {
				localeData = numeral.localeData(numeral.locale());
			}
	
			//setup the delimiters and currency symbol based on culture/locale
			_currSymbol = localeData.currency.symbol;
			_abbrObj = localeData.abbreviations;
			_decimalSep = localeData.delimiters.decimal;
			if (localeData.delimiters.thousands === '.') {
				_thousandSep = '\\.';
			} else {
				_thousandSep = localeData.delimiters.thousands;
			}
	
			// validating currency symbol
			temp = val.match(/^[^\d]+/);
			if (temp !== null) {
				val = val.substr(1);
				if (temp[0] !== _currSymbol) {
					return false;
				}
			}
	
			//validating abbreviation symbol
			temp = val.match(/[^\d]+$/);
			if (temp !== null) {
				val = val.slice(0, -1);
				if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
					return false;
				}
			}
	
			_thousandRegEx = new RegExp(_thousandSep + '{2}');
	
			if (!val.match(/[^\d.,]/g)) {
				_valArray = val.split(_decimalSep);
				if (_valArray.length > 2) {
					return false;
				} else {
					if (_valArray.length < 2) {
						return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
					} else {
						if (_valArray[0].length === 1) {
							return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
						} else {
							return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
						}
					}
				}
			}
	
			return false;
		};
	
	
		/************************************
			Numeral Prototype
		************************************/
	
		numeral.fn = Numeral.prototype = {
			clone: function() {
				return numeral(this);
			},
			format: function(inputString, roundingFunction) {
				var value = this._value,
					format = inputString || options.defaultFormat,
					kind,
					output,
					formatFunction;
	
				// make sure we have a roundingFunction
				roundingFunction = roundingFunction || Math.round;
	
				// format based on value
				if (value === 0 && options.zeroFormat !== null) {
					output = options.zeroFormat;
				} else if (value === null && options.nullFormat !== null) {
					output = options.nullFormat;
				} else {
					for (kind in formats) {
						if (format.match(formats[kind].regexps.format)) {
							formatFunction = formats[kind].format;
	
							break;
						}
					}
	
					formatFunction = formatFunction || numeral._.numberToFormat;
	
					output = formatFunction(value, format, roundingFunction);
				}
	
				return output;
			},
			value: function() {
				return this._value;
			},
			input: function() {
				return this._input;
			},
			set: function(value) {
				this._value = Number(value);
	
				return this;
			},
			add: function(value) {
				var corrFactor = _.correctionFactor.call(null, this._value, value);
	
				function cback(accum, curr, currI, O) {
					return accum + Math.round(corrFactor * curr);
				}
	
				this._value = _.reduce([this._value, value], cback, 0) / corrFactor;
	
				return this;
			},
			subtract: function(value) {
				var corrFactor = _.correctionFactor.call(null, this._value, value);
	
				function cback(accum, curr, currI, O) {
					return accum - Math.round(corrFactor * curr);
				}
	
				this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;
	
				return this;
			},
			multiply: function(value) {
				function cback(accum, curr, currI, O) {
					var corrFactor = _.correctionFactor(accum, curr);
					return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
				}
	
				this._value = _.reduce([this._value, value], cback, 1);
	
				return this;
			},
			divide: function(value) {
				function cback(accum, curr, currI, O) {
					var corrFactor = _.correctionFactor(accum, curr);
					return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);
				}
	
				this._value = _.reduce([this._value, value], cback);
	
				return this;
			},
			difference: function(value) {
				return Math.abs(numeral(this._value).subtract(value).value());
			}
		};
	
		/************************************
			Default Locale && Format
		************************************/
	
		numeral.register('locale', 'en', {
			delimiters: {
				thousands: ',',
				decimal: '.'
			},
			abbreviations: {
				thousand: 'k',
				million: 'm',
				billion: 'b',
				trillion: 't'
			},
			ordinal: function(number) {
				var b = number % 10;
				return (~~(number % 100 / 10) === 1) ? 'th' :
					(b === 1) ? 'st' :
					(b === 2) ? 'nd' :
					(b === 3) ? 'rd' : 'th';
			},
			currency: {
				symbol: '$'
			}
		});
	
		
	
	(function() {
			numeral.register('format', 'bps', {
				regexps: {
					format: /(BPS)/,
					unformat: /(BPS)/
				},
				format: function(value, format, roundingFunction) {
					var space = numeral._.includes(format, ' BPS') ? ' ' : '',
						output;
	
					value = value * 10000;
	
					// check for space before BPS
					format = format.replace(/\s?BPS/, '');
	
					output = numeral._.numberToFormat(value, format, roundingFunction);
	
					if (numeral._.includes(output, ')')) {
						output = output.split('');
	
						output.splice(-1, 0, space + 'BPS');
	
						output = output.join('');
					} else {
						output = output + space + 'BPS';
					}
	
					return output;
				},
				unformat: function(string) {
					return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);
				}
			});
	})();
	
	
	(function() {
			var decimal = {
				base: 1000,
				suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
			},
			binary = {
				base: 1024,
				suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
			};
	
		var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {
				return decimal.suffixes.indexOf(item) < 0;
			}));
			var unformatRegex = allSuffixes.join('|');
			// Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)
			unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';
	
		numeral.register('format', 'bytes', {
			regexps: {
				format: /([0\s]i?b)/,
				unformat: new RegExp(unformatRegex)
			},
			format: function(value, format, roundingFunction) {
				var output,
					bytes = numeral._.includes(format, 'ib') ? binary : decimal,
					suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',
					power,
					min,
					max;
	
				// check for space before
				format = format.replace(/\s?i?b/, '');
	
				for (power = 0; power <= bytes.suffixes.length; power++) {
					min = Math.pow(bytes.base, power);
					max = Math.pow(bytes.base, power + 1);
	
					if (value === null || value === 0 || value >= min && value < max) {
						suffix += bytes.suffixes[power];
	
						if (min > 0) {
							value = value / min;
						}
	
						break;
					}
				}
	
				output = numeral._.numberToFormat(value, format, roundingFunction);
	
				return output + suffix;
			},
			unformat: function(string) {
				var value = numeral._.stringToNumber(string),
					power,
					bytesMultiplier;
	
				if (value) {
					for (power = decimal.suffixes.length - 1; power >= 0; power--) {
						if (numeral._.includes(string, decimal.suffixes[power])) {
							bytesMultiplier = Math.pow(decimal.base, power);
	
							break;
						}
	
						if (numeral._.includes(string, binary.suffixes[power])) {
							bytesMultiplier = Math.pow(binary.base, power);
	
							break;
						}
					}
	
					value *= (bytesMultiplier || 1);
				}
	
				return value;
			}
		});
	})();
	
	
	(function() {
			numeral.register('format', 'currency', {
			regexps: {
				format: /(\$)/
			},
			format: function(value, format, roundingFunction) {
				var locale = numeral.locales[numeral.options.currentLocale],
					symbols = {
						before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],
						after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]
					},
					output,
					symbol,
					i;
	
				// strip format of spaces and $
				format = format.replace(/\s?\$\s?/, '');
	
				// format the number
				output = numeral._.numberToFormat(value, format, roundingFunction);
	
				// update the before and after based on value
				if (value >= 0) {
					symbols.before = symbols.before.replace(/[\-\(]/, '');
					symbols.after = symbols.after.replace(/[\-\)]/, '');
				} else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {
					symbols.before = '-' + symbols.before;
				}
	
				// loop through each before symbol
				for (i = 0; i < symbols.before.length; i++) {
					symbol = symbols.before[i];
	
					switch (symbol) {
						case '$':
							output = numeral._.insert(output, locale.currency.symbol, i);
							break;
						case ' ':
							output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);
							break;
					}
				}
	
				// loop through each after symbol
				for (i = symbols.after.length - 1; i >= 0; i--) {
					symbol = symbols.after[i];
	
					switch (symbol) {
						case '$':
							output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
							break;
						case ' ':
							output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));
							break;
					}
				}
	
	
				return output;
			}
		});
	})();
	
	
	(function() {
			numeral.register('format', 'exponential', {
			regexps: {
				format: /(e\+|e-)/,
				unformat: /(e\+|e-)/
			},
			format: function(value, format, roundingFunction) {
				var output,
					exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',
					parts = exponential.split('e');
	
				format = format.replace(/e[\+|\-]{1}0/, '');
	
				output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);
	
				return output + 'e' + parts[1];
			},
			unformat: function(string) {
				var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),
					value = Number(parts[0]),
					power = Number(parts[1]);
	
				power = numeral._.includes(string, 'e-') ? power *= -1 : power;
	
				function cback(accum, curr, currI, O) {
					var corrFactor = numeral._.correctionFactor(accum, curr),
						num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
					return num;
				}
	
				return numeral._.reduce([value, Math.pow(10, power)], cback, 1);
			}
		});
	})();
	
	
	(function() {
			numeral.register('format', 'ordinal', {
			regexps: {
				format: /(o)/
			},
			format: function(value, format, roundingFunction) {
				var locale = numeral.locales[numeral.options.currentLocale],
					output,
					ordinal = numeral._.includes(format, ' o') ? ' ' : '';
	
				// check for space before
				format = format.replace(/\s?o/, '');
	
				ordinal += locale.ordinal(value);
	
				output = numeral._.numberToFormat(value, format, roundingFunction);
	
				return output + ordinal;
			}
		});
	})();
	
	
	(function() {
			numeral.register('format', 'percentage', {
			regexps: {
				format: /(%)/,
				unformat: /(%)/
			},
			format: function(value, format, roundingFunction) {
				var space = numeral._.includes(format, ' %') ? ' ' : '',
					output;
	
				if (numeral.options.scalePercentBy100) {
					value = value * 100;
				}
	
				// check for space before %
				format = format.replace(/\s?\%/, '');
	
				output = numeral._.numberToFormat(value, format, roundingFunction);
	
				if (numeral._.includes(output, ')')) {
					output = output.split('');
	
					output.splice(-1, 0, space + '%');
	
					output = output.join('');
				} else {
					output = output + space + '%';
				}
	
				return output;
			},
			unformat: function(string) {
				var number = numeral._.stringToNumber(string);
				if (numeral.options.scalePercentBy100) {
					return number * 0.01;
				}
				return number;
			}
		});
	})();
	
	
	(function() {
			numeral.register('format', 'time', {
			regexps: {
				format: /(:)/,
				unformat: /(:)/
			},
			format: function(value, format, roundingFunction) {
				var hours = Math.floor(value / 60 / 60),
					minutes = Math.floor((value - (hours * 60 * 60)) / 60),
					seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));
	
				return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
			},
			unformat: function(string) {
				var timeArray = string.split(':'),
					seconds = 0;
	
				// turn hours and minutes into seconds and add them all up
				if (timeArray.length === 3) {
					// hours
					seconds = seconds + (Number(timeArray[0]) * 60 * 60);
					// minutes
					seconds = seconds + (Number(timeArray[1]) * 60);
					// seconds
					seconds = seconds + Number(timeArray[2]);
				} else if (timeArray.length === 2) {
					// minutes
					seconds = seconds + (Number(timeArray[0]) * 60);
					// seconds
					seconds = seconds + Number(timeArray[1]);
				}
				return Number(seconds);
			}
		});
	})();
	
	return numeral;
	}));
	
	},{}]},{},[1])